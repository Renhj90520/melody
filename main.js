(self["webpackChunkdraw_melody"] = self["webpackChunkdraw_melody"] || []).push([["main"],{

/***/ 55041:
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppComponent": () => (/* binding */ AppComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _note_editor_editor_container_editor_container_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note-editor/editor-container/editor-container.component */ 90837);


class AppComponent {}
AppComponent.ɵfac = function AppComponent_Factory(t) {
  return new (t || AppComponent)();
};
AppComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: AppComponent,
  selectors: [["app-root"]],
  decls: 1,
  vars: 0,
  template: function AppComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "app-editor-container");
    }
  },
  dependencies: [_note_editor_editor_container_editor_container_component__WEBPACK_IMPORTED_MODULE_0__.EditorContainerComponent],
  styles: ["[_nghost-%COMP%] {\n  display: block;\n  height: 100vh;\n  width: 100%;\n}"]
});

/***/ }),

/***/ 36747:
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AppModule": () => (/* binding */ AppModule)
/* harmony export */ });
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser */ 11481);
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app.component */ 55041);
/* harmony import */ var _note_editor_note_editor_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note-editor/note-editor.module */ 13531);
/* harmony import */ var _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @fortawesome/angular-fontawesome */ 96920);
/* harmony import */ var ng_zorro_antd_i18n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng-zorro-antd/i18n */ 91811);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _angular_common_locales_en__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common/locales/en */ 6814);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/forms */ 24006);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/common/http */ 80529);
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/platform-browser/animations */ 84934);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ 94650);












(0,_angular_common__WEBPACK_IMPORTED_MODULE_2__.registerLocaleData)(_angular_common_locales_en__WEBPACK_IMPORTED_MODULE_3__["default"]);
class AppModule {}
AppModule.ɵfac = function AppModule_Factory(t) {
  return new (t || AppModule)();
};
AppModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
  type: AppModule,
  bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent]
});
AppModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
  providers: [{
    provide: ng_zorro_antd_i18n__WEBPACK_IMPORTED_MODULE_5__.NZ_I18N,
    useValue: ng_zorro_antd_i18n__WEBPACK_IMPORTED_MODULE_5__.en_US
  }],
  imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.BrowserModule, _note_editor_note_editor_module__WEBPACK_IMPORTED_MODULE_1__.NoteEditorModule, _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_7__.FontAwesomeModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormsModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClientModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.BrowserAnimationsModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsetNgModuleScope"](AppModule, {
    declarations: [_app_component__WEBPACK_IMPORTED_MODULE_0__.AppComponent],
    imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_6__.BrowserModule, _note_editor_note_editor_module__WEBPACK_IMPORTED_MODULE_1__.NoteEditorModule, _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_7__.FontAwesomeModule, _angular_forms__WEBPACK_IMPORTED_MODULE_8__.FormsModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_9__.HttpClientModule, _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_10__.BrowserAnimationsModule]
  });
})();

/***/ }),

/***/ 43865:
/*!************************************************************************!*\
  !*** ./src/app/note-editor/add-part-modal/add-part-modal.component.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AddPartModalComponent": () => (/* binding */ AddPartModalComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ 24006);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _slim_scroll_slim_scroll_slim_scroll_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../slim-scroll/slim-scroll/slim-scroll.component */ 99849);
/* harmony import */ var ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng-zorro-antd/modal */ 50007);
/* harmony import */ var ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng-zorro-antd/select */ 38231);
/* harmony import */ var ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ng-zorro-antd/button */ 66616);
/* harmony import */ var ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng-zorro-antd/core/transition-patch */ 47044);
/* harmony import */ var ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ng-zorro-antd/core/wave */ 21811);
/* harmony import */ var ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ng-zorro-antd/icon */ 54326);
/* harmony import */ var ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ng-zorro-antd/input */ 35635);
/* harmony import */ var ng_zorro_antd_tree__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ng-zorro-antd/tree */ 26042);
/* harmony import */ var ng_zorro_antd_checkbox__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ng-zorro-antd/checkbox */ 6416);
/* harmony import */ var ng_zorro_antd_grid__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ng-zorro-antd/grid */ 73679);
/* harmony import */ var ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ng-zorro-antd/form */ 36704);

















const _c0 = ["treeCom"];
function AddPartModalComponent_ng_container_1_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "span", 28);
  }
}
function AddPartModalComponent_ng_container_1_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "span", 29);
  }
}
function AddPartModalComponent_ng_container_1_ng_template_21_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, " Name Can't be Empty ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
}
function AddPartModalComponent_ng_container_1_ng_template_21_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, AddPartModalComponent_ng_container_1_ng_template_21_ng_container_0_Template, 2, 0, "ng-container", 30);
  }
  if (rf & 2) {
    const control_r15 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", control_r15.hasError("required"));
  }
}
function AddPartModalComponent_ng_container_1_ng_template_28_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1, " Abbreviation Can't be Empty ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
}
function AddPartModalComponent_ng_container_1_ng_template_28_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, AddPartModalComponent_ng_container_1_ng_template_28_ng_container_0_Template, 2, 0, "ng-container", 30);
  }
  if (rf & 2) {
    const control_r17 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", control_r17.hasError("required"));
  }
}
function AddPartModalComponent_ng_container_1_nz_option_35_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 31);
  }
  if (rf & 2) {
    const item_r19 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzLabel", item_r19.label)("nzValue", item_r19.value);
  }
}
function AddPartModalComponent_ng_container_1_nz_option_41_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 31);
  }
  if (rf & 2) {
    const item_r20 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzLabel", item_r20)("nzValue", item_r20);
  }
}
function AddPartModalComponent_ng_container_1_nz_option_47_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 31);
  }
  if (rf & 2) {
    const item_r21 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzLabel", item_r21)("nzValue", item_r21);
  }
}
function AddPartModalComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 3)(2, "div", 4)(3, "p", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](4, "Instruments");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "nz-input-group", 6)(6, "input", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function AddPartModalComponent_ng_container_1_Template_input_ngModelChange_6_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r22.searchKey = $event);
    })("keydown", function AddPartModalComponent_ng_container_1_Template_input_keydown_6_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r24.search($event));
    })("keypress", function AddPartModalComponent_ng_container_1_Template_input_keypress_6_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r25.search($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](7, AddPartModalComponent_ng_container_1_ng_template_7_Template, 1, 0, "ng-template", null, 8, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "app-slim-scroll")(10, "nz-tree", 9, 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("nzClick", function AddPartModalComponent_ng_container_1_Template_nz_tree_nzClick_10_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r26.selectNode($event));
    })("nzExpandChange", function AddPartModalComponent_ng_container_1_Template_nz_tree_nzExpandChange_10_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r23);
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r27.expandNode($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](12, AddPartModalComponent_ng_container_1_ng_template_12_Template, 1, 0, "ng-template", null, 11, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](14, "div", 12)(15, "form", 13)(16, "nz-form-item", 14)(17, "nz-form-label", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](18, " Name ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](19, "nz-form-control", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](20, "input", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](21, AddPartModalComponent_ng_container_1_ng_template_21_Template, 1, 1, "ng-template", null, 18, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](23, "nz-form-item", 14)(24, "nz-form-label", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](25, " Abbreviation ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](26, "nz-form-control", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](27, "input", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](28, AddPartModalComponent_ng_container_1_ng_template_28_Template, 1, 1, "ng-template", null, 20, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](30, "nz-form-item", 14)(31, "nz-form-label", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](32, "Key");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](33, "nz-form-control", 15)(34, "nz-select", 21);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](35, AddPartModalComponent_ng_container_1_nz_option_35_Template, 1, 2, "nz-option", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](36, "nz-form-item", 14)(37, "nz-form-label", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](38, " Instrument octave ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](39, "nz-form-control", 15)(40, "nz-select", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](41, AddPartModalComponent_ng_container_1_nz_option_41_Template, 1, 2, "nz-option", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](42, "nz-form-item", 24)(43, "nz-form-label", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](44, "Score octave");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](45, "nz-form-control", 15)(46, "nz-select", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](47, AddPartModalComponent_ng_container_1_nz_option_47_Template, 1, 2, "nz-option", 22);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](48, "nz-form-item", 14)(49, "nz-form-control", 15)(50, "label", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](51, " Break barlines after part ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](52, "nz-form-item", 14)(53, "nz-form-control", 15)(54, "label", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](55, " Place directions above staff ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](8);
    const _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](13);
    const _r8 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](22);
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](29);
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSuffix", _r3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.searchKey);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzExpandedIcon", _r6)("nzData", ctx_r0.nodes)("nzSearchValue", ctx_r0.searchKey)("nzExpandedKeys", ctx_r0.rootKey)("nzHideUnMatched", true)("nzSelectedKeys", ctx_r0.selectedKeys);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("formGroup", ctx_r0.basicForm);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24)("nzErrorTip", _r8);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24)("nzErrorTip", _r10);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.transpositionOptions);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.octaveOptions);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.octaveOptions);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzSpan", 24);
  }
}
function AddPartModalComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 32)(1, "button", 33);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function AddPartModalComponent_ng_template_2_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r29);
      const ctx_r28 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r28.save());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, " OK ");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", !ctx_r2.activedNode || ctx_r2.basicForm.invalid);
  }
}
class AddPartModalComponent {
  constructor(fb) {
    this.fb = fb;
    this.onSave = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onHide = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.nodes = [];
    this.groups = [{
      key: 'bowed strings',
      title: 'Bowed Strings'
    }, {
      key: 'plucked strings',
      title: 'Plucked Strings'
    }, {
      key: 'woodwind',
      title: 'Woodwind'
    }, {
      key: 'brass',
      title: 'Brass'
    }, {
      key: 'unpitched percussion',
      title: 'Unpitched Percussion'
    },
    // { key: 'pitched percussion', title: 'Pitched Percussion' },
    // { key: 'vocal', title: 'Vocal' },
    {
      key: 'keyboards',
      title: 'Keyboards'
    }
    // { key: 'latin instruments', title: 'Latin Instruments' },
    // { key: 'marching percussion', title: 'Marching Percussion' },
    // { key: 'jazz', title: 'Jazz' },
    ];

    this.instruments = [{
      name: 'Guitar',
      genericInstrument: 'acoustic_guitar',
      groups: ['plucked strings', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Acoustic Guitar',
        shortName: 'Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 26
      }
    }, {
      name: 'Guitar (Tab)',
      genericInstrument: 'acoustic_guitar_tab',
      groups: ['plucked strings', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Acoustic Guitar',
        shortName: 'Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        transposition: 0,
        octaveShift: 0,
        midiPatch: 26
      }
    }, {
      name: 'Alto Sax',
      genericInstrument: 'alto_saxophone',
      groups: ['woodwind', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Alto Sax',
        shortName: 'A.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -9,
        midiPatch: 65
      }
    }, {
      name: 'Banjo',
      genericInstrument: 'banjo',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Banjo',
        shortName: 'Bnj.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 105
      }
    }, {
      name: 'Baritone Sax',
      genericInstrument: 'baritone_saxophone',
      groups: ['woodwind', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Baritone Sax',
        shortName: 'B.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -21,
        midiPatch: 67
      }
    }, {
      name: 'Bass Clarinet',
      genericInstrument: 'bass_clarinet',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bass Clarinet',
        shortName: 'Bs.Cl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -14,
        midiPatch: 71
      }
    }, {
      name: 'Bass Drum',
      genericInstrument: 'drum_set',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bass Drum',
        shortName: 'B.D.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 1,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 116
      }
    }, {
      name: 'Bass Drum (Marching Band)',
      genericInstrument: 'drum_set',
      // groups: ['unpitched percussion', 'marching percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bass Drum',
        shortName: 'Bass.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 5,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 82
      }
    }, {
      name: 'Double Bass (Section)',
      genericInstrument: 'double_bass',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Double Bass',
        shortName: 'D.B.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 43
      }
    }, {
      name: 'Double Bass (Solo)',
      genericInstrument: 'double_bass',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Double Bass',
        shortName: 'D.B.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 43
      }
    }, {
      name: 'Bassoon',
      genericInstrument: 'bassoon',
      groups: ['woodwind'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bassoon',
        shortName: 'Bsn.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 70
      }
    }, {
      name: 'Bongo',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bongo',
        shortName: 'Bng.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Celesta',
      genericInstrument: 'piano_keyboard',
      // groups: ['pitched percussion', 'keyboards'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Celesta',
        shortName: 'Cel.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: -1,
        transposition: 0,
        midiPatch: 8
      }
    }, {
      name: 'Cello (Section)',
      genericInstrument: 'cello',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violoncello',
        shortName: 'Vc.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 42
      }
    }, {
      name: 'Cello (Solo)',
      genericInstrument: 'cello',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violoncello',
        shortName: 'Vc.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 42
      }
    }, {
      name: 'Voice',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Voice',
        shortName: 'Voice',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Soprano Voice',
      genericInstrument: 'soprano_voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Soprano',
        shortName: 'S.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Alto Voice',
      genericInstrument: 'alto_voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Alto',
        shortName: 'A.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Tenor Voice',
      genericInstrument: 'tenor_voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tenor',
        shortName: 'T.',
        staffs: [{
          clef: {
            sign: 'tenorVoice'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Baritone Voice',
      genericInstrument: 'baritone_voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Baritone',
        shortName: 'Bar.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Bass Voice',
      genericInstrument: 'bass_voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bass',
        shortName: 'B.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Women (Ahh)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Women',
        shortName: 'Women',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 52,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Women (Ohh)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Women',
        shortName: 'Women',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Women (Ooo)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Women',
        shortName: 'Women',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Men (Ahh)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Men',
        shortName: 'Men',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 52,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Men (Ohh)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Men',
        shortName: 'Men',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Chorus, Men (Ooo)',
      genericInstrument: 'voice',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 24000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Men',
        shortName: 'Men',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 53,
        directionsAboveStaff: true
      }
    }, {
      name: 'Clarinet',
      genericInstrument: 'clarinet',
      groups: ['woodwind'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Clarinet',
        shortName: 'Cl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 71
      }
    }, {
      name: 'Classical Guitar',
      genericInstrument: 'guitar',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Classical Guitar',
        shortName: 'Class.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 24
      }
    }, {
      name: 'Classical Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Classical Guitar',
        shortName: 'Class.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 24
      }
    }, {
      name: 'Clean Electric Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Clean Electric Guitar',
        shortName: 'E.Gtr.Cln.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Clean Electric Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Clean Electric Guitar',
        shortName: 'E.Gtr.Cln.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Cowbell',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Cowbell',
        shortName: 'Cwb.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 55
      }
    }, {
      name: 'Congas',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Congas',
        shortName: 'Cng.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Cymbals',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Cymbals',
        shortName: 'Cym.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 3,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 54
      }
    }, {
      name: 'Cymbals (Marching Band)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'marching percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Cymbals',
        shortName: 'Cym.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 1,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 54
      }
    }, {
      name: 'Distortion Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Distortion Guitar',
        shortName: 'E.Gtr.Distr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 30
      }
    }, {
      name: 'Distortion Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Distortion Guitar',
        shortName: 'E.Gtr.Distr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 30
      }
    }, {
      name: 'Drums (Standard)',
      genericInstrument: 'drum_set',
      groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Drums',
        shortName: 'Dr.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            percussionMap: 'PAS'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Drums (Berklee)',
      genericInstrument: 'drum_set',
      groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Drums',
        shortName: 'Dr.',
        staffs: [{
          clef: {
            sign: 'percussion'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Electric Bass',
      genericInstrument: 'bass_guitar',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Bass',
        shortName: 'E.Bs.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 34
      }
    }, {
      name: 'Electric Bass (Tab)',
      genericInstrument: 'bass_guitar_tab',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Bass',
        shortName: 'E.Bs.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E1'
            }
          }, {
            line: {
              note: 'A1'
            }
          }, {
            line: {
              note: 'D2'
            }
          }, {
            line: {
              note: 'G2'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 30
      }
    }, {
      name: 'Electric Piano',
      genericInstrument: 'piano_keyboard',
      // groups: ['jazz', 'keyboards'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Piano',
        shortName: 'E.Pno.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 4
      }
    }, {
      name: 'English Horn',
      genericInstrument: 'english_horn',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'English Horn',
        shortName: 'E.Hn.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -7,
        midiPatch: 69
      }
    }, {
      name: 'Flute',
      genericInstrument: 'flute',
      groups: ['woodwind'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Flute',
        shortName: 'Fl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 73
      }
    }, {
      name: 'French Horn',
      genericInstrument: 'french_horn',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'French Horn',
        shortName: 'Hn.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -7,
        midiPatch: 60
      }
    }, {
      name: 'Güira',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Güira',
        shortName: 'Gra.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Güiro',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Güiro',
        shortName: 'Gro.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Glockenspiel',
      genericInstrument: 'percussion',
      groups: ['pitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Glockenspiel',
        shortName: 'Glock.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: -2,
        transposition: 0,
        midiPatch: 9
      }
    }, {
      name: 'Grand Piano',
      genericInstrument: 'piano_keyboard',
      groups: ['pitched percussion', 'keyboards'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Piano',
        shortName: 'Pno.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 0
      }
    }, {
      name: 'Harp',
      genericInstrument: 'harp',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Harp',
        shortName: 'Hp.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 46
      }
    }, {
      name: 'Harpsichord',
      genericInstrument: 'harpsichord',
      // groups: ['keyboards', 'plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Harpsichord',
        shortName: 'Hpsch.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 6
      }
    }, {
      name: 'Lead Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Lead Guitar',
        shortName: 'Lead.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Lead Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Lead Guitar',
        shortName: 'Lead.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Les Paul Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Les Paul Guitar',
        shortName: 'L.P.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Les Paul Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Les Paul Guitar',
        shortName: 'L.P.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Marimba',
      genericInstrument: 'percussion',
      groups: ['pitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Marimba',
        shortName: 'Mar.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 12
      }
    }, {
      name: 'Marimba (Grand Staff)',
      genericInstrument: 'percussion',
      groups: ['pitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Marimba',
        shortName: 'Mar.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 12
      }
    }, {
      name: 'Metronome',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Metronome',
        shortName: 'Mtnm.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Oboe',
      genericInstrument: 'oboe',
      groups: ['woodwind'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Oboe',
        shortName: 'Ob.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 68
      }
    }, {
      name: 'Organ (Electric)',
      genericInstrument: 'organ',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Organ',
        shortName: 'Org.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 16
      }
    }, {
      name: 'Organ',
      genericInstrument: 'organ',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Organ',
        shortName: 'Org.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }, {
          clef: {
            sign: 'F'
          },
          pedal: true
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 17
      }
    }, {
      name: 'Overdriven Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Overdriven Guitar',
        shortName: 'E.Gtr.Ovdr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 29
      }
    }, {
      name: 'Overdriven Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Overdriven Guitar',
        shortName: 'E.Gtr.Ovdr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 29
      }
    }, {
      name: 'Percussion (1-line)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Percussion',
        shortName: 'Perc.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Percussion (2-line)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Percussion',
        shortName: 'Perc.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Percussion (3-line)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Percussion',
        shortName: 'Perc.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 3,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Piano',
      genericInstrument: 'piano_keyboard',
      groups: ['pitched percussion', 'keyboards', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Piano',
        shortName: 'Pno.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }, {
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 8
      }
    }, {
      name: 'Piccolo',
      genericInstrument: 'piccolo',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Piccolo',
        shortName: 'Picc.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: -1,
        transposition: 0,
        midiPatch: 72
      }
    }, {
      name: 'Recycled Percussion',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Recycled Percussion',
        shortName: 'Rec.Perc.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Rhythm',
      genericInstrument: 'percussion',
      groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Rhythm',
        shortName: 'Rhythm',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 0
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Rickenbacker Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Rickenbacker Guitar',
        shortName: 'Rckbkr.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Rickenbacker Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Rickenbacker Guitar',
        shortName: 'Rckbkr.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Rock Electric Bass',
      genericInstrument: 'bass_guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Bass',
        shortName: 'E.Bs.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Rock Electric Bass (Tab)',
      genericInstrument: 'bass_guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Bass',
        shortName: 'E.Bs.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E1'
            }
          }, {
            line: {
              note: 'A1'
            }
          }, {
            line: {
              note: 'D2'
            }
          }, {
            line: {
              note: 'G2'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Sleigh Bell',
      genericInstrument: 'percussion',
      groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Sleigh Bell',
        shortName: 'Bell',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 1,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 100
      }
    }, {
      name: 'Snare',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Snare',
        shortName: 'S.Dr.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 3,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Snare (Marching Band)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'marching percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Snare',
        shortName: 'S.Dr.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 1,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 80
      }
    }, {
      name: 'Soprano Sax',
      genericInstrument: 'soprano_saxophone',
      groups: ['woodwind', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Soprano Sax',
        shortName: 'S.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 64
      }
    }, {
      name: 'Steel-String Guitar',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Steel-String Guitar',
        shortName: 'Ss.Str.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 26
      }
    }, {
      name: 'Steel-String Guitar (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Steel-String Guitar',
        shortName: 'St.Str.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 26
      }
    }, {
      name: 'Stratocaster',
      genericInstrument: 'guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Stratocaster',
        shortName: 'Strat.Gtr.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Stratocaster (Tab)',
      genericInstrument: 'guitar_tab',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Stratocaster',
        shortName: 'Strat.Gtr.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'E2'
            }
          }, {
            line: {
              note: 'A2'
            }
          }, {
            line: {
              note: 'D3'
            }
          }, {
            line: {
              note: 'G3'
            }
          }, {
            line: {
              note: 'B3'
            }
          }, {
            line: {
              note: 'E4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 27
      }
    }, {
      name: 'Ukulele',
      genericInstrument: 'ukulele',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Ukulele',
        shortName: 'Uke.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 24
      }
    }, {
      name: 'Ukulele (Tab)',
      genericInstrument: 'guitar_tab',
      groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Ukulele',
        shortName: 'Uke.',
        staffs: [{
          staffTuning: [{
            line: {
              note: 'G4'
            }
          }, {
            line: {
              note: 'C4'
            }
          }, {
            line: {
              note: 'E4'
            }
          }, {
            line: {
              note: 'A4'
            }
          }],
          clef: {
            sign: 'tab'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 24
      }
    }, {
      name: 'Tambora',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tambora',
        shortName: 'Tmbra.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 2,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Tenor (Marching Band)',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'marching percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tenor',
        shortName: 'Ten.Dr.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 5,
            displayLineSpacing: 1
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 81
      }
    }, {
      name: 'Tenor Sax',
      genericInstrument: 'tenor_saxophone',
      groups: ['woodwind'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tenor Sax',
        shortName: 'T.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -14,
        midiPatch: 66
      }
    }, {
      name: 'Timbales',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion', 'latin instruments'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 48000,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Timbales',
        shortName: 'Tmb.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Timpani',
      genericInstrument: 'percussion',
      groups: ['pitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Timpani',
        shortName: 'Timp.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 47
      }
    }, {
      name: 'Toms',
      genericInstrument: 'percussion',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Toms',
        shortName: 'Toms',
        staffs: [{
          clef: {
            sign: 'percussion2',
            note: 'B4',
            line: 2,
            displayLineCount: 3,
            displayLineSpacing: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 117
      }
    }, {
      name: 'Trombone',
      genericInstrument: 'trombone',
      groups: ['brass', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Trombone',
        shortName: 'Tbn.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 57
      }
    }, {
      name: 'Trumpet',
      genericInstrument: 'trumpet_cornet',
      groups: ['brass', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Trumpet',
        shortName: 'Tpt.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 56
      }
    }, {
      name: 'Tuba',
      genericInstrument: 'tuba',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tuba',
        shortName: 'Tuba',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 58
      }
    }, {
      name: 'Baritone',
      genericInstrument: 'baritone_euphonium',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Baritone',
        shortName: 'Baritone',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 58
      }
    }, {
      name: 'Upright Bass',
      genericInstrument: 'double_bass',
      // groups: ['bowed strings', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bass',
        shortName: 'Bs.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 33
      }
    }, {
      name: 'Vibraphone',
      genericInstrument: 'vibraphone',
      groups: ['pitched percussion', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Vibraphone',
        shortName: 'Vib.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 12
      }
    }, {
      name: 'Viola (Section)',
      genericInstrument: 'viola',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Viola',
        shortName: 'Va.',
        staffs: [{
          clef: {
            sign: 'C',
            note: 'C4',
            line: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 41
      }
    }, {
      name: 'Viola (Solo)',
      genericInstrument: 'viola',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Viola',
        shortName: 'Va.',
        staffs: [{
          clef: {
            sign: 'C',
            note: 'C4',
            line: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 41
      }
    }, {
      name: 'Violin (Section)',
      genericInstrument: 'violin',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violin',
        shortName: 'Vn.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 40
      }
    }, {
      name: 'Violin (Solo)',
      genericInstrument: 'violin',
      // groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violin',
        shortName: 'Vn.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 40
      }
    }, {
      name: 'Xylophone',
      genericInstrument: 'xylophone',
      groups: ['pitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 44100,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Xylophone',
        shortName: 'Xyl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 13
      }
    }, {
      name: 'Double Bass',
      genericInstrument: 'double_bass',
      groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Double Bass',
        shortName: 'D.B.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 32
      }
    }, {
      name: 'Basic Drums (Standard)',
      genericInstrument: 'drum_set',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Drums',
        shortName: 'Dr.',
        staffs: [{
          clef: {
            sign: 'percussion2',
            percussionMap: 'PAS'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Basic Drums (Berklee)',
      genericInstrument: 'drum_set',
      // groups: ['unpitched percussion'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Drums',
        shortName: 'Dr.',
        staffs: [{
          clef: {
            sign: 'percussion',
            note: 'D3',
            line: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: null
      }
    }, {
      name: 'Basic Electric Bass',
      genericInstrument: 'bass_guitar',
      // groups: ['plucked strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Electric Bass',
        shortName: 'E.Bs.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 1,
        transposition: 0,
        midiPatch: 34
      }
    }, {
      name: 'Basic Flute',
      genericInstrument: 'flute',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Flute',
        shortName: 'Fl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 73
      }
    }, {
      name: 'Basic Trumpet',
      genericInstrument: 'trumpet_cornet',
      // groups: ['brass', 'jazz'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Trumpet',
        shortName: 'Tpt.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 56
      }
    }, {
      name: 'Basic Clarinet',
      genericInstrument: 'clarinet',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Clarinet',
        shortName: 'Cl.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 71
      }
    }, {
      name: 'Basic Oboe',
      genericInstrument: 'oboe',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Oboe',
        shortName: 'Ob.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 68
      }
    }, {
      name: 'Basic Bassoon',
      genericInstrument: 'bassoon',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Bassoon',
        shortName: 'Bsn.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 70
      }
    }, {
      name: 'Basic Soprano Sax',
      genericInstrument: 'soprano_saxophone',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Soprano Sax',
        shortName: 'S.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -2,
        midiPatch: 64
      }
    }, {
      name: 'Basic Alto Sax',
      genericInstrument: 'alto_saxophone',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Alto Sax',
        shortName: 'A.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -9,
        midiPatch: 65
      }
    }, {
      name: 'Basic Tenor Sax',
      genericInstrument: 'tenor_saxophone',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Tenor Sax',
        shortName: 'T.Sax.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: -14,
        midiPatch: 66
      }
    }, {
      name: 'Basic Trombone',
      genericInstrument: 'trombone',
      groups: [],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Trombone',
        shortName: 'Tbn.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 57
      }
    }, {
      name: 'Violin',
      genericInstrument: 'violin',
      groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violin',
        shortName: 'Vn.',
        staffs: [{
          clef: {
            sign: 'G'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 40
      }
    }, {
      name: 'Viola',
      genericInstrument: 'viola',
      groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Viola',
        shortName: 'Va.',
        staffs: [{
          clef: {
            sign: 'C',
            note: 'C4',
            line: 2
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 41
      }
    }, {
      name: 'Cello',
      genericInstrument: 'cello',
      groups: ['bowed strings'],
      specification: {
        bitsPerSample: 16,
        sampleRate: 22050,
        channels: 1,
        type: 'audio/x-wav'
      },
      partDefaults: {
        name: 'Violoncello',
        shortName: 'Vc.',
        staffs: [{
          clef: {
            sign: 'F'
          }
        }],
        octaveShift: 0,
        transposition: 0,
        midiPatch: 42
      }
    }];
    this.selectedKeys = [];
    this.rootKey = [];
    this.transpositionOptions = [{
      value: 0,
      label: 'C'
    }, {
      value: -1,
      label: 'B'
    }, {
      value: -2,
      label: 'Bb'
    }, {
      value: -3,
      label: 'A'
    }, {
      value: -4,
      label: 'Ab'
    }, {
      value: -5,
      label: 'G'
    }, {
      value: -6,
      label: 'F#'
    }, {
      value: -7,
      label: 'F'
    }, {
      value: -8,
      label: 'E'
    }, {
      value: -9,
      label: 'Eb'
    }, {
      value: -10,
      label: 'D'
    }, {
      value: -11,
      label: 'Db'
    }];
    this.octaveOptions = [-4, -3, -2, -1, 0, 1, 2, 3, 4];
    this.instruments.forEach(instrument => {
      this.parseInstrument(instrument);
    });
    this.groups.forEach(group => {
      this.parseGroup(group);
    });
    this.nodes = this.groups;
    this.basicForm = this.fb.group({
      name: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormControl('', {
        validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required]
      }),
      shortName: new _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormControl('', {
        validators: [_angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required]
      }),
      transposition: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required],
      transposedOctave: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required],
      octaveShift: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_2__.Validators.required],
      barlineBreak: [false],
      directionsAboveStaff: [false]
    });
  }
  ngOnInit() {}
  parseInstrument(instrument) {
    instrument.key = instrument.name;
    instrument.title = instrument.name;
    instrument.nodeType = 'instrument';
    instrument.isLeaf = true;
  }
  parseGroup(group) {
    group.nodeType = 'group';
    group.isLeaf = false;
    group.children = this.instruments.filter(instrument => (instrument.groups || []).indexOf(group.key) >= 0);
  }
  save() {
    this.onSave.emit({
      part: this.activedNode.origin,
      info: this.basicForm.value
    });
  }
  close() {
    this.onHide.emit();
  }
  search(evt) {
    evt.stopPropagation();
  }
  selectNode(evt) {
    const node = evt.node;
    const origin = evt.node.origin;
    if (origin.nodeType === 'group') {
      node.isSelected = false;
      if (this.rootKey.indexOf(origin.key) >= 0) {
        node.isExpanded = false;
      }
      setTimeout(() => {
        this.expandNode({
          node
        });
      }, 0);
      if (this.activedNode) {
        this.selectedKeys = [this.activedNode.origin.key];
      }
      return;
    }
    if (this.activedNode) {
      this.activedNode.isSelected = false;
    }
    this.activedNode = evt.node;
    this.selectedKeys = [this.activedNode.origin.key];
    this.treeCom.nzTreeService.setSelectedNodeList(evt.node);
    const partDefaults = origin.partDefaults;
    let transposition = partDefaults.transposition;
    while (transposition <= -12) {
      transposition += 12;
    }
    while (transposition > 0) {
      transposition -= 12;
    }
    const info = {};
    info.name = partDefaults.name;
    info.shortName = partDefaults.shortName;
    info.transposition = transposition;
    info.transposedOctave = -Math.floor(-partDefaults.transposition / 12);
    info.octaveShift = partDefaults.octaveShift;
    info.barlineBreak = partDefaults.barlineBreak;
    info.directionsAboveStaff = partDefaults.directionsAboveStaff;
    info.fretboardType = partDefaults.fretboardType;
    this.basicForm.patchValue(info);
    console.log(origin);
  }
  expandNode(evt) {
    const node = evt.node;
    if (evt.keys) {
      this.rootKey = evt.keys || [];
    } else {
      const idx = this.rootKey.indexOf(node.origin.key);
      if (node && idx < 0) {
        this.rootKey.push(node.origin.key);
        this.rootKey = [...this.rootKey];
      } else {
        this.rootKey.splice(idx, 1);
        this.rootKey = [...this.rootKey];
      }
    }
  }
}
AddPartModalComponent.ɵfac = function AddPartModalComponent_Factory(t) {
  return new (t || AddPartModalComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormBuilder));
};
AddPartModalComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: AddPartModalComponent,
  selectors: [["app-add-part-modal"]],
  viewQuery: function AddPartModalComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵviewQuery"](_c0, 5);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.treeCom = _t.first);
    }
  },
  inputs: {
    isShow: "isShow"
  },
  outputs: {
    onSave: "onSave",
    onHide: "onHide"
  },
  decls: 4,
  vars: 4,
  consts: [["nzTitle", "Add Part", 3, "nzVisible", "nzMaskClosable", "nzClosable", "nzFooter", "nzVisibleChange", "nzOnCancel", "nzOnOk"], [4, "nzModalContent"], ["modalFooter", ""], [1, "wrapper"], [1, "left"], [2, "margin-top", "6px", "margin-bottom", "3px"], [3, "nzSuffix"], ["type", "text", "nz-input", "", "placeholder", "Type instrument name", 3, "ngModel", "ngModelChange", "keydown", "keypress"], ["suffixIcon", ""], [3, "nzExpandedIcon", "nzData", "nzSearchValue", "nzExpandedKeys", "nzHideUnMatched", "nzSelectedKeys", "nzClick", "nzExpandChange"], ["treeCom", ""], ["expandIcon", ""], [1, "right"], ["nz-form", "", 3, "formGroup"], [1, "narrow-margin"], [3, "nzSpan"], [3, "nzSpan", "nzErrorTip"], ["type", "text", "formControlName", "name", "nz-input", "", "oninput", "this.value=this.value.replace(/\\s+/g, '')"], ["nameError", ""], ["type", "text", "formControlName", "shortName", "nz-input", "", "oninput", "this.value=this.value.replace(/\\s+/g, '')"], ["shortNameError", ""], ["formControlName", "transposition"], [3, "nzLabel", "nzValue", 4, "ngFor", "ngForOf"], ["formControlName", "transposedOctave"], [1, "narrow-margin", 2, "margin-bottom", "3px"], ["formControlName", "octaveShift"], ["nz-checkbox", "", "formControlName", "barlineBreak"], ["nz-checkbox", "", "formControlName", "directionsAboveStaff"], ["nz-icon", "", "nzType", "search"], ["nz-icon", "", "nzType", "right", "nzTheme", "outline", 2, "font-size", "10px"], [4, "ngIf"], [3, "nzLabel", "nzValue"], [1, "footer"], ["nz-button", "", "nzType", "primary", 3, "disabled", "click"]],
  template: function AddPartModalComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "nz-modal", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("nzVisibleChange", function AddPartModalComponent_Template_nz_modal_nzVisibleChange_0_listener($event) {
        return ctx.isShow = $event;
      })("nzOnCancel", function AddPartModalComponent_Template_nz_modal_nzOnCancel_0_listener() {
        return ctx.close();
      })("nzOnOk", function AddPartModalComponent_Template_nz_modal_nzOnOk_0_listener() {
        return ctx.save();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, AddPartModalComponent_ng_container_1_Template, 56, 26, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, AddPartModalComponent_ng_template_2_Template, 3, 1, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzVisible", ctx.isShow)("nzMaskClosable", false)("nzClosable", false)("nzFooter", _r1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_3__.NgIf, _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ɵNgNoValidate"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__.DefaultValueAccessor, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgControlStatusGroup, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.NgModel, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormGroupDirective, _angular_forms__WEBPACK_IMPORTED_MODULE_2__.FormControlName, _slim_scroll_slim_scroll_slim_scroll_component__WEBPACK_IMPORTED_MODULE_0__.SlimScrollComponent, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalComponent, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalContentDirective, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzOptionComponent, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzSelectComponent, ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__.NzButtonComponent, ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__["ɵNzTransitionPatchDirective"], ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__.NzWaveDirective, ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_9__.NzIconDirective, ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_10__.NzInputDirective, ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_10__.NzInputGroupComponent, ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_10__.NzInputGroupWhitSuffixOrPrefixDirective, ng_zorro_antd_tree__WEBPACK_IMPORTED_MODULE_11__.NzTreeComponent, ng_zorro_antd_checkbox__WEBPACK_IMPORTED_MODULE_12__.NzCheckboxComponent, ng_zorro_antd_grid__WEBPACK_IMPORTED_MODULE_13__.NzColDirective, ng_zorro_antd_grid__WEBPACK_IMPORTED_MODULE_13__.NzRowDirective, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_14__.NzFormDirective, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_14__.NzFormItemComponent, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_14__.NzFormLabelComponent, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_14__.NzFormControlComponent],
  styles: [".wrapper[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 20px;\n}\napp-slim-scroll[_ngcontent-%COMP%] {\n  height: 300px;\n  margin-top: 12px;\n  background-color: #f8f8f8;\n  border: 1px solid #d1d5e0;\n  padding: 0 3px;\n}\nnz-tree[_ngcontent-%COMP%] {\n  background-color: #ffffff;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode {\n  padding: 4px 0;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode.ant-tree-treenode-switcher-open .ant-tree-switcher {\n  transform: rotate(90deg) translate(2px, -2px);\n  transform-origin: center;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-switcher {\n  transition: transform 300ms ease-in;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode.ant-tree-treenode-switcher-close, nz-tree[_ngcontent-%COMP%]  .ant-tree-treenode.ant-tree-treenode-switcher-open {\n  border-bottom: 1px solid #d1d5e0;\n  background-color: #f8f8f8;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode:not(\n      .ant-tree-treenode-switcher-close\n    ).ant-tree-treenode:not(.ant-tree-treenode-switcher-open) {\n  margin: 3px;\n  border-radius: 2px;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode:not(\n      .ant-tree-treenode-switcher-close\n    ).ant-tree-treenode:not(.ant-tree-treenode-switcher-open):hover {\n  background-color: #eff3f7;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-indent-unit {\n  width: 12px;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode-selected {\n  background-color: #878b96 !important;\n  color: #ffffff !important;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-treenode-selected .font-highlight {\n  color: #ffffff !important;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-node-content-wrapper {\n  flex: 1 1 auto;\n}\nnz-tree[_ngcontent-%COMP%]  .ant-tree-node-content-wrapper.ant-tree-node-selected, nz-tree[_ngcontent-%COMP%]  .ant-tree-node-content-wrapper:hover {\n  background-color: transparent;\n}\n.narrow-margin[_ngcontent-%COMP%] {\n  margin-bottom: 0px;\n}\nnz-form-label[_ngcontent-%COMP%] {\n  padding-bottom: 3px;\n  height: 30px;\n  line-height: 30px;\n}"]
});

/***/ }),

/***/ 9412:
/*!*****************************************************************!*\
  !*** ./src/app/note-editor/controller/barline-drag-mediator.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BarlineDragMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class BarlineDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, dragBarline, noteEditorService, undoGroupName = null) {
    super(context, noteEditorService);
    this._undoGroupName = null;
    this._dragBarline = null;
    this._measure = null;
    this._dragRightMargin = false;
    this._initialValue = NaN;
    this._undoGroupName = undoGroupName;
    this._dragBarline = dragBarline;
    this._measure = dragBarline.measure;
    this._dragRightMargin = dragBarline.measure.index === context.layoutContext.score.numMeasures - 1;
    this._initialValue = this._dragRightMargin ? this._measure.rightMargin : this._measure.layoutWeight;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    // todo CursorManager
  }

  handleDragMove(t) {
    if (this._dragRightMargin) {
      const deltaX = Math.round((this.dragPoint.x - this.context.stage.mouseX) / (this.context.info.displayScale * this.context.layoutContext.staffMetrics.lineSpacing));
      // this.context.document.undoHistory.openGroupName = 'Change Measure Margin';
      this._measure.rightMargin = Math.max(0, this._initialValue + deltaX);
    } else {
      // this.context.document.undoHistory.openGroupName =
      //   'Change Measure Layout Width';
      let weight = this._initialValue * Math.exp((this.context.stage.mouseX - this.dragPoint.x) / 200);
      weight = Math.max(0.5, Math.min(2, weight));
      this.context.controller.setLayoutWeight(this._measure, weight);
    }
  }
  handleClick(t) {
    if (this._dragBarline) {
      this.context.controller.selectNotation(this._dragBarline);
    }
  }
}

/***/ }),

/***/ 48845:
/*!*******************************************************************!*\
  !*** ./src/app/note-editor/controller/basic-notation-mediator.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BasicNotationMediator)
/* harmony export */ });
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/measure-number-notation */ 36987);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _views_text_notation_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../views/text-notation-view */ 16089);
/* harmony import */ var _barline_drag_mediator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./barline-drag-mediator */ 9412);
/* harmony import */ var _duration_drag_mediator__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./duration-drag-mediator */ 65792);
/* harmony import */ var _symbol_drag_mediator__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./symbol-drag-mediator */ 24182);
/* harmony import */ var _transposition_drag_mediator__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transposition-drag-mediator */ 6950);
/* harmony import */ var _transposition_fret_mediator__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./transposition-fret-mediator */ 39139);
















class BasicNotationMediator {
  static get touchStartNotation() {
    return BasicNotationMediator._touchStartNotation;
  }
  static set touchStartNotation(t) {
    BasicNotationMediator._touchStartNotation = t;
  }
  static get previousTouchStartNotation() {
    return BasicNotationMediator._previousTouchStartNotation;
  }
  static set previousTouchStartNotation(t) {
    BasicNotationMediator._previousTouchStartNotation = t;
  }
  static get ignoreNextMouseUp() {
    return BasicNotationMediator._ignoreNextMouseUp;
  }
  static set ignoreNextMouseUp(t) {
    BasicNotationMediator._ignoreNextMouseUp = t;
  }
  constructor(noteEditorService) {
    this._view = null;
    this._mouseDownSeen = false;
    this._lastClickMillis = 0;
    this.noteEditorService = noteEditorService;
  }
  handleViewEvents(view) {
    this._view = view;
    this._view._svg.addEventListener('mouseup', this.handleMouseUp.bind(this));
    this._view._svg.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this._view._svg.addEventListener('click', this.handleClick.bind(this));
    this._view._svg.addEventListener('touchstart', this.handleTouchStart.bind(this));
    this._view._svg.addEventListener('touchend', this.handleTouchEnd.bind(this));
    if (this.statusChangeSub$) {
      this.statusChangeSub$.unsubscribe();
    }
    if (null != this._view.notation && this._view.notation.enabled) {
      // this._view.notation.addEventListener(
      //   NotationEvent.NOTATION_STATUS_CHANGE,
      //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
      // );
      this.statusChangeSub$ = this.noteEditorService.onNotationStatusChange.subscribe(evt => {
        this.handleStatusChange();
      });
      // this._view.notation.addEventListener(
      //   NotationEvent.EDIT,
      //   RumtimeHelper.bindMethod(this, this.handleEdit)
      // );
    }
  }

  handleStatusChange() {
    this._view.updateStatus();
  }
  removeListeners() {
    this._view && this._view._svg.removeEventListener('mousedown', this.handleMouseDown.bind(this));
    this._view._svg.removeEventListener('click', this.handleClick.bind(this));
    if (this._view.notation) {
      // this._view.notation.removeEventListener(
      //   NotationEvent.NOTATION_STATUS_CHANGE,
      //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
      // );
      // this._view.notation.removeEventListener(
      //   NotationEvent.EDIT,
      //   RumtimeHelper.bindMethod(this, this.handleEdit)
      // );
    }
    if (this.statusChangeSub$) {
      this.statusChangeSub$.unsubscribe();
    }
  }
  destroy() {
    this.removeListeners();
  }
  doEdit() {
    if (!this._view.context.overlay && this._view instanceof _views_text_notation_view__WEBPACK_IMPORTED_MODULE_10__["default"] && this._view.notation.enabled && this._view.context.controller.document.isModelEditable(this._view.notation)) {
      this._view.editText();
      return true;
    }
    return false;
  }
  handleEdit(evt) {
    this.doEdit();
  }
  handleMouseUp(evt) {
    if (BasicNotationMediator.ignoreNextMouseUp) {
      BasicNotationMediator.ignoreNextMouseUp = false;
      evt.stopPropagation();
    }
  }
  handleMouseDown(evt) {
    // evt.stopPropagation();
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    if (evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom) {
      this._mouseDownSeen = true;
      const lastClickMillis = new Date().getTime();
      const doubleClick = lastClickMillis - this._lastClickMillis <= this._view.context.info.doubleClickMillis;
      this._lastClickMillis = lastClickMillis;
      if (this._view.notation.enabled && this._view.context.controller.isNotationInteractionAvailable()) {
        let notation = this._view.notation;
        const valueNotation = notation.valueNotation;
        const editable = this._view.context.controller.document.isModelEditable(notation);
        if (editable && !(doubleClick || evt.shiftKey || evt.ctrlKey)) {
          if (notation instanceof _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_3__["default"]) {
            const measureIdx = notation.measure.index;
            // this._view.context.layoutContext.score.systemStaff.dispatchEvent(
            //   new NotationEvent(NotationEvent.FOCUS_MEASURE_NUMBER, measureIdx)
            // );
            return;
          }
          if (notation.symbol) {
            const options = {};
            if (notation.customizationForViewId) {
              options.measurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_4__["default"](notation.measure.index, notation.rhythmPosition);
            }
            new _symbol_drag_mediator__WEBPACK_IMPORTED_MODULE_13__["default"](this._view, this.noteEditorService, options).handleMouseDown(evt);
          } else {
            if (notation.movable) {
              if (notation.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_7__["default"]) {
                new _transposition_fret_mediator__WEBPACK_IMPORTED_MODULE_15__["default"](this._view.context, notation, this.noteEditorService, 'Change Fret').handleMouseDown(evt);
              } else {
                new _transposition_drag_mediator__WEBPACK_IMPORTED_MODULE_14__["default"](this._view.context, notation, this.noteEditorService, 'Move').handleMouseDown(evt);
              }
              if (!notation.measure.isSystemMeasure) {
                if (notation instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_8__["default"]) {
                  // CursorManager.setCursor(DragMediator.moveNSCursor);
                } else {
                  // new NotationDragMediator(
                  //   this._view.context,
                  //   notation.measure,
                  //   this.noteEditorService,
                  //   notation
                  // ).handleMouseDown(evt);
                  // CursorManager.setCursor(DragMediator.moveNESWCursor);
                }
              } else {
                if (notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"]) {
                  new _barline_drag_mediator__WEBPACK_IMPORTED_MODULE_11__["default"](this._view.context, notation, this.noteEditorService, 'Adjust Layout').handleMouseDown(evt);
                }
              }
            }
          }
        }
        if (editable && valueNotation != null && !doubleClick && evt.shiftKey && evt.ctrlKey) {
          // CursorManager.removeAllCursors();
          // CursorManager.setCursor(DragMediator.moveDurationCursor);
          new _duration_drag_mediator__WEBPACK_IMPORTED_MODULE_12__["default"](this._view.context, notation, this.noteEditorService, 'Adjust Duration').handleMouseDown(evt);
        }
        if (doubleClick && notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_5__.Note) {
          notation = valueNotation;
        }
        // this._view.context.document.undoHistory.openGroup(
        //   'Select Notation'
        // )
        if (evt.shiftKey && !evt.ctrlKey && valueNotation != null) {
          this._view.context.controller.selectNotationRange(valueNotation);
        } else if (evt.ctrlKey && !evt.shiftKey) {
          this._view.context.controller.modifyNotationSelection(notation);
        } else if (notation instanceof _models_timesignature__WEBPACK_IMPORTED_MODULE_9__["default"]) {
          this._view.context.controller.selectNotation(notation);
          if (editable) {
            // this._view.context.documentController.editTimeSignature(); todo
          }
        } else if (notation instanceof _models_keysignature__WEBPACK_IMPORTED_MODULE_2__["default"]) {
          this._view.context.controller.selectNotation(notation);
          if (editable) {
            // this._view.context.documentController.editKeySignature();
          }
        } else if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          if (notation.measure != null) {
            this._view.context.controller.selectNotation(notation);
          } else {
            const measureLayout = this._view.layout.measureLayout;
            if (measureLayout != null) {
              this._view.context.controller.selectStaff(measureLayout.measure.staff);
            }
          }
          if (editable && doubleClick) {
            this._view.context.documentController.editClef();
          }
        } else if (this._view instanceof _views_text_notation_view__WEBPACK_IMPORTED_MODULE_10__["default"]) {
          this._view.context.controller.selectNotation(notation);
          if (editable && doubleClick) {
            this._view.editText();
            evt.stopPropagation();
            return;
          }
        } else if (notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"]) {
          this._view.context.controller.selectNotation(notation);
        } else if (this._view.context.document.selection == null || !this._view.context.document.selection.includes(notation)) {
          this._view.context.controller.selectNotation(notation);
          if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_5__.Note) {
            const note = notation;
            // this._view.context.controller.echoNotes([note]);
            // todo
          } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_6__.NoteSet && notation.notes.length > 0) {
            const noteSet = notation;
            // this._view.context.controller.echoNotes(noteSet.notes);
            // todo
          }
        }

        evt.stopPropagation();
        this._view.context.documentView.setFocus();
      }
    }
  }
  handleClick(evt) {
    if (!this._mouseDownSeen && evt.target == this._view && this._view.context.controller.isNotationInteractionAvailable()) {
      const notation = this._view.notation;
      if (!this._view.selected || !this.doEdit()) {
        this._view.context.documentView.setFocus();
        this._view.document.undoHistory.openGroup('Select Notation');
        if (evt.shiftKey && this._view.notation.valueNotation) {
          this._view.context.controller.selectNotationRange(this._view.notation.valueNotation);
        } else {
          this._view.context.controller.selectNotation(this._view.notation);
        }
        if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_5__.Note) {
          const note = notation;
          // this._view.context.controller.echoNotes([note]);
          // todo
        } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_6__.NoteSet && notation.notes.length > 0) {
          const noteSet = notation;
          // this._view.context.controller.echoNotes(noteSet.notes);
          // todo
        }
      }
    }
  }

  handleTouchStart(evt) {
    BasicNotationMediator.previousTouchStartNotation = BasicNotationMediator.touchStartNotation;
    BasicNotationMediator.touchStartNotation = this._view.notation;
  }
  handleTouchEnd(evt) {
    this._view.context.controller.selectRange(this._view.notation, BasicNotationMediator.previousTouchStartNotation);
    BasicNotationMediator.ignoreNextMouseUp = true;
  }
}
BasicNotationMediator._touchStartNotation = null;
BasicNotationMediator._previousTouchStartNotation = null;
BasicNotationMediator._ignoreNextMouseUp = false;

/***/ }),

/***/ 80273:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/controller/beam-mediator.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BeamMediator)
/* harmony export */ });
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/range-selection */ 52152);

class BeamMediator {
  get firstRange() {
    return _document_range_selection__WEBPACK_IMPORTED_MODULE_0__["default"].getRangeForNotation(this._view.layout.getBeamableLayoutAt(0).noteSet, this.noteEditorService);
  }
  get lastRange() {
    return _document_range_selection__WEBPACK_IMPORTED_MODULE_0__["default"].getRangeForNotation(this._view.layout.getBeamableLayoutAt(this._view.layout.numBeamableLayouts - 1).noteSet, this.noteEditorService);
  }
  constructor(noteEditorService) {
    this._view = null;
    this._dragPoint = null;
    this._dragDelta = 0;
    this._lastClickMillis = 0;
    this.noteEditorService = noteEditorService;
  }
  handleViewEvents(view) {
    this._view = view;
    this._view._svg.addEventListener('mousedown', this.handleMouseDown);
    this._view._svg.addEventListener('dblclick', this.handleDoubleClick);
    if (this._view.notation) {
      this.statusChangeSub$ = this.noteEditorService.onNotationStatusChange.subscribe(evt => {
        this.handleStatusChange();
      });
    }
  }
  destroy() {
    if (this._view) {
      this._view._svg.removeEventListener('mousedown', this.handleMouseDown);
      this._view._svg.removeEventListener('dblclick', this.handleDoubleClick);
      if (this._view.notation) {
        // this._view.notation.removeEventListener(
        //   NotationEvent.NOTATION_STATUS_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
        // );
      }
    }
    if (this.statusChangeSub$) {
      this.statusChangeSub$.unsubscribe();
    }
    this._view = null;
  }
  handleStatusChange() {
    this._view.updateStatus();
  }
  handleMouseDown(evt) {
    evt.stopPropagation();
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    if (evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom) {
      if (this._view.context.controller.isNotationInteractionAvailable()) {
        this._dragPoint = null;
        const notation = this._view.notation;
        if (evt.shifKey) {
          this._view.context.controller.selectNotationRange(notation);
        } else if (evt.ctrlKey) {
          this._view.context.controller.modifyNotationSelection(notation);
        } else {
          if (this._view.context.document.selection == null || !this._view.context.document.selection.includes(notation)) {
            this._view.context.controller.selectNotation(notation);
          }
        }
        this._view.context.documentView.setFocus();
      }
    }
  }
  handleDoubleClick(evt) {
    evt.stopPropagation();
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    if (evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom) {
      if (this._view.context.controller.isNotationInteractionAvailable()) {
        this._dragPoint = null;
        const notation = this._view.notation;
        this._view.context.document.selection = this.firstRange.union(this.lastRange);
        if (evt.shifKey) {
          this._view.context.controller.selectNotationRange(notation);
        } else if (evt.ctrlKey) {
          this._view.context.controller.modifyNotationSelection(notation);
        } else {
          if (this._view.context.document.selection == null || !this._view.context.document.selection.includes(notation)) {
            this._view.context.controller.selectNotation(notation);
          }
        }
        this._view.context.documentView.setFocus();
      }
    }
  }
}

/***/ }),

/***/ 95968:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/controller/drag-mediator.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DragMediator)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);

class DragMediator {
  static get VERTICAL_DRAG() {
    return 'vertical';
  }
  static get HORIZONTAL_DRAG() {
    return 'horizontal';
  }
  static get moveEWCursor() {
    return DragMediator._modeEwCursor;
  }
  static set moveEWCursor(t) {
    DragMediator._modeEwCursor = t;
  }
  static get moveNSCursor() {
    return DragMediator._moveNSCursor;
  }
  static set moveNSCursor(t) {
    DragMediator._moveNSCursor = t;
  }
  static get moveNESWCursor() {
    return DragMediator._moveNESWCursor;
  }
  static set moveNESWCursor(t) {
    DragMediator._moveNESWCursor = t;
  }
  static get moveDurationCursor() {
    return DragMediator._moveDurationCursor;
  }
  static set moveDurationCursor(t) {
    DragMediator._moveDurationCursor = t;
  }
  get dragDelta() {
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]((this._context.stage.mouseX - this._dragPoint.x) / this._context.info.displayScale, (this._context.stage.mouseY - this._dragPoint.y) / this._context.info.displayScale);
  }
  get context() {
    return this._context;
  }
  get dragPoint() {
    return this._dragPoint;
  }
  get dragStarted() {
    return this._dragStarted;
  }
  constructor(context, noteEditorService) {
    this._context = null;
    this._dragPoint = null;
    this._dragStarted = false;
    this._lastClickMillis = 0;
    this.minimumDrag = 3;
    this.doubleClick = false;
    this.dragDirection = null;
    this.mouseMoveFuc = evt => {
      this.handleMouseMove(evt);
    };
    this._context = context;
    this.noteEditorService = noteEditorService;
  }
  handleMouseDown(evt) {
    const lastClickMillis = new Date().getTime();
    this.doubleClick = lastClickMillis - this._lastClickMillis <= this.context.info.doubleClickMillis;
    this._lastClickMillis = lastClickMillis;
    this._dragPoint = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](evt.x, evt.y);
    this.mouseDown = true;
    console.log('handleMouseMOve');
    console.log(this._context.stage._svg);
    this._context.stage._svg.addEventListener('mousemove', this.mouseMoveFuc, true
    // { once: true }
    );

    this.context.stage._svg.addEventListener('mouseup', evt => this.handleMouseUp(evt), {
      once: true
    });
    // this._context.stage.addEventListener(
    //   FlashMouseEvent.MOUSE_UP,
    //   RumtimeHelper.bindMethod(this, this.handleMouseUp)
    // );
    this.dragDirection = null;
    // evt.stopPropagation();
  }

  handleMouseMove(evt) {
    console.log('drag-mediator');
    // if (
    //   !this._dragStarted &&
    //   this._dragPoint != null &&
    //   this.mouseDown &&
    //   this.context.controller.isNotationInteractionAvailable()
    // ) {
    //   const deltaX = Math.abs(evt.x - this._dragPoint.x);
    //   const deltaY = Math.abs(evt.y - this._dragPoint.y);
    //   if (deltaX >= this.minimumDrag || deltaY >= this.minimumDrag) {
    //     this._dragStarted = true;
    //     this.dragDirection =
    //       deltaX < deltaY
    //         ? DragMediator.VERTICAL_DRAG
    //         : DragMediator.HORIZONTAL_DRAG;
    //   }
    // }
    // if (this._dragStarted) {
    //   this.handleDragMove(evt);
    // }
  }

  handleMouseUp(evt) {
    if (this._dragStarted) {
      this.handleDragMove(evt);
      this.handleDragEnd(evt);
    } else if (this.doubleClick) {
      this.handleDoubleClick(evt);
    } else {
      this.handleClick(evt);
    }
    this.mouseDown = false;
    this._dragStarted = false;
    this._context.stage._svg.removeEventListener('mousemove', this.mouseMoveFuc, true);
    // this.context.stage._svg.removeEventListener(
    //   'mouseup',
    //   this.handleMouseUp.bind(this)
    // );
    evt.stopPropagation();
    // CursorManager.removeAllCursors();
  }

  handleDragMove(t) {}
  handleDragEnd(t) {}
  handleClick(t) {}
  handleDoubleClick(t) {}
}
DragMediator._modeEwCursor = null;
DragMediator._moveNSCursor = null;
DragMediator._moveNESWCursor = null;
DragMediator._moveDurationCursor = null;

/***/ }),

/***/ 65792:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/controller/duration-drag-mediator.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DurationDragMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class DurationDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get DURATION_DRAG_QUANTUM() {
    return 20;
  }
  constructor(context, dragNotation, noteEditorService, undoGroupName = null) {
    super(context, noteEditorService);
    this._undoGroupName = null;
    this._dragNotation = null;
    this._dragDelta = 0;
    this._groupCreated = false;
    this._undoGroupName = undoGroupName;
    this._dragNotation = dragNotation;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    this._dragDelta = 0;
  }
  handleDragMove(evt) {
    if (this.dragDirection === _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"].HORIZONTAL_DRAG) {
      this.handleDurationDragMove(evt);
    }
  }
  handleDurationDragMove(evt) {
    const dragDelta = Math.round((this.context.stage.mouseX - this.dragPoint.x) / DurationDragMediator.DURATION_DRAG_QUANTUM);
    if (dragDelta !== this._dragDelta) {
      if (this._groupCreated) {
        this.context.controller.undo();
        this._groupCreated = false;
      }
      if (dragDelta !== 0) {
        if (!this._groupCreated) {
          // this.context.document.undoHistory.openGroup(this._undoGroupName);
          this._groupCreated = false;
        }
        this.context.controller.stepSelectionDuration(dragDelta);
      }
      this._dragDelta = dragDelta;
    }
  }
  handleClick(t) {
    if (this._dragNotation) {
      this.context.controller.selectNotation(this._dragNotation);
    }
  }
}

/***/ }),

/***/ 3754:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/controller/effect-mediator.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EffectMediatior)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 15439);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _object_mediaotr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object-mediaotr */ 39636);


class EffectMediatior extends _object_mediaotr__WEBPACK_IMPORTED_MODULE_1__["default"] {
  handleViewEvents(view) {
    this._view = view;
    this.addListeners();
  }
  handleMouseDown(evt) {
    this._mouseDownSeen = true;
    const timestamp = moment__WEBPACK_IMPORTED_MODULE_0___default()().unix();
    this._lastClickMillis = timestamp;
    if (this._view.notation.enabled) {
      const notation = this._view.notation;
      if (evt.ctrlKey || evt.shifKey) {
        this._view.context.controller.modifyNotationSelection(notation);
      } else {
        this._view.context.controller.selectNotation(notation);
      }
      evt.stopPropagation();
      this._view.context.documentView.setFocus();
    }
  }
}

/***/ }),

/***/ 9411:
/*!********************************************************!*\
  !*** ./src/app/note-editor/controller/key-mediator.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeyMediator)
/* harmony export */ });
/* harmony import */ var _events_keyboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/keyboard */ 80102);
/* harmony import */ var _models_articulation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/articulation */ 78859);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _models_slur__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/slur */ 85888);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);









class KeyMediator {
  static get NUMBER_BUNCHING_MSEC() {
    return 1000;
  }
  static get MAX_FRET() {
    return 36;
  }
  get controller() {
    return this._documentController.controller;
  }
  get isSyncMediaPlaying() {
    return this.controller.isSyncMediaPlaying;
  }
  constructor(documentController, trackingCallback = null) {
    this._documentController = null;
    this._lastKeyTime = NaN;
    this._lastKeyEvent = null;
    this._trackingCallback = null;
    this._documentController = documentController;
    this._trackingCallback = trackingCallback;
  }
  handleKey(evt) {
    if (!!(this.handleViewKey(evt) || this.handleEditableDocument() && this.handleEditKey(evt))) {
      this._lastKeyTime = new Date().getTime();
      this._lastKeyEvent = evt;
      return true;
    }
    return false;
  }
  handleEditableDocument() {
    return this.controller != null && (this.controller.document.editable || this.controller.document.markingsEditable);
  }
  handleViewKey(evt) {
    switch (String.fromCharCode(evt.charCode)) {
      case String.fromCharCode(3):
        // this.controller.copyClipboard();
        break;
      case 'c':
        if (evt.ctrlKey) {
          // this.controller.copyClipboard();
          break;
        }
        return false;
      case 'P':
        // this._documentController.startPlaybackWhenReady(
        //   this.controller.togglePlayStop.bind(this.controller)
        // );
        break;
      case 'p':
        const that = this;
        // this._documentController.startPlaybackWhenReady(function () {
        //   that.controller.togglePlayStop(true);
        // });
        break;
      case String.fromCharCode(27):
        if (this.controller.isNotationInteractionAvailable()) {
          // this.controller.document.undoHistory.openGroup('Clear Selection');
          this.controller.clearSelection();
        } else {
          // this.controller.forceStop();
        }
        break;
      case ' ':
        // if (this.controller.isNotationInteractionAvaliable()) {
        //   this._documentController.startPlaybackWhenReady(
        //     this.controller.togglePlayStop.bind(this.controller)
        //   );
        // } else {
        //   this.controller.startPlaybackWhenReady(
        //     this.controller.togglePause.bind(this.controller)
        //   );
        // }
        break;
      default:
        if (!this.handleViewKeyCode(evt)) {
          return false;
        }
    }
    return true;
  }
  handleViewKeyCode(evt) {
    if (evt.charCode !== 0) {
      return false;
    }
    switch (evt.keyCode) {
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.LEFT:
        if (this.controller.isPlaying) break;
        if (this.controller.document.tablatureSelection) {
          if (evt.ctrlKey) {
            // this.controller.document.undoHistory.openGroup('Select');
            this.controller.selectPreviousNoteSet();
            this._documentController.ensureSelectionVisible();
          } else if (evt.shiftKey) {
            // this.controller.document.undoHistory.openGroup(
            //   'Contract Selection'
            // );
            this.controller.selectionLeft();
          } else {
            // this.controller.document.undoHistory.openGroup(
            //   'Move Fret Selection Backward'
            // );
            this.controller.selectPreviousNoteOnString();
          }
          return true;
        }
        if (evt.ctrlKey) {
          return false;
        }
        if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Contract Selection');
          this.controller.selectionLeft();
        } else if (this.controller.document.entryAfterSelection) {
          // this.controller.document.undoHistory.openGroup(
          //   'Move Insertion Point'
          // );
          this.controller.setEntryAfterSelection(false);
          this._documentController.ensureSelectionVisible();
        } else if (this.controller.document.firstSelectedNoteSet != null) {
          // this.controller.document.undoHistory.openGroup('Move Left');
          this.controller.selectPreviousNoteSet();
          this._documentController.ensureSelectionVisible();
        } else {
          // this.controller.document.undoHistory.openGroup('Move Left');
          this.controller.nudgeSelection(_models_notation_direction__WEBPACK_IMPORTED_MODULE_5__.Notation_Direction.DIRECTION_LEFT);
        }
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.RIGHT:
        if (this.controller.isPlaying) {
          return false;
        }
        if (this.controller.document.tablatureSelection) {
          if (evt.ctrlKey) {
            // this.controller.document.undoHistory.openGroup('Select');
            this.controller.selectNextNoteSet();
            this._documentController.ensureSelectionVisible();
          } else if (evt.shiftKey) {
            // this.controller.document.undoHistory.openGroup(
            //   'Extend Selection'
            // );
            this.controller.selectionRight();
          } else {
            // this.controller.document.undoHistory.openGroup(
            //   'Move Fret Selection Backward'
            // );
            this.controller.selectNextNoteOnString();
          }
          return true;
        }
        if (evt.ctrlKey) {
          return false;
        }
        if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Extend Selection');
          this.controller.selectionRight();
        } else if (this.controller.document.firstSelectedNoteSet != null) {
          // this.controller.document.undoHistory.openGroup('Move Right');
          this.controller.selectNextNoteSet();
          this._documentController.ensureSelectionVisible();
        } else {
          // this.controller.document.undoHistory.openGroup('Move Right');
          this.controller.nudgeSelection(_models_notation_direction__WEBPACK_IMPORTED_MODULE_5__.Notation_Direction.DIRECTION_RIGHT);
        }
        break;
      case 27:
        if (this.controller.isNotationInteractionAvailable()) {
          // this.controller.document.undoHistory.openGroup('Clear Selection');
          this.controller.clearSelection();
        } else {
          // this.controller.forceStop();
        }
        break;
      default:
        return false;
    }
    return true;
  }
  handleEditKey(evt) {
    if (this.controller.document.tablatureSelection && this.handleTabEditKey(evt)) {
      return true;
    }
    let charCode = String.fromCharCode(evt.charCode);
    const enterNote = () => {
      // this.controller.document.undoHistory.openGroup('Enter Note');
      const stepNameIdx = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_8__["default"].STEP_NAMES.indexOf(charCode.toUpperCase());
      if (this.controller.document.entryAfterSelection) {
        this.controller.enterStepAtSelection(stepNameIdx);
      } else {
        this.controller.placeStepAtSelection(stepNameIdx);
      }
      this._documentController.ensureSelectionVisible();
    };
    switch (charCode) {
      case String.fromCharCode(5):
        this._documentController.addExpression();
        break;
      case 'e':
        if (evt.ctrlKey) {
          this._documentController.addExpression();
        } else {
          enterNote();
        }
        break;
      case String.fromCharCode(7):
        // this.controller.document.undoHistory.openGroup('Add Grace Note');
        this.controller.modifyGrace(false);
        this._documentController.ensureSelectionVisible();
        break;
      case 'g':
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Add Grace Note');
          this.controller.modifyGrace(false);
          this._documentController.ensureSelectionVisible();
        } else {
          enterNote();
        }
        break;
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'f':
        enterNote();
        break;
      case 'h':
        charCode = 'b';
        enterNote();
        break;
      case 'E':
        if (evt.ctrlKey) {
          this._documentController.addExpression();
          this._documentController.ensureSelectionVisible();
          this.trackAction('expressionText');
          break;
        }
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'F':
      case 'G':
        // this.controller.document.undoHistory.openGroup('Add Note');
        this.controller.addStepToSelection(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_8__["default"].STEP_NAMES.indexOf(charCode.toUpperCase()));
        this._documentController.ensureSelectionVisible();
        break;
      case 'H':
        // this.controller.document.undoHistory.openGroup('Add Note');
        this.controller.addStepToSelection(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_8__["default"].STEP_NAMES.indexOf('B'));
        this._documentController.ensureSelectionVisible();
        break;
      case '<':
        // this.controller.document.undoHistory.openGroup('Add Crescendo');
        this.controller.addSpanToSelection(_models_hairpin__WEBPACK_IMPORTED_MODULE_2__["default"].createHairpin(_models_hairpin__WEBPACK_IMPORTED_MODULE_2__["default"].CRESCENDO, this.controller.document.score.effectiveStaffMetrics));
        this._documentController.ensureSelectionVisible();
        this.trackAction('crescendo');
        break;
      case '>':
        // this.controller.document.undoHistory.openGroup('Add Diminuendo');
        this.controller.addSpanToSelection(_models_hairpin__WEBPACK_IMPORTED_MODULE_2__["default"].createHairpin(_models_hairpin__WEBPACK_IMPORTED_MODULE_2__["default"].DIMINUENDO, this.controller.document.score.effectiveStaffMetrics));
        this._documentController.ensureSelectionVisible();
        this.trackAction('diminuendo');
        break;
      case 'k':
        this._documentController.addChordSymbol();
        this._documentController.ensureSelectionVisible();
        this.trackAction('chord');
        break;
      case 'K':
        // this.controller.document.undoHistory.openGroup('Filter Selection');
        this.controller.filterSelection('filterChords');
        this._documentController.ensureSelectionVisible();
        this.trackAction('filterChords');
        break;
      case String.fromCharCode(12):
        this._documentController.addLyric();
        this._documentController.ensureSelectionVisible();
        this.trackAction('lyrics');
        break;
      case 'l':
        if (evt.ctrlKey) {
          this._documentController.addLyric();
          this.trackAction('lyrics');
          break;
        }
        // this.controller.document.undoHistory.openGroup('Use Lower Voice');
        this.controller.selectVoice(false);
        this._documentController.ensureSelectionVisible();
        this.trackAction('voiceLower');
        break;
      case 'L':
        // this.controller.document.undoHistory.openGroup('Filter Selection');
        this.controller.filterSelection('filterVoice1');
        this._documentController.ensureSelectionVisible();
        this.trackAction('filterLowerVoice');
        break;
      case 'u':
        // this.controller.document.undoHistory.openGroup('Use Upper Voice');
        this.controller.selectVoice(true);
        this._documentController.ensureSelectionVisible();
        this.trackAction('voiceUpper');
        break;
      case 'U':
        // this.controller.document.undoHistory.openGroup('Filter Selection');
        this.controller.filterSelection('filterVoice0');
        this._documentController.ensureSelectionVisible();
        this.trackAction('filterUpperVoice');
        break;
      case 'm':
      case 'M':
        if (!this.isSyncMediaPlaying) {
          // this.controller.document.undoHistory.openGroup('Remove Voice');
          this.controller.removeSelectedVoice();
          this._documentController.ensureSelectionVisible();
          this.trackAction('removeVoice');
        }
        break;
      case '2':
        // this.controller.document.undoHistory.openGroup('Create Duplet');
        this.controller.createTuplet(2);
        this._documentController.ensureSelectionVisible();
        this.trackAction('duplet');
        break;
      case '3':
        // this.controller.document.undoHistory.openGroup('Create Triplet');
        this.controller.createTuplet(3);
        this._documentController.ensureSelectionVisible();
        this.trackAction('triplet');
        break;
      case '4':
        // this.controller.document.undoHistory.openGroup('Create Quadruplet');
        this.controller.createTuplet(4);
        this._documentController.ensureSelectionVisible();
        this.trackAction('quadruplet');
        break;
      case '5':
        // this.controller.document.undoHistory.openGroup('Create Quintuplet');
        this.controller.createTuplet(5);
        this._documentController.ensureSelectionVisible();
        this.trackAction('quintuplet');
        break;
      case '6':
        // this.controller.document.undoHistory.openGroup('Create Sextuplet');
        this.controller.createTuplet(6);
        this._documentController.ensureSelectionVisible();
        this.trackAction('sextuplet');
        break;
      case '7':
        // this.controller.document.undoHistory.openGroup('Create Septuplet');
        this.controller.createTuplet(7);
        this._documentController.ensureSelectionVisible();
        this.trackAction('septuplet');
        break;
      case "'":
        // this.controller.document.undoHistory.openGroup('Articulation Change');
        this.controller.modifyArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.MARCATO);
        this._documentController.ensureSelectionVisible();
        this.trackAction('marcato');
        break;
      case '"':
        // this.controller.document.undoHistory.openGroup('Articulation Change');
        this.controller.modifyArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.MARTELLATO);
        this._documentController.ensureSelectionVisible();
        this.trackAction('martellato');
        break;
      case ';':
        // this.controller.document.undoHistory.openGroup('Articulation Change');
        this.controller.modifyArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.STACCATO);
        this._documentController.ensureSelectionVisible();
        this.trackAction('tenuto');
        break;
      case '^':
        // this.controller.document.undoHistory.openGroup('Articulation Change');
        this.controller.modifyArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.FERMATA);
        this._documentController.ensureSelectionVisible();
        this.trackAction('fermata');
        break;
      case ',':
        // this.controller.document.undoHistory.openGroup('Tie Change');
        this.controller.modifyTies();
        this._documentController.ensureSelectionVisible();
        this.trackAction('tie');
        break;
      case '~':
        // this.controller.document.undoHistory.openGroup('Bend Change');
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.BEND_LIAISON);
        this._documentController.ensureSelectionVisible();
        this.trackAction('bend');
        break;
      case '|':
        // this.controller.document.undoHistory.openGroup('Pre-bend Change');
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.PRE_BEND_LIAISON);
        this._documentController.ensureSelectionVisible();
        this.trackAction('preBend');
        break;
      case '%':
        // this.controller.document.undoHistory.openGroup('Courtesy Accidental');
        this.controller.modifyCourtesyAccidentals();
        this._documentController.ensureSelectionVisible();
        this.trackAction('courtesyAccidental');
        break;
      case '`':
        // this.controller.document.undoHistory.openGroup('Parentheses');
        this.controller.modifyParentheses();
        this._documentController.ensureSelectionVisible();
        this.trackAction('parentheses');
        break;
      case '\\':
        // this.controller.document.undoHistory.openGroup('Slide Change');
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.SLIDE_LIAISON);
        this._documentController.ensureSelectionVisible();
        this.trackAction('slide');
        break;
      case '{':
        // this.controller.document.undoHistory.openGroup('Beam Change');
        this.controller.modifyBeamBeforeSelection();
        this._documentController.ensureSelectionVisible();
        this.trackAction('beamContinue');
        break;
      case '}':
        // this.controller.document.undoHistory.openGroup('Beam Change');
        this.controller.modifyBeamAtSelection();
        this._documentController.ensureSelectionVisible();
        this.trackAction('beamStart');
        break;
      case ' ':
      case 'n':
      case 'N':
        // this.controller.document.undoHistory.openGroup('Enter Rest');
        this.controller.enterRestAtSelection();
        this._documentController.ensureSelectionVisible();
        break;
      case '/':
        // this.controller.document.undoHistory.openGroup('Enter Slash');
        this.controller.enterSlash();
        this._documentController.ensureSelectionVisible();
        this.trackAction('enterSlash');
        break;
      case '?':
        // this.controller.document.undoHistory.openGroup('Note Head Change');
        this.controller.modifyNoteHead();
        this._documentController.ensureSelectionVisible();
        this.trackAction('noteHeadChange');
        break;
      case '(':
      case ')':
      case '[':
      case ']':
      case String.fromCharCode(246):
      case String.fromCharCode(228):
        // this.controller.document.undoHistory.openGroup('Rhythm Change');
        this.controller.adjustSelectionDuration('[' == charCode || '(' == charCode || 246 == charCode.charCodeAt(0) ? -1 : 1, false);
        this._documentController.ensureSelectionVisible();
        break;
      case '.':
        // this.controller.document.undoHistory.openGroup('Rhythm Change');
        this.controller.adjustSelectionDuration(0, true);
        this._documentController.ensureSelectionVisible();
        break;
      case '*':
        // this.controller.document.undoHistory.openGroup('Accidental');
        this.controller.applyAccidentalToSelection(2);
        this._documentController.ensureSelectionVisible();
        this.trackAction('doubleSharp');
        break;
      case '+':
      case '#':
        // this.controller.document.undoHistory.openGroup('Accidental');
        this.controller.applyAccidentalToSelection(1);
        this._documentController.ensureSelectionVisible();
        this.trackAction('sharp');
        break;
      case '-':
      case '@':
        // this.controller.document.undoHistory.openGroup('Accidental');
        this.controller.applyAccidentalToSelection(-1);
        this._documentController.ensureSelectionVisible();
        this.trackAction('flat');
        break;
      case '_':
        // this.controller.document.undoHistory.openGroup('Accidental');
        this.controller.applyAccidentalToSelection(-2);
        this._documentController.ensureSelectionVisible();
        this.trackAction('doubleFlat');
        break;
      case '=':
      case '$':
        // this.controller.document.undoHistory.openGroup('Accidental');
        this.controller.applyAccidentalToSelection(0);
        this._documentController.ensureSelectionVisible();
        this.trackAction('natural');
        break;
      case String.fromCharCode(13):
        if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Toggle Page Break');
          this.controller.applyBreak(_models_measure__WEBPACK_IMPORTED_MODULE_4__["default"].PAGE_BREAK_TYPE);
          this.trackAction('pageBreakAfter');
        } else if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup(
          //   'Hide/Show Cautionaries'
          // );
          this.controller.toggleCautionaries();
          this.trackAction('hideShowCautionaries');
        } else {
          // this.controller.document.undoHistory.openGroup('Toggle System Break');
          this.controller.applyBreak(_models_measure__WEBPACK_IMPORTED_MODULE_4__["default"].SYSTEM_BREAK_TYPE);
          this.trackAction('systemBreakAfter');
        }
        this._documentController.ensureSelectionVisible();
        break;
      case 's':
      case 'S':
        if (!evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Add Slur');
          this.controller.addSpanToSelection(new _models_slur__WEBPACK_IMPORTED_MODULE_6__["default"]());
          this._documentController.ensureSelectionVisible();
          this.trackAction('slur');
        }
        break;
      case 'r':
      case 'R':
        // this.controller.document.undoHistory.openGroup('Repeat');
        this.controller.repeatSelection();
        this._documentController.ensureSelectionVisible();
        this.trackAction('repeat');
        break;
      case 't':
        this._documentController.addPerformance(false);
        this.trackAction('performanceText');
        break;
      case 'T':
        // this.controller.document.undoHistory.openGroup('Filter Selection');
        this.controller.filterSelection('filterPerformance');
        this._documentController.ensureSelectionVisible();
        break;
      case String.fromCharCode(22):
        // this.controller.document.undoHistory.openGroup('Paste');
        // this.controller.pasteClipboard(); todo
        this._documentController.ensureSelectionVisible();
        break;
      case 'v':
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Paste');
          // this.controller.pasteClipboard();  todo
          this._documentController.ensureSelectionVisible();
        }
        break;
      case String.fromCharCode(24):
        // this.controller.document.undoHistory.openGroup('Cut');
        // this.controller.cutClipboard();  todo
        break;
      case 'x':
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Cut');
          // this.controller.cutClipboard();
          this._documentController.ensureSelectionVisible();
        }
        break;
      case String.fromCharCode(25):
        // this.controller.redo();
        this._documentController.ensureSelectionVisible();
        break;
      case 'y':
        if (evt.ctrlKey) {
          // this.controller.redo();
          this._documentController.ensureSelectionVisible();
        }
        break;
      case String.fromCharCode(26):
        this.controller.undo();
        this._documentController.ensureSelectionVisible();
        break;
      case 'z':
      case 'Z':
        if (evt.ctrlKey) {
          this.controller.undo();
          this._documentController.ensureSelectionVisible();
        } else {
          // this.controller.document.undoHistory.openGroup('Enharmonic Change');
          this.controller.enharmonicShift();
          this._documentController.ensureSelectionVisible();
          this.trackAction('enharmonics');
        }
        break;
      case String.fromCharCode(8):
        console.log('keyEvent:', evt);
        this._documentController.ensureSelectionVisible();
        // this.controller.document.undoHistory.openGroup('Delete');
        this.controller.deleteSelection();
        break;
      default:
        if (!this.handleEditKeyCode(evt)) return false;
    }
    return true;
  }
  handleTabEditKey(evt) {
    if (evt.ctrlKey) return false;
    var charCode = String.fromCharCode(evt.keyCode);
    switch (charCode) {
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
        // this.controller.document.undoHistory.openGroup('Add Note');
        this.controller.addStringToSelection(_models_tablature_clef__WEBPACK_IMPORTED_MODULE_7__["default"].STRING_NAMES.indexOf(charCode.toUpperCase()));
        this._documentController.ensureSelectionVisible();
        break;
      case 'H':
      case '/':
      case '*':
      case '+':
      case '#':
      case '-':
      case '@':
      case '_':
      case '=':
      case '$':
      case '?':
        break;
      case 'x':
        // this.controller.document.undoHistory.openGroup('Add Muted Note');
        this.controller.setSelectionFret(0, true);
        break;
      case 'h':
        // this.controller.document.undoHistory.openGroup('Add Hammer-On');
        const hammerOn = new _models_slur__WEBPACK_IMPORTED_MODULE_6__["default"]();
        hammerOn.slurArticulation = _models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.HAMMER_ON;
        this.controller.addSpanToSelection(hammerOn);
        this._documentController.ensureSelectionVisible();
        this.trackAction('hammerOn');
        break;
      case 'j':
        // this.controller.document.undoHistory.openGroup('Add Pull-Off');
        const pullOff = new _models_slur__WEBPACK_IMPORTED_MODULE_6__["default"]();
        pullOff.slurArticulation = _models_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.PULL_OFF;
        this.controller.addSpanToSelection(pullOff);
        this._documentController.ensureSelectionVisible();
        this.trackAction('pullOff');
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        var i = false,
          num = +charCode;
        if (this._lastKeyTime && new Date().getTime() - this._lastKeyTime <= KeyMediator.NUMBER_BUNCHING_MSEC) {
          if (this._lastKeyEvent) {
            var prevcharCode = String.fromCharCode(this._lastKeyEvent.keyCode);
            if (prevcharCode.match(/[0-9]/)) {
              var fret = 10 * +prevcharCode + num;
              if (fret <= KeyMediator.MAX_FRET) {
                num = fret;
                i = true;
              }
            }
          }
        }
        // if (!i) {
        // this.controller.document.undoHistory.openGroup('Change Fret');
        // }
        this.controller.setSelectionFret(+num);
        break;
      default:
        return false;
    }
    return true;
  }
  handleEditKeyCode(evt) {
    if (0 !== evt.charCode) return false;
    if (this.controller.document.tablatureSelection && this.handleTabEditKeyCode(evt)) {
      return true;
    }
    switch (evt.keyCode) {
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.UP:
        console.log('up');
        if (this.controller.isPlaying) break;
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Up Octave');
          this.controller.transposeSelectionAtOctave(1);
          this.trackAction('moveOctaveUp');
        } else if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Move Up Chromatic');
          this.controller.transposeSelectionChromatic(1);
          this.trackAction('moveHalfUp');
        } else {
          // this.controller.document.undoHistory.openGroup('Move Up');
          this.controller.transposeSelectionDiatonic(1);
          this.trackAction('moveUp');
        }
        this._documentController.ensureSelectionVisible();
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.DOWN:
        if (this.controller.isPlaying) break;
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Down Octave');
          this.controller.transposeSelectionAtOctave(-1);
          this.trackAction('moveOctaveDown');
        } else if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Move Down Chromatic');
          this.controller.transposeSelectionChromatic(-1);
          this.trackAction('moveHalfDown');
        } else {
          // this.controller.document.undoHistory.openGroup('Move Down');
          this.controller.transposeSelectionDiatonic(-1);
          this.trackAction('moveDown');
        }
        this._documentController.ensureSelectionVisible();
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.LEFT:
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Left');
          this.controller.nudgeSelection(_models_notation_direction__WEBPACK_IMPORTED_MODULE_5__.Notation_Direction.DIRECTION_LEFT);
        }
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.RIGHT:
        if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Right');
          this.controller.nudgeSelection(_models_notation_direction__WEBPACK_IMPORTED_MODULE_5__.Notation_Direction.DIRECTION_RIGHT);
        }
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.DELETE:
        console.log('keyEvent:', evt);
        this._documentController.ensureSelectionVisible();
        // this.controller.document.undoHistory.openGroup('Delete');
        this.controller.deleteSelection();
        break;
      default:
        return false;
    }
    return true;
  }
  handleTabEditKeyCode(evt) {
    switch (evt.keyCode) {
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.UP:
        if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Move Up Fret');
          this.controller.transposeSelectionChromatic(1);
        } else if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Up String');
          this.controller.adjustStringIndex(-1);
        } else {
          // this.controller.document.undoHistory.openGroup('Move Up Selection');
          this.controller.moveUpString();
        }
        this._documentController.ensureSelectionVisible();
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.DOWN:
        if (evt.shiftKey) {
          // this.controller.document.undoHistory.openGroup('Move Down Fret');
          this.controller.transposeSelectionChromatic(-1);
        } else if (evt.ctrlKey) {
          // this.controller.document.undoHistory.openGroup('Move Down String');
          this.controller.adjustStringIndex(1);
        } else {
          // this.controller.document.undoHistory.openGroup('Move Down Selection');
          this.controller.moveDownString();
        }
        this._documentController.ensureSelectionVisible();
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.DELETE:
        this._documentController.ensureSelectionVisible();
        // this.controller.document.undoHistory.openGroup('Delete');
        this.controller.deleteSelection();
        break;
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F1:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F2:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F3:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F4:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F5:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F6:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F7:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F8:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F9:
      case _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F10:
        var e = evt.keyCode - _events_keyboard__WEBPACK_IMPORTED_MODULE_0__.Keyboard.F1;
        // this.controller.document.undoHistory.openGroup('Add Note');
        this.controller.addStringToSelection(e);
        this._documentController.ensureSelectionVisible();
        break;
      default:
        return false;
    }
    return true;
  }
  trackAction(action) {
    null != this._trackingCallback && this._trackingCallback(action);
  }
}

/***/ }),

/***/ 11464:
/*!*****************************************************************!*\
  !*** ./src/app/note-editor/controller/measure-drag-mediator.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureDragMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class MeasureDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, view, noteEditorService) {
    super(context, noteEditorService);
    this._startMeasure = null;
    this._dragMeasure = null;
    this._view = null;
    this._view = view;
    this._startMeasure = this._view.measure;
  }
  handleMouseDown(evt) {
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    console.log('handleMouseDown');
    if (evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom) {
      console.log('handleMouseDown action');
      super.handleMouseDown(evt);
      // this.context.stage.addEventListener(
      //   FlashEvent.ENTER_FRAME,
      //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
      // );
      this.updateSelection(evt);
      this.context.documentView.initializeDragAutoScroll();
    }
  }
  handleMouseUp(evt) {
    // const boundingClientRect = this._view._svg.getBoundingClientRect();
    // debugger;
    // if (
    //   evt.x > boundingClientRect.left &&
    //   evt.x < boundingClientRect.right &&
    //   evt.y > boundingClientRect.top &&
    //   evt.y < boundingClientRect.bottom
    // ) {
    super.handleMouseUp(evt);
    // }
    // this.context.stage.removeEventListener(
    //   FlashEvent.ENTER_FRAME,
    //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
    // );
  }

  handleDragMove(evt) {
    this.updateSelection(evt);
  }
  handleEnterFrame(evt) {
    this.context.documentView.handleDragAutoScroll();
  }
  handleClick(evt) {
    if (this._view.entryNote != null && this._view.context.controller.isNotationInteractionAvailable()) {
      if (evt.shiftKey) {
        this._view.context.controller.extendRangeToMeasure(this._view.measure);
      } else {
        this._view.context.controller.selectRangeForMeasure(this._view.measure);
      }
    }
  }
  handleDoubleClick(evt) {
    this._view.context.controller.selectStaff(this._view.measure.staff);
  }
  updateSelection(evt) {
    if (!evt.shiftKey && !evt.ctrlKey && this._view.context.controller.isNotationInteractionAvailable()) {
      const positionUnderMouse = this.context.getPositionUnderMouse(null, null, evt);
      console.log('x', evt.x);
      console.log('y', evt.y);
      console.log(positionUnderMouse.measureIndex);
      if (positionUnderMouse != null) {
        const measure = this.context.document.score.getStaffAt(positionUnderMouse.staffIndex).getMeasureAt(positionUnderMouse.measureIndex);
        if (measure != this._dragMeasure) {
          this._dragMeasure = measure;
          this.context.controller.selectRangeForMeasure(this._startMeasure);
          this.context.controller.extendRangeToMeasure(this._startMeasure.staff.getMeasureAt(this._dragMeasure.index));
        }
      }
    }
  }
}

/***/ }),

/***/ 38435:
/*!*****************************************************************!*\
  !*** ./src/app/note-editor/controller/measure-edit-mediator.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureEditMediator)
/* harmony export */ });
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _events_falsh_mouse_event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/falsh-mouse-event */ 93699);
/* harmony import */ var _layouts_measure_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../layouts/measure-layout */ 7536);
/* harmony import */ var _layouts_notation_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../layouts/notation-layout */ 18810);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _utils_event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/event */ 33400);
/* harmony import */ var _duration_drag_mediator__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./duration-drag-mediator */ 65792);
/* harmony import */ var _measure_drag_mediator__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measure-drag-mediator */ 11464);
/* harmony import */ var _transposition_drag_mediator__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transposition-drag-mediator */ 6950);
/* harmony import */ var _transposition_fret_mediator__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transposition-fret-mediator */ 39139);












class MeasureEditMediator {
  constructor(noteEditorService) {
    this._view = null;
    this._lastClickMillis = 0;
    this._mouseDownSeen = false;
    this.noteEditorService = noteEditorService;
  }
  handleViewEvents(view) {
    this._view = view;
    this._view._svg.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this._view._svg.addEventListener('mousemove', this.handleMouseMove.bind(this));
    this._view._svg.addEventListener('mouseup', this.handleMouseUp.bind(this));
    // this._view._svg.addEventListener('click', this.handleClick.bind(this));
    if (this.measureStatusChangeSub$) {
      this.measureStatusChangeSub$.unsubscribe();
    }
    if (this._view.measure) {
      this.measureStatusChangeSub$ = this.noteEditorService.onMeasureStatusChange.subscribe(evt => {
        const measure = evt.measure;
        if (this._view.measure === measure) {
          this.handleStatusChange();
        }
      });
    }
  }
  handleMouseDown(evt) {
    evt.stopPropagation();
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    if (evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom) {
      const flashMouseEvent = (0,_utils_event__WEBPACK_IMPORTED_MODULE_7__.buildEvent)(evt, _events_falsh_mouse_event__WEBPACK_IMPORTED_MODULE_2__["default"].MOUSE_DOWN, false, this._view.svgContext, this._view.screenCTM, this._view.stage);
      const clickMillis = new Date().getTime();
      const dblClick = clickMillis - this._lastClickMillis <= this._view.context.info.doubleClickMillis;
      this._lastClickMillis = clickMillis;
      if (this._view.context.controller.isNotationInteractionAvailable()) {
        this._mouseDownSeen = true;
        this.showNoteEntryFeedback(flashMouseEvent);
        if (dblClick) {
          // this._view.context.document.undoHistory.openGroupName = 'Select Staff';
          this._view.context.controller.selectStaff(this._view.measure.staff);
        } else if (this._view.entryNote != null) {
          // this._view.context.controller.document.undoHistory.openGroup(
          //   'Add Note'
          // );
          this._view.entryNote.enabled = true;
          // this._view.entryNote.parent = null;// todo
          const isTabClef = this._view.entryNote.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_6__["default"];
          this._view.context.controller.addNoteToNoteSet(this._view.entryNote, this._view.entryNoteSet);
          if (this._view.context.controller.document.advanceAfterNoteEntry) {
            if (!isTabClef) {
              this._view.context.controller.setEntryAfterSelection(true);
            }
          }
          this._view.removeNoteEntryView();
          //todo CursorManager
          if (isTabClef) {
            new _transposition_fret_mediator__WEBPACK_IMPORTED_MODULE_11__["default"](this._view.context, null, this.noteEditorService).handleMouseDown(flashMouseEvent);
          } else {
            new _transposition_drag_mediator__WEBPACK_IMPORTED_MODULE_10__["default"](this._view.context, null, this.noteEditorService).handleMouseDown(flashMouseEvent);
          }
          new _duration_drag_mediator__WEBPACK_IMPORTED_MODULE_8__["default"](this._view.context, null, this.noteEditorService, 'Adjust Duration').handleMouseDown(flashMouseEvent);
        } else {
          if (this._view.mouseInStaff) {
            if (this._view.context.controller.document.editable && (this._view.context.document.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_1__["default"] || this._view.context.document.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) && this._view.context.document.selection.selectedRange.includesEntireMeasure(this._view.measure)) {
              // this._view.context.document.undoHistory.openGroup('Move');
              // new NotationDragMediator(
              //   this._view.context,
              //   this._view.measure,
              //   this.noteEditorService,
              //   null,
              //   this.handleClick.bind(this)
              // ).handleMouseDown(flashMouseEvent);
            } else {
              // this._view.context.document.undoHistory.openGroup('Select Measure');
              new _measure_drag_mediator__WEBPACK_IMPORTED_MODULE_9__["default"](this._view.context, this._view, this.noteEditorService).handleMouseDown(flashMouseEvent);
            }
          } else {
            // this._view.context.document.undoHistory.openGroup('Deselect All');
            this._view.context.controller.clearSelection();
          }
        }
        this._view.context.documentView.setFocus();
        // this._view.context.controller.dispatchEvent(
        //   new NotationEvent(NotationEvent.NOTATION_SELECTED)
        // );
        // flashMouseEvent.stopPropagation();
      } else {
        if (dblClick) {
          this._mouseDownSeen = true;
          // this._view.context.controller.forceStop();  todo
        }
      }
    }
  }

  handleMouseMove(evt) {
    evt.stopPropagation();
    const flashMouseEvent = (0,_utils_event__WEBPACK_IMPORTED_MODULE_7__.buildEvent)(evt, _events_falsh_mouse_event__WEBPACK_IMPORTED_MODULE_2__["default"].MOUSE_MOVE, false, this._view.svgContext, this._view.screenCTM, this._view.stage);
    this.showNoteEntryFeedback(flashMouseEvent);
  }
  handleClick(evt) {
    // evt.stopPropagation();
    if (!this._view.context.controller.isNotationInteractionAvailable()) {
      let measureIndex, part;
      const measure = this._view.layout.measure;
      if (measure) {
        measureIndex = measure.index;
        part = measure.staff.part;
      }
      // this._view.context.controller.performanceModeAction(part, measureIndex);
      this._view.context.documentView.showPositionCursor(new _models_measure_position__WEBPACK_IMPORTED_MODULE_5__["default"](measureIndex, 0));
    }
    const boundingClientRect = this._view._svg.getBoundingClientRect();
    if (!this._mouseDownSeen && evt.x > boundingClientRect.left && evt.x < boundingClientRect.right && evt.y > boundingClientRect.top && evt.y < boundingClientRect.bottom && this._view.context.controller.isNotationInteractionAvailable()) {
      // this._view.context.document.undoHistory.openGroup('Select Measure');
      if (evt.shiftKey) {
        this._view.context.controller.extendRangeToMeasure(this._view.measure);
      } else if (evt.ctrlKey) {
        this._view.context.controller.selectStaff(this._view.measure.staff);
      } else {
        this._view.context.controller.selectRangeForMeasure(this._view.measure);
      }
    }
  }
  handleMouseUp() {}
  showNoteEntryFeedback(evt) {
    if (this._view.context.controller.document.editable) {
      if (!evt.shiftKey && !evt.ctrlKey && this._view.acceptNoteEntry(evt)) {
        const x = this._view.mouseX / this._view.staffMetrics.lineSpacing;
        const entryNotation = this._view.layout.getEntryNotation(x, this._view.entryVoiceNumber);
        if (entryNotation != null && (this._view.insertionNoteSet == null || this._view.insertionNoteSet == entryNotation.notation)) {
          this._view.updateNoteEntryView(entryNotation, this._view.mouseY, false);
          return;
        }
      }
      this._view.removeNoteEntryView();
    }
  }
  getMeasureFromEvent(evt) {
    if (!evt.target.layout) {
      return null;
    }
    const layout = evt.target.layout;
    if (layout instanceof _layouts_measure_layout__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      return layout.measure;
    }
    if (layout instanceof _layouts_notation_layout__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      const measureLayout = layout.measureLayout;
      return measureLayout.measure;
    }
    return null;
  }
  handleStatusChange() {
    this._view.updateStatus();
  }
  destroy() {
    this.removeListeners();
  }
  removeListeners() {
    if (this._view) {
      this._view._svg.removeEventListener('mousedown', this.handleMouseDown.bind(this));
      this._view._svg.removeEventListener('mousemove', this.handleMouseMove.bind(this));
      this._view._svg.removeEventListener('mouseup', this.handleMouseUp.bind(this));
      // todo
      this._view._svg.removeEventListener('click', this.handleClick.bind(this));
    }
  }
}

/***/ }),

/***/ 561:
/*!************************************************************************!*\
  !*** ./src/app/note-editor/controller/measure-handle-drag-mediator.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureHandleDragMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class MeasureHandleDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, view, noteEditorService) {
    super(context, noteEditorService);
    this._startMeasure = null;
    this._dragMeasure = null;
    this._view = null;
    this._view = view;
    this._startMeasure = this._view.measure;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    // this.context.stage._svg.addEventListener('') // todo enterframe
    this.updateSelection(evt);
    this.context.documentView.initializeDragAutoScroll();
  }
  handleDragMove(t) {
    this.updateSelection(t);
  }
  updateSelection(evt) {
    if (!evt.shiftKey && !evt.ctrlKey) {
      const positionUnderMouse = this.context.getPositionUnderMouse();
      if (positionUnderMouse != null) {
        const measure = this.context.document.score.systemStaff.getMeasureAt(positionUnderMouse.measureIndex);
        if (measure != this._dragMeasure) {
          this._dragMeasure = measure;
          this.context.controller.selectMeasure(this._startMeasure);
          if (this._dragMeasure != this._startMeasure) {
            this.context.controller.extendMeasureSelection(this._dragMeasure);
          }
        }
      }
    }
  }
}

/***/ }),

/***/ 74235:
/*!*******************************************************************!*\
  !*** ./src/app/note-editor/controller/measure-handle-mediator.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureHandleMediator)
/* harmony export */ });
/* harmony import */ var _measure_handle_drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measure-handle-drag-mediator */ 561);

class MeasureHandleMediator {
  constructor(nodeEditorService) {
    this._view = null;
    this._mouseDownSeen = false;
    this._lastClickMillis = 0;
    this.nodeEditorService = nodeEditorService;
  }
  handleViewEvents(view) {
    this._view = view;
    this.nodeEditorService.onMeasureHandleClick.subscribe(evt => {
      if (this._view === evt.view) {
        this.handleMeasureEdit(evt);
      }
    });
    this._view._svg.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this._view._svg.addEventListener('click', this.handleClick.bind(this));
    if (this.measureStatusChangeSub$) {
      this.measureStatusChangeSub$.unsubscribe();
    }
    if (this._view.systemStaffMeasure != null) {
      this.measureStatusChangeSub$ = this.nodeEditorService.onMeasureStatusChange.subscribe(evt => {
        this.handleStatusChange(evt);
      });
    }
  }
  removeListeners() {
    if (this._view) {
      this._view._svg.removeEventListener('mousedown', this.handleMouseDown.bind(this));
      this._view._svg.removeEventListener('click', this.handleClick.bind(this));
    }
    if (this.measureStatusChangeSub$) {
      this.measureStatusChangeSub$.unsubscribe();
    }
  }
  destroy() {
    this.removeListeners();
  }
  handleMouseDown(evt) {
    const lastClickMillis = new Date().getTime();
    const dblClick = lastClickMillis - this._lastClickMillis <= this._view.context.info.doubleClickMillis;
    this._lastClickMillis = lastClickMillis;
    if (this._view.context.controller.isNotationInteractionAvailable()) {
      this._mouseDownSeen = true;
      if (dblClick) {
        // this._view.context.document.undoHistory.openGroupName = 'Select Score';
        this._view.context.controller.selectScore();
      } else {
        const selection = this._view.context.document.selection;
        if (this._view.context.controller.document.editable && selection != null && selection.includes(this._view.measure)) {
          // this._view.context.document.undoHistory.openGroup('Move');
          // new NotationDragMediator(
          //   this._view.context,
          //   this._view.measure,
          //   this.nodeEditorService,
          //   null,
          //   this.handleClick.bind(this)
          // ).handleMouseDown(evt);
        } else {
          // this._view.context.document.undoHistory.openGroup('Select Measures');
          this._view.aboutToBeActive = true;
          new _measure_handle_drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"](this._view.context, this._view, this.nodeEditorService).handleMouseDown(evt);
        }
      }
      evt.stopPropagation();
      this._view.context.documentView.setFocus();
      this._view.showControls();
    } else {
      if (dblClick) {
        this._mouseDownSeen = true;
        // this._view.context.controller.forceStop();
      }
    }
  }

  handleClick(evt) {
    if (this._view.context.controller.isNotationInteractionAvailable() && !this._mouseDownSeen) {
      this._view.context.documentView.setFocus();
      // this._view.context.controller.stop();
      // this._view.context.document.undoHistory.openGroup('Select Measures');
      if (evt.shiftKey) {
        this._view.context.controller.extendMeasureSelection(this._view.measure);
      } else if (evt.ctrlKey) {
        this._view.context.controller.selectScore();
      } else {
        this._view.context.controller.selectMeasure(this._view.measure);
      }
      this._view.showControls();
    }
  }
  handleStatusChange(evt) {
    this._view.updateStatus();
  }
  handleMeasureEdit(evt) {
    switch (evt.kind) {
      case 'addAfter':
        // this._view.context.document.undoHistory.openGroup('Add Measure'),
        this._view.context.controller.insertBlankMeasureAt(evt.measure.index + 1);
        break;
      case 'addBefore':
        // this._view.context.document.undoHistory.openGroup('Add Measure'),
        this._view.context.controller.insertBlankMeasureAt(evt.measure.index);
        break;
      case 'delete':
        // this._view.context.document.undoHistory.openGroup('Delete Measure'),
        this._view.context.controller.selectMeasure(evt.measure);
        this._view.context.controller.deleteSelection();
        break;
      // case MeasureEditEvent.PLAY_BACK:
      //   this._view.context.controller.playFromMeasure(t.measure.index);
      //   break;
      // case MeasureEditEvent.PLAY_LOOP:
      //   this._view.context.controller.playSelection({
      //     loop: true,
      //   });
    }
  }
}

/***/ }),

/***/ 39636:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/controller/object-mediaotr.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ObjectMediator)
/* harmony export */ });
class ObjectMediator {
  constructor(noteEditorService) {
    this._view = null;
    this._mouseDownSeen = false;
    this._lastClickMillis = 0;
    this.noteEditorService = noteEditorService;
  }
  handleViewEvents(t) {
    throw new Error('Not implemented');
  }
  addListeners() {
    if (this._view) {
      this._view._svg.addEventListener('mousedown', this.handleMouseDown);
      this._view._svg.addEventListener('click', this.handleClick);
      if (this._view.notation) {
        // this._view.notation.addEventListener(
        //   NotationEvent.NOTATION_STATUS_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
        // );
        this.statusChangeSub$ = this.noteEditorService.onNotationStatusChange.subscribe(evt => {
          this.handleStatusChange();
        });
      }
    }
  }
  removeListeners() {
    if (this._view) {
      this._view._svg.removeEventListener('mousedown', this.handleMouseDown);
      this._view._svg.removeEventListener('click', this.handleClick);
      if (this._view.notation) {
        // this._view.notation.removeEventListener(
        //   NotationEvent.NOTATION_STATUS_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
        // );
      }
    }
  }
  destroy() {
    this.removeListeners();
  }
  handleStatusChange() {
    this._view.updateStatus();
  }
  handleMouseDown(t) {
    throw new Error('Not implemented');
  }
  handleClick(evt) {
    if (!this._mouseDownSeen && this._view.notation.enabled) {
      var notation = this._view.notation;
      // this._view.context.document.undoHistory.openGroup('Select Notation'),
      this._view.context.controller.selectNotation(notation);
      evt.stopPropagation();
      this._view.context.documentView.setFocus();
    }
  }
}

/***/ }),

/***/ 90865:
/*!************************************************************!*\
  !*** ./src/app/note-editor/controller/score-controller.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreController)
/* harmony export */ });
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _models_arpeggio__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/arpeggio */ 32363);
/* harmony import */ var _models_articulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/articulation */ 78859);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_coda__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/coda */ 32229);
/* harmony import */ var _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/effect-notation */ 4123);
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_interval__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/interval */ 56250);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/model-event-kind */ 21151);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_note_head__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../models/note-head */ 80160);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _models_segno__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../models/segno */ 66000);
/* harmony import */ var _models_span_notation__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../models/span-notation */ 43586);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_tempo__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../models/tempo */ 72620);
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../models/text-notation */ 70240);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _models_trill__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../models/trill */ 42550);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _models_voice__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../models/voice */ 38445);
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _processing_remove_position_range_options__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../processing/remove-position-range-options */ 93781);
/* harmony import */ var _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../processing/rhythm-processor */ 29722);
/* harmony import */ var _utils_dictionary__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../utils/dictionary */ 97837);
/* harmony import */ var _utils_note__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../utils/note */ 7265);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../utils/voice-number */ 12585);














































class ScoreController {
  static get PLAY() {
    return 'play';
  }
  static get RECORD() {
    return 'record';
  }
  static get TRANSCRIBE() {
    return 'transcribe';
  }
  static get CREATE_SYSTEM_BREAK_SET() {
    return 'createSystem';
  }
  static get KEEP_WITH_NEXT_BREAK_SET() {
    return 'keepWithNext';
  }
  get isPaused() {
    return this._isPaused;
  }
  set isPaused(t) {
    this._isPaused = t;
  }
  get isAboutToPlay() {
    return this._isAboutToPlay;
  }
  set isAboutToPlay(t) {
    this._isAboutToPlay = t;
  }
  get score() {
    return this._document.score;
  }
  get title() {
    return this._document.score.title;
  }
  get clipboard() {
    return this._clipboard;
  }
  get performer() {
    return this._performer;
  }
  set performer(t) {
    this._performer = t;
    // todo events
  }

  get isPlaying() {
    return this._performer && this._performer.player;
  }
  get transcriber() {
    return this._transcriber;
  }
  set pausePosition(t) {
    this._pausePosition = t;
  }
  get pausePosition() {
    return this._pausePosition;
  }
  get viewer() {
    return this._viewer;
  }
  set viewer(t) {
    this._viewer = t;
  }
  get parts() {
    return this.score.parts;
  }
  get partToHighlight() {
    return this._partToHighlight;
  }
  set musicFont(t) {
    // this.score.effectiveStaffMetrics.setMusicFont(t);
  }
  // get musicFont() {
  //   return this.score.effectiveStaffMetrics.musicFont;
  // }
  get mediaSyncPlayerFullscreen() {
    return this.score.mediaSyncPlayerFullScreen;
  }
  get isPerformanceMode() {
    return this.performanceMode != null;
  }
  get speedAdjustment() {
    return this.performer.speedAdjustment;
  }
  set speedAdjustment(t) {
    this.performer.speedAdjustment = t;
    // todo
    // this.restartPlayback();
    // this.dispatchMajorNotationAction();
  }

  get selection() {
    return this._document.selection;
  }
  get isMidiRecording() {
    return this._isMidiRecording;
  }
  get document() {
    return this._document;
  }
  set document(t) {
    if (this._document) {
      // todo removeListeners
      // if(this.)
    }
    this._document = t;
    if (this._document != null) {}
    // todo
  }

  get implicitMeasureSelection() {
    if (this.selection == null) {
      return new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, 0, this.score.numMeasures, this.noteEditorService);
    } else {
      return this.selection.selectedMeasures;
    }
  }
  get implicitRangeSelection() {
    if (this.selection == null) {
      return new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, 0, this.score.numMeasures, this.noteEditorService).selectedRange;
    } else {
      return this.selection.selectedRange;
    }
  }
  get temporalMapOffset() {
    if (this.performer.temporalMap) {
      return this.performer.temporalMap.offset;
    } else {
      return 0;
    }
  }
  get lastMeasureIndexWithEntry() {
    return this.score.getSystemStaffMeasureAt(this.performer.lastMeasureIndexWithEntry).measureNumber;
  }
  get selectedNotations() {
    if (this.selection) {
      return this.selection.selectedNotations();
    } else {
      return [];
    }
  }
  get selectedParts() {
    if (this.selection) {
      const selectedParts = [];
      const staves = this.selection.selectedRange.staves;
      for (let i = 0; i < staves.length; i++) {
        const staff = staves[i];
        if (selectedParts.indexOf(staff.part) < 0) {
          selectedParts.push(staff.part);
        }
      }
      return selectedParts;
    } else {
      return null;
    }
  }
  get selectedPart() {
    if (this.selection) {
      if (this.selectedParts == null) {
        return null;
      } else {
        return this.selectedParts[0];
      }
    } else {
      return null;
    }
  }
  get clefSelection() {
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      const objectSelection = this.selection;
      if (objectSelection.selectedObjects.length === 1 && objectSelection.selectedObjects[0] instanceof _models_clef__WEBPACK_IMPORTED_MODULE_7__["default"]) {
        let notation = objectSelection.selectedObjects[0];
        const _notation = notation;
        const measurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](notation.measure.index, notation.position);
        let lastMeasurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](this.score.numMeasures - 1, this.score.systemStaff.getMeasureAt(this.score.numMeasures - 1).duration);
        const isClef = t => t instanceof _models_clef__WEBPACK_IMPORTED_MODULE_7__["default"];
        while (notation) {
          notation = notation.measure.nextNotation(notation.position, isClef, true);
          if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            lastMeasurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](notation.measure.index, notation.position);
            break;
          }
        }
        return new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, measurePosition, lastMeasurePosition, [_notation.measure.staff], this.noteEditorService);
      }
    }
    return this.implicitRangeSelection;
  }
  get disableNotationInteraction() {
    return this._disableNotationInteraction;
  }
  set disableNotationInteraction(v) {
    this._disableNotationInteraction = v;
  }
  get timeSignatureSelection() {
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      if (this.selection.selectedObjects.length === 1 && this.selection.selectedObjects[0] instanceof _models_timesignature__WEBPACK_IMPORTED_MODULE_35__["default"]) {
        const timeSignature = this.selection.selectedObjects[0];
        const measureIndex = timeSignature.measure.index;
        let nextMeasureIndex = +measureIndex + 1;
        while (nextMeasureIndex < this.score.numMeasures && this.score.systemStaff.getMeasureAt(nextMeasureIndex).timeSignature.equals(timeSignature)) {
          nextMeasureIndex++;
        }
        return new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, measureIndex, nextMeasureIndex, this.noteEditorService);
      }
    }
    return this.implicitMeasureSelection;
  }
  get keySignatureSelection() {
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      if (this.selection.selectedObjects.length === 1 && this.selection.selectedObjects[0] instanceof _models_keysignature__WEBPACK_IMPORTED_MODULE_13__["default"]) {
        const keySignature = this.selection.selectedObjects[0];
        const startIndex = +keySignature.measure.index + 1;
        let endIndex = startIndex + 1;
        while (endIndex < this.score.numMeasures && this.score.systemStaff.getMeasureAt(endIndex).keySignature.equals(keySignature)) {
          endIndex++;
        }
        return new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, startIndex, endIndex, this.noteEditorService);
      }
    }
    return this.implicitMeasureSelection;
  }
  constructor(document, performer, user, rootDiv, noteEditorService) {
    this._document = null;
    this._performer = null;
    this._user = null;
    this._clipboard = null;
    this._transcriber = null;
    this.performanceMode = null;
    this._isMidiRecording = false;
    this.isEchoNotesRecordingEnabled = true;
    this._isPaused = false;
    this._pausePosition = null;
    this._isAboutToPlay = false;
    this._viewer = false;
    this.showEndOfPreviewText = false;
    this.showScoreInfo = true;
    this._disableNotationInteraction = false;
    this._partToHighlight = null;
    this.isSyncMediaPlaying = false;
    this._mostRecentPerformance = null;
    this.document = document;
    this._performer = performer;
    this._user = user;
    this.rootDiv = rootDiv;
    this.noteEditorService = noteEditorService;
    this._pausePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](0, 0);
    if (this._performer) {
      // todo
      // this._createPerformerEvents();
    }
  }
  calculateScoreDuration() {
    // if (this.score.synchronizedTrack && !this.score.synchronizedTrack.muted) {
    //   return this.score.synchronizedTrack.temporalMap.getScoreDuration(
    //     this.score
    //   );
    // }
    // const audioableStaves = this.score.audioableStaves;
    // if (audioableStaves.length) {
    //   return this.performer
    //     .renderStaves([audioableStaves[0]])
    //     .scorePositionMap.getScoreDuration(this.score);
    // } else {
    //   return 0;
    // }
    // todo
    return 0;
  }
  setIsAboutToPlayValue(isAboutToPlay) {
    this.isAboutToPlay = isAboutToPlay;
  }
  setPerformanceMode(mode, forceScoreBuild) {
    this.performanceMode = mode;
    switch (mode) {
      case ScoreController.RECORD:
      case ScoreController.TRANSCRIBE:
        const firstSelectedMeasureIdx = this.document.firstSelectedMeasureIndex || 0;
        this.clearSelection();
        // todo
        // this.performanceModeAction(
        //   this.score.firstVisiblePartAtFirstMeasure,
        //   firstSelectedMeasureIdx
        // );
        break;
    }
    // this.document.dispatchEvent(
    //   new ModeEvent(ModeEvent.MODE_CHANGE, mode, forceScoreBuild)
    // );
  }

  isNotationInteractionAvailable() {
    return !this.isPlaying && !this.isPerformanceMode && !this.disableNotationInteraction;
  }
  clearSelection() {
    this.document.selection = null;
  }
  selectRangeForMeasure(measure) {
    if (measure.isSystemMeasure) {
      this.selectMeasure(measure);
    } else {
      this.document.selection = _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].getRangeForMeasure(measure, this.noteEditorService);
      this.setEntryAfterSelection(false);
    }
  }
  selectMeasure(measure) {
    if (this.document.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      const selectedMeasures = this.document.selection.selectedMeasures;
      if (selectedMeasures.startIndex === measure.index && selectedMeasures.endIndex === measure.index + 1) {
        return;
      }
    }
    this.document.selection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, measure.index, measure.index + 1, this.noteEditorService);
    this.setEntryAfterSelection(false);
  }
  selectStaff(staff) {
    this.document.selection = _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].selectStaff(staff, this.noteEditorService);
    this.setEntryAfterSelection(false);
  }
  setEntryAfterSelection(entryAfterSelection) {
    this.document.entryAfterSelection = entryAfterSelection;
    this.checkEagerMeasureAppend();
  }
  checkEagerMeasureAppend() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet && this.document.entryAfterSelection && firstSelectedNoteSet.measure.index === this.score.numMeasures - 1 && Math.round(firstSelectedNoteSet.position + firstSelectedNoteSet.duration) === Math.round(firstSelectedNoteSet.measure.duration)) {
      const measure = this.score.insertBlankMeasureAt(this.score.numMeasures);
      this.document.handleModelChange({
        parent: measure.parent,
        child: measure,
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.ADD_CHILD_MODEL
      });
    }
  }
  selectNotation(notation, doubleClickAndEditable = true) {
    if (notation) {
      if (notation.measure) {
        this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [notation], this.noteEditorService);
      }
      if (doubleClickAndEditable) {
        this.setEntryAfterSelection(false);
      }
    } else {
      this.document.selection = null;
    }
  }
  extendRangeToMeasure(measure) {
    if (this.selection == null || this.selection.empty) {
      this.selectMeasure(measure);
    } else if (measure.isSystemMeasure) {
      this.extendMeasureSelection(measure);
    } else {
      this.document.selection = this.selection.withMeasure(measure);
      this.setEntryAfterSelection(false);
    }
  }
  extendMeasureSelection(measure) {
    if (this.selection == null || this.selection.empty) {
      this.selectMeasure(measure);
    } else {
      this.document.selection.selectedMeasures.withMeasure(measure);
      this.setEntryAfterSelection(false);
    }
  }
  addNoteToNoteSet(note, noteSet, echo) {
    if (this.isFullMeasureNotation(noteSet)) {
      noteSet = this.removeFullMeasureNotation(noteSet);
    }
    // console.trace();
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet && !firstSelectedNoteSet.grace && !this.isFullMeasureNotation(firstSelectedNoteSet)) {
      noteSet = this.changeNoteSetValue(noteSet, firstSelectedNoteSet.value, firstSelectedNoteSet.dots);
      noteSet.color = firstSelectedNoteSet.color;
    }
    this.doAddNoteToNoteSet(note, noteSet, echo);
  }
  doAddNoteToNoteSet(note, noteSet, echo) {
    const articulation = noteSet.measure.effectiveClef.mapNoteAndArticulation(note);
    if (note.noteHead == null) {
      note.noteHead = this.defaultNoteHead(noteSet, note.pitch);
    }
    const defaultBeamEnabled = noteSet.defaultBeamEnabled;
    noteSet.addNote(note);
    const measure = noteSet.measure;
    measure._accidentalCleanup = Math.min(measure._accidentalCleanup, noteSet.position);
    measure._stringAssignmentCleanup = measure._liaisonCleanup = measure._restCleanup = true;
    if (articulation != null) {
      noteSet.addArticulation(articulation);
    }
    if (noteSet.defaultBeamEnabled != defaultBeamEnabled) {
      noteSet.defaultBeaming();
    }
    // this.selectNotation(note, false);
    this.selectNotation(null);
    this.setEntryAfterSelection(false);
    this.document.handleModelChange({
      kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.ADD_CHILD_MODEL,
      child: noteSet,
      parent: noteSet.parent
    });
    // console.trace();
    if (echo) {
      this.echoSelectedNotes();
    }
  }
  echoSelectedNotes() {
    //todo
  }
  defaultNoteHead(noteSet, pitch) {
    return noteSet.measure.effectiveClef.defaultNoteHead(pitch);
  }
  changeNoteSetValue(noteSet, newValue, dots) {
    if (noteSet.value == newValue && noteSet.dots == dots) {
      return noteSet;
    }
    if (noteSet.grace) {
      noteSet.value = newValue;
      noteSet.dots = dots;
      return noteSet;
    }
    let newNoteSet,
      rhythmContext = noteSet.rhythmContext;
    if (rhythmContext.getDuration(noteSet.rhythmPosition + _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].valueToDuration(newValue, dots)) > rhythmContext.duration) {
      return noteSet;
    }
    newNoteSet = this.isFullMeasureNotation(noteSet) ? new _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet() : noteSet.clone();
    newNoteSet.clearTies();
    newNoteSet.value = Math.max(0, Math.min(_models_notation_value__WEBPACK_IMPORTED_MODULE_23__.NotationValue.BREVE, newValue));
    newNoteSet.dots = dots;
    if (rhythmContext instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_37__["default"] && newNoteSet.rhythmPosition === 0 && newNoteSet.rhythmDuration == rhythmContext.timeSignature.meterDuration) {
      const tuplet = rhythmContext;
      rhythmContext = tuplet.rhythmContext;
      rhythmContext.removeElement(tuplet);
      newNoteSet.rhythmPosition = tuplet.rhythmPosition;
      newNoteSet.rhythmDuration = tuplet.rhythmDuration;
      rhythmContext.addElement(newNoteSet);
      return newNoteSet;
    }
    const rhythmDuration = Math.max(noteSet.rhythmDuration, newNoteSet.rhythmDuration);
    const rhythmProcessor = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](rhythmContext);
    const removePositionRangeOptions = new _processing_remove_position_range_options__WEBPACK_IMPORTED_MODULE_41__["default"]();
    removePositionRangeOptions.filter = notation => {
      return !(notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_30__["default"] || notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notation.grace && notation.rhythmPosition == noteSet.rhythmPosition);
    };
    rhythmProcessor.removePositionRange(noteSet.rhythmPosition, rhythmDuration, removePositionRangeOptions);
    rhythmContext.addElement(newNoteSet);
    // console.trace();
    rhythmProcessor.addRests();
    newNoteSet.defaultBeaming();
    return newNoteSet;
  }
  isFullMeasureNotation(notation) {
    return notation instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"] || notation instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"];
  }
  removeFullMeasureNotation(notation) {
    if (notation instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"]) {
      return this.removeTacet(notation);
    } else if (notation instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"]) {
      return this.removeMeasureRepeat(notation);
    }
    return null;
  }
  removeTacet(tacet) {
    const measure = tacet.measure;
    measure.removeElement(tacet);
    const noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet(0, null, measure.timeSignature.beatValue, 0);
    measure.addElement(noteSet, tacet.lastVoiceNumber);
    measure.addRests();
    return noteSet;
  }
  removeMeasureRepeat(measureRepeat, addTacet) {
    const measure = measureRepeat.measure;
    measure.removeElement(measureRepeat);
    let noteSet;
    if (addTacet) {
      const voiceNumber = measure.getVoiceNumber(0, true);
      const tacet = new _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"]();
      voiceNumber.addElement(tacet);
      this.selectNotation(tacet);
    } else {
      noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet(0, null, measure.timeSignature.beatValue, 0);
      measure.addElement(noteSet, measureRepeat.lastVoiceNumber);
      measure.addRests();
    }
    return noteSet;
  }
  selectTuplet(tuplet) {
    if (tuplet != null) {
      const measure = tuplet.measure;
      this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](measure.index, tuplet.position), new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](measure.index, tuplet.position + tuplet.duration), [measure.staff], this.noteEditorService);
    }
  }
  selectScore() {
    this.document.selection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, 0, this.score.numMeasures, this.noteEditorService);
    this.setEntryAfterSelection(false);
  }
  setLayoutWeight(measure, weight) {
    measure.layoutWeight = weight;
  }
  transposeSelectionChromatic(pitches) {
    if (this.ensureSelection()) {
      if (this.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && this.document.selection.selectedObjects[0] instanceof _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation) {
        const direction = pitches > 0 ? _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_UP : _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_DOWN;
        this.adjustEffect(this.document.selection.selectedObjects[0], direction);
      } else {
        const firstSelectedNote = this.document.firstSelectedNote;
        if (firstSelectedNote != null) {
          const step = pitches > 0 ? 1 : -1;
          const alterationABS = Math.floor(Math.abs(pitches));
          const note = firstSelectedNote.clone();
          let steps = 0;
          for (let idx = 0; idx < alterationABS; idx++) {
            const transposedNote = note.transposeDiatonic(step);
            transposedNote.pitch = transposedNote.pitch.transpose(firstSelectedNote.measure.keySignature.getAlteration(transposedNote.step));
            note.pitch = note.pitch.transpose(step);
            if (step > 0 && (note.alteration >= 2 || note.pitch.ordinal >= transposedNote.pitch.ordinal)) {
              note.step = (note.step + 1) % 7;
              steps++;
            } else if (step < 0 && (note.alteration <= -2 || note.pitch.ordinal <= transposedNote.pitch.ordinal)) {
              note.step = (note.step - 1 + 7) % 7;
              steps--;
            }
          }
          const that = this;
          this.applyToNotes(function (note) {
            if (note.playable && !note.measure.effectiveClef.unpitched) {
              const transposedNote = note.transposeInterval(new _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"](steps, pitches));
              note.step = transposedNote.step;
              note.pitch = transposedNote.pitch;
              note.explicitAccidental = note.courtesyAccidental = false;
              note.fret = -1;
              that.document.invalidateModelParent(note, null);
            }
          });
          this.echoSelectedNotes();
        }
      }
    }
  }
  adjustEffect(firstSelectedObj, direction) {
    Math.sign(firstSelectedObj.shift);
    const placement = _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.PLACEMENT_BY_TYPE[firstSelectedObj.type];
    const effectAdjustDelta = this.score.staffMetrics.effectAdjustDelta;
    let shift = 0;
    switch (direction) {
      case _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_LEFT:
        shift = Math.round(2 * firstSelectedObj.shift - 1) * effectAdjustDelta;
        placement == _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.PRE_EFFECT ? firstSelectedObj.shift = shift : firstSelectedObj.shift = Math.max(0, shift);
        break;
      case _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_RIGHT:
        shift = Math.round(2 * firstSelectedObj.shift + 1) * effectAdjustDelta;
        placement == _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.POST_EFFECT ? firstSelectedObj.shift = shift : firstSelectedObj.shift = Math.min(0, shift);
        break;
      case _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_UP:
        firstSelectedObj.ascent = Math.round(2 * firstSelectedObj.ascent - 1) * effectAdjustDelta;
        break;
      case _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_DOWN:
        firstSelectedObj.ascent = Math.round(2 * firstSelectedObj.ascent + 1) * effectAdjustDelta;
    }
  }
  applyToNotes(noteFunc, compareFunc = null) {
    let notes = [];
    for (let i = 0; i < this.selectedNotations.length; i++) {
      const notation = this.selectedNotations[i];
      if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
        notes.push(notation);
      } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        notes = notes.concat(notation.notes);
      }
    }
    if (compareFunc != null) {
      notes.sort(compareFunc);
    }
    for (let i = 0; i < notes.length; i++) {
      const note = notes[i];
      noteFunc(note);
    }
  }
  ensureSelection() {
    if (this.selection == null) {
      return false;
    }
    return true;
  }
  undo() {
    this._document.undo();
  }
  stepSelectionDuration(delta) {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      while (delta > 0) {
        firstSelectedNoteSet = this.document.firstSelectedNoteSet;
        if (firstSelectedNoteSet.dots > 0) {
          this.adjustSelectionDuration(1, true);
        } else {
          this.adjustSelectionDuration(0, true);
        }
        delta--;
      }
      while (delta < 0) {
        firstSelectedNoteSet = this.document.firstSelectedNoteSet;
        if (firstSelectedNoteSet.dots > 0) {
          this.adjustSelectionDuration(0, true);
        } else {
          this.adjustSelectionDuration(-1, true);
        }
        delta++;
      }
    }
  }
  setSelectionDuration(value, dots) {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet) {
      if (this.isFullMeasureNotation(firstSelectedNoteSet)) {
        firstSelectedNoteSet = this.removeFullMeasureNotation(firstSelectedNoteSet);
      }
      firstSelectedNoteSet = this.changeNoteSetValue(firstSelectedNoteSet, value, dots);
      this.selectNotation(firstSelectedNoteSet, false);
    }
  }
  adjustSelectionDuration(delta, toggleDots) {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      if (this.isFullMeasureNotation(firstSelectedNoteSet)) {
        this.selectNotation(this.removeFullMeasureNotation(firstSelectedNoteSet));
        return;
      }
      let value = firstSelectedNoteSet.value + delta;
      if (value < _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].MIN_NOTATION_VALUE || value > _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].MAX_NOTATION_VALUE) {
        return;
      }
      if (value == _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].MIN_NOTATION_VALUE) {
        toggleDots = false;
      }
      firstSelectedNoteSet = this.changeNoteSetValue(firstSelectedNoteSet, firstSelectedNoteSet.value + delta, toggleDots ? 1 == firstSelectedNoteSet.dots ? 0 : 1 : 0);
      this.selectNotation(firstSelectedNoteSet, false);
      this.checkEagerMeasureAppend();
      // this.dispatchMajorNotationAction(); todo
    }
  }

  moveSelection(measureIndex, position, ctrlKey, staff) {
    if (this._document.selection != null && !this._document.selection.empty) {
      if (this._document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        const objectSelection = this._document.selection;
        if (objectSelection != null && objectSelection.selectedObjects.length === 1) {
          const selectedObj = objectSelection.selectedObjects[0];
          if (selectedObj instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
            this.selectNotation(selectedObj.noteSet);
          } else if (selectedObj instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
            if (selectedObj.notes.length === 0) {
              this.selectNotationRange(selectedObj);
            }
          }
        }
      }
    }
  }
  selectNotationRange(notation) {
    if (this.selection == null || this.selection.empty) {
      this.document.selection = _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].getRangeForNotation(notation, this.noteEditorService);
      this.setEntryAfterSelection(false);
      return;
    }
    if (this.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      this.modifyNotationSelection(notation);
    } else {
      this.document.selection = this.selection.selectedRange.union(_document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].getRangeForNotation(notation, this.noteEditorService));
      this.setEntryAfterSelection(false);
    }
  }
  modifyNotationSelection(notation) {
    if (this.selection == null || this.selection.empty) {
      this.selectNotation(notation);
    } else if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      if (this.selection.contains(notation)) {
        this._document.deselect(new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [notation], this.noteEditorService));
      } else if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note && this.selection.contains(notation.noteSet) && notation.noteSet.notes.length === 1) {
        this.document.deselect(new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [notation.noteSet], this.noteEditorService));
      } else {
        this._document.select(new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [notation], this.noteEditorService));
      }
    } else if (this.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      this.document.selection = this.selection.withRange(notation.measure.index, notation.measure.index + 1);
    } else if (this.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"] && notation.valueNotation != null) {
      this.document.selection = this.selection.union(_document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].getRangeForNotation(notation.valueNotation, this.noteEditorService));
    }
    this.setEntryAfterSelection(false);
  }
  transposeSelectionDiatonic(step) {
    if (this.ensureSelection()) {
      let noteHeadAssigned = false;
      const that = this;
      this.applyToNotes(function (note) {
        if (note.playable) {
          const transposedNote = note.transposeDiatonic(step);
          note.pitch = transposedNote.pitch.transpose(note.measure.effectiveScoreAlteration(note.noteSet.position, transposedNote, note.noteSet.voiceNumber));
          note.step = transposedNote.step;
          note.accidental = null;
          note.explicitAccidental = note.courtesyAccidental = false;
          note.fret = -1;
          const defaultNoteHead = that.defaultNoteHead(note.noteSet, note.pitch);
          if (defaultNoteHead != null) {
            note.noteHead = defaultNoteHead;
          }
          noteHeadAssigned = true;
          that.document.invalidateModelParent(note, null);
        }
      });
      if (noteHeadAssigned) {
        this.echoSelectedNotes();
      } else {
        this.applyToNotes(function (note) {
          if (!note.playable) {
            const transposedNote = note.transposeDiatonic(step);
            note.pitch = transposedNote.pitch.transpose(note.measure.effectiveAlteration(note.noteSet.position, transposedNote, note.noteSet.voiceNumber));
            note.step = transposedNote.step;
            that.document.invalidateModelParent(note, null);
          }
        });
        this.applyToNotes(function (noteSet) {
          if (noteSet.notes.length === 0) {
            noteSet.dy = 0.5 * Math.round(2 * noteSet.dy + step);
            noteSet.explicitRestY = false;
          }
        });
        this.nudgeSelection(step < 0 ? _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_DOWN : _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_UP);
      }
    }
    // this.dispatchMajorNotationAction();
  }

  nudgeSelection(notationDirection) {
    // this.checkEditMarkingPeAnaryticsEventiAnalyticsEvention()
  }
  selectPreviousNoteSet(echo) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let previousNoteSet = firstSelectedNoteSet.previousNoteSet(true, true);
      if (previousNoteSet == null) {
        previousNoteSet = firstSelectedNoteSet.previousNoteSetAnyVoice(true);
      }
      if (previousNoteSet != null) {
        this.selectNotation(previousNoteSet);
        if (echo) {
          this.echoSelectedNotes();
        }
      }
    }
  }
  selectNextNoteSet(echo) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let nextNoteSet = firstSelectedNoteSet.nextNoteSet(true, true);
      if (nextNoteSet == null) {
        nextNoteSet = firstSelectedNoteSet.nextNoteSetAnyVoice(true);
      }
      if (nextNoteSet != null) {
        this.selectNotation(nextNoteSet);
        if (echo) {
          this.echoSelectedNotes();
        }
      }
    }
  }
  selectionLeft() {
    let lastSelectedNoteSet, lastSelectedPreviousNoteSet;
    if (this.document.selection != null) {
      if (this.document.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"] && this.document.selection.direction === _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_RIGHT) {
        lastSelectedNoteSet = this.document.lastSelectedNoteSet;
        lastSelectedPreviousNoteSet = lastSelectedNoteSet.previousNoteSet(true);
        if (lastSelectedPreviousNoteSet == null) {
          lastSelectedPreviousNoteSet = lastSelectedNoteSet.previousNoteSetAnyVoice(true);
        }
        if (lastSelectedPreviousNoteSet != null && lastSelectedPreviousNoteSet.measurePosition.compareTo(this.selection.selectedRange.start) > 0) {
          this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, this.selection.selectedRange.start, lastSelectedPreviousNoteSet.endPosition, this.selection.selectedRange.staves, this.noteEditorService, _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_RIGHT);
        } else {
          this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [lastSelectedPreviousNoteSet], this.noteEditorService);
        }
      } else {
        if (this.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && this.document.selection.selectedObjects[0] instanceof _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation) {
          this.adjustEffect(this.document.selection.selectedObjects[0], _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_LEFT);
          return;
        }
        lastSelectedNoteSet = this.document.firstSelectedNoteSet;
        lastSelectedPreviousNoteSet = lastSelectedNoteSet.previousNoteSet(true);
        if (lastSelectedPreviousNoteSet == null) {
          lastSelectedPreviousNoteSet = lastSelectedNoteSet.previousNoteSetAnyVoice(true);
        }
        if (lastSelectedPreviousNoteSet != null) {
          this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, lastSelectedPreviousNoteSet.measurePosition, this.selection.selectedRange.end, this.selection.selectedRange.staves, this.noteEditorService, _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_LEFT);
        }
      }
      this.setEntryAfterSelection(false);
    }
  }
  selectionRight() {
    let firstSelectedNoteSet, firstSelectedNextNoteSet;
    if (this.document.selection != null) {
      if (this.document.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"] && this.document.selection.direction === _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_LEFT) {
        firstSelectedNoteSet = this.document.firstSelectedNoteSet;
        firstSelectedNextNoteSet = firstSelectedNoteSet.nextNoteSet(true);
        if (firstSelectedNextNoteSet == null) {
          firstSelectedNextNoteSet = firstSelectedNoteSet.nextNoteSetAnyVoice(true);
        }
        if (firstSelectedNextNoteSet != null && firstSelectedNextNoteSet.endPosition.compareTo(this.selection.selectedRange.end) < 0) {
          this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, firstSelectedNextNoteSet.measurePosition, this.selection.selectedRange.end, this.selection.selectedRange.staves, this.noteEditorService, _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_LEFT);
        } else {
          this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [firstSelectedNextNoteSet], this.noteEditorService);
        }
      } else {
        if (this.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && this.document.selection.selectedObjects[0] instanceof _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation) {
          this.adjustEffect(this.document.selection.selectedObjects[0], _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_RIGHT);
          return;
        }
        firstSelectedNoteSet = this.document.lastSelectedNoteSet;
        firstSelectedNextNoteSet = firstSelectedNoteSet.nextNoteSet(true);
        if (firstSelectedNextNoteSet == null) {
          firstSelectedNextNoteSet = firstSelectedNoteSet.nextNoteSetAnyVoice(true);
        }
        if (firstSelectedNextNoteSet != null) {
          this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, this.selection.selectedRange.start, firstSelectedNextNoteSet.endPosition, this.selection.selectedRange.staves, this.noteEditorService, _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"].DIRECTION_RIGHT);
        }
      }
      this.setEntryAfterSelection(false);
    }
  }
  selectPreviousNoteOnString() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let previousNoteSet = firstSelectedNoteSet.previousNoteSet(true, true);
      if (previousNoteSet == null) {
        previousNoteSet = firstSelectedNoteSet.previousNoteSetAnyVoice(true);
      }
      if (previousNoteSet != null) {
        if (previousNoteSet.noteOnString(this.document.stringIndex) != null) {
          this.selectNotation(previousNoteSet.noteOnString(this.document.stringIndex));
          this.echoSelectedNotes();
        } else {
          this.selectNotation(previousNoteSet);
        }
      }
    }
  }
  selectNextNoteOnString() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let nextNoteSet = firstSelectedNoteSet.nextNoteSet(true, true);
      if (nextNoteSet == null) {
        nextNoteSet = firstSelectedNoteSet.nextNoteSetAnyVoice(true);
      }
      if (nextNoteSet != null) {
        if (nextNoteSet.noteOnString(this.document.stringIndex) != null) {
          this.selectNotation(nextNoteSet.noteOnString(this.document.stringIndex));
          this.echoSelectedNotes();
        } else {
          if (nextNoteSet.notes.length === 0 && nextNoteSet.rhythmDuration > firstSelectedNoteSet.rhythmDuration) {
            this.prepareEntryAfterSelection();
          }
          this.selectNotation(nextNoteSet);
        }
      } else {
        this.score.insertMeasureAfter(firstSelectedNoteSet);
        this.selectNextNoteSet(false);
      }
    }
  }
  prepareEntryAfterSelection() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      if (firstSelectedNoteSet.nextNoteSet(true) == null) {
        this.score.insertMeasureAfter(firstSelectedNoteSet);
      }
      this.selectNextNoteSet(false);
      if (this.isFullMeasureNotation(firstSelectedNoteSet) || firstSelectedNoteSet.grace) {
        const nextNoteSet = this.document.firstSelectedNoteSet;
        if (nextNoteSet != null) {
          nextNoteSet.removeAllChildren();
        }
      } else {
        this.convertSelectionToRest(firstSelectedNoteSet.value, firstSelectedNoteSet.dots);
      }
    }
  }
  convertSelectionToRest(value, dots) {
    this.applyToNoteSets(noteSet => {
      while (noteSet.notes.length > 0) {
        noteSet.removeNote(noteSet.getNoteAt(0));
        noteSet.removeAllAnnotations();
      }
      this.selectNotation(this.changeNoteSetValue(noteSet, value, dots));
    });
  }
  applyToNoteSets(callback) {
    const dictionary = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_43__["default"]();
    for (let i = 0; i < this.selectedNotations.length; i++) {
      const notation = this.selectedNotations[i];
      if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
        dictionary.put(notation.noteSet, true);
      } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        dictionary.put(notation, true);
      }
    }
    for (const noteSet of dictionary.map.keys()) {
      callback(noteSet);
    }
  }
  enterStepAtSelection(stepNameIdx, echo) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let firstNote = null;
      if (firstSelectedNoteSet.notes.length > 0) {
        firstNote = firstSelectedNoteSet.getNoteAt(0);
      }
      this.prepareEntryAfterSelection();
      this.doAddStepToSelection(stepNameIdx, firstNote, null, firstSelectedNoteSet.color, true, echo);
    }
  }
  doAddStepToSelection(stepNameIdx, selectedNote = null, noteHead = null, color = 0, transpose, echo) {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null && (!this.isFullMeasureNotation(firstSelectedNoteSet) || (firstSelectedNoteSet = this.removeFullMeasureNotation(firstSelectedNoteSet)) != null)) {
      if (selectedNote == null && this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        const selectedObjects = this.selection.selectedObjects;
        if (selectedObjects.length === 1 && selectedObjects[0] instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
          selectedNote = selectedObjects[0];
        }
      }
      if (selectedNote == null) {
        const prevNoteSet = firstSelectedNoteSet.measure.previousNotation(firstSelectedNoteSet.position, notation => {
          return notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notation.notes.length > 0 && (firstSelectedNoteSet.voiceNumber < 0 || notation.voiceNumber < 0 || notation.voiceNumber == firstSelectedNoteSet.voiceNumber);
        }, true);
        if (prevNoteSet != null) {
          selectedNote = prevNoteSet.getNoteAt(0);
        } else {
          selectedNote = firstSelectedNoteSet.measure.effectiveClef.note.clone();
          selectedNote.pitch = selectedNote.pitch.transpose(0 | 12 * -Math.round(firstSelectedNoteSet.measure.scoreInterval.pitches / 12));
        }
      }
      if (transpose) {
        for (stepNameIdx -= firstSelectedNoteSet.measure.scoreInterval.steps; stepNameIdx < 0;) {
          stepNameIdx += 7;
        }
        while (stepNameIdx >= 7) {
          stepNameIdx -= 7;
        }
      }
      const pitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_40__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_40__["default"].STEP_PITCH_CLASSES[stepNameIdx], 0);
      let note = new _models_note__WEBPACK_IMPORTED_MODULE_24__.Note(pitch);
      while (note.diatonicOrdinal - selectedNote.diatonicOrdinal > 3) {
        note.pitch = note.pitch.transpose(-12);
      }
      while (note.diatonicOrdinal - selectedNote.diatonicOrdinal < -3) {
        note.pitch = note.pitch.transpose(12);
      }
      note = note.alter(firstSelectedNoteSet.measure.effectiveScoreAlteration(firstSelectedNoteSet.position, note, firstSelectedNoteSet.voiceNumber));
      note.noteHead = noteHead;
      note.color = color;
      this.doAddNoteToNoteSet(note, firstSelectedNoteSet, echo);
      this.setEntryAfterSelection(true);
    }
  }
  placeStepAtSelection(stepNameIdx, echo) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let firstNote = null;
      if (firstSelectedNoteSet.notes.length > 0) {
        firstNote = firstSelectedNoteSet.getNoteAt(0);
      }
      this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [firstSelectedNoteSet], this.noteEditorService);
      firstSelectedNoteSet.removeNotes();
      this.doAddStepToSelection(stepNameIdx, firstNote, null, 0, true, echo);
    }
  }
  modifyArpeggio(arpeggio) {
    if (this.document.firstSelectedNoteSet) {
      this.applyToNoteSets(function (noteSet) {
        if (noteSet.notes.length > 1) {
          noteSet.arpeggio = arpeggio;
        } else if (noteSet.notes.length === 1 && noteSet.arpeggio == null) {
          noteSet.arpeggio = _models_arpeggio__WEBPACK_IMPORTED_MODULE_3__.ARPEGGIO.NORMAL;
        } else {
          noteSet.arpeggio = null;
        }
      });
    }
  }
  modifyGrace(appoggiatura) {
    const firstSelectedNoteSet = this._document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      if (firstSelectedNoteSet.numChildren === 0) {
        this.noteEditorService.notify('Error', "You can''t turn a rest into a grace note.");
        console.error("You can''t turn a rest into a grace note.");
        return;
      }
      if (firstSelectedNoteSet.grace) {
        if (firstSelectedNoteSet.appoggiatura != appoggiatura) {
          firstSelectedNoteSet.appoggiatura = appoggiatura;
        } else {
          this.noteEditorService.notify('Error', 'The selected note is already a grace note.');
          console.error('The selected note is already a grace note.');
        }
        return;
      }
      const noteset = firstSelectedNoteSet.clone();
      noteset.dots = 0;
      noteset.tremolo = 0;
      noteset.grace = true;
      noteset.appoggiatura = appoggiatura;
      if (!appoggiatura) {
        noteset.value = _models_notation_value__WEBPACK_IMPORTED_MODULE_23__.NotationValue.EIGHTH;
      }
      firstSelectedNoteSet.rhythmContext.addElementAt(noteset, firstSelectedNoteSet.index);
      firstSelectedNoteSet.removeAllChildren();
      const previousGraceNote = noteset.previousGraceNote;
      if (previousGraceNote != null) {
        previousGraceNote.defaultBeaming();
      }
      this.selectNotation(firstSelectedNoteSet);
    }
  }
  addStepToSelection(stepNameIdx, echo) {
    this.doAddStepToSelection(stepNameIdx, null, null, 0, true, echo);
  }
  addSpanToSelection(spanNotation) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const selectedRange = this.selection.selectedRange;
      let duration = selectedRange.duration;
      if (!(this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) || this.selection.selectedNotations().length != 1 || spanNotation instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        duration = 0 | Math.max(1, duration - 1);
      }
      let notation;
      const voiceNumber = selectedRange.staves.length == 1 ? firstSelectedNoteSet.voiceNumber : 0;
      spanNotation.span = duration;
      spanNotation.rhythmPosition = selectedRange.start.position;
      spanNotation.includeGrace = firstSelectedNoteSet.grace || firstSelectedNoteSet.previousGraceNote != null;
      let dy;
      for (let i = 0; i < selectedRange.staves.length; i++) {
        const staff = selectedRange.staves[i];
        notation = spanNotation.clone();
        notation.requiresDefaultInfo = true;
        staff.getMeasureAt(selectedRange.start.measureIndex).addElement(notation, voiceNumber);
        if (notation instanceof _models_line_notation__WEBPACK_IMPORTED_MODULE_15__["default"]) {
          if (notation instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_21__["default"]) {
            dy = firstSelectedNoteSet.measure.effectiveClef.staffHeight / 2;
          } else if (notation.defaultPositionAboveStaff(staff)) {
            dy = firstSelectedNoteSet.measure.effectiveClef.staffHeight + this.document.score.effectiveStaffMetrics.lineNotationDistanceAboveStaff;
          } else {
            dy = this.document.score.effectiveStaffMetrics.lineNotationDistanceBelowStaff;
          }
          notation.dy = dy;
        }
        if (notation instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_11__["default"]) {
          if (staff.part.directionsAboveStaff) {
            dy = this.document.score.effectiveStaffMetrics.hairpinExpressionPaddingTop;
            notation.dy = dy;
          }
          let isLast;
          const expressionPositions = selectedRange.objectSelection.selectedObjects.filter(t => t instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_10__["default"]).map(t => [t.measurePosition.measureIndex, t.measurePosition.position]);
          const lastSelectedNoteSet = this.document.lastSelectedNoteSet;
          if (expressionPositions.length > 0) {
            for (let idx = 0; idx < expressionPositions.length; idx++) {
              const expressionPosition = expressionPositions[idx];
              const measureIdx = expressionPosition[0];
              const position = expressionPosition[1];
              if (measureIdx === lastSelectedNoteSet.measurePosition.measureIndex && position === lastSelectedNoteSet.measurePosition.position) {
                isLast = true;
                break;
              }
              isLast = false;
            }
          }
          if (isLast && lastSelectedNoteSet != this.document.firstSelectedNoteSet) {
            notation.span -= lastSelectedNoteSet.duration;
          }
        }
        if (notation instanceof _models_trill__WEBPACK_IMPORTED_MODULE_36__["default"]) {
          notation.recalculateInterval();
        }
      }
      this.modifyNotationSelection(notation);
    }
  }
  filterSelection(filterType) {
    if (this.ensureSelection()) {
      let notations = [];
      for (let i = 0; i < this.selectedNotations.length; i++) {
        const notation = this.selectedNotations[i];
        let matchFilter = false;
        switch (filterType) {
          case 'filterChords':
            matchFilter = notation instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_6__["default"];
            break;
          case 'filterExpressions':
            matchFilter = notation instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_10__["default"];
            break;
          case 'filterPerformance':
            matchFilter = notation instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_27__["default"];
            break;
          case 'filterNotes':
            if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
              if (notation.notes.length > 0) {
                notations = notations.concat(notation.notes);
              } else {
                notations.push(notation);
              }
            }
            matchFilter = notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note;
            break;
          case 'filterNotesAndLyrics':
            if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
              notations.push(notation.noteSet);
            }
            matchFilter = notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet;
            break;
          case 'filterLyrics':
            if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
              notations = notations.concat(notation.lyrics);
            } else if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
              notations = notations.concat(notation.noteSet.lyrics);
            }
            matchFilter = notation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_16__["default"];
            break;
          case 'filterSpans':
            matchFilter = notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_30__["default"];
            break;
          case 'filterVoice0':
            matchFilter = notation.voiceNumber === 0;
            break;
          case 'filterVoice1':
            matchFilter = notation.voiceNumber === 1;
            break;
        }
        if (matchFilter) {
          notations.push(notation);
        }
      }
      if (notations.length > 0) {
        this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, notations, this.noteEditorService);
      } else {
        this.document.selection = null;
      }
    }
  }
  selectVoice(useUpperVoice) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null && !(firstSelectedNoteSet instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"])) {
      const numVoice = useUpperVoice ? 0 : 1;
      const measure = firstSelectedNoteSet.measure;
      if (measure.numVoices > 1) {
        let noteset = null;
        const notations = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](measure.getVoiceNumber(numVoice)).getNotations();
        for (let i = 0; i < notations.length; i++) {
          const notation = notations[i];
          if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notation.position <= firstSelectedNoteSet.position) {
            noteset = notation;
          }
          if (notation.position > firstSelectedNoteSet.position) {
            break;
          }
        }
        this.selectNotation(noteset, true);
      } else {
        const voice = new _models_voice__WEBPACK_IMPORTED_MODULE_39__["default"]();
        measure.addChildAt(voice, 0 | numVoice + 1);
        const tacet = new _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"]();
        voice.addElement(tacet);
        this.selectNotation(tacet, true);
      }
    }
  }
  removeSelectedVoice() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const measure = firstSelectedNoteSet.measure;
      if (measure.numVoices >= 2) {
        measure.removeVoiceNumber(firstSelectedNoteSet.voiceNumber);
      }
    }
  }
  createTuplet(rhythmUnits) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet == null) return null;
    if (firstSelectedNoteSet.grace) {
      console.error('You cannot create a tuplet on a grace note. Create the tuplet on a main note first.');
      return null;
    }
    let noteSet;
    const measure = firstSelectedNoteSet.measure;
    const selectedRange = this.document.selection.selectedRange;
    if (firstSelectedNoteSet.rhythmContext instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_37__["default"] && firstSelectedNoteSet.rhythmPosition === 0 && firstSelectedNoteSet.rhythmContext.rhythmUnits == rhythmUnits && selectedRange.start.measureIndex === measure.index && Math.round(selectedRange.start.position) === Math.round(Math.round(firstSelectedNoteSet.rhythmContext.position)) && selectedRange.end.measureIndex == measure.index && Math.round(selectedRange.end.position) === Math.round(firstSelectedNoteSet.position + firstSelectedNoteSet.rhythmContext.duration)) {
      const tuplet = firstSelectedNoteSet.rhythmContext;
      const rhythmContext = tuplet.rhythmContext;
      const noteset = new _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet(tuplet.rhythmPosition, firstSelectedNoteSet.notes, _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].durationToValue(tuplet.rhythmDuration));
      if (tuplet.units === 3) {
        noteset.dots = 1;
      } else if (tuplet.units === 7) {
        noteset.dots = 2;
      }
      rhythmContext.removeElement(tuplet);
      rhythmContext.addElement(noteset);
      new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](rhythmContext).addRests();
      this.selectNotation(noteset);
      return null;
    }
    if (this.isFullMeasureNotation(firstSelectedNoteSet)) {
      noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet(0, [], measure.timeSignature.beatValue);
      if (firstSelectedNoteSet.measure.timeSignature.triple && (rhythmUnits == 2 || rhythmUnits == 4)) {
        noteSet.value++;
        noteSet.dots = 1;
      }
    } else {
      noteSet = firstSelectedNoteSet.clone();
      noteSet.rhythmPosition = 0;
      noteSet.clearTies();
    }
    let noteSetValue = noteSet.value;
    while (noteSetValue < _models_value_notation__WEBPACK_IMPORTED_MODULE_38__["default"].MAX_NOTATION_VALUE && rhythmUnits * (1 << noteSetValue) / noteSet.rhythmDuration < 1) {
      noteSetValue++;
    }
    while (noteSetValue > 0 && rhythmUnits * (1 << noteSetValue) / noteSet.rhythmDuration >= 2) {
      noteSetValue--;
    }
    if (rhythmUnits * (1 << noteSetValue) == noteSet.rhythmDuration) {
      console.error(`The selection can already be divided into ${rhythmUnits} notes without a tuplet.`);
      this.noteEditorService.notify('Error', `The selection can already be divided into ${rhythmUnits} notes without a tuplet.`);
      return null;
    }
    const rhythmContext = firstSelectedNoteSet.rhythmContext;
    let rhythmProcessor = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](rhythmContext);
    const removePositionRangeOptions = new _processing_remove_position_range_options__WEBPACK_IMPORTED_MODULE_41__["default"]();
    removePositionRangeOptions.ignoreGraceNotesAtBeginning = true;
    rhythmProcessor.removePositionRange(firstSelectedNoteSet.rhythmPosition, firstSelectedNoteSet.duration, removePositionRangeOptions);
    if (Math.log2(rhythmUnits) % 1 === 0) {
      noteSetValue--;
    }
    const tuplet = new _models_tuplet__WEBPACK_IMPORTED_MODULE_37__["default"](firstSelectedNoteSet.rhythmPosition, noteSet.units, noteSet.unitValue, rhythmUnits, noteSetValue);
    rhythmContext.removeElement(firstSelectedNoteSet);
    rhythmContext.addElement(tuplet);
    rhythmProcessor.addRests();
    rhythmProcessor = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](tuplet);
    noteSet.value = noteSetValue;
    noteSet.dots = 0;
    tuplet.addElement(noteSet);
    rhythmProcessor.addRests();
    noteSet.defaultBeaming();
    this.selectTuplet(tuplet);
    return tuplet;
  }
  modifyArticulation(articulation) {
    const firstSelectedNoteSet = this._document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const hasArticulation = firstSelectedNoteSet.hasArticulation(articulation);
      const delayedArticulation = _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet.DELAYED_ARTICULATIONS[articulation];
      if (delayedArticulation != null) {
        if (hasArticulation) {
          this.applyToNoteSets(noteSet => {
            noteSet.removeArticulation(articulation);
            noteSet.addArticulation(delayedArticulation);
          });
        } else if (firstSelectedNoteSet.hasArticulation(delayedArticulation)) {
          this.applyToNoteSets(noteSet => {
            noteSet.removeArticulation(delayedArticulation);
          });
        } else {
          this.applyToNoteSets(noteSet => {
            noteSet.addArticulation(articulation);
          });
        }
      } else if (hasArticulation) {
        this.applyToNoteSets(noteSet => {
          noteSet.removeArticulation(articulation);
        });
      } else {
        this.applyToNoteSets(noteSet => {
          noteSet.addArticulation(articulation);
          switch (articulation) {
            case _models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.UP_BOW:
              noteSet.removeArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.DOWN_BOW);
              break;
            case _models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.DOWN_BOW:
              noteSet.removeArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.UP_BOW);
              break;
            case _models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.OPEN:
              noteSet.removeArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.CLOSED);
              break;
            case _models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.CLOSED:
              noteSet.removeArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.OPEN);
              break;
          }
        });
      }
    }
    this.dispatchMajorNotationAction();
  }
  setTremolo(tremolo) {
    const firstSelectedNoteSet = this._document.firstSelectedNoteSet;
    if (firstSelectedNoteSet && !this.isFullMeasureNotation(firstSelectedNoteSet)) {
      this.applyToNoteSets(function (noteSet) {
        if (!(noteSet.grace && tremolo > 0 || noteSet.tremoloDyad && tremolo === 0) && (noteSet.tremolo = tremolo, noteSet.tremoloDyad)) {
          for (let i = 0; i < noteSet.rhythmContext.elements.length; i++) {
            const el = noteSet.rhythmContext.elements[i];
            if (!noteSet.grace) {
              noteSet.tremolo = tremolo;
            }
          }
        }
      });
    }
  }
  modifyCue() {
    let firstSelectedNote = this.document.firstSelectedNote;
    let notEffectiveCue;
    if (firstSelectedNote) {
      notEffectiveCue = !firstSelectedNote.effectiveCue;
      for (let i = 0; i < this.selectedNotations.length; i++) {
        const notation = this.selectedNotations[i];
        if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note || notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
          notation.effectiveCue = notEffectiveCue;
        }
      }
    } else {
      const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
      if (firstSelectedNoteSet) {
        notEffectiveCue = !firstSelectedNoteSet.effectiveCue;
        this.applyToNoteSets(function (noteSet) {
          noteSet.effectiveCue = notEffectiveCue;
        });
      }
    }
  }
  modifyNotationsDirection(direction) {
    if (this.document.selection) {
      for (let i = 0; i < this.document.selection.selectedNotations().length; i++) {
        const notation = this.document.selection.selectedNotations()[i];
        if (notation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_16__["default"]) {
          notation.parent.setLyricsDirection(direction);
        } else if (notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_30__["default"]) {
          notation.defaultDirection = direction;
          notation.requiresDefaultInfo = true;
        } else {
          notation.direction = direction;
        }
      }
    }
  }
  modifyDirection(direction) {
    if (this.document.firstSelectedNoteSet) {
      this.applyToNoteSets(function (noteSet) {
        if (noteSet.notes.length > 0) {
          noteSet.direction = direction;
        }
      });
    }
  }
  modifyTies() {
    const firstSelectedNoteSet = this._document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let tied = !firstSelectedNoteSet.tied;
      this.applyToNotes(note => {
        if (tied) {
          note.setLiaison(_models_liaison__WEBPACK_IMPORTED_MODULE_14__.Liaison.TIE_LIAISON);
        } else {
          note.clearLiaison(_models_liaison__WEBPACK_IMPORTED_MODULE_14__.Liaison.TIE_LIAISON);
        }
        const liaisonEnd = note.measure.getLiaisonEnd(note);
        if (liaisonEnd != null && tied) {
          liaisonEnd.pitch = note.pitch;
        }
      });
    }
  }
  modifyLiaisons(liaison) {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote != null) {
      const notEqualToSelected = firstSelectedNote.liaison != liaison;
      this.applyToNotes(note => {
        if (notEqualToSelected) {
          note.setLiaison(liaison);
        } else {
          note.clearLiaison(liaison);
        }
      });
      if (firstSelectedNote.liaison == _models_liaison__WEBPACK_IMPORTED_MODULE_14__.Liaison.PRE_BEND_LIAISON && !firstSelectedNote.noteSet.grace) {
        this.modifyGrace(false);
      }
    }
  }
  modifyCourtesyAccidentals() {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote != null) {
      const notCourtesyAccidental = !firstSelectedNote.courtesyAccidental;
      this.applyToNotes(note => {
        if (notCourtesyAccidental) {
          note.accidental = _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.alterationToAccidental(note.accidental);
          note.courtesyAccidental = note.explicitAccidental = true;
        } else {
          note.accidental = null;
          note.courtesyAccidental = note.explicitAccidental = false;
        }
      });
    }
  }
  modifyParentheses() {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote != null) {
      const notParentheses = !firstSelectedNote.parentheses;
      this.applyToNotes(note => {
        note.parentheses = notParentheses;
      });
    }
  }
  modifyIncomingTies() {
    const firstSelectedNote = this.document.firstSelectedNote;
    if (firstSelectedNote) {
      if (firstSelectedNote.noteSet.position > 0 || !firstSelectedNote.noteSet.measure.allowIncomingLiaisons) {
        console.error('Incoming ties can only be placed on notes at the beginning of a repeat ending or coda.');
        this.noteEditorService.notify('Error', 'Incoming ties can only be placed on notes at the beginning of a repeat ending or coda.');
      } else {
        const notIncomingLiaison = firstSelectedNote.incomingLiaison == null;
        this.applyToNotes(function (note) {
          note.incomingLiaison = notIncomingLiaison ? _models_liaison__WEBPACK_IMPORTED_MODULE_14__.Liaison.TIE_LIAISON : null;
        });
      }
    }
  }
  modifyBeamBeforeSelection() {
    let previousNoteSet = this._document.firstSelectedNoteSet;
    if (previousNoteSet != null) {
      previousNoteSet = previousNoteSet.previousNoteSet();
      if (previousNoteSet != null) {
        const notBeam = !previousNoteSet.beam;
        this.applyToNoteSets(noteSet => {
          noteSet = noteSet.previousNoteSet();
          if (noteSet != null) {
            noteSet.beam = notBeam;
          }
        });
      }
    }
  }
  modifyBeamAtSelection() {
    const firstSelectedNoteSet = this._document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const notBeam = !firstSelectedNoteSet.beam;
      this.applyToNoteSets(noteSet => {
        noteSet.beam = notBeam;
      });
    }
  }
  enterRestAtSelection() {
    if (this.document.entryAfterSelection) {
      this.prepareEntryAfterSelection();
    } else {
      const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
      if (firstSelectedNoteSet != null) {
        this.selectNotation(firstSelectedNoteSet);
        this.removeSelection();
      }
    }
    this.setEntryAfterSelection(true);
  }
  removeSelection(removeArticulation) {
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      let noteSet = null;
      let parent;
      this.applyToNonNotes((scoreController, nonNote) => {
        if (nonNote instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_16__["default"]) {
          const lyric = nonNote;
          noteSet = lyric.noteSet;
          noteSet.removeLyric(lyric);
        } else if (nonNote instanceof _models_tempo__WEBPACK_IMPORTED_MODULE_33__["default"]) {
          const measure = nonNote.measure;
          const measureIndex = measure.index;
          nonNote.measure.removeElement(nonNote);
          if (measureIndex > 0) {
            const prevMeaureTempo = measure.staff.getMeasureAt(measureIndex - 1);
            scoreController.score.setTempoAtMeasure(prevMeaureTempo, measureIndex);
          }
        } else {
          if (nonNote instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"]) {
            scoreController.removeMeasureRepeat(nonNote, true);
          } else if (nonNote instanceof _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation) {
            if (nonNote.isPreEffect) {
              nonNote.parent.removePreEffect();
            } else {
              nonNote.parent.removePostEffect();
            }
          } else if (nonNote.measure.isSystemMeasure) {
            if (nonNote instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_27__["default"] || nonNote instanceof _models_segno__WEBPACK_IMPORTED_MODULE_29__["default"] || nonNote instanceof _models_coda__WEBPACK_IMPORTED_MODULE_8__["default"] || nonNote instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_6__["default"] || nonNote instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"]) {
              nonNote.measure.removeElement(nonNote);
            }
          } else {
            noteSet = nonNote.measure.notationAtPosition(nonNote.position, _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet);
            nonNote.measure.removeElement(nonNote);
          }
        }
      });
      this.applyToNotes(note => {
        noteSet = note.noteSet;
        parent = noteSet.parent;
        const defaultBeamEnabled = noteSet.defaultBeamEnabled;
        noteSet.removeNote(note, removeArticulation);
        if (noteSet.notes.length === 0 && (noteSet.removeAllAnnotations(), noteSet.grace)) {
          const previousGraceNote = noteSet.previousGraceNote;
          const nextGraceNote = noteSet.nextGraceNote;
          noteSet.measure.removeElement(noteSet);
          if (previousGraceNote != null) {
            previousGraceNote.defaultBeaming();
          }
          if (nextGraceNote != null) {
            nextGraceNote.defaultBeaming();
          }
        }
        if (noteSet.parent != null && noteSet.defaultBeamEnabled != defaultBeamEnabled) {
          noteSet.defaultBeaming();
        }
      });
      this.document.handleModelChange({
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.REMOVE_CHILD_MODEL,
        child: noteSet,
        parent: noteSet.parent || parent
      });
      if (noteSet != null) {
        this.selectNotation(noteSet);
      }
    } else if (this.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      this.removeRange(this.selection);
    } else if (this.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      let onlyOnMeasure = false;
      let measureSelection = this.selection;
      if (measureSelection.startIndex === 0 && measureSelection.endIndex == this.score.numMeasures) {
        this.removeRange(new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, 0, 1, this.noteEditorService).selectedRange);
        onlyOnMeasure = this.score.numMeasures === 1;
        measureSelection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, 1, this.score.numMeasures, this.noteEditorService);
      }
      if (!onlyOnMeasure) {
        this.removeMeasures(measureSelection);
      }
      this.score.defaultMeasureBoundary(measureSelection.startIndex);
    }
  }
  removeSelectionMarkings() {
    this.applyToNonNotes(function (t, element) {
      this.document && this.document.isModelEditable(element) && element.measure.removeElement(element);
    });
  }
  removeRange(selection) {
    let selectedIncludesEntriesStaves = [];
    for (let i = 0; i < this.score.staves.length; i++) {
      const staff = this.score.staves[i];
      if (selection.includesEntireStaffRange(staff, 0, this.score.numMeasures)) {
        selectedIncludesEntriesStaves.push(staff);
      }
    }
    if (selectedIncludesEntriesStaves.length === this.score.numMeasures) {
      selectedIncludesEntriesStaves = [];
    }
    for (let i = 0; i < selection.staves.length; i++) {
      const staff = selection.staves[i];
      if (selectedIncludesEntriesStaves.indexOf(staff) < 0) {
        for (let idx = selection.start.measureIndex; idx < selection.end.measureIndex; idx++) {
          const measure = staff.getMeasureAt(idx);
          const startPosition = selection.start.measureIndex === idx ? selection.start.position : 0;
          const endPosition = selection.end.measureIndex === idx ? selection.end.position : measure.duration;
          measure.removePositionRange(startPosition, endPosition - startPosition, _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.UNKNOWN_VOICE_NUMBER);
          measure.addRests();
          if (startPosition > 0) {
            const noteSet = measure.previousNotation(startPosition);
            if (noteSet != null && noteSet instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
              noteSet.defaultBeaming();
            }
          }
          this.document.handleModelChange({
            kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.REMOVE_CHILD_MODEL,
            child: measure,
            parent: measure.parent
          });
        }
      }
    }
    if (selectedIncludesEntriesStaves.length > 0) {
      for (let i = 0; i < selectedIncludesEntriesStaves.length; i++) {
        const staff = selectedIncludesEntriesStaves[i];
        this.score.removeChild(staff);
      }
      this.clearSelection();
      if (this.score.numVisibleParts == 1) {
        this.score.staffMetrics.showPartNames = false;
      }
      if (this.score.visibleStaves.length === 0) {
        for (let i = 0; i < this.score.parts.length; i++) {
          const part = this.score.parts[i];
          part.visible = true;
        }
      }
    }
  }
  removeMeasures(measureSelection) {
    const startIndex = measureSelection.startIndex;
    const endIndex = measureSelection.endIndex;
    this.clearSelection();
    const startMeasure = this.score.systemStaff.getMeasureAt(startIndex);
    const startTimeSignatureNotation = startMeasure.timeSignatureNotation;
    const timeSignatureRemoved = startIndex === 0 && startTimeSignatureNotation != null && !startTimeSignatureNotation.equals(startMeasure.measureInfo.timeSignature);
    this.document.handleModelChange({
      kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.REMOVING_CHILD_MODEL,
      child: startMeasure
    });
    for (let idx = endIndex - 1; idx >= startIndex; idx--) {
      for (let i = 0; i < this.score.staves.length; i++) {
        const staff = this.score.staves[i];
        staff.removeChildAt(idx);
      }
      this.score.systemStaff.removeChildAt(idx);
    }
    if (startIndex == this.score.numMeasures) {
      const prevBarlineNotation = this.score.systemStaff.getMeasureAt(startIndex - 1).barlineNotation;
      if (prevBarlineNotation != null) {
        prevBarlineNotation.type = _models_barline__WEBPACK_IMPORTED_MODULE_5__["default"].FINAL;
        this.document.invalidateModelParent(prevBarlineNotation.measure, null);
      }
    }
    if (timeSignatureRemoved) {
      this.score.systemStaff.getMeasureAt(startIndex).addElement(startTimeSignatureNotation.clone(), _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    }
    this.dispatchMajorNotationAction();
  }
  enterSlash() {
    if (this.document.entryAfterSelection) {
      this.prepareEntryAfterSelection();
    }
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      if (firstSelectedNoteSet.notes.length === 1 && firstSelectedNoteSet.getNoteAt(0).noteHead === _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.SLASH_NOTE_HEAD) {
        firstSelectedNoteSet.getNoteAt(0).noteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.HIT_NOTE_HEAD;
        return;
      }
      firstSelectedNoteSet.removeAllChildren();
      this.selectNotation(firstSelectedNoteSet, false);
      const effectiveClef = firstSelectedNoteSet.measure.getEffectiveClefAtMeasurePosition(firstSelectedNoteSet.position);
      const centerLineNote = effectiveClef.getLineNote(effectiveClef.centerLine, firstSelectedNoteSet.measure, true);
      this.doAddStepToSelection(centerLineNote.step, centerLineNote, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.SLASH_NOTE_HEAD, 0, false);
    }
  }
  modifyNoteHead() {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote != null) {
      let noteHead = firstSelectedNote.noteHead;
      if (noteHead == null) {
        noteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.NORMAL_NOTE_HEAD;
      }
      const noteHeadIdx = ScoreController.NOTE_HEAD_CYCLE.indexOf(noteHead);
      if (noteHeadIdx < 0) {
        noteHead = null;
      } else {
        noteHead = ScoreController.NOTE_HEAD_CYCLE[(noteHeadIdx + 1) % ScoreController.NOTE_HEAD_CYCLE.length];
      }
      if (noteHead == _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.NORMAL_NOTE_HEAD) {
        noteHead = null;
      }
      this.applyToNotes(note => note.noteHead = noteHead);
    }
  }
  applyAccidentalToSelection(alteration) {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote != null || this._document.selection == null) {
      let scoreNote = firstSelectedNote.measure.getScoreNote(firstSelectedNote);
      let targetAlteration = alteration - (scoreNote.alteration - firstSelectedNote.alteration);
      let accidental = _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.alterationToAccidental(targetAlteration);
      const notEqualToScoreNote = firstSelectedNote.alteration != targetAlteration || firstSelectedNote.accidental != accidental;
      this.applyToNotes(note => {
        if (notEqualToScoreNote) {
          scoreNote = note.measure.getScoreNote(note);
          targetAlteration = alteration - (scoreNote.alteration - note.alteration);
          if (note.alteration != targetAlteration || note.accidental != accidental) {
            note.pitch = note.diatonicPitch.transpose(targetAlteration);
            note.accidental = _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.alterationToAccidental(targetAlteration);
            note.explicitAccidental = targetAlteration == note.measure.effectiveAlteration(note.noteSet.position, note, note.noteSet.voiceNumber);
          }
        } else {
          targetAlteration = note.measure.effectiveScoreAlteration(note.noteSet.position, note, note.noteSet.voiceNumber);
          note.pitch = note.diatonicPitch.transpose(targetAlteration + 1);
          note.pitch = note.diatonicPitch.transpose(targetAlteration);
          note.explicitAccidental = note.courtesyAccidental = false;
        }
        if (note.tied) {
          const liaisonEnd = note.measure.getLiaisonEnd(note);
          if (liaisonEnd != null) {
            liaisonEnd.pitch = note.pitch;
          }
        }
        const articulation = note.measure.effectiveClef.mapNoteAndArticulation(note);
        if (articulation != null) {
          note.noteSet.addArticulation(articulation);
        }
      });
      this.echoSelectedNotes();
    } else {
      const selectedNotations = this._document.selection.selectedNotations();
      if (selectedNotations.length == 1 && selectedNotations[0] instanceof _models_trill__WEBPACK_IMPORTED_MODULE_36__["default"]) {
        this.applyAccidentalToTrill(selectedNotations[0], alteration);
      }
    }
  }
  applyAccidentalToTrill(trill, alteration) {
    if (trill.target == null) {
      const accidental = _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.alterationToAccidental(alteration);
      if (trill.accidental == accidental) {
        trill.accidental = null;
      } else {
        trill.accidental = accidental;
      }
    } else {
      const dummyNeighbor = trill.dummyNeighbor;
      const targetAlteration = alteration - (trill.measure.getScoreNote(dummyNeighbor).alteration - dummyNeighbor.alteration);
      const targetAccidental = _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.accidentalToAlteration(targetAlteration);
      const shouldAlter = dummyNeighbor.alteration != targetAlteration || dummyNeighbor.accidental != targetAccidental;
      trill.accidental = shouldAlter ? targetAccidental : null;
    }
  }
  applyBreak(breakType) {
    if (this.selection != null) {
      this.score.applyBreak(this.selection.selectedMeasures.endIndex - 1, breakType);
    }
  }
  toggleCautionaries() {
    if (this.selection != null) {
      const selectedMeasures = this.selection.selectedMeasures;
      const lastMeasure = this.score.systemStaff.getMeasureAt(selectedMeasures.endIndex - 1);
      if (lastMeasure.breakType == null) {
        lastMeasure.breakType = _models_measure__WEBPACK_IMPORTED_MODULE_17__["default"].SYSTEM_BREAK_TYPE;
        lastMeasure.disableCautionaries = true;
      } else {
        lastMeasure.disableCautionaries = !lastMeasure.disableCautionaries;
      }
    }
  }
  addMultiRest() {
    const selectedRange = this.selection.selectedRange;
    const measureCount = selectedRange.end.measureIndex - selectedRange.start.measureIndex + 1;
    if (measureCount < 2) {
      this.noteEditorService.notify('Error', 'Select a range of at least two blank measures before creating a multiple measure rest.');
    } else {
      for (let i = 0; i < selectedRange.staves.length; i++) {
        const staff = selectedRange.staves[i];
        for (let j = selectedRange.start.measureIndex; j < selectedRange.end.measureIndex; j++) {
          const measure = staff.getMeasureAt(j);
          if (measure.numVoices > 1 || !(measure.getVoiceNumber(0).noteSetAtPosition(0) instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"])) {
            console.error('Multiple measure rests must include only blank measures.');
          }
          if (measure.multiRest != 0) {
            console.error('Multiple measure rests may not overlap.');
          }
        }
      }
      this.addSpanToSelection(_models_multi_rest__WEBPACK_IMPORTED_MODULE_21__["default"].createMultiRest(measureCount));
    }
  }
  repeatSelection() {
    if (this.selection != null && !this._document.selection.empty) {
      const objectSelection = this.selection;
      if (objectSelection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && objectSelection.selectedObjects.length === 1 && objectSelection.selectedObjects[0] instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
        this.selectNotation(objectSelection.selectedObjects[0].noteSet);
      }
      let selection;
      const clipboard = this._document.selection.createClipboard();
      if (this.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        const measureSelection = this.selection;
        selection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, measureSelection.endIndex, measureSelection.endIndex + 1, this.noteEditorService);
      } else {
        const selectedRange = this.selection.selectedRange;
        let end = selectedRange.end;
        if (end.position > this.score.systemStaff.getMeasureAt(end.measureIndex).duration) {
          end = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](end.measureIndex + 1, 0);
          selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, end, end, selectedRange.staves, this.noteEditorService);
        }
      }
      this.pasteAt(clipboard, selection);
    }
  }
  pasteAt(clipboard, selection) {
    throw new Error('not implemented');
  }
  enharmonicShift(notations = null) {
    let noteOrNoteSet, interval;
    notations = notations || this.selection.selectedNotations() || [];
    if (notations.length === 1 && (notations[0] instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note || notations[0] instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notations[0].notes.length === 1)) {
      if (notations[0] instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) {
        noteOrNoteSet = notations[0];
      } else {
        noteOrNoteSet = notations[0].notes[0];
      }
      interval = new _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"](1, 0);
      let transposedNote = noteOrNoteSet.transposeInterval(interval);
      if (transposedNote.step != (noteOrNoteSet.step + 1) % 7 || transposedNote.alteration == -2 && (transposedNote.step == _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.C || transposedNote.step == _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.F)) {
        interval = new _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"](-2, 0);
        transposedNote = noteOrNoteSet.transposeInterval(interval);
        if (transposedNote.step != (noteOrNoteSet.step + 5) % 7 || transposedNote.alteration == 2 && (transposedNote.step == _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.B || transposedNote.step == _models_note__WEBPACK_IMPORTED_MODULE_24__.Note.E)) {
          interval = new _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"](-1, 0);
        }
      }
    } else {
      let alteration = 0;
      this.applyToNotes(note => {
        if (note.playable) {
          noteOrNoteSet = note.measure.getScoreNote(note, note.measure.scoreInterval);
          alteration += noteOrNoteSet.alteration;
        }
      });
      interval = new _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"](alteration < 0 ? -1 : 1, 0);
    }
    this.transposeSelectionInterval(interval.toString(), {
      withMinimumAlterations: false
    });
  }
  transposeSelectionInterval(intervalStr, option = {}) {
    let withMinimumAlterations = option.withMinimumAlterations;
    withMinimumAlterations = withMinimumAlterations === undefined || withMinimumAlterations;
    let withKeyChange = option.withKeyChange;
    withKeyChange = withKeyChange !== undefined && withKeyChange;
    this.selectScoreIfNoSelection();
    const interval = _models_interval__WEBPACK_IMPORTED_MODULE_12__["default"].fromString(intervalStr);
    const shouldTransposeEntireSelection = this.shouldTransposeEntireSelection();
    const that = this;
    this.applyToNotes(note => {
      const shouldTranspose = shouldTransposeEntireSelection || note.measure.part.isPitched;
      if (note.playable && shouldTranspose) {
        let transposedNote = note.transposeInterval(interval);
        if (withMinimumAlterations) {
          transposedNote = (0,_utils_note__WEBPACK_IMPORTED_MODULE_44__.getEnharmonicWithMinimumAlterations)(transposedNote, note.measure.keySignature);
        }
        note.pitch = transposedNote.pitch;
        note.step = transposedNote.step;
        note.accidental = transposedNote.accidental;
        note.fret = -1;
        // that.document.invalidateModelParent(note.parent, null);
      }
    });

    this.applyToChords(chord => {
      chord.normalizeSpelling(chord.measure.keySignature);
    });
    this.applyToNotes(note => {
      if (note instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_6__["default"]) {
        const chordSymbol = note;
        const transposedNote = chordSymbol.transposeInterval(interval);
        chordSymbol.text = transposedNote.text;
        if (withKeyChange && interval.unison && chordSymbol.measure.keySignature.isEnharmonicTone(chordSymbol.chordTonic)) {
          chordSymbol.text = chordSymbol.text.replace(_models_chord_symbol__WEBPACK_IMPORTED_MODULE_6__["default"].TONIC_MATCHER, chordSymbol.measure.keySignature.tonic);
        }
      }
    });
  }
  shouldTransposeEntireSelection() {
    return this.selectedParts.reduce((prev, next) => next.isPitched && prev) || this.selectedParts.every(part => !part.isPitched);
  }
  selectScoreIfNoSelection() {
    if (this.selection == null) {
      this.selectScore();
    }
  }
  deleteSelection() {
    const singleRest = this.selectionSingleRest();
    if (singleRest != null) {
      if (singleRest instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_32__["default"] && singleRest.measure.numVoices > 1) {
        this.removeSelectedVoice();
        return;
      }
      this.removeContainingTuplet();
      if (this.document.entryAfterSelection) {
        this.setEntryAfterSelection(false);
        return;
      }
      this.selectPreviousNoteSet(false);
    }
    this.removeSelection();
    // console.log('selection:', this.document.selection);
    // this.document.handleModelChange({
    //   parent: measure.parent,
    //   child: measure,
    //   kind: ModelEventKind.REMOVE_CHILD_MODEL,
    // });
  }

  removeContainingTuplet() {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      let rhythmPosition = firstSelectedNoteSet.rhythmPosition;
      let rhythmContext = firstSelectedNoteSet.rhythmContext;
      let tupletSelected = false;
      while (rhythmContext instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_37__["default"] && rhythmPosition === 0) {
        const tuplet = rhythmContext;
        rhythmPosition = tuplet.rhythmPosition;
        rhythmContext = tuplet.rhythmContext;
        rhythmContext.removeElement(tuplet);
        new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](rhythmContext).addRests();
        firstSelectedNoteSet = rhythmContext.noteSetAtPosition(rhythmPosition);
        tupletSelected = true;
      }
      if (tupletSelected && firstSelectedNoteSet != null) {
        this.selectNotation(firstSelectedNoteSet);
      }
    }
  }
  startTremolo() {
    let rhythmContext,
      tuplet,
      firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (!firstSelectedNoteSet || firstSelectedNoteSet.notes.length === 0) {
      return null;
    }
    if (firstSelectedNoteSet.tremoloDyad) {
      tuplet = firstSelectedNoteSet.rhythmContext;
      rhythmContext = tuplet.rhythmContext;
      rhythmContext.removeElement(tuplet);
      firstSelectedNoteSet = firstSelectedNoteSet.clone();
      firstSelectedNoteSet.tremolo = 0;
      firstSelectedNoteSet.rhythmDuration = tuplet.rhythmDuration;
      firstSelectedNoteSet.rhythmPosition = tuplet.rhythmPosition;
      rhythmContext.addElement(firstSelectedNoteSet);
      this.selectNotation(firstSelectedNoteSet);
      return null;
    }
    rhythmContext = firstSelectedNoteSet.rhythmContext;
    new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_42__["default"](rhythmContext).removePositionRange(firstSelectedNoteSet.rhythmPosition, firstSelectedNoteSet.rhythmDuration);
    tuplet = new _models_tuplet__WEBPACK_IMPORTED_MODULE_37__["default"](firstSelectedNoteSet.rhythmPosition, firstSelectedNoteSet.units, firstSelectedNoteSet.unitValue, 2 * firstSelectedNoteSet.units, firstSelectedNoteSet.unitValue);
    tuplet.tremolo = true;
    rhythmContext.addElement(tuplet);
    const noteSet = firstSelectedNoteSet.clone();
    noteSet.rhythmPosition = 0;
    noteSet.clearTies();
    noteSet.tremolo = 3;
    tuplet.addElement(noteSet);
    const noteset = noteSet.clone();
    noteset.rhythmPosition = noteset.rhythmDuration;
    tuplet.addElement(noteset);
    this.selectNotation(noteset);
    return tuplet;
  }
  selectionSingleRest() {
    let objectSelection;
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      objectSelection = this.selection;
    }
    if (objectSelection == null || objectSelection.selectedNotations().length !== 1) {
      return null;
    }
    const firstNoteSet = objectSelection.selectedNotations()[0];
    if (firstNoteSet != null && firstNoteSet instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && !(firstNoteSet instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"]) && firstNoteSet.notes.length === 0) {
      return firstNoteSet;
    } else {
      return null;
    }
  }
  addStringToSelection(stringNameIdx, echo) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const note = firstSelectedNoteSet.noteOnString(stringNameIdx);
      if (note != null) {
        this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [note], this.noteEditorService);
        this.echoSelectedNotes();
        return;
      }
    }
    this.doAddStringToSelection(stringNameIdx, null, echo);
  }
  doAddStringToSelection(stringIndex, pitch = null, echo, cross_note_head) {
    let firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null && firstSelectedNoteSet.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__["default"]) {
      const tablatureClef = firstSelectedNoteSet.measure.effectiveClef;
      if (stringIndex >= tablatureClef.stringNotes.length) {
        console.error(`This instrument only has ${tablatureClef.stringNotes.length} strings.`);
      } else {
        if (this.isFullMeasureNotation(firstSelectedNoteSet)) {
          firstSelectedNoteSet = this.removeFullMeasureNotation(firstSelectedNoteSet);
        }
        if (pitch == null) {
          pitch = tablatureClef.stringNotes[stringIndex].pitch;
        }
        const note = new _models_note__WEBPACK_IMPORTED_MODULE_24__.Note(pitch);
        note.stringIndex = stringIndex;
        while (tablatureClef.getEffectiveFret(note) < 0) {
          note.pitch = note.pitch.transpose(12);
        }
        if (cross_note_head) {
          note.noteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.CROSS_NOTE_HEAD;
        }
        this.doAddNoteToNoteSet(note, firstSelectedNoteSet, echo);
      }
    }
  }
  setSelectionFret(fret, cross_note_head) {
    if (this.selection != null) {
      const effectiveClef = this.selectedNotations[0].measure.effectiveClef;
      if (effectiveClef != null && effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__["default"]) {
        const note = this.document.firstSelectedNoteSet.noteOnString(this.document.stringIndex);
        if (note != null) {
          if (note.playable && note.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__["default"]) {
            const _note = new _models_note__WEBPACK_IMPORTED_MODULE_24__.Note(note.pitch.transpose(fret - effectiveClef.getEffectiveFret(note)));
            note.step = _note.step;
            note.fret = -1;
            note.accidental = null;
            if (cross_note_head) {
              note.noteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.CROSS_NOTE_HEAD;
            } else {
              note.pitch = _note.pitch;
              note.noteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.NORMAL_NOTE_HEAD;
            }
          }
        } else {
          this.document.ensureStringIndexWithinBounds();
          const stringNote = effectiveClef.stringNotes[this.document.stringIndex];
          const pitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_40__["default"].getPitch(fret + stringNote.pitch.ordinal);
          this.doAddStringToSelection(this.document.stringIndex, pitch, true, cross_note_head);
        }
        const noteSet = this.document.firstSelectedNoteSet;
        if (noteSet) {
          this.document.handleModelChange({
            kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.MODEL_CHANGE,
            child: noteSet,
            parent: noteSet.parent
          });
        }
        this.echoSelectedNotes();
      }
    }
  }
  transposeSelectionAtOctave(octaveOffset) {
    if (this.ensureSelection()) {
      let playableNoteOctaveCached = false;
      const that = this;
      this.applyToNotes(note => {
        if (note.playable) {
          note.pitch = note.pitch.transpose(12 * octaveOffset);
          note.fret = -1;
          playableNoteOctaveCached = true;
          that.document.invalidateModelParent(note, null);
        }
      });
      if (!playableNoteOctaveCached) {
        this.nudgeSelection(octaveOffset < 0 ? _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_DOWN : _models_notation_direction__WEBPACK_IMPORTED_MODULE_22__.Notation_Direction.DIRECTION_UP);
      }
      this.echoSelectedNotes();
      this.dispatchMajorNotationAction();
    }
  }
  adjustStringIndex(stringUpOrDown) {
    const desc = stringUpOrDown < 0 ? 1 : -1;
    this.applyToNotes(note => {
      if (note.playable && note.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__["default"]) {
        const tablatureClef = note.measure.effectiveClef;
        if (note.stringIndex < 0) {
          note.stringIndex = stringUpOrDown < 0 ? tablatureClef.stringNotes.length - 1 : 0;
        } else {
          const stringIndex = note.stringIndex + stringUpOrDown;
          if (stringIndex < 0 || stringIndex >= tablatureClef.stringNotes.length) {
            return;
          }
          const noteSet = note.noteSet;
          const noteCopy = note.clone();
          noteCopy.stringIndex += stringUpOrDown;
          if (tablatureClef.getEffectiveFret(noteCopy) >= 0 && !noteSet.noteOnString(noteCopy.stringIndex)) {
            note.stringIndex = noteCopy.stringIndex;
          }
        }
        note.fret = -1;
      }
    }, (prev, next) => {
      return prev.stringIndex < next.stringIndex ? -desc : prev.stringIndex > next.stringIndex ? desc : 0;
    });
    this.echoSelectedNotes();
  }
  moveUpString() {
    if (this.selection != null && this.document.stringIndex > 0) {
      this.setStringIndex(this.document.stringIndex - 1);
    }
  }
  moveDownString() {
    if (this.selection != null) {
      const effectiveClef = this.selectedNotations[0].measure.effectiveClef;
      if (effectiveClef != null && effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_31__["default"]) {
        const stringNotesCount = effectiveClef.stringNotes.length;
        if (this.document.stringIndex < stringNotesCount - 1) {
          this.setStringIndex(this.document.stringIndex + 1);
        }
      }
    }
  }
  setStringIndex(stringIdx) {
    this.document.stringIndex = stringIdx;
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet != null) {
      const note = firstSelectedNoteSet.noteOnString(stringIdx);
      if (note != null) {
        this.selectNotation(note);
        this.echoSelectedNotes();
      } else {
        this.selectNotation(firstSelectedNoteSet);
      }
    }
  }
  applyToChords(callback) {
    const noteSets = [];
    for (let i = 0; i < this.selectedNotations.length; i++) {
      const notation = this.selectedNotations[i];
      if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notation.notes.length > 1) {
        noteSets.push(notation);
      }
    }
    for (let i = 0; i < noteSets.length; i++) {
      const noteSet = noteSets[i];
      callback(noteSet);
    }
  }
  applyToNonNotes(callback) {
    const nonNotes = [];
    for (let i = 0; i < this.selectedNotations.length; i++) {
      const notation = this.selectedNotations[i];
      if (notation instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"] || !(notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_24__.Note) && !(notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet)) {
        nonNotes.push(notation);
      }
    }
    for (let i = 0; i < nonNotes.length; i++) {
      const nonNote = nonNotes[i];
      callback(this, nonNote);
    }
  }
  dispatchMajorNotationAction() {
    const option = {};
    if (this.selectedParts) {
      option.parts = this.selectedParts;
    }
    // todo
    // this.dispatchEvent(
    //   new EditorEvent(EditorEvent.MAJOR_NOTATION_CHANGE, options)
    // );
  }

  insertBlankMeasureAt(index) {
    const measure = this.score.insertBlankMeasureAt(index);
    this.document.handleModelChange({
      parent: measure.parent,
      child: measure,
      kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.ADD_CHILD_MODEL
    });
    if (0 === index) {
      this.score.defaultMeasureBoundary(0);
      this.score.defaultMeasureBoundary(1);
    }
    this.document.selection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, measure.index, measure.index + 1, this.noteEditorService);
    this.setEntryAfterSelection(false);
    this.dispatchMajorNotationAction();
  }
  addSymbol(symbol, hasSelection = false) {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet) {
      if (hasSelection) {
        const selectedRange = this.selection.selectedRange;
        symbol.rhythmPosition = selectedRange.start.position;
      }
      firstSelectedNoteSet.measure.systemMeasure.addElement(symbol, _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
      this.selectNotation(symbol);
    }
  }
  addSegno() {
    this.addSymbol(new _models_segno__WEBPACK_IMPORTED_MODULE_29__["default"]());
  }
  addCoda() {
    this.addSymbol(new _models_coda__WEBPACK_IMPORTED_MODULE_8__["default"]());
  }
  toggleSplitSystem() {
    const firstSelectedNoteSet = this.document.firstSelectedNoteSet;
    if (firstSelectedNoteSet && firstSelectedNoteSet.measure.nextMeasure) {
      const effectiveSystemMeasure = firstSelectedNoteSet.measure.effectiveSystemMeasure;
      effectiveSystemMeasure.systemGap = !effectiveSystemMeasure.systemGap;
    }
  }
  _removeSelectedRepeatEndings(selection) {
    const selectedNotations = selection.selectedNotations();
    const systemMeasureNotations = selection.systemMeasureNotations;
    const systemStaff = this.document.score.systemStaff;
    const spanNotations = selection.measureIndices.reduce((spanNotations, measureIdx) => spanNotations.concat(systemStaff.spanNotationsAt(measureIdx)), []);
    selectedNotations.concat(systemMeasureNotations, spanNotations).forEach(notation => {
      const isRepeatEnding = notation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"];
      const isLineNotation = notation instanceof _models_line_notation__WEBPACK_IMPORTED_MODULE_15__["default"] && [_models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"].TYPE_INITIAL, _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"].TYPE_FINAL].includes(notation.type);
      if ((isRepeatEnding || isLineNotation) && notation.measure) {
        notation.measure.removeElement(notation);
      }
    });
  }
  _createRepeatEnding(duration, isFinal) {
    const type = isFinal ? _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"].TYPE_FINAL : _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"].TYPE_INITIAL;
    const repeatEndingBracketEndX = this.document.score.effectiveStaffMetrics.repeatEndingBracketEndX;
    const startingText = isFinal ? '2.' : '1.';
    const repeatEndingBracketHeight = this.document.score.effectiveStaffMetrics.repeatEndingBracketHeight;
    const repeatEndingBracketBold = this.document.score.effectiveStaffMetrics.repeatEndingBracketBold;
    const repeatEnding = new _models_repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"](0, duration, type, repeatEndingBracketEndX, startingText, repeatEndingBracketHeight, repeatEndingBracketBold);
    repeatEnding.dy = this.document.score.effectiveStaffMetrics.repeatEndingDistanceAboveStaff;
    return repeatEnding;
  }
  addRepeatEnding(isFinal = false) {
    const selection = this.document.selection;
    if (selection) {
      const selectedMeasures = selection.selectedMeasures;
      if (selectedMeasures) {
        this._removeSelectedRepeatEndings(selection);
        const duration = selectedMeasures.duration;
        const repeatEnding = this._createRepeatEnding(duration, isFinal);
        this.document.score.systemStaff.getMeasureAt(selectedMeasures.startIndex).addElement(repeatEnding, _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
        this.selectNotation(repeatEnding);
        return repeatEnding;
      }
    }
  }
  setMeasureRepeat() {
    if (this.selection) {
      const objectSelection = this.selection.objectSelection;
      const measures = [];
      const dictionary = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_43__["default"]();
      for (let i = 0; i < objectSelection.selectedNotations().length; i++) {
        const notation = objectSelection.selectedNotations()[i];
        const measure = notation.measure;
        if (!measure.isSystemMeasure && !dictionary.get(measure)) {
          dictionary.put(measure, true);
          measures.push(measure);
        }
      }
      const firstMeasure = measures[0];
      if (firstMeasure && firstMeasure.index === 0) {
        // this.dispatchTipEvent(TipEvent.NOT_ENOUGH_MEASURE_REPEAT_SPACE);
      }
      const measureRepeats = [];
      for (let i = 0; i < measures.length; i++) {
        const measure = measures[i];
        const measureRepeat = _models_measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"].setMeasureToMeasureRepeat(measure);
        measureRepeats.push(measureRepeat);
      }
      this.document.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, measureRepeats, this.noteEditorService);
    }
  }
  addRehearsalLetter() {
    if (this.document.selection) {
      const selectedRange = this.document.selection.selectedRange;
      const startMeasure = this.score.systemStaff.getMeasureAt(selectedRange.start.measureIndex);
      const performanceText = startMeasure.notationAtPosition(selectedRange.start.position, _models_performance_text__WEBPACK_IMPORTED_MODULE_27__["default"]);
      let dy = 0;
      const previousNotation = startMeasure.previousNotation(selectedRange.start.position, function (notation) {
        return notation instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_27__["default"];
      }, true);
      if (previousNotation == null || performanceText && previousNotation.dy == performanceText.dy) {
        if (performanceText != null) {
          dy = performanceText.dy + this.score.effectiveStaffMetrics.performanceTextSpacing;
        }
      } else {
        dy = previousNotation.dy;
      }
      const nextRehearsalLetter = this.selectNextRehearsalLetter(selectedRange.start.measureIndex, parseFloat(selectedRange.start.position));
      this.modifyFollowingMeasures(selectedRange.start.measureIndex, parseFloat(selectedRange.start.position), nextRehearsalLetter);
    }
  }
  modifyFollowingMeasures(measureIdx, position, nextRehearsalLetter) {
    let alphabetLetter = ScoreController.ALPHABET.indexOf(nextRehearsalLetter.substring(0, 1)) + ScoreController.ALPHABET.length * (nextRehearsalLetter.length - 1);
    for (let i = measureIdx; i < this.score.numMeasures; i++) {
      const allNonMetricalEls = this.score.systemStaff.getMeasureAt(i).allNonMetricalElements;
      for (let idx = 0; idx < allNonMetricalEls.length; idx++) {
        const textNotation = allNonMetricalEls[idx];
        if (textNotation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_34__["default"] && (i > measureIdx || allNonMetricalEls[idx].position > position) && textNotation.text == this.prepareAlphabetLetter(alphabetLetter) && textNotation.textbox) {
          textNotation.text = this.prepareAlphabetLetter(alphabetLetter + 1);
          alphabetLetter++;
        }
      }
    }
  }
  selectNextRehearsalLetter(measureIdx, position) {
    let count = 0;
    for (let idx = 0; idx < measureIdx.length; idx++) {
      const allNonMetricElements = this.score.systemStaff.getMeasureAt(idx).allNonMetricalElements;
      for (let i = 0; i < allNonMetricElements.length; i++) {
        const textNotation = allNonMetricElements[i];
        if (textNotation && textNotation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_34__["default"] && (idx < measureIdx || allNonMetricElements[i].position <= position) && textNotation.text == this.prepareAlphabetLetter(count) && textNotation.textbox) {
          count++;
        }
      }
    }
    return this.prepareAlphabetLetter(count);
  }
  prepareAlphabetLetter(count) {
    const integer = Math.floor(count / ScoreController.ALPHABET.length);
    const decimal = count % ScoreController.ALPHABET.length;
    let alphabets = ScoreController.ALPHABET.charAt(decimal);
    for (let i = 0; i < integer; i++) {
      alphabets += ScoreController.ALPHABET.charAt(decimal);
    }
    return alphabets;
  }
  setBarlineType(barlineType) {
    if (this.document.selection) {
      const firstSelectedBarline = this.document.firstSelectedBarline;
      if (firstSelectedBarline) {
        firstSelectedBarline.type = barlineType;
      }
    }
  }
  resetMeasureNumbers() {
    this.score.resetMeasureNumbers();
  }
  modifyStartRepeat() {
    if (this.selection) {
      let measure;
      if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && this.selection.selectedNotations()[0] instanceof _models_barline__WEBPACK_IMPORTED_MODULE_5__["default"]) {
        const barline = this.selection.selectedNotations()[0];
        measure = barline.measure;
        if (barline.position === 0) {
          measure.startRepeat = !measure.startRepeat;
          if (!measure.startRepeat) {
            this.clearSelection();
          }
        } else {
          if (measure.index < this.score.numMeasures - 1) {
            measure = measure.staff.getMeasureAt(measure.index + 1);
            measure.startRepeat = !measure.startRepeat;
          }
        }
      } else {
        measure = this.score.systemStaff.getMeasureAt(this.selection.selectedMeasures.startIndex);
        measure.startRepeat = !measure.startRepeat;
      }
      this.dispatchMajorNotationAction();
    }
  }
  modifyEndRepeat() {
    if (this.selection) {
      const selectedMeasures = this.selection.selectedMeasures;
      const lastMeasure = this.score.systemStaff.getMeasureAt(selectedMeasures.endIndex - 1);
      lastMeasure.endRepeat = !lastMeasure.endRepeat;
    }
  }
  applyBreakSet(action) {
    if (this.selection) {
      const selectedMeasures = this.selection.selectedMeasures;
      let endIndex = selectedMeasures.endIndex;
      if (action === ScoreController.CREATE_SYSTEM_BREAK_SET) {
        if (selectedMeasures.startIndex > 0) {
          this.score.setBreak(selectedMeasures.startIndex - 1, _models_measure__WEBPACK_IMPORTED_MODULE_17__["default"].SYSTEM_BREAK_TYPE);
        }
        endIndex = selectedMeasures.endIndex - 1;
        this.score.setBreak(selectedMeasures.endIndex - 1, _models_measure__WEBPACK_IMPORTED_MODULE_17__["default"].SYSTEM_BREAK_TYPE);
      }
      let s = true;
      for (let idx = selectedMeasures.startIndex; idx < endIndex; idx++) {
        const _break = this.score.getBreak(idx);
        if (selectedMeasures.startIndex === idx && _break === _models_measure__WEBPACK_IMPORTED_MODULE_17__["default"].KEEP_WITH_NEXT_TYPE) {
          s = false;
        }
        const breakType = s ? _models_measure__WEBPACK_IMPORTED_MODULE_17__["default"].KEEP_WITH_NEXT_TYPE : null;
        this.score.setBreak(idx, breakType);
      }
    }
  }
  setNoteHead(noteHead) {
    this.applyToNotes(function (note) {
      note.noteHead = noteHead;
    });
  }
  modifyQuarterBendAlteration() {
    const firstSelectedNote = this.selection.firstSelectedNote;
    if (firstSelectedNote) {
      const e = firstSelectedNote.tuning === 0;
      this.applyToNotes(function (note) {
        note.tuning = e ? 50 : 0;
      });
    }
  }
  toggleTextbox() {
    let textbox;
    let noTextNotation = true;
    for (let i = 0; i < this.selection.selectedNotations().length; i++) {
      const notation = this.selection.selectedNotations()[i];
      if (notation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_34__["default"]) {
        if (noTextNotation) {
          textbox = notation.textbox;
          noTextNotation = false;
        }
        notation.textbox = !textbox;
      }
    }
  }
  setColor(color) {
    if (this.selection) {
      for (let i = 0; i < this.selection.selectedNotations().length; i++) {
        const notation = this.selection.selectedNotations()[i];
        notation.effectiveColor = color;
      }
    }
  }
  applyPreEffectToSelection(effectType) {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote == null) {
      this.noteEditorService.notify('A note needs to be selected.', '');
      return;
    }
    if (firstSelectedNote.hasPreEffect && firstSelectedNote.preEffect.type === effectType) {
      firstSelectedNote.removePreEffect();
    } else {
      const effectNotation = new _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation(effectType, _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.defaultAscent(effectType), _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.defaultShift(effectType));
      if (firstSelectedNote.hasPreEffect) {
        firstSelectedNote.removePreEffect();
        firstSelectedNote.addPreEffect(effectNotation);
      } else {
        firstSelectedNote.addPreEffect(effectNotation);
      }
    }
  }
  applyPostEffectToSelection(effectType) {
    const firstSelectedNote = this._document.firstSelectedNote;
    if (firstSelectedNote == null) {
      this.noteEditorService.notify('A note needs to be selected.', '');
      return;
    }
    if (firstSelectedNote.hasPostEffect && firstSelectedNote.postEffect.type === effectType) {
      firstSelectedNote.removePostEffect();
    } else {
      const effectNotation = new _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation(effectType, _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.defaultAscent(effectType), _models_effect_notation__WEBPACK_IMPORTED_MODULE_9__.EffectNotation.defaultShift(effectType));
      if (firstSelectedNote.hasPostEffect) {
        firstSelectedNote.removePostEffect();
        firstSelectedNote.addPostEffect(effectNotation);
      } else {
        firstSelectedNote.addPostEffect(effectNotation);
      }
    }
  }
  changeClef(clef) {
    this.changeClefInRange(clef, this.clefSelection);
  }
  changeClefInRange(clef, selection) {
    for (let i = 0; i < selection.staves.length; i++) {
      const stave = selection.staves[i];
      this.doChangeClefInStaff(clef, selection, stave);
    }
  }
  doChangeClefInStaff(clef, selection, staff) {
    const startMeasureIndex = selection.start.measureIndex;
    const endMeasureIndex = selection.end.measureIndex;
    const startPosition = selection.start.position;
    const endPosition = selection.end.position;
    const endMeasure = staff.getMeasureAt(endMeasureIndex);
    const notatedClef = endMeasure.getNotatedClefAtMeasurePosition(endPosition);
    for (let idx = startMeasureIndex; idx <= endMeasureIndex; idx++) {
      const measure = staff.getMeasureAt(idx);
      this.removeClefNotations(measure, selection);
      if (idx === startMeasureIndex && startPosition > 0) {
        this.addClefAtMeasurePosition(clef, measure, startPosition);
      } else {
        measure.clef = clef.clone();
      }
    }
    if (endPosition < endMeasure.duration) {
      this.addClefAtMeasurePosition(notatedClef, endMeasure, endPosition);
    }
    const prevClef = staff.defaultClefChanges(startMeasureIndex);
    staff.defaultClefChanges(endMeasureIndex + 1);
    if (prevClef) {
      this.document.handleModelChange({
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.MODEL_CHANGE,
        child: prevClef,
        parent: prevClef.parent
      });
    }
  }
  removeClefNotations(measure, clefSelection) {
    for (let i = 0; i < measure.measureNotations.length; i++) {
      const notation = measure.measureNotations[i];
      if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_7__["default"] && clefSelection.includesNotationClosed(notation)) {
        measure.removeElement(notation);
      }
    }
  }
  addClefAtMeasurePosition(clef, measure, position) {
    if (!clef.sameAs(measure.getNotatedClefAtMeasurePosition(position))) {
      clef = clef.clone();
      clef.rhythmPosition = position;
      measure.addElement(clef, _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    }
  }
  toggleHideStaff() {
    if (this.selection) {
      let canHideStaff;
      const selectedRange = this.selection.selectedRange;
      let hideStaff = true;
      for (let i = 0; i < selectedRange.staves.length; i++) {
        const staff = selectedRange.staves[i];
        for (let j = selectedRange.start.measureIndex; j <= selectedRange.end.measureIndex; j++) {
          if (hideStaff) {
            canHideStaff = !staff.getMeasureAt(j).canHideStaff;
            hideStaff = false;
          }
          staff.getMeasureAt(j).canHideStaff = canHideStaff;
        }
      }
    }
  }
  changeKeySignature(keySignature) {
    const nextMeasureIndex = this.keySignatureSelection.endIndex;
    for (let idx = this.keySignatureSelection.startIndex; idx < this.keySignatureSelection.endIndex; idx++) {
      const measure = this.score.systemStaff.getMeasureAt(idx);
      measure.keySignature = keySignature;
      if (measure.keySignatureNotation) {
        measure.removeElement(measure.keySignatureNotation);
        if (measure.barlineNotation) {
          measure.barlineNotation.type = _models_barline__WEBPACK_IMPORTED_MODULE_5__["default"].SINGLE;
        }
      }
      for (let i = 0; i < this.score.staves.length; i++) {
        const staff = this.score.staves[i];
        staff.getMeasureAt(idx).keySignature = keySignature;
      }
    }
    const keySignatureSelection = this.keySignatureSelection;
    this.score.defaultSystemMeasureNotations(keySignatureSelection.startIndex, {
      addTempoNotation: false
    });
    this.score.defaultSystemMeasureNotations(keySignatureSelection.endIndex, {
      addTempoNotation: false
    });
    if (nextMeasureIndex < this.score.numMeasures) {
      for (let i = 0; i < this.score.staves.length; i++) {
        const staff = this.score.staves[i];
        this.document.invalidateModelParent(staff.getMeasureAt(nextMeasureIndex), null);
      }
    }
  }
  changeTimeSignature(timeSignature, isNotPickup) {
    let timeSignatureSelection = this.timeSignatureSelection;
    if (!isNotPickup) {
      timeSignatureSelection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](timeSignatureSelection.score, timeSignatureSelection.startIndex, timeSignatureSelection.startIndex + 1, this.noteEditorService);
    }
    const startMeasure = this.score.systemStaff.getMeasureAt(timeSignatureSelection.startIndex);
    const startMeasureInfo = startMeasure.measureInfo;
    const startTimeSignatureNotation = startMeasure.timeSignatureNotation;
    const startTimeSignature = startMeasureInfo.timeSignature;
    const startHasTempoNotation = startMeasure.tempoNotation != null;
    const timeSignatureMeasureCount = timeSignatureSelection.endIndex - timeSignatureSelection.startIndex;
    if (startTimeSignature.equals(timeSignature)) {
      // this.dispatchEvent(
      //   new ControllerEvent(ControllerEvent.TIME_SIGNATURE_APPLIED)
      // );
    } else {
      if (startTimeSignature.sameTimeProperties(timeSignature)) {
        startMeasureInfo.timeSignature = timeSignature;
        startMeasure.measureInfo = startMeasureInfo;
        this.score.defaultMeasureBoundary(timeSignatureSelection.startIndex, {
          showTimeChange: isNotPickup
        });
      } else {
        const nextMeasureIndex = timeSignatureSelection.endIndex;
        let sequenceClipboard,
          beatsCount,
          selectedRange = timeSignatureSelection.selectedRange;
        if (isNotPickup) {
          sequenceClipboard = selectedRange.createClipboard();
          beatsCount = Math.floor((sequenceClipboard.duration + timeSignature.meterDuration - 1) / timeSignature.meterDuration);
        } else {
          const endMeasurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](selectedRange.end.measureIndex, Math.max(0, selectedRange.end.position - timeSignature.meterDuration));
          selectedRange = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, endMeasurePosition, selectedRange.end, selectedRange.staves, this.noteEditorService);
          sequenceClipboard = selectedRange.createClipboard();
          beatsCount = 1;
          const start = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](timeSignatureSelection.startIndex, 0);
          const end = new _models_measure_position__WEBPACK_IMPORTED_MODULE_18__["default"](timeSignatureSelection.startIndex, timeSignature.meterDuration);
          selectedRange = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, start, end, selectedRange.staves, this.noteEditorService);
        }
        startMeasureInfo.timeSignature = timeSignature;
        const percent = timeSignatureMeasureCount / beatsCount;
        for (let idx = 0; idx < beatsCount; idx++) {
          const y = timeSignatureMeasureCount - Math.floor(idx * percent) + idx - 1;
          const b = timeSignatureMeasureCount - Math.ceil((idx + 1) * percent) + idx - 1;
          const measure = this.score.insertBlankMeasureAt(timeSignatureSelection.startIndex, startMeasureInfo, [b, y]);
          this.document.handleModelChange({
            parent: measure.parent,
            child: measure,
            kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_20__.ModelEventKind.ADD_CHILD_MODEL
          });
        }
        const measureSelection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, timeSignatureSelection.startIndex + beatsCount, timeSignatureSelection.endIndex + beatsCount, this.noteEditorService);
        this.removeMeasures(measureSelection);
        this.pasteIntoRange(sequenceClipboard, selectedRange, _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.UNKNOWN_VOICE_NUMBER);
        const endIndex = timeSignatureSelection.startIndex + beatsCount;
        if (!isNotPickup) {
          for (let j = 0; j < this.score.staves.length; j++) {
            const staff = this.score.staves[j];
            const firstNotation = staff.getMeasureAt(timeSignatureSelection.startIndex).getNotationAt(0);
            if (this.isFullMeasureNotation(firstNotation)) {
              this.removeFullMeasureNotation(firstNotation);
            }
          }
          if (startTimeSignatureNotation) {
            this.score.systemStaff.getMeasureAt(timeSignatureSelection.startIndex).addElement(startTimeSignatureNotation.clone(), _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
          }
        }
        this.score.defaultMeasureBoundary(timeSignatureSelection.startIndex, {
          showTimeChange: isNotPickup,
          addTempoNotation: startHasTempoNotation
        });
        this.score.defaultMeasureBoundary(endIndex, {
          showTimeChange: isNotPickup
        });
        if (nextMeasureIndex < this.score.numMeasures) {
          for (let i = 0; i < this.score.staves.length; i++) {
            const staff = this.score.staves[i];
            this.document.invalidateModelParent(staff.getMeasureAt(nextMeasureIndex), null);
          }
        }
        this.document.selection = new _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.score, timeSignatureSelection.startIndex, endIndex, this.noteEditorService);
        this.setEntryAfterSelection(false);
      }
      this.dispatchMajorNotationAction();
      // this.dispatchEvent(
      //   new ControllerEvent(ControllerEvent.TIME_SIGNATURE_APPLIED)
      // );
    }
  }

  pasteIntoRange(sequenceClipboard, measureSelection, voiceNumber, selectRange) {
    const startMeasurePosition = measureSelection.start;
    this.score.ensureDuration(startMeasurePosition.measureIndex, startMeasurePosition.position, sequenceClipboard.duration);
    for (let idx = 0; idx < sequenceClipboard.sequences.length; idx++) {
      const sequence = sequenceClipboard.sequences[idx];
      const staff = measureSelection.staves[idx];
      if (voiceNumber !== _utils_voice_number__WEBPACK_IMPORTED_MODULE_45__.VoiceNumber.NON_METRICAL_VOICE_NUMBER) {
        staff.clearStaffRange(startMeasurePosition, sequenceClipboard.duration, voiceNumber);
      }
      sequence.mergeToStaff(staff, startMeasurePosition, voiceNumber);
      staff.addRests(startMeasurePosition, sequenceClipboard.duration);
      if (startMeasurePosition.position > 0) {
        const noteSet = staff.getMeasureAt(startMeasurePosition.measureIndex).previousNotation(startMeasurePosition.position);
        if (noteSet && noteSet instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
          noteSet.defaultBeaming();
        }
      }
      const offsetPosition = staff.offsetPosition(measureSelection.start, sequenceClipboard.duration, false);
      if (offsetPosition.measureIndex < staff.measures.length && offsetPosition.position > 0) {
        const prevNoteSet = staff.getMeasureAt(offsetPosition.measureIndex).previousNotation(offsetPosition.position);
        if (prevNoteSet && prevNoteSet instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
          prevNoteSet.defaultBeaming();
        }
      }
    }
    const endMeasurePosition = this.score.systemStaff.offsetPosition(startMeasurePosition, sequenceClipboard.duration, true);
    if (selectRange) {
      this.document.selection = new _document_range_selection__WEBPACK_IMPORTED_MODULE_2__["default"](this.score, startMeasurePosition, endMeasurePosition, measureSelection.staves, measureSelection.staves);
      this.setEntryAfterSelection(false);
    }
  }
  setTempoAtMeasure(tempo, measureIndex, nextMeasureIndex = 4294967295) {
    let tempoSelected;
    const measure = this.score.systemStaff.getMeasureAt(measureIndex);
    if (measure && measure.tempoNotation && this.selection && this.selection.includes(measure.tempoNotation) && this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      tempoSelected = true;
    }
    this.document.score.setTempoAtMeasure(tempo, measureIndex, nextMeasureIndex);
    if (nextMeasureIndex <= this.score.numMeasures) {
      for (let i = 0; i < this.score.staves.length; i++) {
        const staff = this.score.staves[i];
        this.document.invalidateModelParent(staff.getMeasureAt(nextMeasureIndex), null);
      }
    }
    this.dispatchMajorNotationAction();
    if (tempoSelected && measure.tempoNotation) {
      const objSelection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [measure.tempoNotation], this.noteEditorService);
      this.document.selection = objSelection;
    }
  }
  setSelectionTempo(tempo) {
    let exists,
      startIndex = 0,
      endIndex = 0;
    if (this.selection) {
      startIndex = this.selection.selectedMeasures.startIndex;
      endIndex = this.selection.selectedMeasures.endIndex;
    }
    const measure = this.score.systemStaff.getMeasureAt(startIndex);
    if (measure && measure.tempoNotation && this.selection && this.selection.includes(measure.tempoNotation) && this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      exists = true;
    }
    if (this.selection == null || this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && startIndex == endIndex - 1) {
      this.score.setTempoAtMeasure(tempo, startIndex);
    } else {
      this.score.setTempoAtMeasure(tempo, startIndex, endIndex);
    }
    if (endIndex + 1 <= this.score.numMeasures) {
      for (let i = 0; i < this.score.staves.length; i++) {
        const staff = this.score.staves[i];
        this.document.invalidateModelParent(staff.getMeasureAt(endIndex + 1), null);
      }
    }
    if (exists) {
      const objSelection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, [measure.tempoNotation], this.noteEditorService);
      this.document.selection = objSelection;
    }
    this.dispatchMajorNotationAction();
  }
}
ScoreController.ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
ScoreController.NOTE_HEAD_CYCLE = [_models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.NORMAL_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.STEMLESS_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.SLASH_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.HIT_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.CROSS_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.SQUARE_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.DIAMOND_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.TRIANGLE_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.HARMONIC_NOTE_HEAD, _models_note_head__WEBPACK_IMPORTED_MODULE_25__.NoteHead.CROSS_CIRCLE_NOTE_HEAD];

/***/ }),

/***/ 97143:
/*!*********************************************************************!*\
  !*** ./src/app/note-editor/controller/score-document-controller.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreDocumentController)
/* harmony export */ });
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _views_chord_symbol_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/chord-symbol-view */ 68680);
/* harmony import */ var _views_expression_text_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../views/expression-text-view */ 2319);
/* harmony import */ var _views_lyric_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../views/lyric-view */ 48997);
/* harmony import */ var _views_performance_text_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../views/performance-text-view */ 15957);
/* harmony import */ var _views_repeat_ending_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../views/repeat-ending-view */ 30620);










class ScoreDocumentController {
  get controller() {
    return this._controller;
  }
  get documentView() {
    return this._documentView;
  }
  get scoreDocument() {
    return this._controller.document;
  }
  constructor(controller, documentView, rootDiv, editorFontsService, noteEditorService) {
    this._controller = null;
    this._documentView = null;
    this._performer = null;
    this._$isPartDisplayPopupVisible = false;
    this._$isMixerPopupVisible = false;
    this._$isAudioTrackVisible = false;
    this._$enableNotationInPlayback = false;
    this._$resetScrollPositionOnLoad = false;
    this._totalPagesToPrint = -1;
    this._waveformController = null;
    this._playedOnce = false;
    this._controller = controller;
    this._documentView = documentView;
    this.rootDiv = rootDiv;
    this.editorFonts = editorFontsService;
    this.noteEditorService = noteEditorService;
  }
  ensureSelectionVisible() {
    this._documentView.ensureSelectionVisible();
  }
  addExpression() {
    let expressionText = this.scoreDocument.firstSelectedNotation(_models_expression_text__WEBPACK_IMPORTED_MODULE_1__["default"]);
    if (expressionText == null && this.scoreDocument.selection != null) {
      const selectedRange = this.scoreDocument.selection.selectedRange;
      const measure = selectedRange.staves[0].getMeasureAt(selectedRange.start.measureIndex);
      // this.scoreDocument.undoHistory.openGroup('Add Dynamics/Expression');
      expressionText = measure.notationAtPosition(selectedRange.start.position, _models_expression_text__WEBPACK_IMPORTED_MODULE_1__["default"]);
      let expressionTextTopPadding = 0;
      if (measure.staff.part.directionsAboveStaff) {
        expressionTextTopPadding = this.controller.score.effectiveStaffMetrics.expressionTextTopPadding;
      }
      const previousNotation = measure.previousNotation(selectedRange.start.position, notation => {
        return notation instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_1__["default"];
      }, true);
      if (previousNotation == null || expressionText != null && previousNotation.dy == expressionText.dy) {
        if (expressionText != null) {
          expressionTextTopPadding = expressionText.dy + this.controller.score.effectiveStaffMetrics.expressionTextSpacing;
        }
      } else {
        expressionTextTopPadding = previousNotation.dy;
      }
      _views_expression_text_view__WEBPACK_IMPORTED_MODULE_6__["default"].addExpressionText(this._documentView.viewContext, measure, selectedRange.start.position, expressionTextTopPadding, expressionText, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else {
      if (expressionText != null) {
        // this.scoreDocument.undoHistory.openGroup('Edit Dynamics/Expression');
        // todo
        // expressionText.dispatchEvent(new NotationEvent(NotationEvent.Edit));
      }
    }
  }
  addChordSymbol() {
    let chordSymbol = this.scoreDocument.firstSelectedNotation(_models_chord_symbol__WEBPACK_IMPORTED_MODULE_0__["default"]);
    if (chordSymbol == null) {
      const firstSelectedNoteSet = this.scoreDocument.firstSelectedNoteSet;
      if (firstSelectedNoteSet != null) {
        chordSymbol = firstSelectedNoteSet.measure.notationAtPosition(firstSelectedNoteSet.position, _models_chord_symbol__WEBPACK_IMPORTED_MODULE_0__["default"]);
        // this.scoreDocument.undoHistory.openGroup('Add Text');
        this.controller.selectNotation(firstSelectedNoteSet);
        _views_chord_symbol_view__WEBPACK_IMPORTED_MODULE_5__["default"].addChordSymbol(this._documentView.viewContext, firstSelectedNoteSet.measure, firstSelectedNoteSet.position, chordSymbol);
      }
    }
  }
  addLyric(line = 0, nonInitial) {
    let lyric = this.scoreDocument.firstSelectedNotation(_models_lyric__WEBPACK_IMPORTED_MODULE_2__["default"]);
    if (lyric == null || lyric.line != line) {
      const firstSelectedNoteSet = this.scoreDocument.firstSelectedNoteSet;
      if (firstSelectedNoteSet != null && !(firstSelectedNoteSet instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_4__["default"])) {
        lyric = firstSelectedNoteSet.getLyricAtLine(line);
        if (lyric == null) {
          // this.scoreDocument.undoHistory.openGroup('Add Lyrcis');
          this.controller.selectNotation(firstSelectedNoteSet);
          _views_lyric_view__WEBPACK_IMPORTED_MODULE_7__["default"].addLyric(this._documentView.viewContext, firstSelectedNoteSet, line, nonInitial, this.editorFonts, this.rootDiv, this.noteEditorService);
        }
      }
    }
    if (lyric != null) {
      // lyric.dispatchEvent(new NotationEvent(NotationEvent.EDIT)); todo
    }
  }
  addPerformance(isSystem, box) {
    let performanceText = this.scoreDocument.firstSelectedNotation(_models_performance_text__WEBPACK_IMPORTED_MODULE_3__["default"]);
    if (performanceText == null && this.scoreDocument.selection != null) {
      const selectedRange = this.scoreDocument.selection.selectedRange;
      let startMeasure = selectedRange.staves[0].getMeasureAt(selectedRange.start.measureIndex);
      if (isSystem) {
        startMeasure = startMeasure.systemMeasure;
      }
      // this.scoreDocument.undoHistory.openGroup(
      //   isSystem ? 'Add System Text' : 'Add Performance Text'
      // );
      performanceText = startMeasure.notationAtPosition(selectedRange.start.position, _models_performance_text__WEBPACK_IMPORTED_MODULE_3__["default"]);
      let dy = 0;
      const previousnotation = startMeasure.previousNotation(selectedRange.start.position, notation => {
        return notation instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_3__["default"];
      }, true);
      if (previousnotation == null || performanceText != null && previousnotation.dy === performanceText.dy) {
        if (performanceText != null) {
          dy = performanceText.dy + this.controller.score.effectiveStaffMetrics.performanceTextSpacing;
        } else {
          dy = previousnotation.dy;
        }
      }
      _views_performance_text_view__WEBPACK_IMPORTED_MODULE_8__["default"].addPerformanceText(this._documentView.viewContext, startMeasure, selectedRange.start.position, dy, box);
    } else {
      if (performanceText != null) {
        // this.scoreDocument.undoHistory.openGroup(
        //   isSystem ? 'Edit System Text' : 'Edit Performance Text'
        // );
        // performanceText.dispatchEvent(new NotationEvent(NotationEvent.EDIT));
        //todo
      }
    }
  }
  addRepeatEnding(isFinal = false) {
    const repeatEnding = this.controller.addRepeatEnding(isFinal);
    if (repeatEnding) {
      _views_repeat_ending_view__WEBPACK_IMPORTED_MODULE_9__["default"].addRepeatEnding(this.documentView.viewContext, repeatEnding, this.editorFonts, this.rootDiv, this.noteEditorService);
    }
  }
}

/***/ }),

/***/ 32744:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/controller/score-mediator.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreMediator)
/* harmony export */ });
/* harmony import */ var _layouts_system_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/system-view */ 46882);

class ScoreMediator {
  constructor() {
    this._view = null;
    this._drag = false;
    this._lastClickMillis = 0;
  }
  handleViewEvents(view) {
    this._view = view;
    this._view._svg.addEventListener('mousedown', this.handleMouseDown.bind(this));
    this._view._svg.addEventListener('click', this.handleClick.bind(this));
    this._view._svg.addEventListener('mousemove', this.handleMouseMove.bind(this));
  }
  removeListeners() {
    if (this._view) {
      this._view._svg.removeEventListener('mousedown', this.handleMouseDown.bind(this));
      this._view._svg.removeEventListener('mousemove', this.handleMouseMove.bind(this));
      this._view._svg.removeEventListener('click', this.handleClick.bind(this));
    }
  }
  destroy() {
    this.removeListeners();
  }
  handleMouseDown(evt) {
    this._drag = false;
    // this._view.context.document.undoHistory.openGroup('Clear Selection');
    this._view.context.controller.clearSelection();
    _layouts_system_view__WEBPACK_IMPORTED_MODULE_0__["default"].clearLastRolled();
    evt.stopPropagation();
  }
  handleMouseMove(evt) {
    this._drag = true;
  }
  handleClick(evt) {
    const lastClickMillis = new Date().getTime();
    const dblClick = lastClickMillis - this._lastClickMillis <= this._view.context.info.doubleClickMillis;
    this._lastClickMillis = lastClickMillis;
    if (!this._drag && evt.target == this._view._svg && this._view.context.controller.isNotationInteractionAvailable()) {
      // this._view.context.document.undoHistory.openGroup('Clear Selection');
      this._view.context.controller.clearSelection();
      // this._view.context.controller.stop();
      // this._view.context.controller. todo EDITOR_CLICK
      _layouts_system_view__WEBPACK_IMPORTED_MODULE_0__["default"].clearLastRolled();
      this._view.context.documentView.setFocus();
      evt.stopPropagation();
    } else if (dblClick && !this._view.context.controller.isNotationInteractionAvailable()) {
      // this._view.context.controller.forceStop();
    }
  }
}

/***/ }),

/***/ 60051:
/*!************************************************************************!*\
  !*** ./src/app/note-editor/controller/score-position-drag-mediator.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScorePositionDragMediator)
/* harmony export */ });
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./drag-mediator */ 95968);



class ScorePositionDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, noteEditorService, quantum = 1, staff = null, positionOptions = {}) {
    super(context, noteEditorService);
    this.position = null;
    this.clickDelta = new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0);
    this._quantum = quantum;
    this._staff = staff;
    this._positioningOptions = positionOptions;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    // this.context.stage.addEventListener(
    //   FlashEvent.ENTER_FRAME,
    //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
    // );
    this.context.documentView.initializeDragAutoScroll();
  }
  handleMouseUp(evt) {
    super.handleMouseUp(evt);
    // this.context.stage.removeListeners(
    //   FlashEvent.ENTER_FRAME,
    //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
    // );
  }

  handleDragMove(evt) {
    this.updatePosition(evt);
  }
  handleEnterFrame(t) {
    this.context.documentView.handleDragAutoScroll();
  }
  updatePosition(evt) {
    let staff = this._staff;
    if (staff != null && staff.isSystemStaff) {
      staff = staff.score.visibleStaves[0];
    }
    const mousePosition = this.context.documentView.getPositionUnderPoint(this.context, new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](this.context.stage.mouseX, this.context.stage.mouseY).subtract(this.clickDelta), this._quantum, staff, this._positioningOptions);
    if (mousePosition != null) {
      this.position = mousePosition;
      if (staff != null) {
        this.context.controller.document.dragHighlight = new _document_range_selection__WEBPACK_IMPORTED_MODULE_0__["default"](this.context.controller.score, this.position, this.position, [staff], this.noteEditorService);
        this.positionChanged();
        // this.dispatchEvent(new FlashEvent(FlashEvent.CHANGE));
      }
    }
  }

  positionChanged() {}
  handleDragEnd(evt) {
    this.context.controller.document.dragHighlight = null;
    super.handleDragEnd(evt);
  }
}

/***/ }),

/***/ 73579:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/controller/span-notation-mediator.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpanNotationMediator)
/* harmony export */ });
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ 15439);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _object_mediaotr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object-mediaotr */ 39636);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);



class SpanNotationMediator extends _object_mediaotr__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(noteEditorService) {
    super(noteEditorService);
  }
  handleViewEvents(t) {
    this._view = t;
    this.addListeners();
    if (null != this._view.notation && this._view.notation.enabled) {
      // this._view.notation.addEventListener(
      //   NotationEvent.NOTATION_STATUS_CHANGE,
      //   RumtimeHelper.bindMethod(this, this.handleStatusChange)
      // );
      this.statusChangeSub$ = this.noteEditorService.onNotationStatusChange.subscribe(evt => {
        if (evt.notation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_2__["default"]) {
          this.handleStatusChange();
        }
      });
      // this._view.notation.addEventListener(
      //   NotationEvent.EDIT,
      //   RumtimeHelper.bindMethod(this, this.handleEdit)
      // );
    }
  }

  handleMouseDown(evt) {
    this._mouseDownSeen = true;
    var timer = moment__WEBPACK_IMPORTED_MODULE_0___default()().unix(),
      doubleclick = timer - this._lastClickMillis <= this._view.context.info.doubleClickMillis;
    this._lastClickMillis = timer;
    if (this._view.notation.enabled) {
      var notation = this._view.notation,
        modelEditable = this._view.context.controller.document.isModelEditable(notation);
      if (modelEditable && !(doubleclick || evt.shiftKey || evt.ctrlKey) && notation.movable) {
        // CursorManager.removeAllCursors(),
        //   new TranspositionDragMediator(
        //     this._view.context,
        //     notation,
        //     'Move'
        //   ).handleMouseDown(evt),
        //   CursorManager.setCursor(DragMediator.moveNESWCursor);
      }
      this._view.context.document.undoHistory.openGroup('Select Notation');
      if (evt.ctrlKey || evt.shiftKey) {
        this._view.context.controller.modifyNotationSelection(notation);
      } else if (notation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this._view.context.controller.selectNotation(notation);
        if (modelEditable && doubleclick) {
          return this._view.editText(), void evt.stopPropagation();
        }
      } else {
        if (this._view.context.document.selection == null || this._view.context.document.selection.includes(notation)) {
          this._view.context.controller.selectNotation(notation);
        }
      }
      evt.stopPropagation();
      this._view.context.documentView.setFocus();
    }
  }
}

/***/ }),

/***/ 24182:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/controller/symbol-drag-mediator.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SymbolDragMediator)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _score_position_drag_mediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score-position-drag-mediator */ 60051);


class SymbolDragMediator extends _score_position_drag_mediator__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(view, noteEditorService, positioningOptions = null) {
    super(view.context, noteEditorService, view.notation.measure.timeSignature.beatDuration, view.notation.measure.staff, positioningOptions);
    this._view = view;
    this._lastPosition = null;
  }
  handleMouseDown(evt) {
    // evt.stopPropagation();
    super.handleMouseDown(evt);
    this.clickDelta = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]((this._view.mouseX - this._view.notation.dx * this.context.layoutContext.staffMetrics.lineSpacing) * this.context.info.displayScale, (this._view.mouseY + (this._view.notation.dy - this._view.layout.padding.bottom) * this.context.layoutContext.staffMetrics.lineSpacing) * this.context.info.displayScale);
    this._view.notation.excludeFromPositioning = true;
    this._view.notation.handleDragStart();
  }
  handleMouseUp(evt) {
    // evt.stopPropagation();
    this._view.notation.excludeFromPositioning = false;
    super.handleMouseUp(evt);
  }
  positionChanged() {
    const notation = this._view.notation;
    if (this._lastPosition) {
      // this.context.document.undoHistory.openGroup('Drag Object');
    } else if (this.position.compareTo(this._lastPosition) !== 0) {
      const staff = notation.measure.staff;
      notation.rhythmPosition = this.position.position;
      notation.measure.removeElement(notation);
      staff.getMeasureAt(this.position.measureIndex).addElement(notation, notation.lastVoiceNumber);
      this.context.controller.selectNotation(notation);
    }
    this._lastPosition = this.position;
    notation.dx = this.position.dx;
    notation.dy = this.position.dy + this._view.layout.padding.bottom;
  }
  handleDragEnd(evt) {
    // evt.stopPropagation();
    this._view.notation.excludeFromPositioning = false;
    this._view.notation.dy--;
    this._view.notation.dy++;
    super.handleDragEnd(evt);
    this._view.notation.handleDraggingEnd(() => {
      // this.context.controller.dispatchTipEvent(
      //   TipEvent.REPOSITIONED_SYSTEM_TEXT
      // );
    });
  }
}

/***/ }),

/***/ 6950:
/*!***********************************************************************!*\
  !*** ./src/app/note-editor/controller/transposition-drag-mediator.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TranspositionDragMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class TranspositionDragMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, dragNotation, noteEditorService, undoGroupName = null) {
    super(context, noteEditorService);
    this._undoGroupName = null;
    this._dragNotation = null;
    this._dragDelta = 0;
    this._undoGroupName = undoGroupName;
    this._dragNotation = dragNotation;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    this._dragDelta = 0;
  }
  handleDragEnd(evt) {
    super.handleDragEnd(evt);
    if (this._dragNotation) {
      this._dragNotation.requestValidation();
    }
  }
  handleDragMove(evt) {
    if (this.dragDirection === _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"].VERTICAL_DRAG) {
      this.handleTranspositionDragMove(evt);
    }
  }
  handleTranspositionDragMove(evt) {
    const dragDelta = Math.round(2 * (this.dragPoint.y - this.context.stage.mouseY) / (this.context.info.displayScale * this.context.layoutContext.staffMetrics.lineSpacing));
    if (dragDelta != this._dragDelta) {
      if (this._undoGroupName != null) {
        // this.context.document.undoHistory.openGroupName = this._undoGroupName;
      }
      if (evt.shiftKey) {
        this.context.controller.transposeSelectionChromatic(dragDelta - this._dragDelta);
      } else {
        this.context.controller.transposeSelectionDiatonic(dragDelta - this._dragDelta);
      }
      this._dragDelta = dragDelta;
    }
  }
  handleClick(evt) {
    if (this._dragNotation) {
      this.context.controller.selectNotation(this._dragNotation);
    }
  }
}

/***/ }),

/***/ 39139:
/*!***********************************************************************!*\
  !*** ./src/app/note-editor/controller/transposition-fret-mediator.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TranspositionFretMediator)
/* harmony export */ });
/* harmony import */ var _drag_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drag-mediator */ 95968);

class TranspositionFretMediator extends _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get FRET_DRAG_QUANTUM() {
    return 10;
  }
  constructor(context, dragNotation, noteEditorService, undoGroupName = null) {
    super(context, noteEditorService);
    this._undoGroupName = null;
    this._dragNotation = null;
    this._dragDelta = 0;
    this._undoGroupName = undoGroupName;
    this._dragNotation = dragNotation;
  }
  handleMouseDown(evt) {
    super.handleMouseDown(evt);
    this._dragDelta = 0;
  }
  handleDragMove(evt) {
    if (this.dragDirection === _drag_mediator__WEBPACK_IMPORTED_MODULE_0__["default"].VERTICAL_DRAG) {
      this.handleTranspositionDragMove(evt);
    }
  }
  handleTranspositionDragMove(evt) {
    const dragDelta = Math.round((this.dragPoint.y - this.context.stage.mouseY) / TranspositionFretMediator.FRET_DRAG_QUANTUM);
    if (dragDelta != this._dragDelta) {
      if (this._undoGroupName != null) {
        // this.context.document.undoHistory.openGroupName = this._undoGroupName;
      }
      const firstSelectedNote = this.context.document.firstSelectedNote;
      if (firstSelectedNote != null) {
        const distance = dragDelta - this._dragDelta;
        const effectiveFret = firstSelectedNote.measure.effectiveClef.getEffectiveFret(firstSelectedNote);
        if (distance > 0 || effectiveFret >= 0 && effectiveFret + distance >= 0) {
          this.context.controller.transposeSelectionChromatic(distance);
        }
      }
      this._dragDelta = dragDelta;
    }
  }
  handleClick(evt) {
    if (this._dragNotation) {
      this.context.controller.selectNotation(this._dragNotation);
    }
  }
}

/***/ }),

/***/ 82910:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/display/display-list-stats.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DisplayListStats)
/* harmony export */ });
class DisplayListStats {
  constructor() {
    this.displayObjectCount = 0;
    this.displayObjectContainerCount = 0;
    this.eventListenerCount = 0;
    this.displayObjectEventListenerCount = 0;
    this.unstagedDisplayObjectEventListenerCount = 0;
    this.weakEventListenerCount = 0;
  }
}

/***/ }),

/***/ 49118:
/*!*****************************************************************!*\
  !*** ./src/app/note-editor/display/display-object-container.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DisplayObjectContainer)
/* harmony export */ });
/* harmony import */ var _interactive_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interactive-object */ 85336);

class DisplayObjectContainer extends _interactive_object__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get numChildren() {
    return this._children.length;
  }
  set mouseChildren(mouseChildren) {
    this._mouseChildren = mouseChildren;
  }
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this._children = [];
    this._mouseChildren = false;
  }
  addChild(child) {
    this._children.push(child);
    // TODO svg appendChild?
    if (this._svg) {
      this._svg.appendChild(child._svg);
    }
    child.parent = this;
    return child;
  }
  addChildAt(child, index) {
    if (this._svg) {
      if (index >= this._children.length) {
        this._svg.appendChild(child._svg);
      } else {
        this._svg.insertBefore(child._svg, this._children[index]._svg);
      }
    }
    this._children.splice(index, 0, child);
    child.parent = this;
    return child;
  }
  getChildAt(index) {
    return this._children[index];
  }
  contains(child) {
    return this._children.indexOf(child) >= 0;
  }
  getChildIndex(child) {
    return this._children.indexOf(child);
  }
  removeChild(child) {
    const index = this._children.indexOf(child);
    if (index >= 0) {
      this.removeChildAt(index);
      return child;
    } else {
      return null;
    }
  }
  removeChildAt(index) {
    const child = this._children[index];
    if (this._svg && this._svg.contains(child._svg)) {
      this._svg.removeChild(child._svg);
    }
    this._children.splice(index, 1);
    child.parent = null;
    return child;
  }
  removeChildren(endIndex) {
    endIndex = endIndex ?? 2147483647;
    for (let i = Math.min(endIndex, this._children.length - 1); i >= 0; i--) {
      this.removeChildAt(i);
    }
  }
  // TODO notifyAddedToStage notifyRemovedFromStage
  updateDisplayListStats(displayListStats) {
    // TODO
  }
}

/***/ }),

/***/ 74418:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/display/display-object.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DisplayObject)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _geoms_transform__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/transform */ 18154);
/* harmony import */ var _services_svg_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/svg-context */ 88832);
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/uuid */ 1275);





class DisplayObject {
  get svgContext() {
    return _services_svg_context__WEBPACK_IMPORTED_MODULE_3__["default"].singleton;
  }
  get width() {
    const bbox = this.getBBox();
    if (bbox) {
      return bbox.width;
    }
    return 0;
  }
  set width(v) {}
  get height() {
    const bbox = this.getBBox();
    if (bbox) {
      return bbox.height;
    }
    return 0;
  }
  set height(v) {}
  get x() {
    return this._x;
  }
  set x(v) {
    this._x = v;
    this.updateTransform();
  }
  get y() {
    return this._y;
  }
  set y(v) {
    this._y = v;
    // if (isNaN(this._y)) {
    //   throw new Error();
    // }
    this.updateTransform();
  }
  get scaleX() {
    return this._scaleX;
  }
  set scaleX(v) {
    this._scaleX = v;
    this.updateTransform();
  }
  get scaleY() {
    return this._scaleY;
  }
  set scaleY(v) {
    this._scaleY = v;
    this.updateTransform();
  }
  get rotation() {
    return this._rotation;
  }
  set rotation(v) {
    this._rotation = v;
    this.updateTransform();
  }
  get name() {
    return this._name;
  }
  set name(v) {
    this._name = v;
  }
  get visible() {
    return this._visible;
  }
  set visible(v) {
    this._visible = v;
    if (this._svg) {
      this._svg.setAttribute('visibility', v ? 'visible' : 'hidden');
    }
  }
  get mask() {
    return this._mask;
  }
  set mask(v) {
    if (this._mask) {
      this._mask.isMask = false;
    }
    if (v) {
      v.isMask = true;
    }
    this._mask = v;
    if (this._svg && this._mask && this._mask._svg) {
      this._mask._svg.setAttribute('display', 'none');
    }
  }
  get alpha() {
    return this._alpha;
  }
  set alpha(v) {
    this._alpha = v;
    this._svg.setAttribute('opacity', v.toString());
  }
  get parent() {
    return this._parent;
  }
  set parent(v) {
    this._parent = v;
    //TODO notify remove or add
  }

  get mouseX() {
    return this.stage.mousePositionFor(this).x;
  }
  get mouseY() {
    return this.stage.mousePositionFor(this).y;
  }
  get transform() {
    if (!this._transform) {
      this._transform = new _geoms_transform__WEBPACK_IMPORTED_MODULE_2__["default"](this);
    }
    return this._transform;
  }
  set transform(v) {
    this._transform = v;
  }
  get svgElement() {
    return this._svg;
  }
  get stage() {
    if (this._stage) {
      return this._stage;
    } else if (this.parent) {
      this._stage = this.parent.stage;
      return this._stage;
    }
  }
  get screenCTM() {
    return this.svgContext.getScreenCTM(this._svg);
  }
  get textMeasurement() {
    return this.svgContext.textMeasurement;
  }
  constructor(noteEditorService, rootDiv) {
    this._x = 0;
    this._y = 0;
    this._scaleX = 1;
    this._scaleY = 1;
    this._rotation = 0;
    this._name = null;
    this._visible = true;
    this._mask = null;
    this._alpha = 1;
    this._parent = null;
    this._transform = null;
    this.noteEditorService = noteEditorService;
    this._svgGraphicsCount = 0;
    this._svg = this.svgContext.createElement('g');
    const that = this;
    this._svg.id = that.constructor.name + '-' + (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_4__.generateRandomString)(6);
    this.rootDiv = rootDiv;
  }
  getBBox() {
    if (this._svg) {
      return this.svgContext.getBBox(this._svg);
    } else {
      return null;
    }
  }
  updateTransform() {
    if (this._svg) {
      this._svg.setAttribute('transform', `translate(${this.x},${this.y}) scale(${this.scaleX},${this.scaleY}) rotate(${this.rotation})`);
    }
  }
  getBounds(displayObject) {
    const bbox = this.getBBox();
    const x = bbox ? bbox.x : 0;
    const y = bbox ? bbox.y : 0;
    const width = bbox ? bbox.width : 0;
    const height = bbox ? bbox.height : 0;
    displayObject = displayObject || this;
    const transform = this._svg.getTransformToElement(displayObject._svg);
    const leftTop = this.svgContext.transformPoint(+x, +y, transform);
    const rightBottom = this.svgContext.transformPoint(+x + +width, +y + +height, transform);
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](leftTop.x, leftTop.y, rightBottom.x - leftTop.x, rightBottom.y - leftTop.y);
  }
  getRectangle(displayObject) {
    return this.getBounds(displayObject);
  }
  globalToLocal(globalPoint) {
    const rootOffsetLeft = this.rootDiv.offsetLeft;
    const rootOffsetTop = this.rootDiv.offsetTop;
    const scrollTop = this.rootDiv.scrollTop;
    const localPoint = this.svgContext.transformPoint(rootOffsetLeft + globalPoint.x, rootOffsetTop + scrollTop + globalPoint.y, this.screenCTM.inverse());
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](localPoint.x, localPoint.y);
  }
  localToGlobal(localPoint) {
    const rootOffsetLeft = this.rootDiv.offsetLeft;
    const rootOffsetTop = this.rootDiv.offsetTop;
    const scrollTop = this.rootDiv.scrollTop;
    localPoint = this.svgContext.transformPoint(localPoint.x, localPoint.y, this.screenCTM);
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](localPoint.x - rootOffsetLeft, localPoint.y - rootOffsetTop - scrollTop);
  }
  defineAs(id) {
    this._svg.id = id;
    this.svgContext.definitions.appendChild(this._svg);
  }
  useDefinition(useDef) {
    this._svg = useDef._svg.cloneNode(true);
    // this._svg.id=//TODO
  }
}

/***/ }),

/***/ 36404:
/*!*************************************************!*\
  !*** ./src/app/note-editor/display/graphics.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Graphics)
/* harmony export */ });
class Graphics {
  clear() {}
  beginFill(t) {}
  beginSvgFill(t) {}
  endFill() {}
  lineTo(t, e) {}
  moveTo(t, e) {}
  svgPath(t) {}
  svgStroke(t, e, r, s, i) {}
  lineStyle() {}
  drawRect(t, e, r, s) {}
  drawEllipse(t, e, r, s) {}
  drawCircle(t, e, r) {}
  curveTo(t, e, r, s) {}
  pushAlpha(t) {}
  popAlpha() {}
  static colorToRGBA(color, alpha) {
    return 'rgba(' + (color >>> 16 & 255) + ',' + (color >>> 8 & 255) + ',' + (255 & color) + ',' + alpha + ')';
  }
  static extractAlphaFromRGBA(rgba) {
    return parseInt(rgba.replace(/^.*,(.+)\)/, '$1'));
  }
}

/***/ }),

/***/ 85336:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/display/interactive-object.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ InteractiveObject)
/* harmony export */ });
/* harmony import */ var _display_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./display-object */ 74418);

class InteractiveObject extends _display_object__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
  }
}

/***/ }),

/***/ 66299:
/*!********************************************************!*\
  !*** ./src/app/note-editor/display/line-scale-mode.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LineScaleMode": () => (/* binding */ LineScaleMode)
/* harmony export */ });
var LineScaleMode;
(function (LineScaleMode) {
  LineScaleMode["HORIZONTAL"] = "horizontal";
  LineScaleMode["NONE"] = "none";
  LineScaleMode["NORMAL"] = "normal";
  LineScaleMode["VERTICAL"] = "vertical";
})(LineScaleMode || (LineScaleMode = {}));

/***/ }),

/***/ 69513:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/display/preview-watermark.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PreviewWatermark)
/* harmony export */ });
/* harmony import */ var _display_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./display-object */ 74418);

class PreviewWatermark extends _display_object__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this.Af = -10.008;
    this.Tf = -1.671;
    this.column = 10;
    this.Mf = (534.443 - this.Af) / (this.column - 1);
    this.row = 12;
    this.Nf = (704.053 - this.Tf) / (this.row - 1);
    this.opacity = 0.566685;
    this.gradientInfo = {
      gradientUnits: 'userSpaceOnUse',
      gradientTransform: 'matrix(1.7520241,-1.8788158,0.28468902,0.26547681,-127.87746,275.31332)',
      y2: '1001.7604',
      x2: '80.814779',
      y1: '803.44087',
      x1: '80.814779'
    };
    this.pathData = 'm 105.64114,549.42734 7.48834,-8.03026 c 1.10485,-1.1848 2.08099,-2.40754 2.92847,-3.66826 0.84747,-1.26071 1.40762,-2.54322 1.68047,-3.84755 0.27285,-1.30432 0.18381,-2.63845 -0.26712,-4.00241 -0.45093,-1.36396 -1.42237,-2.74156 -2.91433,-4.13284 -1.49197,-1.39128 -2.93398,-2.26425 -4.32607,-2.61894 -1.3921,-0.35469 -2.72918,-0.35045 -4.0113,0.0127 -1.28211,0.36317 -2.52242,1.01142 -3.72095,1.94477 -1.19853,0.93336 -2.3502,1.99242 -3.45504,3.17722 l -7.488342,8.03026 z M 73.888368,539.13774 93.65268,517.94311 c 2.741647,-2.94006 5.501893,-5.0423 8.28083,-6.30678 2.77894,-1.26449 5.47403,-1.88925 8.08538,-1.87431 2.61135,0.0149 5.09277,0.56506 7.44433,1.65039 2.35156,1.08532 4.4927,2.52821 6.42348,4.32869 1.8869,1.75956 3.46466,3.78461 4.73332,6.07519 1.26866,2.29059 2.00151,4.73781 2.19857,7.34176 0.19706,2.60395 -0.23818,5.33606 -1.30573,8.19643 -1.06756,2.86038 -2.97213,5.76054 -5.71378,8.7006 l -10.12768,10.8606 16.85039,15.71324 -9.63663,10.33403 z m 52.304562,-30.09265 8.28628,-8.88595 6.3189,5.89247 0.12276,-0.13165 c -0.64396,-1.4209 -1.06788,-2.92374 -1.27182,-4.50859 -0.20393,-1.58485 -0.17391,-3.15662 0.0901,-4.71535 0.26397,-1.55873 0.73192,-3.05028 1.40387,-4.47467 0.67194,-1.42439 1.56033,-2.72898 2.66517,-3.91377 0.57289,-0.61434 1.31684,-1.1922 2.23189,-1.73358 l 8.68848,8.10214 c -0.49696,0.35697 -1.06479,0.81193 -1.70349,1.36489 -0.63871,0.55296 -1.22403,1.11466 -1.75599,1.68512 -1.59589,1.71138 -2.661,3.42542 -3.19539,5.14218 -0.53438,1.71676 -0.6455,3.39749 -0.33335,5.04224 0.31216,1.64474 0.98322,3.23448 2.01322,4.76925 1.03001,1.53478 2.31291,3.01824 3.84876,4.45044 l 15.33649,14.30151 -8.71594,9.3467 z m 56.81195,-34.13444 c -2.7788,-1.77087 -5.30423,-2.66968 -7.57637,-2.69647 -2.27215,-0.0268 -4.47211,1.10072 -6.59995,3.38256 -1.39129,1.49197 -2.29495,2.96689 -2.71101,4.4248 -0.41607,1.45791 -0.52732,2.83087 -0.33376,4.11891 0.19357,1.28804 0.59468,2.44146 1.20337,3.46029 0.60869,1.01883 1.22168,1.85708 1.83898,2.51476 z m -8.25478,20.72903 c 3.15058,2.69185 6.06071,3.96991 8.73048,3.83422 2.66977,-0.13568 5.23222,-1.51994 7.68742,-4.15283 1.75957,-1.8869 2.80187,-3.95037 3.12694,-6.19048 0.32507,-2.24011 0.10426,-4.00476 -0.66246,-5.29401 l 7.67248,-8.22773 c 2.85338,5.12201 3.88915,9.86167 3.10736,14.21913 -0.78179,4.35745 -2.97313,8.4669 -6.5741,12.32846 -2.49613,2.67677 -5.17454,4.69125 -8.03531,6.0435 -2.86078,1.35224 -5.77663,2.03778 -8.74764,2.05663 -2.97102,0.0188 -5.93202,-0.58882 -8.88312,-1.82302 -2.9511,-1.2342 -5.74304,-3.07887 -8.37593,-5.53408 -2.54513,-2.37337 -4.52595,-4.99988 -5.94254,-7.87964 -1.41659,-2.87976 -2.20961,-5.8343 -2.37908,-8.86374 -0.16947,-3.02943 0.27735,-6.03789 1.34046,-9.02546 1.06312,-2.98758 2.80179,-5.77582 5.21608,-8.36483 2.70073,-2.89617 5.61308,-4.89759 8.73714,-6.00432 3.12406,-1.10673 6.27399,-1.47144 9.44987,-1.09414 3.17589,0.3773 6.25696,1.38407 9.24333,3.02033 2.98636,1.63627 5.7141,3.76974 8.18331,6.40047 z m 59.66732,-34.42518 -9.69801,10.39985 -44.89412,-20.08292 9.14559,-9.80745 29.92551,14.49251 0.12276,-0.13165 -16.5447,-28.84166 8.65456,-9.28088 z m -16.65329,-60.92471 -8.71593,9.3467 -7.70116,-7.18145 8.71594,-9.3467 z m -3.45019,14.25709 8.71594,-9.3467 34.02989,31.73338 -8.71594,9.3467 z m 49.63051,-26.43328 c -2.7788,-1.77088 -5.30423,-2.66969 -7.57638,-2.69648 -2.27214,-0.0268 -4.4721,1.10072 -6.59995,3.38256 -1.39128,1.49197 -2.29494,2.96689 -2.71101,4.4248 -0.41607,1.45791 -0.52732,2.83087 -0.33375,4.11891 0.19357,1.28804 0.59468,2.44146 1.20337,3.46029 0.60869,1.01883 1.22167,1.85708 1.83897,2.51476 z m -8.25478,20.72903 c 3.15058,2.69184 6.06071,3.9699 8.73047,3.83422 2.66977,-0.13569 5.23222,-1.51995 7.68743,-4.15284 1.75956,-1.8869 2.80187,-3.95037 3.12694,-6.19048 0.32507,-2.24011 0.10426,-4.00476 -0.66246,-5.29401 l 7.67248,-8.22773 c 2.85337,5.12201 3.88915,9.86167 3.10736,14.21913 -0.78179,4.35745 -2.97314,8.4669 -6.57411,12.32847 -2.49612,2.67677 -5.17453,4.69124 -8.03531,6.04349 -2.86078,1.35225 -5.77662,2.03779 -8.74764,2.05663 -2.97101,0.0188 -5.93202,-0.58882 -8.88312,-1.82302 -2.9511,-1.2342 -5.74304,-3.07887 -8.37592,-5.53408 -2.54513,-2.37337 -4.52595,-4.99988 -5.94255,-7.87964 -1.41659,-2.87976 -2.2096,-5.8343 -2.37907,-8.86373 -0.16947,-3.02944 0.27734,-6.03789 1.34046,-9.02547 1.06311,-2.98757 2.80179,-5.77582 5.21608,-8.36482 2.70072,-2.89618 5.61307,-4.8976 8.73714,-6.00433 3.12406,-1.10673 6.27399,-1.47143 9.44987,-1.09413 3.17588,0.37729 6.25696,1.38406 9.24332,3.02033 2.98636,1.63627 5.7141,3.76973 8.18331,6.40046 z m 78.38817,-54.50084 -8.96145,9.60998 -28.48713,-15.2432 -0.12276,0.13165 17.43875,27.09113 -9.02284,9.67581 -44.09618,-20.93861 9.20698,-9.87327 28.93455,15.29125 0.12276,-0.13164 -17.8248,-27.20501 8.47042,-9.08341 28.43907,15.69063 0.12276,-0.13165 -17.20656,-27.73602 8.96146,-9.60999 z m 14.74094,-62.52338 c 1.97467,1.8414 4.10928,3.40126 6.4039,4.67961 2.29462,1.27835 4.65846,2.10852 7.0916,2.49052 2.43313,0.38201 4.85646,0.18064 7.27008,-0.6041 2.41361,-0.78475 4.70476,-2.33996 6.87353,-4.66568 2.16877,-2.32572 3.56037,-4.71978 4.17484,-7.18225 0.61447,-2.46248 0.64631,-4.89396 0.0955,-7.29452 -0.5508,-2.40056 -1.54384,-4.70073 -2.97914,-6.90059 -1.4353,-2.19985 -3.14026,-4.22046 -5.11492,-6.06186 -2.06243,-1.92325 -4.27384,-3.55471 -6.63428,-4.89444 -2.36044,-1.33973 -4.76816,-2.21082 -7.22324,-2.61329 -2.45507,-0.40247 -4.88937,-0.21133 -7.30299,0.57342 -2.41362,0.78475 -4.70477,2.33996 -6.87353,4.66568 -2.16877,2.32572 -3.56037,4.71977 -4.17484,7.18225 -0.61447,2.46248 -0.63534,4.90418 -0.0626,7.3252 0.57274,2.42102 1.60966,4.76212 3.11079,7.02335 1.50112,2.26124 3.28287,4.35346 5.34529,6.2767 z m -9.63663,10.33403 c -3.51052,-3.27361 -6.27764,-6.83845 -8.30143,-10.69464 -2.02379,-3.85618 -3.23394,-7.815 -3.6305,-11.8766 -0.39655,-4.06158 0.10902,-8.12278 1.51673,-12.1837 1.4077,-4.06091 3.78924,-7.89045 7.14469,-11.48873 3.39638,-3.64217 7.06069,-6.29601 10.99306,-7.96162 3.93237,-1.66561 7.93817,-2.44227 12.01753,-2.33001 4.07935,0.11227 8.11295,1.04331 12.10091,2.79318 3.98797,1.74988 7.73715,4.26158 11.24766,7.53519 3.42275,3.19176 6.12405,6.69523 8.10396,10.51049 1.97992,3.81527 3.14619,7.73317 3.49886,11.75384 0.35267,4.02067 -0.17559,8.0402 -1.58477,12.05872 -1.40919,4.01852 -3.81192,7.84879 -7.2083,11.49096 -3.35545,3.59828 -6.99856,6.25138 -10.92945,7.95939 -3.93089,1.70801 -7.91401,2.52634 -11.94948,2.455 -4.03548,-0.0713 -8.0252,-0.96148 -11.96928,-2.67043 -3.94408,-1.70895 -7.62744,-4.15928 -11.05019,-7.35104 z m 37.32464,-61.5361 8.28628,-8.88595 4.73917,4.41935 0.18414,-0.19747 c -0.86981,-3.0262 -0.87473,-5.90214 -0.0147,-8.6279 0.85999,-2.72577 2.21068,-5.07595 4.05208,-7.05061 2.33245,-2.50125 4.58552,-4.23554 6.75926,-5.20296 2.17375,-0.9674 4.29361,-1.34921 6.35968,-1.14542 2.06606,0.20379 4.13963,0.92736 6.22077,2.17071 2.08113,1.24335 4.17483,2.84709 6.28114,4.81125 l 20.93134,19.51879 -8.71594,9.3467 -19.21998,-17.92291 c -2.80841,-2.61889 -5.31291,-4.13399 -7.51358,-4.54534 -2.20067,-0.41136 -4.34443,0.50193 -6.43136,2.73988 -2.37336,2.54513 -3.33503,5.09398 -2.88505,7.64664 0.44999,2.55266 2.40827,5.4453 5.8749,8.67798 l 17.83772,16.63394 -8.71594,9.3467 z m 22.99487,-50.65611 8.71594,-9.3467 46.99679,43.82521 -8.71594,9.3467 z m 81.76974,14.98156 c 1.82336,3.58725 2.48857,6.8328 1.99565,9.73679 -0.49292,2.90398 -2.23295,5.9576 -5.22011,9.16094 -0.90025,0.9654 -1.82315,1.88911 -2.76876,2.77118 -0.9456,0.88207 -1.91239,1.76487 -2.9004,2.64842 l -7.70115,-7.18144 c 0.90616,-0.79579 1.83277,-1.6135 2.77986,-2.45318 0.94709,-0.83967 1.82833,-1.7407 2.64377,-2.70313 1.01412,-1.35145 1.38052,-2.71209 1.09919,-4.08197 -0.28133,-1.36988 -0.92662,-2.52538 -1.93589,-3.46655 -0.74599,-0.69564 -1.57083,-1.2187 -2.47458,-1.56922 l -43.03334,-17.85548 9.26836,-9.93909 30.48237,14.02731 0.12276,-0.13164 -16.36501,-29.16634 9.02284,-9.67581 z';
    this.width = 591;
    this.height = 751;
    this._svg.setAttribute('stroke', 'none');
    const watermarkGroup = this.svgContext.createElement('g');
    watermarkGroup.setAttribute('font-family', 'NeueHaasGroteskTextPro');
    watermarkGroup.setAttribute('font-size', '12');
    watermarkGroup.setAttribute('font-style', 'normal');
    watermarkGroup.setAttribute('font-weight', 'bold');
    watermarkGroup.setAttribute('text-decoration', 'none');
    watermarkGroup.setAttribute('stroke', 'none');
    watermarkGroup.setAttribute('fill', '#000000');
    this._svg.appendChild(watermarkGroup);
    watermarkGroup.setAttribute('transform', 'translate(5,43)');
    for (let rIdx = 0; rIdx < this.row; rIdx++) {
      for (let cIdx = 0; cIdx < this.column; cIdx++) {
        const transX = this.Af + cIdx * this.Mf;
        const transY = this.Tf + rIdx * this.Nf;
        const text = this.svgContext.createElement('text');
        watermarkGroup.appendChild(text);
        text.setAttribute('transform', `translate(${transX},${transY}) rotate(-45)`);
        const preview = document.createTextNode('Preview');
        text.appendChild(preview);
      }
    }
    const gradientId = this._svg.getAttribute('id') + '-linearGradient';
    const linearGradient = this.svgContext.createElement('linearGradient');
    linearGradient.setAttribute('id', gradientId);
    this._svg.appendChild(linearGradient);
    for (const attr in this.gradientInfo) {
      linearGradient.setAttribute(attr, this.gradientInfo[attr]);
    }
    const stop = this.svgContext.createElement('stop');
    linearGradient.appendChild(stop);
    stop.setAttribute('offset', '0%');
    stop.setAttribute('stop-color', '#DEDEDE');
    const stop1 = this.svgContext.createElement('stop');
    linearGradient.appendChild(stop1);
    stop1.setAttribute('offset', '100%');
    stop1.setAttribute('stop-color', '#3D3D3D');
    const mask = this.svgContext.createElement('g');
    this._svg.appendChild(mask);
    const path = this.svgContext.createElement('path');
    mask.appendChild(path);
    path.setAttribute('d', this.pathData);
    path.setAttribute('opacity', this.opacity.toString());
    path.setAttribute('style', `mix-blend-mode:multiply;fill:url(#${gradientId})`);
  }
}

/***/ }),

/***/ 15165:
/*!**********************************************!*\
  !*** ./src/app/note-editor/display/shape.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Shape)
/* harmony export */ });
/* harmony import */ var _display_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./display-object */ 74418);
/* harmony import */ var _svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svg-graphics */ 66821);


class Shape extends _display_object__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this._graphics = null;
  }
  get graphics() {
    if (this._graphics == null) {
      this._graphics = new _svg_graphics__WEBPACK_IMPORTED_MODULE_1__.SvgGraphics(this, this._svg);
    }
    return this._graphics;
  }
}

/***/ }),

/***/ 75345:
/*!***********************************************!*\
  !*** ./src/app/note-editor/display/sprite.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Sprite)
/* harmony export */ });
/* harmony import */ var _display_object_container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./display-object-container */ 49118);
/* harmony import */ var _svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./svg-graphics */ 66821);


class Sprite extends _display_object_container__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get buttonMode() {
    throw Error('abstract method');
  }
  get dropTarget() {
    throw Error('abstract method');
  }
  set dropTarget(t) {
    throw Error('abstract method');
  }
  get hitArea() {
    throw Error('abstract method');
  }
  set hitArea(t) {
    throw Error('abstract method');
  }
  get useHandCursor() {
    throw Error('abstract method');
  }
  get graphics() {
    if (this._graphics == null) {
      this._graphics = new _svg_graphics__WEBPACK_IMPORTED_MODULE_1__.SvgGraphics(this, this._svg);
    }
    return this._graphics;
  }
  set buttonMode(t) {
    this._buttonMode = t;
  }
  set useHandCursor(t) {
    this._useHandCursor = t;
  }
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this._buttonMode = false;
    this._useHandCursor = false;
    this._graphics = null;
  }
}

/***/ }),

/***/ 22616:
/*!**********************************************!*\
  !*** ./src/app/note-editor/display/stage.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Stage)
/* harmony export */ });
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _display_list_stats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./display-list-stats */ 82910);
/* harmony import */ var _display_object_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./display-object-container */ 49118);



class Stage extends _display_object_container__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get width() {
    return this.controller.stageWidth;
  }
  set width(v) {
    super.width = v;
  }
  get height() {
    return this.controller.stageHeight;
  }
  set height(v) {
    super.height = v;
  }
  get stageOffset() {
    return this.controller.stageOffset;
  }
  get stage() {
    return this;
  }
  get focus() {
    return this._focus;
  }
  set focus(focusEl) {
    if (focusEl !== this.focus) {
      const prevFocus = this._focus;
      this._focus = focusEl;
      if (prevFocus) {
        if (this._focusElement && !focusEl) {
          setTimeout(() => {
            if (this._focusElement && !this.focus) {
              this._focusElement.blur();
            }
          }, 100);
        }
        if (prevFocus instanceof _text_text_field__WEBPACK_IMPORTED_MODULE_0__["default"]) {
          prevFocus.teardownFocusElement();
        }
      }
      if (focusEl && focusEl == this._focus && focusEl instanceof _text_text_field__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        if (!this._focusElement) {
          const textAreaEl = document.createElement('textarea');
          textAreaEl.setAttribute('autocapitalize', 'off');
          textAreaEl.setAttribute('autocorrect', 'off');
          textAreaEl.style.overflowX = 'hidden';
          textAreaEl.style.overflowY = 'hidden';
          textAreaEl.style.boxSizing = 'content-box';
          this.controller.el.nativeElement.children[0].append(textAreaEl);
          this._focusElement = textAreaEl;
        }
        focusEl.setupFocusElement(this._focusElement);
        this._focusElement.focus();
      }
    }
  }
  get displayListStats() {
    const displayListStats = new _display_list_stats__WEBPACK_IMPORTED_MODULE_1__["default"]();
    this.updateDisplayListStats(displayListStats);
    return displayListStats;
  }
  constructor(controller, svg, noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this.align = null;
    this.allowsFullScreen = false;
    this.allowsFullScreenInteractive = false;
    this.autoOrients = false;
    this.color = 0;
    this.colorCorrection = null;
    this.colorCorrectionSupport = null;
    this.deviceOrientation = null;
    this.displayState = null;
    this.frameRate = NaN;
    this.fullScreenHeight = 0;
    this.fullScreenSourceRect = null;
    this.fullScreenWidth = 0;
    this.mouseLock = false;
    this.orientation = null;
    this.quality = null;
    this.scaleMode = null;
    this.showDefaultContextMenu = false;
    this.softKeyboardRect = null;
    this.stageFocusRect = false;
    this.stageHeight = 0;
    this.stageWidth = 0;
    this.supportedOrientations = null;
    this.wmodeGPU = false;
    this.controller = null;
    this._mouseX = NaN;
    this._mouseY = NaN;
    this.mouseButton = false;
    this._focus = null;
    this._focusElement = null;
    this.controller = controller;
    if (!svg) {
      svg = controller.rootSvg;
    }
    svg.append(this.svgElement);
    this.onFocusSub$ = noteEditorService.onFocus.subscribe(el => {
      this.focus = el;
    });
    // svg.addEventListener('mousedown', this.trackMouseState.bind(this));
    // svg.addEventListener('mousemove', this.trackMouseState.bind(this));
    // svg.addEventListener('mouseup', this.trackMouseState.bind(this));
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.trackMouseState),
    //   true
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_MOVE,
    //   RumtimeHelper.bindMethod(this, this.trackMouseState),
    //   true
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_UP,
    //   RumtimeHelper.bindMethod(this, this.trackMouseState),
    //   true
    // );
  }

  trackMouseState(evt) {
    console.log('stage');
    const clientX = evt.clientX;
    const clientY = evt.clientY;
    const mouseTransformed = this.svgContext.transformPoint(clientX, clientY, this.screenCTM.inverse()); // todo localX localY
    const stageOffset = this.stageOffset;
    const stageX = clientX - stageOffset.x;
    const stageY = clientY - stageOffset.y;
    this._mouseX = stageX;
    this._mouseY = stageY;
    // console.log('-------------------------');
    // console.log(this._mouseX);
    // console.log(this._mouseY);
    // console.log('=========================');
    if (evt.type === 'mousedown') {
      this.mouseButton = true;
    } else if (evt.type === 'mouseup') {
      this.mouseButton = false;
    }
  }
  mousePositionFor(svgEl) {
    if (svgEl === this) {
      return {
        x: this._mouseX,
        y: this._mouseY
      };
    }
    return this.svgContext.transformPoint(this.stageOffset.x + this._mouseX, this.stageOffset.y + this._mouseY, svgEl.screenCTM.inverse());
  }
}
Stage.isSupportsOrientationChange = false;

/***/ }),

/***/ 66821:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/display/svg-graphics.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CapsStyle": () => (/* binding */ CapsStyle),
/* harmony export */   "JointStyle": () => (/* binding */ JointStyle),
/* harmony export */   "SvgGraphics": () => (/* binding */ SvgGraphics)
/* harmony export */ });
/* harmony import */ var _graphics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graphics */ 36404);

var CapsStyle;
(function (CapsStyle) {
  CapsStyle["NONE"] = "none";
  CapsStyle["ROUND"] = "round";
  CapsStyle["SQUARE"] = "square";
})(CapsStyle || (CapsStyle = {}));
var JointStyle;
(function (JointStyle) {
  JointStyle["BEVEL"] = "bevel";
  JointStyle["MITER"] = "miter";
  JointStyle["ROUND"] = "round";
})(JointStyle || (JointStyle = {}));
class SvgGraphics extends _graphics__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get CAPS_MAP() {
    return {
      none: 'butt',
      round: 'round',
      square: 'square'
    };
  }
  static get JOINT_MAP() {
    return {
      bevel: 'bevel',
      miter: 'miter',
      round: 'round'
    };
  }
  get svgContext() {
    return this._object.svgContext;
  }
  constructor(obj, svg) {
    super();
    this._fillProperties = null;
    this._strokeProperties = null;
    this._transformProperties = null;
    this._path = null;
    this._pathData = null;
    this._alphaStack = null;
    this._globalAlpha = 1;
    this._svg = null;
    this._object = null;
    this._object = obj;
    this._svg = svg;
  }
  clear() {
    while (this._object._svgGraphicsCount > 0) {
      this._svg.removeChild(this._svg.firstChild);
      this._object._svgGraphicsCount--;
    }
    this._path = null;
    this._fillProperties = null;
    this._strokeProperties = null;
    this._transformProperties = null;
  }
  beginFill(color, alpha = 1) {
    const fillProperties = {};
    if (color !== 0 || alpha * this._globalAlpha !== 1) {
      fillProperties.fill = _graphics__WEBPACK_IMPORTED_MODULE_0__["default"].colorToRGBA(color, alpha * this._globalAlpha);
    }
    this._fillProperties = fillProperties;
    this._path = null;
  }
  beginSvgFill(color) {
    this._fillProperties = {
      fill: color
    };
    this._path = null;
  }
  endFill() {
    this._fillProperties = null;
    this._path = null;
  }
  lineTo(x, y) {
    this.createPath(true);
    this.appendPathData(`L${x},${y}`);
  }
  moveTo(x, y) {
    this.createPath(false);
    this.appendPathData(`M${x},${y}`);
  }
  svgPath(pathData) {
    this.createPath(false);
    this.appendPathData(pathData);
  }
  svgStroke(color, strokeWidth, linecap, linejoin, miterLimit) {
    this._strokeProperties = {};
    if (color) {
      this._strokeProperties.stroke = color;
    }
    if (strokeWidth) {
      this._strokeProperties['stroke-width'] = strokeWidth;
    }
    if (linecap) {
      this._strokeProperties['stroke-linecap'] = linecap;
    }
    if (linejoin) {
      this._strokeProperties['stroke-linejoin'] = linejoin;
    }
    if (miterLimit) {
      this._strokeProperties['stroke-miterlimit'] = miterLimit;
    }
  }
  svgTransform(transform) {
    this._transformProperties = {
      transform
    };
    this._path = null;
  }
  lineStyle(strokeWidth = NaN, color = 0, alpha = 1, lineCap = null, lineJoin = null, miterLimit = 3) {
    const strokeProperties = {};
    strokeProperties.stroke = _graphics__WEBPACK_IMPORTED_MODULE_0__["default"].colorToRGBA(color, alpha * this._globalAlpha);
    if (!isNaN(strokeWidth) && strokeWidth > 0.5) {
      strokeProperties['stroke-width'] = strokeWidth;
    } else {
      strokeProperties['stroke-width'] = 0.5;
    }
    if (lineCap) {
      const linecap = SvgGraphics.CAPS_MAP[lineCap];
      if (linecap) {
        strokeProperties['stroke-linecap'] = linecap;
      }
    }
    if (lineJoin) {
      const linejoin = SvgGraphics.JOINT_MAP[lineJoin];
      if (linejoin) {
        strokeProperties['stroke-linejoin'] = linejoin;
      }
    }
    if (miterLimit < 3 || miterLimit > 4) {
      strokeProperties['stroke-miterlimit'] = miterLimit;
    }
    this._strokeProperties = strokeProperties;
    this._path = null;
  }
  drawRect(x, y, width, height) {
    this._path = null;
    const rect = this.svgContext.createElement('rect');
    rect.setAttribute('x', x);
    rect.setAttribute('y', y);
    rect.setAttribute('width', width);
    rect.setAttribute('height', height);
    this.applyFillAndStroke(rect);
    this.appendGraphicsElement(rect);
  }
  drawEllipse(x, y, dx, dy) {
    this._path = null;
    const ellipse = this.svgContext.createElement('ellipse');
    ellipse.setAttribute('x', x);
    ellipse.setAttribute('y', y);
    ellipse.setAttribute('rx', dx / 2);
    ellipse.setAttribute('ry', dy / 2);
    this.applyFillAndStroke(ellipse);
    this.appendGraphicsElement(ellipse);
  }
  drawCircle(cx, cy, r) {
    this._path = null;
    const circle = this.svgContext.createElement('circle');
    circle.setAttribute('cx', cx);
    circle.setAttribute('cy', cy);
    circle.setAttribute('r', r);
    this.applyFillAndStroke(circle);
    this.appendGraphicsElement(circle);
  }
  curveTo(x1, y1, x, y) {
    this.createPath(true);
    this.appendPathData(`Q${x1},${y1} ${x},${y}`);
  }
  pushAlpha(alpha) {
    this._path = null;
    if (this._alphaStack == null) {
      this._alphaStack = [];
    }
    this._alphaStack.push(this._globalAlpha);
    this._globalAlpha = this._globalAlpha * alpha;
  }
  popAlpha() {
    this._path = null;
    this._globalAlpha = this._alphaStack.pop();
  }
  applyFillAndStroke(node) {
    let attr;
    if (this._fillProperties) {
      for (attr in this._fillProperties) {
        node.setAttribute(attr, this._fillProperties[attr]);
      }
    } else {
      node.setAttribute('fill', 'none');
    }
    if (this._strokeProperties) {
      for (const attr in this._strokeProperties) {
        node.setAttribute(attr, this._strokeProperties[attr]);
      }
    } else {
      node.setAttribute('stroke', 'none');
    }
  }
  applyTransform(node) {
    if (this._transformProperties) {
      for (const attr in this._transformProperties) {
        node.setAttribute(attr, this._transformProperties[attr]);
      }
    }
  }
  createPath(moveToOrigin) {
    if (this._path == null) {
      this._path = this.svgContext.createElement('path');
      this.applyFillAndStroke(this._path);
      this.applyTransform(this._path);
      this.appendGraphicsElement(this._path);
      this._pathData = '';
    }
    if (moveToOrigin && this._pathData === '') {
      this._pathData = 'M0,0';
    }
  }
  appendPathData(pathData) {
    if (this._path != null) {
      this._pathData += pathData;
      this._path.setAttribute('d', this._pathData);
    }
  }
  setPathAttribute(attr, val) {
    if (this._path != null) {
      this._path.setAttribute(attr, val);
    }
  }
  appendGraphicsElement(graphicsEl) {
    if (this._object._svgGraphicsCount < this._svg.childNodes.length) {
      this._svg.insertBefore(graphicsEl, this._svg.childNodes[this._object._svgGraphicsCount]);
    } else {
      this._svg.appendChild(graphicsEl);
    }
    this._object._svgGraphicsCount++;
  }
}

/***/ }),

/***/ 51930:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/document/measure-selection.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureSelection)
/* harmony export */ });
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _object_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./object-selection */ 77172);
/* harmony import */ var _range_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./range-selection */ 52152);
/* harmony import */ var _score_clipboard__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./score-clipboard */ 52029);
/* harmony import */ var _selection__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./selection */ 70122);







class MeasureSelection extends _selection__WEBPACK_IMPORTED_MODULE_6__["default"] {
  get startIndex() {
    return this._startIndex;
  }
  get endIndex() {
    return this._endIndex;
  }
  get start() {
    return new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this.startIndex, 0);
  }
  get end() {
    return new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](Math.max(0, this._endIndex - 1), 0);
  }
  get objectSelection() {
    return new _object_selection__WEBPACK_IMPORTED_MODULE_3__["default"](this.score, this.selectedNotations(), this.noteEditorService);
  }
  get selectedRange() {
    return new _range_selection__WEBPACK_IMPORTED_MODULE_4__["default"](this.score, new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this.startIndex, 0), new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this.endIndex - 1, this.score.systemStaff.getMeasureAt(this.endIndex - 1).duration), this.score.staves.slice(), this.noteEditorService);
  }
  get selectedMeasures() {
    return this;
  }
  constructor(score, startIndex, endIndex, noteEditorService) {
    super(noteEditorService);
    this._startIndex = 0;
    this._endIndex = 0;
    this._score = score;
    this._startIndex = startIndex;
    this._endIndex = endIndex;
  }
  contains(obj) {
    return this.includes(obj) && obj instanceof _models_measure__WEBPACK_IMPORTED_MODULE_0__["default"] && obj.isSystemMeasure;
  }
  includes(obj) {
    let measure = null;
    if (obj instanceof _models_measure__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      measure = obj;
    } else if (obj instanceof _models_notation__WEBPACK_IMPORTED_MODULE_2__.Notation) {
      measure = obj.measure;
    }
    if (measure) {
      const index = measure.index;
      return index >= this.startIndex && index < this.endIndex;
    }
    return false;
  }
  union(selection) {
    return selection.selectedMeasures.withRange(this.startIndex, this.endIndex);
  }
  dispatchStatusChange() {
    // this.score.systemStaff.dispatchEvent(
    //   new NotationEvent(
    //     NotationEvent.SYSTEM_STATUS_CHANGE,
    //     this.startIndex,
    //     this.endIndex
    //   )
    // );
    this.noteEditorService.onSystemStatusChange.emit({
      startMeasureIndex: this.startIndex,
      endMeasureIndex: this.endIndex
    });
    for (let i = this.startIndex; i < Math.min(this.score.numMeasures, this.endIndex + 1); i++) {
      let staves = [this.score.systemStaff];
      staves = staves.concat(this.score.staves.slice());
      for (let j = 0; j < staves.length; j++) {
        const stave = staves[j];
        const staff = stave;
        // staff.dispatchEvent(
        //   new NotationEvent(
        //     NotationEvent.STAFF_STATUS_CHANGE,
        //     this.startIndex,
        //     this.endIndex
        //   )
        // );
        this.noteEditorService.onStaffStatusChange.emit({
          staff,
          startIndex: this.startIndex,
          endIndex: this.endIndex
        });
        const measure = staff.getMeasureAt(i);
        if (measure) {
          //   measure.dispatchEvent(
          //     new NotationEvent(NotationEvent.MEASURE_STATUS_CHANGE)
          //   );
          this.noteEditorService.onMeasureStatusChange.emit({
            measure
          });
          for (let k = 0; k < measure.measureNotations.length; k++) {
            const notation = measure.measureNotations[k];
            // (notation as Notation).dispatchEvent(
            //   new NotationEvent(NotationEvent.NOTATION_STATUS_CHANGE)
            // );
            this.noteEditorService.onNotationStatusChange.emit({
              notation
            });
          }
        }
      }
    }
  }
  createClipboard() {
    return new _score_clipboard__WEBPACK_IMPORTED_MODULE_5__["default"](this);
  }
  selectedNotations() {
    let notations = [];
    for (let i = this.startIndex; i < this.endIndex; i++) {
      for (let j = 0; j < this.score.staves.length; j++) {
        const stave = this.score.staves[j];
        const staff = stave;
        notations = notations.concat(staff.getMeasureAt(i).measureNotations);
      }
    }
    return notations;
  }
  withMeasure(measure) {
    return this.withRange(measure.index, measure.index + 1);
  }
  cloneMeasureSelection() {
    return new MeasureSelection(this.score, this.startIndex, this.endIndex, this.noteEditorService);
  }
  withRange(startIdx, endIdx) {
    if (startIdx >= this.startIndex && endIdx <= this.endIndex) {
      return this;
    } else {
      return new MeasureSelection(this.score, Math.min(this.startIndex, startIdx), Math.max(this.endIndex, endIdx), this.noteEditorService);
    }
  }
  toJSON() {
    return {
      type: 'measure',
      startMeasureIndex: this.startIndex,
      endMeasureIndex: this.endIndex
    };
  }
}

/***/ }),

/***/ 79659:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/document/measure-validator.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureValidator)
/* harmony export */ });
/* harmony import */ var _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/measure-validation-event */ 1179);
/* harmony import */ var _utils_dictionary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/dictionary */ 97837);


class MeasureValidator {
  static get VERY_SHORT_DELAY() {
    return 1;
  }
  static get SHORT_DELAY() {
    return 10;
  }
  static get LONG_DELAY() {
    return 300;
  }
  get invalidMeasures() {
    if (this._invalidMeasureMap == null) {
      return [];
    }
    const invalidMeasures = [];
    for (const measure of this._invalidMeasureMap.map.values()) {
      if (measure) {
        invalidMeasures.push(measure);
      }
    }
    return invalidMeasures;
  }
  get invalidStaves() {
    if (this._invalidStaffMap == null) {
      return [];
    }
    const invalidStaves = [];
    for (const staff of this._invalidStaffMap.map.values()) {
      if (staff) {
        invalidStaves.push(staff);
      }
    }
    return invalidStaves;
  }
  constructor(noteEditorService) {
    this.processTimerEnabled = false;
    this.processTime = 0;
    this._invalidMeasureMap = null;
    this._sequenceChanges = [];
    this._invalidStaffMap = null;
    this._invalidScore = false;
    this._invalidGeometry = false;
    this._eventType = null;
    this._needsReflow = false;
    this._disableFixup = false;
    this._processing = false;
    this._modelCallbacks = [];
    this._timer = null;
    this.noteEditorService = noteEditorService;
    // this._timer = new Timer(MeasureValidator.SHORT_DELAY, 1);
    // this._timer.addEventListener(
    //   TimerEvent.TIMER,
    //   RumtimeHelper.bindMethod(this, this.handleValidationTimer)
    // );
  }

  measureChanged(systemMeasure, evtType, type = null) {
    switch (type) {
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW:
        this._needsReflow = true;
        break;
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].ADD:
        this._sequenceChanges.push({
          type,
          measureIndex: systemMeasure.index,
          systemMeasure
        });
        break;
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REMOVE:
        this._sequenceChanges.push({
          type,
          measureIndex: systemMeasure.index
        });
        systemMeasure = systemMeasure.nextMeasure ? systemMeasure.nextMeasure : systemMeasure.previousMeasure;
        break;
    }
    if (this._invalidMeasureMap == null || this._invalidStaffMap == null) {
      this._invalidMeasureMap = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_1__["default"]();
      this._invalidMeasureMap.put(systemMeasure, systemMeasure);
      this._invalidStaffMap = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_1__["default"]();
      this._invalidStaffMap.put(systemMeasure.staff, systemMeasure.staff);
      this._eventType = evtType;
      this.processChanges();
      return;
    }
    this._invalidMeasureMap.put(systemMeasure, systemMeasure);
    if (this._invalidStaffMap) {
      this._invalidStaffMap.put(systemMeasure.staff, systemMeasure.staff);
    }
    switch (evtType) {
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE:
        this._eventType = evtType;
        break;
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE:
        if (this._eventType == _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].GEOMETRY_CHANGE || this._eventType == _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SPAN_CHANGE) {
          this._eventType = evtType;
        }
        break;
      case _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].GEOMETRY_CHANGE:
        if (this._eventType == _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SPAN_CHANGE) {
          this._eventType = evtType;
        }
        break;
    }
    this.processChanges();
  }
  processChanges() {
    // console.trace();
    this.removeOrphans();
    if (!this._disableFixup) {
      this.fixInvalidatedMeasures();
    }
    this._disableFixup = false;
    if (this._invalidScore) {
      this.noteEditorService.onValidateMeasure.emit(new _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"](_events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE));
    } else {
      const invalidMeasures = this.invalidMeasures;
      if (invalidMeasures.length || this._sequenceChanges.length || this._needsReflow) {
        if (this._sequenceChanges && invalidMeasures.length === 1) {
          const measure = invalidMeasures[0];
          const prevMeasure = measure.staff.getMeasureAt(measure.index - 1);
          if (prevMeasure) {
            invalidMeasures.unshift(prevMeasure);
          }
        }
        const measureValidationEvt = new _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"](this._eventType, invalidMeasures, this.invalidStaves);
        measureValidationEvt.reflow = this._needsReflow;
        measureValidationEvt.sequenceChanges = this._sequenceChanges;
        if (this._sequenceChanges && this._sequenceChanges.length > 0) {
          this.noteEditorService.onMeasureSequenceChange.emit(measureValidationEvt);
        } else {
          this.noteEditorService.onValidateMeasure.emit(measureValidationEvt);
        }
      }
      if (this._invalidGeometry) {
        this.noteEditorService.onValidateMeasure.emit(new _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"](_events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].GEOMETRY_CHANGE));
      }
    }
    this.reset();
    for (let i = 0; i < this._modelCallbacks.length; i++) {
      const modelCallback = this._modelCallbacks[i];
      modelCallback();
    }
    this._modelCallbacks = [];
    // todo
  }

  fixInvalidatedMeasures() {
    for (let i = 0; i < this.invalidMeasures.length; i++) {
      const measure = this.invalidMeasures[i];
      if (!measure.isSystemMeasure) {
        measure.calculateDerived();
      }
    }
    for (let i = 0; i < this.invalidMeasures.length; i++) {
      const measure = this.invalidMeasures[i];
      if (!measure.isSystemMeasure) {
        measure.cleanUpAccidentals();
        measure.cleanUpClefs();
        measure.cleanUpRestPositions();
        measure.staff.defaultClefChanges(measure.index);
        measure.staff.defaultClefChanges(measure.index + 1);
        if (this._eventType == _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE || this._eventType == _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE) {
          measure.defaultTransposableSpans(true);
        }
      }
    }
  }
  removeOrphans() {
    for (let i = 0; i < this.invalidMeasures.length; i++) {
      const measure = this.invalidMeasures[i];
      if (measure.staff == null || measure.staff.score == null) {
        this._invalidMeasureMap.map.delete(measure);
      }
    }
  }
  disableFixup() {
    this._disableFixup = true;
  }
  rebuildScore() {
    this._invalidScore = true;
    // this.startTimer(MeasureValidator.SHORT_DELAY);
    // this.dispatchEvent(
    //   new MeasureValidationEvent(MeasureValidationEvent.REBUILD_SCORE)
    // );
  }

  rebuildGeometry() {
    this._invalidGeometry = true;
    // this.startTimer(MeasureValidator.LONG_DELAY);
  }

  reset() {
    this._invalidMeasureMap = null;
    this._sequenceChanges = [];
    this._invalidStaffMap = null;
    this._invalidScore = false;
    this._invalidGeometry = false;
    this._processing = false;
    this._needsReflow = false;
    // this._timer.stop(); todo
    // this._timer.delay = MeasureValidator.SHORT_DELAY;
    // this.willProcess = false;
  }
}

/***/ }),

/***/ 77172:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/document/object-selection.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ObjectSelection)
/* harmony export */ });
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_note_set_child__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/note-set-child */ 40073);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_rhythm_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/rhythm-element */ 60828);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../processing/rhythm-processor */ 29722);
/* harmony import */ var _utils_dictionary__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/dictionary */ 97837);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _measure_selection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./measure-selection */ 51930);
/* harmony import */ var _range_selection__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./range-selection */ 52152);
/* harmony import */ var _selection__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./selection */ 70122);
/* harmony import */ var _sequence_clipboard__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./sequence-clipboard */ 37014);














class ObjectSelection extends _selection__WEBPACK_IMPORTED_MODULE_12__["default"] {
  get selectedObjects() {
    return this._selectedObjects;
  }
  get score() {
    return this._score;
  }
  get start() {
    return this.selectedRange.end;
  }
  get end() {
    return this.selectedRange.end;
  }
  get selectedVoiceNumber() {
    let selectedVoiceNumber = _utils_voice_number__WEBPACK_IMPORTED_MODULE_9__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
    let staff = null;
    for (let i = 0; i < this._selectedObjects.length; i++) {
      const obj = this._selectedObjects[i];
      if (obj instanceof _models_rhythm_element__WEBPACK_IMPORTED_MODULE_5__["default"]) {
        const rhythmElement = obj;
        const voiceNumber = rhythmElement.voiceNumber;
        const measureStaff = rhythmElement.measure.staff;
        if (selectedVoiceNumber !== _utils_voice_number__WEBPACK_IMPORTED_MODULE_9__.VoiceNumber.UNKNOWN_VOICE_NUMBER && voiceNumber !== selectedVoiceNumber || staff && measureStaff !== staff) {
          return _utils_voice_number__WEBPACK_IMPORTED_MODULE_9__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
        }
        selectedVoiceNumber = voiceNumber;
        staff = measureStaff;
      }
    }
    return selectedVoiceNumber;
  }
  get objectSelection() {
    return this;
  }
  get selectedRange() {
    let rangeSelection = new _range_selection__WEBPACK_IMPORTED_MODULE_11__["default"](this.score, _models_measure_position__WEBPACK_IMPORTED_MODULE_0__["default"].MAX_POSITION, _models_measure_position__WEBPACK_IMPORTED_MODULE_0__["default"].MIN_POSITION, [], this.noteEditorService);
    for (let i = 0; i < this._selectedObjects.length; i++) {
      const obj = this._selectedObjects[i];
      let notation = null,
        valueNotation = null;
      if (obj instanceof _models_notation__WEBPACK_IMPORTED_MODULE_2__.Notation) {
        notation = obj;
        valueNotation = notation.valueNotation;
      }
      if (valueNotation) {
        rangeSelection = rangeSelection.union(_range_selection__WEBPACK_IMPORTED_MODULE_11__["default"].getRangeForNotation(valueNotation, this.noteEditorService));
      } else {
        rangeSelection = rangeSelection.union(_range_selection__WEBPACK_IMPORTED_MODULE_11__["default"].getRangeForNotation(notation, this.noteEditorService));
      }
    }
    return rangeSelection;
  }
  get selectedMeasures() {
    let measureIdx = 2147483647;
    let nextMeasureIdx = 0;
    for (let i = 0; i < this._selectedObjects.length; i++) {
      const obj = this._selectedObjects[i];
      if (obj instanceof _models_notation__WEBPACK_IMPORTED_MODULE_2__.Notation && obj.measure) {
        const index = obj.measure.index;
        measureIdx = Math.min(measureIdx, index);
        nextMeasureIdx = Math.max(nextMeasureIdx, index + 1);
      }
    }
    return new _measure_selection__WEBPACK_IMPORTED_MODULE_10__["default"](this.score, measureIdx, nextMeasureIdx, this.noteEditorService);
  }
  get empty() {
    return this._selectedObjects.length === 0;
  }
  constructor(score, objs, noteEditorService) {
    super(noteEditorService);
    this._score = null;
    this._selectedObjects = null;
    this._dictionary = null;
    this._score = score;
    this._selectedObjects = [];
    this._dictionary = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_8__["default"]();
    for (let i = 0; i < objs.length; i++) {
      const obj = objs[i];
      if (this._dictionary.get(obj) == null) {
        this._dictionary.put(obj, obj);
        this._selectedObjects.push(obj);
      }
    }
  }
  includes(obj) {
    return this.contains(obj);
  }
  contains(obj) {
    return this._dictionary.get(obj) != null;
  }
  union(selection) {
    const objectSelection = selection.objectSelection;
    return new ObjectSelection(this.score, this._selectedObjects.concat(objectSelection._selectedObjects), this.noteEditorService);
  }
  difference(selection) {
    const diffs = [];
    for (let i = 0; i < this._selectedObjects.length; i++) {
      const obj = this._selectedObjects[i];
      if (!selection.contains(obj)) {
        diffs.push(obj);
      }
    }
    return new ObjectSelection(this.score, diffs, this.noteEditorService);
  }
  dispatchStatusChange() {
    for (let i = 0; i < this.selectedObjects.length; i++) {
      const obj = this.selectedObjects[i];
      if (obj instanceof _models_notation__WEBPACK_IMPORTED_MODULE_2__.Notation) {
        this.noteEditorService.onNotationStatusChange.emit({
          notation: obj
        });
        // (obj as Notation).dispatchEvent(
        //   new NotationEvent(NotationEvent.NOTATION_STATUS_CHANGE)
        // );
      }
    }
  }

  createClipboard() {
    const sequenceClipboard = new _sequence_clipboard__WEBPACK_IMPORTED_MODULE_13__["default"]();
    const that = this;
    sequenceClipboard.addRange(this.selectedRange, function (obj) {
      if (obj instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_4__.NoteSet && obj.grace) {
        return null;
      }
      const model = obj;
      const rhythmElement = model.clone();
      return that.pruneUnselected(model, rhythmElement) ? rhythmElement : null;
    });
    sequenceClipboard.fromObjects = true;
    return sequenceClipboard;
  }
  pruneUnselected(model, rhythmElement) {
    if (model instanceof _models_note_set_child__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      return this.includes(model) || this.includes(model.noteSet);
    }
    if (!(model instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_6__["default"]) && !(model instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_4__.NoteSet)) {
      return this.includes(model);
    }
    if (model instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      return true;
    }
    let clear = false,
      hasEmpty = false;
    for (let i = 0; i < model.numChildren; i++) {
      if (this.pruneUnselected(model.getChildAt(i), rhythmElement.getChildAt(i))) {
        clear = true;
      } else {
        rhythmElement.removeChildAt(i);
        hasEmpty = true;
      }
    }
    if (rhythmElement instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_6__["default"] && hasEmpty) {
      new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_7__["default"](rhythmElement).addRests();
    }
    return clear;
  }
  selectedNotations() {
    return this.selectedObjects;
  }
  withMeasure(measure) {
    return this.selectedRange.union(_range_selection__WEBPACK_IMPORTED_MODULE_11__["default"].getRangeForMeasure(measure, this.noteEditorService));
  }
  toJSON() {
    return {
      type: 'object'
    };
  }
}

/***/ }),

/***/ 52152:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/document/range-selection.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RangeSelection)
/* harmony export */ });
/* harmony import */ var _selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selection */ 70122);
/* harmony import */ var _object_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./object-selection */ 77172);
/* harmony import */ var _models_voice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/voice */ 38445);
/* harmony import */ var _models_staff__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/staff */ 35126);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _measure_selection__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measure-selection */ 51930);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _sequence_clipboard__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./sequence-clipboard */ 37014);












class RangeSelection extends _selection__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get DIRECTION_RIGHT() {
    return 'right';
  }
  static get DIRECTION_LEFT() {
    return 'left';
  }
  //   get score() {
  //     return this._score;
  //   }
  //   get start() {
  //     return this._start;
  //   }
  get end() {
    return this._end;
  }
  get staves() {
    return this._staves;
  }
  get direction() {
    return this._direction;
  }
  get objectSelection() {
    return new _object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, this.selectedNotations(), this.noteEditorService);
  }
  get selectedRange() {
    return this;
  }
  get empty() {
    return this.staves.length === 0 || this._start.compareTo(this._end) >= 0;
  }
  get duration() {
    return this.score.rangeDuration(this._start, this._end);
  }
  get selectedMeasures() {
    return new _measure_selection__WEBPACK_IMPORTED_MODULE_9__["default"](this.score, this.start.measureIndex, this.end.measureIndex + 1, this.noteEditorService);
  }
  get selectedVoiceNumber() {
    if (this.staves.length === 1) {
      return new _object_selection__WEBPACK_IMPORTED_MODULE_1__["default"](this.score, this.selectedNotations(), this.noteEditorService).selectedVoiceNumber;
    } else {
      return _utils_voice_number__WEBPACK_IMPORTED_MODULE_10__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
    }
  }
  constructor(score, start, end, staves, noteEditorService, direction = RangeSelection.DIRECTION_RIGHT) {
    super(noteEditorService);
    this._staves = null;
    this._end = null;
    this._direction = null;
    this._score = score;
    this._staves = staves;
    this._start = start;
    this._end = end;
    this._direction = direction;
  }
  contains(t) {
    return false;
  }
  includes(obj) {
    if (obj instanceof _models_staff__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      return this.includesStaff(obj);
    } else if (obj instanceof _models_measure__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      return this.includesMeasure(obj);
    } else if (obj instanceof _models_notation__WEBPACK_IMPORTED_MODULE_5__.Notation) {
      return this.includesNotation(obj);
    }
  }
  dispatchStatusChange() {
    let startMeasureIdx = this.start.measureIndex;
    if (startMeasureIdx === this.score.numMeasures) {
      startMeasureIdx--;
    }
    for (let i = startMeasureIdx; i <= this.end.measureIndex; i++) {
      // const notationEvt = new NotationEvent(
      //   NotationEvent.MEASURE_STATUS_CHANGE
      // );
      const systemMeasure = this.score.systemStaff.getMeasureAt(i);
      if (systemMeasure) {
        this.noteEditorService.onMeasureStatusChange.emit({
          measure: systemMeasure
        });
        // systemMeasure.dispatchEvent(notationEvt);
      }

      for (let j = 0; j < this.score.staves.length; j++) {
        const stave = this.score.staves[j];
        const staff = stave;
        // staff.dispatchEvent(
        //   new NotationEvent(
        //     NotationEvent.STAFF_STATUS_CHANGE,
        //     startMeasureIdx,
        //     this.end.measureIndex
        //   )
        // );
        this.noteEditorService.onStaffStatusChange.emit({
          staff,
          startIndex: startMeasureIdx,
          endIndex: this.end.measureIndex
        });
        const measure = staff.getMeasureAt(i);
        this.noteEditorService.onMeasureStatusChange.emit({
          measure
        });
        // measure.dispatchEvent(notationEvt);
        for (let k = 0; k < measure.measureNotations.length; k++) {
          const notation = measure.measureNotations[k];
          this.noteEditorService.onNotationStatusChange.emit({
            notation
          });
          // (notation as Notation).dispatchEvent(
          //   new NotationEvent(NotationEvent.NOTATION_STATUS_CHANGE)
          // );
        }
      }
    }
  }

  selectedNotations() {
    const notations = [];
    const startMeasureIdx = this.start.measureIndex;
    for (let i = startMeasureIdx; i <= this.end.measureIndex; i++) {
      for (let j = 0; j < this.score.staves.length; j++) {
        const stave = this.score.staves[j];
        const staff = stave;
        if (this.includes(staff)) {
          const measureNotations = staff.getMeasureAt(i).measureNotations;
          for (let k = 0; k < measureNotations.length; k++) {
            const notation = measureNotations[k];
            if (this.includes(notation)) {
              notations.push(notation);
            }
          }
        }
      }
    }
    return notations;
  }
  createClipboard() {
    return new _sequence_clipboard__WEBPACK_IMPORTED_MODULE_11__["default"](this);
  }
  withMeasure(measure) {
    return this.union(RangeSelection.getRangeForMeasure(measure, this.noteEditorService));
  }
  includesEntireStaffRange(staff, start, end) {
    if (!this.includesStaff(staff)) {
      return false;
    }
    start = Math.min(staff.numChildren, start);
    end = Math.min(staff.numChildren, end);
    if (end <= start) {
      return false;
    }
    if (new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](start, 0).compareTo(this._start) < 0) {
      return false;
    }
    const lastMeasure = staff.getMeasureAt(end - 1);
    return !(new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](end - 1, lastMeasure.duration).compareTo(this._end) > 0);
  }
  includesStaff(staff) {
    return this._staves.indexOf(staff) >= 0;
  }
  includesMeasure(measure) {
    return this.includesStaff(measure.staff) && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, 0).compareTo(this._end) < 0 && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration).compareTo(this._start) >= 0;
  }
  includesEntireMeasure(measure) {
    return this.includesStaff(measure.staff) && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, 0).compareTo(this._start) >= 0 && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration).compareTo(this._end) <= 0;
  }
  intersectsMeasure(measure) {
    return this.includesStaff(measure.staff) && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, 0).compareTo(this._end) <= 0 && new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration).compareTo(this._start) >= 0;
  }
  includesNotation(notation) {
    if (notation.measure == null) {
      return false;
    }
    if (!this.includesStaff(notation.measure.staff)) {
      return false;
    }
    const measurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](notation.measure.index, notation.position);
    return measurePosition.compareTo(this._start) >= 0 && measurePosition.compareTo(this._end) < 0;
  }
  includesNotationClosed(notation) {
    if (notation.measure == null) {
      return false;
    }
    if (!this.includesStaff(notation.measure.staff)) {
      return false;
    }
    const measurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](notation.measure.index, notation.position);
    return measurePosition.compareTo(this._start) >= 0 && measurePosition.compareTo(this._end) <= 0;
  }
  union(selection) {
    const selectedRange = selection.selectedRange;
    return this.withRange(selectedRange.start, selectedRange.end).withStaves(selectedRange.staves);
  }
  cloneRangeSelection() {
    return new RangeSelection(this.score, this.start, this.end, this.staves, this.noteEditorService);
  }
  withStaves(staves) {
    const rangeSelection = this.cloneRangeSelection();
    for (let i = 0; i < staves.length; i++) {
      const stave = staves[i];
      if (!rangeSelection.includesStaff(stave)) {
        rangeSelection._staves.push(stave);
      }
    }
    rangeSelection._staves.sort((a, b) => {
      return a.index < b.index ? -1 : a.index > b.index ? 1 : 0;
    });
    return rangeSelection;
  }
  withRange(start, end) {
    const rangeSelection = this.cloneRangeSelection();
    if (start.compareTo(this._start) < 0) {
      rangeSelection._start = start;
    }
    if (end.compareTo(this._end) > 0) {
      rangeSelection._end = end;
    }
    return rangeSelection;
  }
  toJSON() {
    return {
      type: 'range'
    };
  }
  static getRangeForNotation(notation, noteEditorService) {
    let staves;
    if (notation.measure.isSystemMeasure) {
      staves = notation.measure.staff.score.staves.slice();
    } else {
      staves = [notation.measure.staff];
    }
    if (notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_7__["default"]) {
      const valueNotation = notation;
      const notationPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](valueNotation.measure.index, valueNotation.position);
      let endPosition = null;
      if (valueNotation.rhythmContext instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_8__["default"]) {
        const tuplet = valueNotation.rhythmContext;
        if (tuplet.topLevelTuplet && tuplet.topLevelTuplet instanceof _models_voice__WEBPACK_IMPORTED_MODULE_2__["default"] && valueNotation === tuplet.elements[tuplet.numElements - 1]) {
          endPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](valueNotation.measure.index, tuplet.position + tuplet.duration);
        }
      }
      if (endPosition == null) {
        endPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](valueNotation.measure.index, valueNotation.position + valueNotation.duration);
      }
      return new RangeSelection(valueNotation.measure.staff.score, notationPosition, endPosition, staves, noteEditorService);
    }
    const position = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](notation.measure.index, notation.position);
    return new RangeSelection(notation.measure.staff.score, position, position, staves, noteEditorService);
  }
  static getRangeForMeasure(measure, noteEditorService) {
    const start = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, 0);
    const end = new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration);
    return new RangeSelection(measure.staff.score, start, end, [measure.staff], noteEditorService);
  }
  static selectStaff(staff, noteEditorService) {
    const score = staff.score;
    const measure = score.systemStaff.getMeasureAt(score.numMeasures - 1);
    return new RangeSelection(score, new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](0, 0), new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration), [staff], noteEditorService);
  }
  static selectPart(part, noteEditorService) {
    const score = part.score;
    const measure = score.systemStaff.getMeasureAt(score.numMeasures - 1);
    return new RangeSelection(score, new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](0, 0), new _models_measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measure.index, measure.duration), part.staves, noteEditorService);
  }
}

/***/ }),

/***/ 52029:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/document/score-clipboard.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreClipboard)
/* harmony export */ });
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_staff__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/staff */ 35126);


class ScoreClipboard {
  static get EXTERNAL_CLASSNAME() {
    return 'score';
  }
  get score() {
    return this._score;
  }
  constructor(selection) {
    if (selection) {
      this._score = new _models_score__WEBPACK_IMPORTED_MODULE_0__["default"]();
      for (let idx = selection.startIndex; idx < selection.endIndex; idx++) {
        this._score.systemStaff.addMeasure(selection.score.systemStaff.getMeasureAt(idx).clone());
      }
      for (let idx = 0; idx < selection.score.staves.length; idx++) {
        const staff = selection.score.staves[idx];
        const staffCopy = new _models_staff__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this._score.addStaff(staffCopy).part = staff.part;
        for (let i = selection.startIndex; i < selection.endIndex; i++) {
          staffCopy.addMeasure(staff.getMeasureAt(i).clone());
        }
      }
    }
  }
}

/***/ }),

/***/ 54434:
/*!********************************************************!*\
  !*** ./src/app/note-editor/document/score-document.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreDocument)
/* harmony export */ });
/* harmony import */ var _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/measure-validation-event */ 1179);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_block_column__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/block-column */ 91203);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_model__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/model */ 10924);
/* harmony import */ var _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/model-event-kind */ 21151);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_page_metrics__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/page-metrics */ 24092);
/* harmony import */ var _models_part__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/part */ 389);
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_recorded_autio_track__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/recorded-autio-track */ 87694);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_score_mix__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/score-mix */ 68511);
/* harmony import */ var _models_span_notation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/span-notation */ 43586);
/* harmony import */ var _models_staff__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/staff */ 35126);
/* harmony import */ var _models_staff_metrics__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../models/staff-metrics */ 26032);
/* harmony import */ var _models_system_symbol__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/system-symbol */ 93093);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _models_voice__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../models/voice */ 38445);
/* harmony import */ var _utils_rhythm_element__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../utils/rhythm-element */ 54131);
/* harmony import */ var _measure_validator__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./measure-validator */ 79659);
/* harmony import */ var _object_selection__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./object-selection */ 77172);
/* harmony import */ var _range_selection__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./range-selection */ 52152);
































class ScoreDocument {
  static get MAX_UNDO_ENTRIES() {
    return 100;
  }
  static get EDIT_PERMISSION() {
    return 1;
  }
  static get COMMENT_PERMISSION() {
    return 2;
  }
  static get SAVE_PERMISSION() {
    return 4;
  }
  static get SAVE_COPY_PERMISSION() {
    return 8;
  }
  static get EXPORT_PERMISSION() {
    return 32;
  }
  static get TEMPLATE_CREATION_PERMISSION() {
    return 64;
  }
  static get PREMIUM_INSTRUMENTS_PERMISSION() {
    return 256;
  }
  static get USER_BASED_SHARING_PERMISSION() {
    return 512;
  }
  static get COLOR_PERMISSION() {
    return 1024;
  }
  static get MIXER_PERMISSION() {
    return 2048;
  }
  static get PART_DISPLAY_PERMISSION() {
    return 4096;
  }
  static get PROMPT_PERMISSION() {
    return 8192;
  }
  static get MIDI_PERMISSION() {
    return 16384;
  }
  static get DEVELOPER_FEATURES_PERMISSION() {
    return 32768;
  }
  static get EDIT_MARKINGS_PERMISSION() {
    return 65536;
  }
  static get SCORE_SHARING_PERMISSION() {
    return 131072;
  }
  static get ASH_FONT_PERMISSION() {
    return 262144;
  }
  static get CONTENT_INJECTION_PERMISSION() {
    return 524288;
  }
  static get SELECT_FONT_PERMISSION() {
    return 1048576;
  }
  static get TRANSCRIBER_PERMISSION() {
    return 2097152;
  }
  static get RECORDING_PERMISSION() {
    return 4194304;
  }
  static get PRINTING_PERMISSION() {
    return 16777216;
  }
  static get LONG_DELAY() {
    return 300;
  }
  get stringIndex() {
    return this._$stringIndex;
  }
  set stringIndex(t) {
    this._$stringIndex = t;
  }
  get advanceAfterNoteEntry() {
    return this._$advanceAfterNoteEntry;
  }
  set advanceAfterNoteEntry(t) {
    this._$advanceAfterNoteEntry = t;
  }
  get measureValidator() {
    return this._measureValidator;
  }
  get undoHistory() {
    return this._undoHistory;
  }
  get permissions() {
    return this._permissions;
  }
  set permissions(t) {
    this._permissions = t;
  }
  get author() {
    return this._author;
  }
  get editable() {
    return (this._permissions & ScoreDocument.EDIT_PERMISSION) !== 0;
  }
  get editableWithNotePallete() {
    return this.editable || this.markingsEditable;
  }
  get markingsEditable() {
    return this.editable || (this._permissions & ScoreDocument.EDIT_MARKINGS_PERMISSION) !== 0;
  }
  get score() {
    return this._score;
  }
  set score(t) {
    if (this._score !== t) {
      if (this._score) {
        // this._score.removeEventListener(
        //   ModelEvent.MODEL_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleModelChange)
        // );
        // this._score.removeEventListener(
        //   ModelUpdateEvent.MODEL_UPDATE,
        //   RumtimeHelper.bindMethod(this, this.handleModelUpdate)
        // );
        // this._score.removeEventListener(
        //   SpanChangeEvent.SPAN_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleSpanChange)
        // );
      }
      this._score = t;
      // this.undoHistory.clear();
      if (this.modelChangeSub$) {
        this.modelChangeSub$.unsubscribe();
      }
      if (this._score) {
        this.modelChangeSub$ = this.noteEditorService.onModelChange.subscribe(evt => {
          this.handleModelChange(evt);
        });
        // this._score.addEventListener(
        //   ModelEvent.MODEL_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleModelChange)
        // );
        // this._score.addEventListener(
        //   ModelUpdateEvent.MODEL_UPDATE,
        //   RumtimeHelper.bindMethod(this, this.handleModelUpdate)
        // );
        // this._score.addEventListener(
        //   SpanChangeEvent.SPAN_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleSpanChange)
        // );
      }
    }
  }

  get layoutContext() {
    return this._layoutContext;
  }
  set layoutContext(t) {
    this._layoutContext = t;
  }
  get requiresSave() {
    return this.editable && (this.permissions & ScoreDocument.SAVE_PERMISSION) !== 0 && this._savedUndoStateId != this.undoHistory.currentStateId;
  }
  get selection() {
    return this._selection;
  }
  set selection(selection) {
    if (selection) {
      const staves = selection.selectedRange.staves;
      if (staves.length) {
        this._activeStaff = staves[0];
      }
    }
    const oldSelection = this._selection;
    this._selection = selection;
    // console.log('oldSelection', oldSelection);
    // console.log('selection', this._selection);
    // console.trace();
    this.adjustSelectionRelatedState();
    if (oldSelection || selection) {
      if (oldSelection == null) {
        this.noteEditorService.onAddSelection.emit(selection);
        this.dispatchSelectEvent('addSelection', selection, true);
      } else if (selection == null) {
        this.noteEditorService.onRemoveSelection.emit(oldSelection);
        this.dispatchSelectEvent('removeSelection', oldSelection, true);
      } else if (oldSelection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"] && selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"]) {
        const oldObjectSelection = oldSelection;
        const objectSelection = selection;
        this.dispatchSelectEvent('removeSelection', oldObjectSelection.difference(objectSelection), false);
        this.dispatchSelectEvent('addSelection', objectSelection.difference(oldObjectSelection), false);
        this.noteEditorService.onRemoveSelection.emit(oldSelection);
        this.noteEditorService.onAddSelection.emit(selection);
        oldSelection.selectedMeasures.dispatchStatusChange();
        selection.selectedMeasures.dispatchStatusChange();
      } else {
        this.noteEditorService.onRemoveSelection.emit(oldSelection);
        this.noteEditorService.onAddSelection.emit(selection);
        this.dispatchSelectEvent('removeSelection', oldSelection, true);
        this.dispatchSelectEvent('addSelection', selection, true);
      }
      console.log('selection', selection);
    }
  }
  get dragHighlight() {
    return this._dragHighlight;
  }
  set dragHighlight(t) {
    const oldDragHighlight = this._dragHighlight;
    this._dragHighlight = t;
    if (oldDragHighlight) {
      oldDragHighlight.dispatchStatusChange();
    }
    if (t) {
      t.dispatchStatusChange();
    }
  }
  get firstSelectedNoteSet() {
    if (this.selection == null) {
      return null;
    }
    let firstSelectedNoteSet = null;
    for (let i = 0; i < this.selection.selectedNotations().length; i++) {
      const notation = this.selection.selectedNotations()[i];
      let noteSet = null;
      if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_12__.Note) {
        noteSet = notation.noteSet;
      } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_13__.NoteSet) {
        noteSet = notation;
      }
      if (firstSelectedNoteSet == null || noteSet && (0,_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_28__.compareScorePosition)(noteSet, firstSelectedNoteSet) < 0) {
        firstSelectedNoteSet = noteSet;
      }
    }
    return firstSelectedNoteSet;
  }
  get firstSelectedMeasureIndex() {
    if (this.selection) {
      return this.selection.selectedMeasures.startIndex;
    } else {
      return null;
    }
  }
  get lastSelectedNoteSet() {
    if (this.selection == null) {
      return null;
    }
    let lastSelectedNoteSet = null;
    const notations = this.selection.selectedNotations().reverse();
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      let noteSet = null;
      if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_12__.Note) {
        noteSet = notation.noteSet;
      } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_13__.NoteSet) {
        noteSet = notation;
      }
      if (lastSelectedNoteSet == null || noteSet && (0,_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_28__.compareScorePosition)(noteSet, lastSelectedNoteSet) > 0) {
        lastSelectedNoteSet = noteSet;
      }
    }
    return lastSelectedNoteSet;
  }
  get firstSelectedNote() {
    if (this.selection == null) {
      return null;
    }
    let firstSelectedNote = null;
    for (let i = 0; i < this.selection.selectedNotations().length; i++) {
      const notation = this.selection.selectedNotations()[i];
      let firstNote = null;
      if (notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_12__.Note) {
        firstNote = notation;
      } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_13__.NoteSet && notation.notes.length > 0) {
        firstNote = notation.notes[0];
      }
      if (firstSelectedNote == null || firstNote && ((0,_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_28__.compareScorePosition)(firstNote.noteSet, firstSelectedNote.noteSet) < 0 || firstNote.noteSet === firstSelectedNote.noteSet && _models_note__WEBPACK_IMPORTED_MODULE_12__.Note.compareNotePitch(firstNote, firstSelectedNote) < 0)) {
        firstSelectedNote = firstNote;
      }
    }
    return firstSelectedNote;
  }
  get firstSelectedBarline() {
    let barline = this.firstSelectedNotation(_models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]);
    if (!barline) {
      const prevIdx = this.selection.selectedMeasures.endIndex - 1;
      if (prevIdx >= 0) {
        barline = this.score.systemStaff.getMeasureAt(prevIdx).barlineNotation;
      }
    }
    return barline;
  }
  get tablatureSelection() {
    return this.firstSelectedNoteSet && this.firstSelectedNoteSet.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_25__["default"];
  }
  get entryAfterSelection() {
    return this._entryAfterSelection;
  }
  get playbackStaves() {
    if (this.selection instanceof _range_selection__WEBPACK_IMPORTED_MODULE_31__["default"]) {
      const rangeSelection = this.selection;
      if (rangeSelection.includesEntireStaffRange(rangeSelection.staves[0], 0, this.score.numMeasures) && rangeSelection.staves.length === 1) {
        return rangeSelection.staves;
      }
    }
    return this.score.staves.slice();
  }
  set entryAfterSelection(t) {
    const oldEntryAfterSelection = this._entryAfterSelection;
    if (t != oldEntryAfterSelection) {
      this._entryAfterSelection = t;
      //   const documentUpdateEvt = new DocumentUpdateEvent(
      //     DocumentUpdateEvent.DOCUMENT_UPDATE,
      //     'entryAfterSelection',
      //     oldEntryAfterSelection,
      //     this.entryAfterSelection,
      //     this
      //   );
      //   this.dispatchEvent(documentUpdateEvt);
      if (this.selection) {
        this.selection.selectedMeasures.dispatchStatusChange();
      }
    }
  }
  constructor(score, permissions, author, noteEditorService) {
    this._score = null;
    this._layoutContext = null;
    this._permissions = 17039407;
    this._author = null;
    this._selection = null;
    this._entryAfterSelection = false;
    this._undoHistory = null;
    this._savedUndoStateId = 0;
    this._lastLineSpacing = 0;
    this._activeStaff = null;
    this._$stringIndex = 0;
    this._$advanceAfterNoteEntry = true;
    this._dragHighlight = null;
    this._score = score;
    this._permissions = permissions;
    this._author = author;
    this.noteEditorService = noteEditorService;
    this._measureValidator = new _measure_validator__WEBPACK_IMPORTED_MODULE_29__["default"](this.noteEditorService);
    this.measureValidationSub$ = this.noteEditorService.onValidateMeasure.subscribe(evt => {
      this.handleValidateMeasure(evt);
    });
    // this._measureValidator.addEventListener(
    //   MeasureValidationEvent.SEQUENCE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleValidateMeasure)
    // );
    // this._measureValidator.addEventListener(
    //   MeasureValidationEvent.VALIDATE,
    //   RumtimeHelper.bindMethod(this, this.handleValidateMeasure)
    // );
    // this._measureValidator.addEventListener(
    //   MeasureValidationEvent.GEOMETRY_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleValidateMeasure)
    // );
    // this._measureValidator.addEventListener(
    //   MeasureValidationEvent.SPAN_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleValidateMeasure)
    // );
    // this.markeSaved();
  }

  undo() {
    this._measureValidator.disableFixup();
    this.undoHistory.undo();
    this.validateNow();
  }
  redo() {
    this._measureValidator.disableFixup();
    this.undoHistory.redo();
    this.validateNow();
  }
  redoAll() {
    while (this.undoHistory.canRedo) {
      this.redo();
    }
  }
  ensureStringIndexWithinBounds() {
    if (this.selection && this.selection.selectedNotations().length > 0) {
      const firstSelectedNotation = this.selection.selectedNotations()[0];
      if (firstSelectedNotation.measure && firstSelectedNotation.measure.clef) {
        const tablatureClef = firstSelectedNotation.measure.clef;
        if (tablatureClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_25__["default"]) {
          if (this.stringIndex < 0) {
            this.stringIndex = 0;
          }
          if (this.stringIndex >= tablatureClef.stringNotes.length) {
            this.stringIndex = tablatureClef.stringNotes.length - 1;
          }
        }
      }
    }
  }
  isModelEditable(notation) {
    return notation && !(notation instanceof _models_line_notation__WEBPACK_IMPORTED_MODULE_5__["default"] && !(notation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_18__["default"]) && notation.inSystemStaff) && (this.editable || this.markingsEditable && (notation instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_16__["default"] || notation instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_4__["default"] || notation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_6__["default"] || notation instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_3__["default"] || notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_21__["default"] || notation instanceof _models_system_symbol__WEBPACK_IMPORTED_MODULE_24__["default"]));
  }
  markSaved() {
    this._savedUndoStateId = this._undoHistory.currentStateId;
  }
  markUnSaved() {
    this._savedUndoStateId = -1;
  }
  activeStaff() {
    return this._activeStaff || this.score.staves[0];
  }
  adjustSelectionRelatedState() {
    if (this._selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"]) {
      const objectSelection = this._selection;
      if (objectSelection.selectedObjects.length === 1 && objectSelection.selectedObjects[0] instanceof _models_note__WEBPACK_IMPORTED_MODULE_12__.Note) {
        const note = objectSelection.selectedObjects[0];
        if (note.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_25__["default"]) {
          this.stringIndex = note.stringIndex;
        }
      }
    }
    this.ensureStringIndexWithinBounds();
  }
  firstSelectedNotation(notationClass) {
    if (this.selection == null) {
      return null;
    }
    let firstSelectedNotation;
    for (let i = 0; i < this.selection.selectedNotations().length; i++) {
      const notation = this.selection.selectedNotations()[i];
      if (notation instanceof notationClass && (firstSelectedNotation == null || (0,_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_28__.compareScorePosition)(notation, firstSelectedNotation) < 0)) {
        firstSelectedNotation = notation;
      }
    }
    return firstSelectedNotation;
  }
  select(selection) {
    if (this.selection == null || this.selection.empty) {
      this.selection = selection;
    } else if (this.selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"] && selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"]) {
      this.selection = this.selection.union(selection);
      for (let i = 0; i < selection.selectedObjects.length; i++) {
        const selectedObject = selection.selectedObjects[i];
        const model = selectedObject;
        this.selection = this.selection.difference(new _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"](this.score, model.ancestors, this.noteEditorService));
        this.selection = this.selection.difference(new _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"](this.score, model.descendants, this.noteEditorService));
      }
    } else {
      this.selection = selection;
    }
  }
  deselect(selection) {
    if (this.selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"] && selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"]) {
      const sel = this.selection.difference(selection);
      this.selection = sel.empty ? null : sel;
    } else {
      this.selection = null;
    }
  }
  deselectModelAndDescendants(model) {
    if (this.selection instanceof _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"]) {
      this.deselect(new _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"](this.score, [model], this.noteEditorService));
      this.deselect(new _object_selection__WEBPACK_IMPORTED_MODULE_30__["default"](this.score, model.descendants, this.noteEditorService));
    }
  }
  reflowFromMeasure(systemMeasure) {
    this._measureValidator.measureChanged(systemMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
  }
  rebuildGeometry() {
    this._measureValidator.rebuildGeometry();
  }
  validateNow() {
    this._measureValidator.processChanges();
  }
  handleModelChange(evt) {
    if (evt.kind === _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.REMOVING_CHILD_MODEL && evt.child) {
      this.deselectModelAndDescendants(evt.child);
      // for (let i = 0; i < evt.child.allAnnotations.length; i++) {
      //   const annotation = evt.child.allAnnotations[i];
      //   const modelEvt = new ModelEvent(
      //     ModelEventKind.MODEL_CHANGE,
      //     ModelEventKind.REMOVING_ANNOTATION,
      //     annotation.parent,
      //     annotation,
      //     -1
      //   );
      //   annotation.parent.dispatchEvent(modelEvt);
      // }
    }

    if (!(evt.child instanceof _models_notation__WEBPACK_IMPORTED_MODULE_11__.Notation) || evt.child.affectsParentLayout) {
      this.invalidateModelParent(evt.parent, null);
    }
    if (evt.child instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_10__["default"] && (evt.kind === _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.ADD_CHILD_MODEL || evt.kind === _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.REMOVING_CHILD_MODEL)) {
      const multiRest = evt.child;
      for (let i = multiRest.measurePosition.measureIndex; i < multiRest.endPosition.measureIndex; i++) {
        this._measureValidator.measureChanged(multiRest.measure.staff.getMeasureAt(i), _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
      }
    }
    if (evt.child instanceof _models_measure__WEBPACK_IMPORTED_MODULE_7__["default"] && evt.child.isSystemMeasure) {
      const measure = evt.child;
      if (evt.kind === _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.ADD_CHILD_MODEL) {
        this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].ADD);
      } else if (evt.kind === _models_model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.REMOVING_CHILD_MODEL) {
        this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REMOVE);
      }
    }
    // if (this.modelEventCausesMixerUpdate(evt)) {
    //   this.dispatchEvent(
    //     new MixerSettingsChangeEvent(
    //       MixerSettingsChangeEvent.MIXER_SETTINGS_CHANGE
    //     )
    //   );
    // }
  }

  handleModelUpdate(evt) {
    if (this.modelEventCausesMixerUpdate(evt)) {
      // this.dispatchEvent(
      //   new MixerSettingsChangeEvent(
      //     MixerSettingsChangeEvent.MIXER_SETTINGS_CHANGE
      //   )
      // );
    }
    if (evt.source instanceof _models_score__WEBPACK_IMPORTED_MODULE_19__["default"]) {
      switch (evt.property.toString()) {
        case 'displayMode':
        case 'viewScale':
        case 'playbackMode':
        case 'synchronizedTrack':
          // this.dispatchEvent(evt);
          return;
      }
    }
    if (!(evt.source instanceof _models_model__WEBPACK_IMPORTED_MODULE_8__["default"]) || evt.source.layoutPropertyChange(evt)) {
      this.invalidateModelParent(evt.source, evt.property.toString());
    }
  }
  modelEventCausesMixerUpdate(evt) {
    return evt.parent instanceof _models_recorded_autio_track__WEBPACK_IMPORTED_MODULE_17__["default"] || evt.child instanceof _models_recorded_autio_track__WEBPACK_IMPORTED_MODULE_17__["default"] || evt.child instanceof _models_staff__WEBPACK_IMPORTED_MODULE_22__["default"];
  }
  modelUpdateCausesMixerUpdate(evt) {
    return evt.source instanceof _models_score_mix__WEBPACK_IMPORTED_MODULE_20__["default"] || evt.source instanceof _models_part__WEBPACK_IMPORTED_MODULE_15__["default"] || evt.source instanceof _models_staff__WEBPACK_IMPORTED_MODULE_22__["default"] && evt.property === 'part' || evt.source instanceof _models_score__WEBPACK_IMPORTED_MODULE_19__["default"] && evt.property === 'synchronizedTrack';
  }
  handleSpanChange(evt) {
    this._measureValidator.measureChanged(evt.measure, evt.requestValidate ? _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE : _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SPAN_CHANGE);
    if (evt.requestValidate) {
      this._measureValidator.disableFixup();
    }
  }
  recalculateLineSpacing() {
    const scoreLineSpacing = this.score.effectiveStaffMetrics.scoreLineSpacing;
    if (scoreLineSpacing !== this._lastLineSpacing) {
      this._lastLineSpacing = this.score.effectiveStaffMetrics.lineSpacing = scoreLineSpacing;
      this.foundryChanged();
    }
  }
  foundryChanged() {
    // this.dispatchEvent(
    //   new MeasureValidationEvent(MeasureValidationEvent.FOUNDRY_CHANGE)
    // );
  }
  rebuildScore() {
    this._measureValidator.rebuildScore();
  }
  resetValidation() {
    this._measureValidator.reset();
  }
  requestModelChange(callback, delay = ScoreDocument.LONG_DELAY) {
    // this._measureValidator.requestModelChange(callback, delay);
  }
  invalidateModelParent(model, property) {
    if (model instanceof _models_score__WEBPACK_IMPORTED_MODULE_19__["default"]) {
      if (property === 'transposeParts') {
        for (let i = 0; i < this.score.atonalKeySignatureMeasures.length; i++) {
          const measure = this.score.atonalKeySignatureMeasures[i];
          measure.invalidateAccidentals();
          measure.cleanUpAccidentials();
        }
      }
      if (property === 'staffMetrics' || property === 'pageMetrics') {
        this.recalculateLineSpacing();
      }
      this._measureValidator.rebuildScore();
    } else if (model instanceof _models_part__WEBPACK_IMPORTED_MODULE_15__["default"]) {
      if (property === 'visible') {
        this.recalculateLineSpacing();
      }
      this._measureValidator.rebuildScore();
    } else if (model instanceof _models_staff__WEBPACK_IMPORTED_MODULE_22__["default"]) {
      if (property === 'part' || property === 'overrideClef') {
        this._measureValidator.rebuildScore();
      }
    } else if (model instanceof _models_staff_metrics__WEBPACK_IMPORTED_MODULE_23__["default"]) {
      if (property === 'scoreLineSpacing') {
        this.recalculateLineSpacing();
      } else if (property === 'glyphFamily') {
        this.foundryChanged();
      } else if (property !== 'lineSpacing') {
        this._measureValidator.rebuildScore();
      }
    } else if (model instanceof _models_page_metrics__WEBPACK_IMPORTED_MODULE_14__["default"]) {
      this._measureValidator.rebuildScore();
    } else if (model instanceof _models_measure__WEBPACK_IMPORTED_MODULE_7__["default"]) {
      const measure = model;
      switch (property) {
        case 'breakType':
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW);
          break;
        case 'disableCautionaries':
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          break;
        case 'canHideStaff':
        case 'systemGap':
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          if (measure.index > 0) {
            this._measureValidator.measureChanged(measure.previousMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          }
          break;
        case 'startRepeat':
          if (measure.index > 0) {
            this._measureValidator.measureChanged(measure.previousMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          }
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          break;
        case 'endRepeat':
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE);
          break;
        case 'tempo':
          if (measure.nextMeasure && this._layoutContext.scoreLayout.isFirstMeasureOfChunk(measure.nextMeasure.index)) {
            this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
          }
          if (measure.index > 0 && this._layoutContext.scoreLayout.isFirstMeasureOfChunk(measure.index)) {
            this._measureValidator.measureChanged(measure.previousMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
          }
          break;
        case 'blocks':
          if (measure.index > 0) {
            this._measureValidator.measureChanged(measure.previousMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW);
          } else {
            this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW);
          }
          break;
        case 'measureNumber':
          this._measureValidator.rebuildScore();
          break;
        default:
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
          break;
      }
    } else if (model instanceof _models_block_column__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      if (model.block && model.block.measure && model.block.measure.index > 0) {
        this._measureValidator.measureChanged(model.block.measure.previousMeasure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW);
      } else {
        this._measureValidator.measureChanged(model.block.measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REFLOW);
      }
    } else if (model instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_26__["default"] || model instanceof _models_voice__WEBPACK_IMPORTED_MODULE_27__["default"]) {
      this._measureValidator.measureChanged(model.measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
    } else if (model instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_18__["default"]) {
      if (!model.measure) {
        return;
      }
      for (let i = model.measure.index; i < model.endPosition.measureIndex; i++) {
        const measure = model.measure.staff.getMeasureAt(i);
        if (measure) {
          this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
        }
      }
    }
    // todo SpanNotation
    else if (model instanceof _models_notation__WEBPACK_IMPORTED_MODULE_11__.Notation || model instanceof _models_voice__WEBPACK_IMPORTED_MODULE_27__["default"]) {
      const measure = model.measure;
      if (measure) {
        this._measureValidator.measureChanged(measure, _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].VALIDATE);
      }
    }
  }
  handleValidateMeasure(evt) {
    // this.dispatchEvent(evt);
  }
  dispatchSelectEvent(type, selection, statusChanges) {
    if (selection && !selection.empty) {
      // var selectEvt = new SelectEvent(type, selection);
      // this.dispatchEvent(selectEvt);
      selection.dispatchStatusChange();
      if (selection && selection.selectedMeasures && statusChanges) {
        selection.selectedMeasures.dispatchStatusChange();
      }
    }
  }
}

/***/ }),

/***/ 70122:
/*!***************************************************!*\
  !*** ./src/app/note-editor/document/selection.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Selection)
/* harmony export */ });
class Selection {
  get start() {
    return this._start;
  }
  set start(v) {
    this._start = v;
  }
  get score() {
    return this._score;
  }
  set score(v) {
    this._score = v;
  }
  get measureIndices() {
    const measureIndices = [];
    for (let i = 0; i < this.start.measureIndex; i++) {
      measureIndices.push(i);
    }
    return measureIndices;
  }
  get systemMeasureNotations() {
    const systemStaff = this.score.systemStaff;
    return this.measureIndices.reduce((notations, next) => notations.concat(systemStaff.getMeasureAt(next).measureNotations), []);
  }
  get duration() {
    return this.measureIndices.reduce((duration, next) => duration + this.score.systemStaff.getMeasureAt(next).duration, 0);
  }
  constructor(noteEditorService) {
    this.noteEditorService = noteEditorService;
  }
}

/***/ }),

/***/ 37014:
/*!************************************************************!*\
  !*** ./src/app/note-editor/document/sequence-clipboard.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SequenceClipboard)
/* harmony export */ });
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_rhythm_element__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/rhythm-element */ 60828);
/* harmony import */ var _models_sequence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/sequence */ 69686);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/voice-number */ 12585);






class SequenceClipboard {
  static get EXTERNAL_CLASSNAME() {
    return 'sequence';
  }
  get duration() {
    return this._duration;
  }
  get sequences() {
    return this._sequences;
  }
  set sequences(s) {
    this._sequences = s;
    this._duration = 0;
    for (let i = 0; i < this._sequences.length; i++) {
      const sequence = this._sequences[i];
      this._duration = Math.max(this._duration, sequence.duration);
    }
  }
  get fromObjects() {
    return this._fromObjects;
  }
  set fromObjects(t) {
    this._fromObjects = t;
  }
  get singleVoiceNumber() {
    if (this._sequences.length > 1) {
      return _utils_voice_number__WEBPACK_IMPORTED_MODULE_5__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
    } else {
      return this.sequences[0].singleVoiceNumber;
    }
  }
  constructor(rangeSelection) {
    this._sequences = [];
    this._duration = 0;
    this._fromObjects = false;
    if (rangeSelection) {
      this.addRange(rangeSelection);
    }
  }
  addRange(rangeSelection, pruneUnselectedCallback) {
    for (let i = 0; i < rangeSelection.staves.length; i++) {
      const staff = rangeSelection.staves[i];
      const staffSequence = this.createStaffSequence(staff, rangeSelection.start, rangeSelection.end, pruneUnselectedCallback);
      this._duration = Math.max(this._duration, staffSequence.duration);
      this._sequences.push(staffSequence);
    }
  }
  createStaffSequence(staff, start, end, pruneUnselectedCallback) {
    const sequence = new _models_sequence__WEBPACK_IMPORTED_MODULE_3__["default"]();
    let prevTotalDuration = -start.position;
    for (let idx = start.measureIndex; idx <= end.measureIndex; idx++) {
      const measure = staff.getMeasureAt(idx);
      for (let i = 0; i < measure.measureElements.length; i++) {
        const measureEl = measure.measureElements[i];
        const measurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_0__["default"](idx, measureEl.position);
        if (measureEl.duration > 0 && measurePosition.compareTo(start) >= 0 && measurePosition.compareTo(end) < 0 || measureEl.duration === 0 && measurePosition.compareTo(start) >= 0 && measurePosition.compareTo(end) <= 0) {
          let elCopy = measureEl;
          if (pruneUnselectedCallback) {
            elCopy = pruneUnselectedCallback(elCopy);
          }
          if (elCopy instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_4__["default"]) {
            const tacet = elCopy;
            sequence.duration = Math.max(sequence.duration, tacet.position + tacet.duration + prevTotalDuration);
          } else if (elCopy instanceof _models_rhythm_element__WEBPACK_IMPORTED_MODULE_2__["default"]) {
            const rhythmEl = elCopy.clone();
            if (elCopy instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_1__["default"]) {
              rhythmEl.rhythmDuration = measureEl.duration;
            }
            rhythmEl.rhythmPosition = measureEl.position + prevTotalDuration;
            sequence.addElement(rhythmEl);
          }
        }
      }
      prevTotalDuration += measure.duration;
    }
    return sequence;
  }
}

/***/ }),

/***/ 90837:
/*!****************************************************************************!*\
  !*** ./src/app/note-editor/editor-container/editor-container.component.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorContainerComponent": () => (/* binding */ EditorContainerComponent)
/* harmony export */ });
/* harmony import */ var _controller_key_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controller/key-mediator */ 9411);
/* harmony import */ var _controller_score_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/score-controller */ 90865);
/* harmony import */ var _controller_score_document_controller__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controller/score-document-controller */ 97143);
/* harmony import */ var _display_stage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../display/stage */ 22616);
/* harmony import */ var _document_score_document__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../document/score-document */ 54434);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _glyph_js_glyph_font_loader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../glyph/js-glyph-font-loader */ 14044);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_block__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/block */ 45577);
/* harmony import */ var _models_block_column__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/block-column */ 91203);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_coda__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/coda */ 32229);
/* harmony import */ var _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/effect-notation */ 4123);
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _models_fretboard__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/fretboard */ 24217);
/* harmony import */ var _models_fretboard_note__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/fretboard-note */ 42920);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_interval__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/interval */ 56250);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_page_metrics__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../models/page-metrics */ 24092);
/* harmony import */ var _models_part__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../models/part */ 389);
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _models_rhythm_element__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../models/rhythm-element */ 60828);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_segno__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../models/segno */ 66000);
/* harmony import */ var _models_slur__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../models/slur */ 85888);
/* harmony import */ var _models_staff__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../models/staff */ 35126);
/* harmony import */ var _models_staff_tuning__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../models/staff-tuning */ 34846);
/* harmony import */ var _models_staff_type__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../models/staff-type */ 52472);
/* harmony import */ var _models_swing_metermap__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../models/swing-metermap */ 48493);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_tempo__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../models/tempo */ 72620);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _models_trill__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../models/trill */ 42550);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _services_svg_context__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../services/svg-context */ 88832);
/* harmony import */ var _utils_keycode_to_charcode__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../utils/keycode-to-charcode */ 39314);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _views_jsflight_document_view__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../views/jsflight-document-view */ 48101);
/* harmony import */ var _events_keyboard_event__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../events/keyboard-event */ 35074);
/* harmony import */ var _layouts_pagenated_layout__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../layouts/pagenated-layout */ 97709);
/* harmony import */ var _views_view_context__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../views/view-context */ 65532);
/* harmony import */ var _pdf_downloader__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./pdf-downloader */ 31583);
/* harmony import */ var _utils_staff_type__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../utils/staff-type */ 35628);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _text_editor_fonts_service__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../text/editor-fonts.service */ 94197);
/* harmony import */ var _note_editor_service__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../note-editor.service */ 68951);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! @fortawesome/angular-fontawesome */ 96920);
/* harmony import */ var _add_part_modal_add_part_modal_component__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../add-part-modal/add-part-modal.component */ 43865);































































const _c0 = ["svg"];
const _c1 = function (a0) {
  return {
    height: a0
  };
};
class EditorContainerComponent {
  constructor(el, editorFonts, noteEditorService) {
    this.el = el;
    this.editorFonts = editorFonts;
    this.noteEditorService = noteEditorService;
    this.height = 1312;
    this.scale = 1.6;
    this.pages = [{
      page_index: 0
    }];
    this._startingMeasureNumber = -1;
    this._partInfo = [];
    this._partClefs = [];
    this.stageWidth = 1366;
    this.stageHeight = 563;
    this.stageOffset = new _geoms_point__WEBPACK_IMPORTED_MODULE_5__["default"](0, 62);
    this.viewScale = {};
    this.fontLoaded = false;
    this.scoreLoaded = false;
    this.isShowAddPart = true;
  }
  ngOnInit() {
    _services_svg_context__WEBPACK_IMPORTED_MODULE_48__["default"].singleton = new _services_svg_context__WEBPACK_IMPORTED_MODULE_48__["default"](this.svgEl.nativeElement);
    this.loadFontsSub$ = this.editorFonts.onFontsLoaded.subscribe(() => {
      this.fontLoaded = true;
      if (this.scoreLoaded) {
        this.displayScore();
      }
    });
    this.noteEditorService.loadScore().subscribe(scoreObj => {
      console.log(scoreObj);
      this.score = new _models_score__WEBPACK_IMPORTED_MODULE_34__["default"]();
      if (scoreObj.title) {
        this.score.title = scoreObj.title;
      }
      if (scoreObj.subtitle) {
        this.score.subtitle = scoreObj.subtitle;
      }
      if (scoreObj.supertitle) {
        this.score.supertitle = scoreObj.supertitle;
      }
      if (scoreObj.composer) {
        this.score.composer = scoreObj.composer;
      }
      if (scoreObj.lyricist) {
        this.score.lyricist = scoreObj.lyricist;
      }
      if (scoreObj.arranger) {
        this.score.arranger = scoreObj.arranger;
        this.score.showArranger = true;
      }
      if (scoreObj.copyright) {
        this.score.copyright = scoreObj.copyright;
      }
      if (scoreObj.prompt) {
        this.score.prompt = scoreObj.prompt;
      }
      if (scoreObj.defaultSlurs) {
        this.score.defaultSlurs = scoreObj.defaultSlurs;
      }
      if (scoreObj.viewInfo) {
        const viewInfo = scoreObj.viewInfo;
        this.score.viewScale = viewInfo.viewScale;
        this.score.mediaSyncPlayerFullScreen = !!viewInfo.mediaSyncPlayerFullScreen;
        this.score.displayMode = viewInfo.displayMode;
        this.score.staffMetrics.showPartNames = !!viewInfo.showPartNames;
        this.score.staffMetrics.showBarNumbers = true; //!!viewInfo.showBarNumbers;
        this.score.staffMetrics.showBarNumbersOnEachMeasure = !!viewInfo.showBarNumbersOnEachMeasure;
        this.score.transposeParts = !!viewInfo.transposeParts;
        // this.score.staffMetrics.showTabRhythm
        if (viewInfo.startingMeasureNumber != null) {
          this._startingMeasureNumber = viewInfo.startingMeasureNumber;
        }
      }
      if (scoreObj.idCounter != null) {}
      if (scoreObj.systemPart) {
        const staff = scoreObj.systemPart.staff;
        if (staff && staff.measures) {
          staff.measures.forEach(measure => {
            this.parseMeasure(measure, this.score.systemStaff);
          });
        }
      }
      let partHidden = true;
      if (scoreObj.part && scoreObj.part.length > 0) {
        for (let i = 0; i < scoreObj.part.length; i++) {
          const partObj = scoreObj.part[i];
          if (this.parsePart(partObj).visible) {
            partHidden = false;
          }
        }
      }
      if (partHidden) {
        for (let i = 0; i < this.score.parts.length; i++) {
          const part = this.score.parts[i];
          part.visible = true;
        }
      }
      // if (this.xml.has('audioTrack')) {
      //   var N = this.xml.child('audioTrack').get(0);
      //   (this._score.synchronizedTrack =
      //     this.parseAbstractSynchronizedTrack(N)),
      //     this.xml.has('playback') &&
      //       'audioTrack' == this.xml.child('playback').toString() &&
      //       this._score.soloMediaTrack();
      // }
      console.log(this.score);
      this.scoreLoaded = true;
      if (this.fontLoaded) {
        this.displayScore();
      }
    });
  }
  displayScore(options) {
    this.stage = new _display_stage__WEBPACK_IMPORTED_MODULE_3__["default"](this, this.svgEl.nativeElement, this.noteEditorService, this.el.nativeElement);
    this.scoreDocument = new _document_score_document__WEBPACK_IMPORTED_MODULE_4__["default"](this.score, 17039407, null, this.noteEditorService);
    this.scoreController = new _controller_score_controller__WEBPACK_IMPORTED_MODULE_1__["default"](this.scoreDocument, null, null, this.el.nativeElement, this.noteEditorService);
    this.scoreDocumentView = new _views_jsflight_document_view__WEBPACK_IMPORTED_MODULE_51__["default"](this.editorFonts, this.el.nativeElement, this.noteEditorService);
    this.scoreDocumentController = new _controller_score_document_controller__WEBPACK_IMPORTED_MODULE_2__["default"](this.scoreController, this.scoreDocumentView, this.el.nativeElement, this.editorFonts, this.noteEditorService);
    this.scoreDocumentView.controller = this;
    this.scoreDocumentView.scoreController = this.scoreController;
    this.scoreDocumentView.scoreDocumentController = this.scoreDocumentController;
    this.scoreDocumentView.glyphFontLoader = new _glyph_js_glyph_font_loader__WEBPACK_IMPORTED_MODULE_6__["default"](this.noteEditorService);
    this.stage.addChild(this.scoreDocumentView);
    this.scoreDocumentView.publicCreateChildren();
    this.scoreDocumentView.initializeView();
    this.scoreDocumentView.scoreDocument = this.scoreDocument;
    // this.scoreDocumentController=
    this.resizeToFit();
    this.scoreDocumentView.updateLayout();
    this.keyMediator = new _controller_key_mediator__WEBPACK_IMPORTED_MODULE_0__["default"](this.scoreDocumentController);
    // this.scoreDocumentView.publicCreateChildren();
    // this.scoreDocumentView.initializeView();
  }

  resizeToFit(fit) {
    let verticalScorePosition = 0;
    switch (fit) {
      case _models_score__WEBPACK_IMPORTED_MODULE_34__["default"].FLOW_DISPLAY:
        this.flowScoreToPageWidth();
        break;
      case _models_score__WEBPACK_IMPORTED_MODULE_34__["default"].STRIP_DISPLAY:
        this.showScoreAsStrip();
        break;
      case _models_score__WEBPACK_IMPORTED_MODULE_34__["default"].PERFORM_DISPLAY:
        verticalScorePosition = this.scaleScoreToPageHeight();
        break;
      default:
        this.setPaginatedDisplay();
        break;
    }
  }
  setPaginatedDisplay() {
    if (this.score) {
      this.setScoreDisplayMode(_models_score__WEBPACK_IMPORTED_MODULE_34__["default"].PAGINATED_DISPLAY);
      // todo if options.autoScale
      this.score.viewScale = this.restoreScale(_models_score__WEBPACK_IMPORTED_MODULE_34__["default"].PAGINATED_DISPLAY);
      this.updateSDVDimensions();
    }
  }
  updateSDVDimensions() {
    if (this.scoreDocumentView) {
      this.scoreDocumentView.updateScoreDimensions();
    }
  }
  updateScoreDimensions(width, height) {
    if (this.scoreDocumentView) {
      this.scoreDocumentView.updateScoreDimensions();
    }
  }
  updateScoreDivDimensions(width, height) {
    if (height > 0) {
      this.height = height;
    }
  }
  scaleScoreToPageHeight() {
    throw new Error('not implemented');
    if (this.score && this.scoreDocumentView.scoreView) {
      this.el.nativeElement.style.overflow = 'hidden';
    }
  }
  showScoreAsStrip() {
    throw new Error('not implemented');
  }
  flowScoreToPageWidth() {
    if (this.score) {
      this.setScoreDisplayMode(_models_score__WEBPACK_IMPORTED_MODULE_34__["default"].FLOW_DISPLAY);
      const rootDiv = this.el.nativeElement;
      rootDiv.style.overflow = 'hidden';
      let rootWidth = rootDiv.clientWidth;
      if (this.scoreDocumentView.showHtml5Shadow()) {
        rootWidth -= 2 * this.score.effectivePageMetrics.horizontalScoreShadowSize * this.score.viewScale;
        this.score.viewScale = this.restoreScale(_models_score__WEBPACK_IMPORTED_MODULE_34__["default"].FLOW_DISPLAY);
      }
      this.score.effectivePageMetrics = new _models_page_metrics__WEBPACK_IMPORTED_MODULE_29__["default"]().withDimensions(null, rootWidth / this.viewScale, rootWidth / this.viewScale, null);
    }
  }
  setScoreDisplayMode(displayMode) {
    if (this.score && displayMode != this.score.displayMode) {
      //todo scoredocumentcontroller
      this.score.displayMode = displayMode;
      this.setDisplayAttribute(displayMode);
    }
    // this._currentMode = displayMode;
  }

  setDisplayAttribute(displayMode) {
    // todo
    // this.sizingDiv.attr('class', displayMode + 'Mode');
  }
  restoreScale(displayMode) {
    if (this.viewScale[displayMode]) {
      return this.viewScale[displayMode];
    } else {
      return this.score.viewScale;
    }
  }
  parsePart(partObj) {
    const id = partObj.id;
    if (id) {
      const cachedPart = this.score.findPartWithId(id);
      if (cachedPart) {
        return cachedPart;
      }
    }
    const part = new _models_part__WEBPACK_IMPORTED_MODULE_30__["default"](id);
    part.name = partObj.name;
    part.shortName = partObj.shortName;
    if (partObj.fretboardType != null) {
      part.fretboardType = partObj.fretboardType;
    }
    part.instrumentUri = partObj.instrumentUri;
    if (partObj.transposition != null) {
      part.transposition = partObj.transposition;
    } else if (partObj.transpose != null) {
      part.transpositionInterval = new _models_interval__WEBPACK_IMPORTED_MODULE_18__["default"](-partObj.transpose.diatonic, -partObj.transpose.chromatic);
    }
    part.octaveShift = partObj.octaveShift != null ? partObj.octaveShift : 0;
    part.gain = partObj.gain != null ? partObj.gain : 0;
    part.pan = partObj.pan != null ? partObj.pan : 0;
    part.muted = partObj.muted != null;
    part.noteflightTrackMuted = partObj.noteflightTrackMuted != null;
    part.visible = partObj.hidden === undefined;
    part.barlineBreak = partObj.barlineBreak != null;
    part.directionsAboveStaff = partObj.directionsAboveStaff != null;
    part.hasPedal = partObj.hasPedal != null;
    // if (
    //   partObj.scoreMetrics != null ||
    //   partObj.pageMetrics != null ||
    //   this.partDisplayLineSize != 0
    // ) {
    // }
    if (!this.incrementalMode) {
      const staffs = partObj.staffs || [];
      for (let i = 0; i < staffs.length; i++) {
        const staffObj = staffs[i];
        const staff = this.parseStaff(staffObj, part);
        if (staff != this.score.systemStaff) {
          while (staff.measures.length < this.score.systemStaff.measures.length) {
            staff.insertBlankMeasureAt(staff.measures.length, this.score.systemStaff.getMeasureAt(staff.measures.length).measureInfo);
          }
        }
      }
    }
    // todo
    // if (node.has('audioTracks') && !this.stripRecordedAudio) {
    //   var l,
    //     g = iterateArray(node.child('audioTracks').children().list);
    //   try {
    //     for (g.s(); !(l = g.next()).done; ) {
    //       var audioTrackNode = l.value,
    //         audioTrack = this.parseAudioTrack(audioTrackNode);
    //       part.addChild(audioTrack);
    //     }
    //   } catch (u) {
    //     g.e(u);
    //   } finally {
    //     g.f();
    //   }
    // }
    return part;
  }
  parseStaff(staffObj, part = null, staffIndex = null) {
    const staff = new _models_staff__WEBPACK_IMPORTED_MODULE_37__["default"]();
    if (this.score != null) {
      if (staffIndex != null) {
        this.score.addStaffAt(staff, staffIndex);
      } else {
        this.score.addStaff(staff);
      }
    }
    if (this.incrementalMode) {
      const partObj = staffObj.part;
      if (partObj != null) {
        part = this.parsePart(partObj);
      }
    }
    staff.part = part;
    if (staffObj.overrideClef != null) {
      for (let i = 0; i < staffObj.overrideClef.length; i++) {
        const overrideClefObj = staffObj.overrideClef[i];
        staff.overrideClef = this.parseClef(overrideClefObj, staff);
      }
    }
    for (let i = 0; i < staffObj.measures.length; i++) {
      const measureObj = staffObj.measures[i];
      this.parseMeasure(measureObj, staff);
    }
    if (part.instrumentUri === '' && staff.getMeasureAt(0).clef.unpitched) {
      part.instrumentUri = 'percussion/drums/standard';
    }
    return staff;
  }
  parseMeasure(measureObj, staff, measureIndex = null) {
    const measure = new _models_measure__WEBPACK_IMPORTED_MODULE_23__["default"]();
    measure.tempo = new _models_tempo__WEBPACK_IMPORTED_MODULE_43__["default"]();
    measure.keySignature = new _models_keysignature__WEBPACK_IMPORTED_MODULE_19__["default"](0, 0, true);
    const measureInfo = this._partInfo[staff.index];
    const clef = this._partClefs[staff.index];
    if (staff === this.score.systemStaff) {
      if (measureIndex != null) {
        staff.addMeasureAt(measure, measureIndex);
      } else {
        staff.addMeasure(measure);
      }
      if (measureInfo) {
        measure.measureInfo = measureInfo;
      }
    } else {
      const systemMeasure = this.score.systemStaff.getMeasureAt(staff.numChildren);
      if (systemMeasure) {
        if (measureIndex != null) {
          staff.addMeasureAt(measure, measureIndex);
        } else {
          staff.addMeasure(measure);
        }
        measure.measureInfo = systemMeasure.measureInfo;
        if (clef) {
          measure.clef = clef;
        }
      } else {
        return null;
      }
    }
    measure.breakType = measureObj.breakType || null;
    measure.startRepeat = measureObj.startRepeat != null;
    measure.endRepeat = measureObj.endRepeat != null;
    measure.disableCautionaries = measureObj.disableCautionaries != null;
    measure.systemGap = measureObj.systemGap != null;
    measure.canHideStaff = measureObj.canHideStaff != null;
    measure.layoutWeight = measureObj.layoutWeight != null ? measureObj.layoutWeight : 1;
    measure.leftMargin = measureObj.leftMargin != null ? measureObj.leftMargin : 0;
    measure.rightMargin = measureObj.rightMargin != null ? measureObj.rightMargin : 0;
    if (measure.isSystemMeasure) {
      measure.measureNumber = measureObj.customizedMeasureNumber || null;
      if (measure.index === 0 && this._startingMeasureNumber >= 0) {
        measure.measureNumber = this._startingMeasureNumber;
      }
    }
    if (measureObj.block && measureObj.block.length > 0) {
      for (let i = 0; i < measureObj.block.length; i++) {
        const blockObj = measureObj.block[i];
        const block = new _models_block__WEBPACK_IMPORTED_MODULE_8__["default"]();
        if (blockObj.columns) {
          for (let i = 0; i < blockObj.columns.length; i++) {
            const columnObj = blockObj.columns[i];
            const position = columnObj.position;
            const blockColumn = new _models_block_column__WEBPACK_IMPORTED_MODULE_9__["default"](columnObj.text, columnObj.weight);
            if (position != null && position != '') {
              blockColumn.position = position;
            }
            block.addColumn(blockColumn);
          }
        }
        measure.addBlock(block);
      }
    }
    if (measureObj.attributes && measureObj.attributes.staffTuning) {
      this.parseStaffTuning(measureObj.attributes.staffTuning, measureObj.attributes.capo, staff);
    }
    if (measureObj.attributes) {
      for (const key in measureObj.attributes) {
        const attr = measureObj.attributes[key];
        switch (key) {
          case 'timeSignature':
            measure.timeSignature = this.parseTimeSignature(attr);
            break;
          case 'keySignature':
            measure.keySignature = this.parseKeySignature(attr);
            break;
          case 'clef':
            measure.clef = this.parseClef(attr, staff);
            break;
          case 'tempo':
            measure.tempo = this.parseTempo(attr);
            break;
          case 'staffTuning':
          case 'capo':
            break;
          default:
            throw new Error('Unrecorgnized attribute: ' + key);
        }
      }
    }
    this._partInfo[staff.index] = measure.measureInfo;
    this._partClefs[staff.index] = measure.clef;
    let voice = 0;
    this.parseRhythmContainer(measureObj.notations || [], measure.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_50__.VoiceNumber.NON_METRICAL_VOICE_NUMBER), measure, _utils_voice_number__WEBPACK_IMPORTED_MODULE_50__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    if (measureObj.voices && measureObj.voices.length > 0) {
      for (let i = 0; i < measureObj.voices.length; i++) {
        const voiceObj = measureObj.voices[i];
        const children = (voiceObj.noteSets || []).concat(voiceObj.slurs || []);
        if (voiceObj.key === 'tacet') {
          children.push(voiceObj);
        }
        this.parseRhythmContainer(children, measure.getVoiceNumber(voice, true), measure, voice);
        voice++;
      }
    }
    // if (!measure.isSystemMeasure) {
    // }
    measure.calculateDerived();
    return measure;
  }
  parseRhythmContainer(elements, voice, measure, voiceNumber) {
    let prevNotation = null;
    let tupletOrNotation = null;
    const meterDuration = voice.timeSignature.meterDuration;
    for (let i = 0; i < elements.length; i++) {
      const elObj = elements[i];
      const key = elObj.key;
      tupletOrNotation = key === 'tuplet' ? this.parseTuplet(elObj, measure) : this.parseNotation(elObj, key);
      if (tupletOrNotation) {
        if (tupletOrNotation.rhythmDuration > 0) {
          if (prevNotation && tupletOrNotation.rhythmPosition <= prevNotation.rhythmPosition) {
            console.error('Non-monotonic element position ' + tupletOrNotation.rhythmPosition + ' after position ' + prevNotation.rhythmPosition + ' in ' + measure.path);
            continue;
          }
          prevNotation = tupletOrNotation;
        }
        if (tupletOrNotation.rhythmPosition < 0 || tupletOrNotation.rhythmPosition + tupletOrNotation.rhythmDuration > meterDuration) {
          console.error('Invalid element position ' + tupletOrNotation.rhythmPosition + ' in ' + measure.path);
        } else {
          // if(tupletOrNotation instanceof TextNotation){
          // }
          if (key === 'chordSymbol' && tupletOrNotation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__["default"]) {
            tupletOrNotation.span = meterDuration;
          }
          voice.addElement(tupletOrNotation);
        }
      }
    }
  }
  parseNotation(elObj, notationName) {
    const notation = this.createNotation(elObj, notationName);
    if (elObj.dx != null) {
      notation.dx = elObj.dx;
    }
    if (elObj.dy != null) {
      notation.dy = elObj.dy;
    }
    if (elObj.direction != null) {
      notation.direction = elObj.direction;
    }
    if (elObj.voice != null && notation instanceof _models_rhythm_element__WEBPACK_IMPORTED_MODULE_33__["default"]) {
      notation.lastVoiceNumber = elObj.voice;
    }
    if (elObj.cue != null) {
      notation.cue = true;
    }
    this.parseColor(elObj, notation);
    return notation;
  }
  createNotation(elObj, notationName) {
    switch (notationName) {
      case 'note':
        return this.parseNote(elObj);
      case 'lyric':
        return this.parseLyric(elObj);
      case 'noteSet':
        const noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_28__.NoteSet();
        this.parseNoteSet(elObj, noteSet);
        this.parseValueNotation(elObj, noteSet);
        let notes = [];
        if (elObj.notes && elObj.notes.length > 0) {
          notes = notes.concat(elObj.notes);
        }
        for (let i = 0; i < notes.length; i++) {
          const noteObj = notes[i];
          noteSet.addNote(this.parseNotation(noteObj, 'note'));
        }
        const lyrics = [];
        if (elObj.lyric && elObj.lyric.length > 0) {
          lyrics.push(elObj.lyric);
        }
        for (let i = 0; i < lyrics.length; i++) {
          const lyricObj = lyrics[i];
          noteSet.addLyric(this.parseLyric(lyricObj));
        }
        // todo annotation
        // for (let i = 0; i < elObj.annotation.length; i++) {
        //   const annotationObj = elObj.annotation[i];
        //   noteSet.addAnnotation(this.parseAnnotation(annotationObj));
        // }
        const articulations = [];
        (elObj.articulation || []).forEach(e => {
          if (e.articulation) {
            articulations.push(e.articulation);
          }
        });
        for (let i = 0; i < articulations.length; i++) {
          const articulation = articulations[i];
          if (_models_noteset__WEBPACK_IMPORTED_MODULE_28__.NoteSet.SUPPORTED_ARTICULATIONS.indexOf(articulation) > -1) {
            noteSet.addArticulation(articulation);
          }
        }
        if (elObj.tremolo != null) {
          noteSet.tremolo = elObj.tremolo;
        }
        if (elObj.arpeggio != null) {
          noteSet.arpeggio = elObj.arpeggio;
        }
        return noteSet;
      case 'timeSignature':
        return this.parseTimeSignature(elObj);
      case 'keySignature':
        return this.parseKeySignature(elObj);
      case 'tempo':
        return this.parseTempo(elObj);
      case 'clef':
        return this.parseClef(elObj);
      case 'barline':
        return this.parseBarline(elObj);
      case 'tacet':
        const tacet = new _models_tacet__WEBPACK_IMPORTED_MODULE_42__["default"]();
        const annotations = [];
        (elObj.annotation || []).forEach(e => {
          if (e.annotation) {
            annotations.push(e.annotation);
          }
        });
        for (let i = 0; i < annotations.length; i++) {
          const annotationObj = annotations[i];
          tacet.addAnnotation(this.parseAnnotation(annotationObj));
        }
        const articulations1 = [];
        (elObj.articulation || []).forEach(e => {
          if (e.articulation) {
            articulations.push(e.articulation);
          }
        });
        for (let i = 0; i < articulations1.length; i++) {
          const articulationObj = articulations1[i];
          tacet.addArticulation(articulationObj);
        }
        return tacet;
      case 'measureRepeat':
        const measureRepeat = new _models_measure_repeat__WEBPACK_IMPORTED_MODULE_24__["default"]();
        this.parseValueNotation(elObj, measureRepeat);
        for (let i = 0; i < elObj.annotation.length; i++) {
          const annotationObj = elObj.annotation[i];
          measureRepeat.addAnnotation(this.parseAnnotation(annotationObj));
        }
        for (let i = 0; i < elObj.articulation.length; i++) {
          const articulationObj = elObj.articulation[i];
          measureRepeat.addArticulation(articulationObj);
        }
        return measureRepeat;
      case 'chordSymbol':
        return this.parseChordSymbol(elObj);
      case 'expression':
        return this.parseExpressionText(elObj);
      case 'performance':
        return this.parsePerformanceText(elObj);
      case 'hairpin':
        return this.parseHairpin(elObj);
      case 'slur':
        return this.parseSlur(elObj);
      case 'multiRest':
        return this.parseMultiRest(elObj);
      case 'lineNotation':
        return this.parseLineNotation(elObj);
      case 'repeatEnding':
        return this.parseRepeatEnding(elObj);
      case 'segno':
        return this.parseSystemSymbol(_models_segno__WEBPACK_IMPORTED_MODULE_35__["default"], elObj);
      case 'coda':
        return this.parseSystemSymbol(_models_coda__WEBPACK_IMPORTED_MODULE_12__["default"], elObj);
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.PRE_EFFECT:
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.POST_EFFECT:
        return this.parseEffectNotation(elObj);
      default:
        throw new Error('Unrecognized XML notation element: ' + JSON.stringify(elObj));
    }
  }
  parseEffectNotation(elObj) {
    const type = elObj.type;
    const ascent = elObj.ascent != null ? elObj.ascent : 0;
    const shift = elObj.shift != null ? elObj.shift : 0;
    return new _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation(type, ascent, shift);
  }
  parseSystemSymbol(TypeClass, elObj) {
    const systemSymbol = new TypeClass();
    if (elObj.position != null) {
      systemSymbol.rhythmPosition = elObj.position;
    }
    return systemSymbol;
  }
  parseRepeatEnding(elObj) {
    const position = elObj.position != null ? elObj.position : 0;
    const span = elObj.span;
    const type = elObj.type;
    const endX = elObj.endx;
    const startingText = elObj.startingText;
    const bracketLength = elObj.bracketLength != null ? elObj.bracketLength : 0;
    const bracketBold = this.score.staffMetrics.repeatEndingBracketBold;
    return new _models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__["default"](position, span, type, endX, startingText, bracketLength, bracketBold);
  }
  parseLineNotation(elObj) {
    if (elObj.type === 'trill') {
      const trill = new _models_trill__WEBPACK_IMPORTED_MODULE_45__["default"](elObj.position, elObj.span, elObj.type, elObj.endx, elObj.ascent != null ? elObj.ascent : 0, elObj.startingText);
      if (elObj.interval != null) {
        trill.interval = elObj.interval;
      }
      if (elObj.accidental != null) {
        trill.accidental = elObj.accidental;
      }
      return trill;
    }
    const position = elObj.position != null ? elObj.position : 0;
    const includeGrace = elObj.includegrace === undefined || elObj.includegrace === true;
    const span = elObj.span;
    const type = elObj.type;
    const endX = elObj.endX;
    const startingText = elObj.startingText;
    const bracketLength = elObj.bracketLength != null ? elObj.bracketLength : 0;
    if ([_models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__["default"].TYPE_FINAL, _models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__["default"].TYPE_INITIAL].includes(type)) {
      const bracketBold = this.score.staffMetrics.repeatEndingBracketBold;
      return new _models_repeat_ending__WEBPACK_IMPORTED_MODULE_32__["default"](position, span, type, endX, startingText, bracketLength, bracketBold);
    }
    const ascent = elObj.ascent != null ? elObj.ascent : 0;
    return new _models_line_notation__WEBPACK_IMPORTED_MODULE_21__["default"](position, includeGrace, span, type, endX, ascent, startingText, bracketLength);
  }
  parseMultiRest(elObj) {
    return new _models_multi_rest__WEBPACK_IMPORTED_MODULE_25__["default"](elObj.bars, elObj.position, elObj.span);
  }
  parseSlur(elObj) {
    const position = elObj.position != null ? elObj.position : 0;
    const slur = new _models_slur__WEBPACK_IMPORTED_MODULE_36__["default"](position, elObj.includegrace === undefined || elObj.includegrace === true, elObj.span, elObj.endx, elObj.ascent);
    if (elObj.cx1 != null && elObj.cy1 != null) {
      slur.cx1 = elObj.cx1;
      slur.cy1 = elObj.cy1;
    }
    if (elObj.cx2 != null && elObj.cy2 != null) {
      slur.cx2 = elObj.cx2;
      slur.cy2 = elObj.cy2;
    }
    if (elObj.slurHeight != null) {
      slur.slurHeight = elObj.slurHeight;
    }
    if (elObj.slurArticulation != null) {
      slur.slurArticulation = elObj.slurArticulation;
    }
    return slur;
  }
  parseHairpin(elObj) {
    return new _models_hairpin__WEBPACK_IMPORTED_MODULE_17__["default"](elObj.position, elObj.includegrace === undefined || elObj.includegrace === true, elObj.span, elObj.type, elObj.endx, elObj.ascent);
  }
  parsePerformanceText(elObj) {
    const performanceText = new _models_performance_text__WEBPACK_IMPORTED_MODULE_31__["default"](elObj.position, elObj.text);
    if (elObj.justify != null) {
      performanceText.justify = elObj.justify;
    }
    if (elObj.textbox != null) {
      performanceText.textbox = true;
    }
    return performanceText;
  }
  parseExpressionText(elObj) {
    const expressionText = new _models_expression_text__WEBPACK_IMPORTED_MODULE_14__["default"](elObj.position, elObj.text);
    if (elObj.textbox != null) {
      expressionText.textbox = true;
    }
    return expressionText;
  }
  parseChordSymbol(elObj) {
    const chordSymbol = new _models_chord_symbol__WEBPACK_IMPORTED_MODULE_10__["default"](elObj.position, elObj.chord);
    if (elObj.frame != null) {
      const fretboard = new _models_fretboard__WEBPACK_IMPORTED_MODULE_15__["default"]();
      fretboard.strings = elObj.frame.frameStrings;
      fretboard.frets = elObj.frame.frameFrets;
      if (elObj.frame.firstFret != null) {
        fretboard.firstFret = elObj.frame.firstFret;
      }
      if (elObj.frame.firstFretLocation != null) {
        fretboard.firstFretLocation = elObj.frame.firstFretLocation;
      }
      if (elObj.frame.firstFretText != null) {
        fretboard.firstFretText = elObj.frame.firstFretText;
      }
      for (let i = 0; i < elObj.frame.frameNote.length; i++) {
        const frameNote = elObj.frame.frameNote[i];
        const str = frameNote.string;
        const fret = frameNote.fret;
        const fretboardNote = new _models_fretboard_note__WEBPACK_IMPORTED_MODULE_16__["default"]();
        fretboardNote.string = str;
        fretboardNote.fret = fret;
        if (frameNote.fingering != null) {
          fretboardNote.hasFingering = true;
          fretboardNote.fingering = frameNote.fingering;
        }
        if (frameNote.barre != null) {
          fretboardNote.hasBarre = true;
          fretboardNote.barre = frameNote.barre;
        }
        fretboard.notes.push(fretboardNote);
      }
      chordSymbol.fretboard = fretboard;
    }
    if (elObj.textbox != null) {
      chordSymbol.textbox = true;
    }
    return chordSymbol;
  }
  parseBarline(elObj) {
    const type = elObj.type || _models_barline__WEBPACK_IMPORTED_MODULE_7__["default"].SINGLE;
    return new _models_barline__WEBPACK_IMPORTED_MODULE_7__["default"](elObj.position, type);
  }
  parseAnnotation(annotationObj) {
    // const annotation = new Annotation();
  }
  parseValueNotation(elObj, notation) {
    notation.rhythmPosition = elObj.position || 0;
    notation.value = elObj.value || 0;
    notation.dots = elObj.dotted && elObj.dotted.length > 0;
  }
  parseNoteSet(elObj, noteSet) {
    noteSet.beam = elObj.beam != null;
    noteSet.topLevelBeam = elObj.topLevelBeam != null;
    noteSet.grace = elObj.grace != null;
    noteSet.explicitRestY = elObj.explicitRestY;
    if (noteSet.grace) {
      noteSet.appoggiatura = elObj.grace.appoggiature != null;
    }
  }
  parseLyric(elObj) {
    const text = elObj.text;
    const line = elObj.line != null ? elObj.line : 0;
    const continued = elObj.continued != null;
    const extend = elObj.extend != null;
    const noninitial = elObj.noninitial != null;
    const direction = elObj.direction != null ? elObj.direction : null;
    const lyric = new _models_lyric__WEBPACK_IMPORTED_MODULE_22__["default"](text, line, continued, extend, noninitial, direction);
    this.parseColor(elObj, lyric);
    return lyric;
  }
  parseColor(elObj, notation) {
    if (elObj.color != null) {
      let color = elObj.color;
      if (color.charAt(0) === '#') {
        color = color.slice(1);
      }
      notation.color = parseInt(color, 16);
      if (elObj.hidden != null) {
        notation.color = _models_notation__WEBPACK_IMPORTED_MODULE_26__.Notation.HIDDEN_COLOR;
      }
    }
  }
  parseNote(elObj) {
    const pitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_47__["default"].pitchFromString(elObj.pitch);
    const step = elObj.step != null ? 'CDEFGAB'.indexOf(elObj.step) : -1;
    const accidental = elObj.accidental != null ? elObj.accidental : null;
    const tied = elObj.tied != null;
    const noteHead = elObj.noteHead || null;
    const note = new _models_note__WEBPACK_IMPORTED_MODULE_27__.Note(pitch, step, accidental, tied, noteHead);
    if (elObj.liaison != null) {
      note.liaison = elObj.liaison;
    }
    if (elObj.tuning != null) {
      elObj.tuning = elObj.tuning;
    }
    if (elObj.string != null) {
      note.stringIndex = elObj.string;
    }
    if (elObj.fret != null) {
      note.fret = elObj.fret;
    }
    if (elObj.incomingTie != null) {
      note.incomingLiaison = _models_liaison__WEBPACK_IMPORTED_MODULE_20__.Liaison.TIE_LIAISON;
    }
    if (elObj.silent != null) {
      note.silent = elObj.silent !== false;
    }
    note.explicitAccidental = elObj.explicitAccidental != null;
    note.parentheses = elObj.parentheses != null;
    note.courtesyAccidental = elObj.courtesyAccidental != null;
    if (elObj[_models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.PRE_EFFECT] != null) {
      note.addPreEffect(this.parseNotation(elObj[_models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.PRE_EFFECT], _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.PRE_EFFECT));
    }
    if (elObj[_models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.POST_EFFECT] != null) {
      note.addPostEffect(this.parseNotation(elObj[_models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.POST_EFFECT], _models_effect_notation__WEBPACK_IMPORTED_MODULE_13__.EffectNotation.POST_EFFECT));
    }
    return note;
  }
  parseTuplet(elObj, measure) {
    const tuplet = new _models_tuplet__WEBPACK_IMPORTED_MODULE_46__["default"](elObj.position, elObj.units, elObj.unitValue, elObj.rhythmUnits, elObj.rhythmValue);
    if (elObj.voice != null) {
      tuplet.lastVoiceNumber = elObj.voice;
    }
    if (elObj.tremolo != null) {
      elObj.tremolo = true;
    }
    if (elObj.showActualNumber != null) {
      tuplet.showActualNumber = elObj.showActualNumber === true;
    }
    if (elObj.showNormalNumber != null) {
      tuplet.showNormalNumber = elObj.showNormalNumber === true;
    }
    if (elObj.showBracket != null) {
      tuplet.showBracket = elObj.showBracket === true;
    }
    const contents = elObj.contents;
    if (contents && contents.length > 0) {
      this.parseRhythmContainer(contents, tuplet, measure, _utils_voice_number__WEBPACK_IMPORTED_MODULE_50__.VoiceNumber.UNKNOWN_VOICE_NUMBER);
    }
    return tuplet;
  }
  parseTempo(attr) {
    const tempo = new _models_tempo__WEBPACK_IMPORTED_MODULE_43__["default"](attr.value, attr.dotted ? attr.dotted.length : 0, attr.bpm);
    if (attr.swing && attr.swing.length > 0) {
      for (let i = 0; i < attr.swing.length; i++) {
        const swing = attr.swing[i];
        if (swing.type && swing.type.length > 0) {
          if (swing.delata != null && swing.delta !== 0) {
            tempo.meterMap = new _models_swing_metermap__WEBPACK_IMPORTED_MODULE_40__["default"](swing.type, swing.delta);
            break;
          }
        } else {
          tempo.meterMap = new _models_swing_metermap__WEBPACK_IMPORTED_MODULE_40__["default"](_models_swing_metermap__WEBPACK_IMPORTED_MODULE_40__["default"].EIGHTH_SWING_TYPE, swing);
        }
      }
    }
    return tempo;
  }
  parseClef(attr, staff = null) {
    let clef;
    if (attr.note != null && attr.line != null) {
      const note = new _models_note__WEBPACK_IMPORTED_MODULE_27__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_47__["default"].pitchFromString(attr.note));
      let displayLineCount = -1;
      if (attr.displayLineCount != null) {
        displayLineCount = attr.displayLineCount;
      }
      let displayLineSpacing = 1;
      if (attr.displayLineSpacing != null) {
        displayLineSpacing = attr.displayLineSpacing;
      }
      clef = new _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"](0, attr.sign, attr.line, note, 5, displayLineCount, displayLineSpacing);
    } else {
      const sign = attr.sign;
      if (sign === _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].G_CLEF_SIGN) {
        clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].trebleClef();
      } else if (sign === _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].F_CLEF_SIGN) {
        clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].bassClef();
      } else if (sign === _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].PERCUSSION_CLEF_SIGN) {
        clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].percussionClef();
      } else if (sign === _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].PERCUSSION2_CLEF_SIGN) {
        clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].percussion2Clef();
      } else if (sign === _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].TAB_CLEF_SIGN) {
        clef = _models_tablature_clef__WEBPACK_IMPORTED_MODULE_41__["default"].tabClef(0, staff);
      } else {
        if (sign !== _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].TENOR_VOICE_CLEF_SIGN) {
          throw new Error('Unrecorgnized clef');
        }
        clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].tenorVoiceClef();
      }
    }
    if (attr.position) {
      clef.rhythmPosition = attr.position;
    }
    if (attr.percussionMap) {
      clef.percussionMap = attr.percussionMap;
    }
    return clef;
  }
  parseKeySignature(attr) {
    const cancel = attr.cancel || 0;
    const atonal = attr.atonal != null;
    const keySignature = new _models_keysignature__WEBPACK_IMPORTED_MODULE_19__["default"](attr.fifths, cancel, atonal);
    if (attr.mode) {
      keySignature.mode = attr.mode;
    }
    if (attr.position) {
      keySignature.rhythmPosition = attr.position;
    }
    return keySignature;
  }
  parseTimeSignature(attr) {
    const timeSignature = new _models_timesignature__WEBPACK_IMPORTED_MODULE_44__["default"](attr.beats, attr.beatType);
    if (attr.hidden != null) {
      timeSignature.visibility = _models_timesignature__WEBPACK_IMPORTED_MODULE_44__["default"].HIDDEN_VISIBILITY;
    } else if (attr.visibility != null) {
      timeSignature.visibility = attr.visibility;
    } else {
      timeSignature.visibility = _models_timesignature__WEBPACK_IMPORTED_MODULE_44__["default"].DEFAULT_VISIBILITY;
    }
    if (attr.mode) {
      timeSignature.mode = attr.mode;
    }
    if (attr.symbol) {
      timeSignature.timeSymbol = attr.symbol;
    }
    return timeSignature;
  }
  parseStaffTuning(staffTuningObj, capo, staff) {
    const notes = [];
    for (let i = 0; i < staffTuningObj.line.length; i++) {
      const lineObj = staffTuningObj.line[i];
      notes.push(lineObj.note);
    }
    const lineCount = notes.length;
    const staffType = _models_staff_type__WEBPACK_IMPORTED_MODULE_39__["default"].createTypeFromLineCount(lineCount);
    staffType.numLines = lineCount;
    const staffTuning = new _models_staff_tuning__WEBPACK_IMPORTED_MODULE_38__["default"]();
    staffTuning.setStaffNotesFromStrings(notes, capo);
    staffType.staffTuning = staffTuning;
    staff.type = staffType;
  }
  createFullLayout() {
    const score = this.scoreDocumentView.scoreDocument.score;
    const layoutContext = this.scoreDocumentView.createLayoutContext(score);
    layoutContext.pageMetrics = this.scoreDocument.score.effectivePageMetrics;
    this.scoreDocument.recalculateLineSpacing();
    this.scoreDocumentView.createFoundryForContext(layoutContext);
    const printPaginatedLayout = this.createPrintPaginatedLayout(layoutContext, false);
    printPaginatedLayout.document = new _document_score_document__WEBPACK_IMPORTED_MODULE_4__["default"](score, this.scoreDocument.permissions, this.scoreDocument.author, this.noteEditorService);
    printPaginatedLayout.doValidateLayout();
    return printPaginatedLayout;
  }
  createPrintPaginatedLayout(layoutContext, buildIncrementally) {
    return new _layouts_pagenated_layout__WEBPACK_IMPORTED_MODULE_53__["default"](layoutContext, buildIncrementally, this.editorFonts, this.el.nativeElement, this.noteEditorService);
  }
  getPrintViews(layoutContext, layout) {
    const viewInfo = this.scoreDocumentView.viewInfo.clone();
    viewInfo.displayScale = 1;
    viewInfo.printView = true;
    viewInfo.scoreDropShadowEnabled = false;
    const options = {
      fakeView: true,
      watemark: this.scoreDocumentView.watermark,
      // watermarkStartingPage: this.scoreDocumentView.watermarkStartingPage,
      watermarkScale: this.scoreDocumentView.watermarkScale
    };
    const viewContext = new _views_view_context__WEBPACK_IMPORTED_MODULE_54__["default"](viewInfo, layoutContext, this.scoreController, null, null, null, this.noteEditorService, false, _views_view_context__WEBPACK_IMPORTED_MODULE_54__["default"].FLOW_VERTICAL, options);
    const pageViews = layout.createDisplayObject(viewContext).pageViews;
    return pageViews;
  }
  onScroll(evt) {
    if (this.scoreDocumentView && this.scoreDocumentView._scoreView) {
      this.scoreDocumentView._scoreView.ensureScoreInViewportIsVisible();
      setTimeout(() => {
        this.scoreDocumentView._scoreView.pullFlow(true);
      }, 100);
    }
  }
  keydown(evt) {
    this.modifier = {};
    this.modifier.shift = evt.shiftKey;
    this.modifier.control = evt.ctrlKey || evt.metaKey;
    const charCode = (0,_utils_keycode_to_charcode__WEBPACK_IMPORTED_MODULE_49__.keyCodeToChartChod)(evt.keyCode);
    if (!charCode.modifier) {
      const keyboardEvt = new _events_keyboard_event__WEBPACK_IMPORTED_MODULE_52__["default"]('keydown', true, false, charCode.charCode || evt.charCode, evt.keyCode, 0, this.modifier.control, this.modifier.alt, this.modifier.shift, this.modifier.control, this.modifier.control);
      if (this.keyMediator.handleKey(keyboardEvt)) {
        evt.preventDefault();
        this.currEvt = evt;
      } else {
        this.currKeyCode = evt.keyCode;
        this.currEvt = null;
      }
    }
  }
  keypress(evt) {
    if (this.currEvt && evt.timestamp - this.currEvt.timestamp < 100 && evt.keyCode === this.currEvt.keyCode) {
      this.currEvt = null;
    } else {
      const charCode = (0,_utils_keycode_to_charcode__WEBPACK_IMPORTED_MODULE_49__.keyCodeToChartChod)(evt.keyCode);
      if (!charCode.modifier) {
        const keyboardEvt = new _events_keyboard_event__WEBPACK_IMPORTED_MODULE_52__["default"]('keypress', true, false, evt.charCode, evt.keyCode, 0, this.modifier.control, this.modifier.alt, this.modifier.shift, this.modifier.control, this.modifier.control);
        if (this.keyMediator.handleKey(keyboardEvt)) {
          evt.preventDefault();
          this.currKeyCode = null;
        }
      }
    }
  }
  keyup(evt) {
    const modifier = {};
    modifier.shift = evt.shiftKey;
    modifier.control = evt.ctrlKey || evt.metaKey;
    const charCode = (0,_utils_keycode_to_charcode__WEBPACK_IMPORTED_MODULE_49__.keyCodeToChartChod)(evt.keyCode);
    if (charCode.modifier) {
      delete this.modifier[charCode.modifier];
    } else {
      if (evt.keyCode === this.currKeyCode) {
        const keyboardEvt = new _events_keyboard_event__WEBPACK_IMPORTED_MODULE_52__["default"]('keyup', true, false, evt.charCode, evt.keyCode, 0, this.modifier.control, this.modifier.alt, this.modifier.shift, this.modifier.control, this.modifier.control);
        if (this.keyMediator.handleKey(keyboardEvt)) {
          evt.preventDefault();
          this.currKeyCode = null;
        }
      }
    }
  }
  savePdf() {
    const pdfDownloader = new _pdf_downloader__WEBPACK_IMPORTED_MODULE_55__["default"](this.editorFonts, this);
    pdfDownloader.savePdf();
  }
  hideAddPart() {
    this.isShowAddPart = false;
  }
  addPart(info) {
    const partObj = info.part;
    const staffInfos = partObj.partDefaults.staffs;
    const partInfo = info.info;
    const staffCount = this.score.staves.length;
    const part = _models_part__WEBPACK_IMPORTED_MODULE_30__["default"].createPart();
    part.name = partInfo.name;
    part.shortName = partInfo.shortName;
    part.transposition = partInfo.transposition;
    part.octaveShift = partInfo.octaveShift;
    part.directionsAboveStaff = partInfo.directionsAboveStaff;
    part.barlineBreak = partInfo.barlineBreak;
    part.instrumentUri = partObj.uri;
    part.midiPatch = partInfo.midiPatch;
    const clefs = [];
    for (let i = 0; i < staffInfos.length; i++) {
      const staffInfo = staffInfos[i];
      let staff;
      if (staffInfo.staffTuning) {
        staff = new _models_staff__WEBPACK_IMPORTED_MODULE_37__["default"]();
        const notes = [];
        for (let j = 0; j < staffInfo.staffTuning.length; j++) {
          const lineInfo = staffInfo.staffTuning[j];
          notes.push(lineInfo.line.note);
        }
        const lineCount = notes.length;
        const staffType = _models_staff_type__WEBPACK_IMPORTED_MODULE_39__["default"].createTypeFromLineCount(lineCount);
        staffType.numLines = lineCount;
        const staffTuning = new _models_staff_tuning__WEBPACK_IMPORTED_MODULE_38__["default"]();
        staffTuning.setStaffNotesFromStrings(notes);
        staffType.staffTuning = staffTuning;
        staff.type = staffType;
      }
      const clefInfo = staffInfo.clef;
      let clef;
      if (clefInfo.note && clefInfo.line) {
        const note = new _models_note__WEBPACK_IMPORTED_MODULE_27__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_47__["default"].pitchFromString(clefInfo.note));
        let displayLineCount = -1;
        if (clefInfo.displayLineCount != null) {
          displayLineCount = clefInfo.displayLineCount;
        }
        let displayLineSpacing = 1;
        if (clefInfo.displayLineSpacing) {
          displayLineSpacing = clefInfo.displayLineSpacing;
        }
        clef = new _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"](0, clefInfo.sign, clefInfo.line, note, 5, displayLineCount, displayLineSpacing);
      } else {
        const sign = clefInfo.sign;
        if (sign == _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].G_CLEF_SIGN) {
          clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].trebleClef();
        } else if (sign == _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].F_CLEF_SIGN) {
          clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].bassClef();
        } else if (sign == _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].PERCUSSION_CLEF_SIGN) {
          clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].percussionClef();
        } else if (sign == _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].PERCUSSION2_CLEF_SIGN) {
          clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].percussion2Clef();
        } else if (sign == _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].TAB_CLEF_SIGN) {
          clef = _models_tablature_clef__WEBPACK_IMPORTED_MODULE_41__["default"].tabClef(0, staff);
        } else {
          if (sign != _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].TENOR_VOICE_CLEF_SIGN) throw new Error('Unrecognized clef XML: ' + clefInfo.toXMLString());
          clef = _models_clef__WEBPACK_IMPORTED_MODULE_11__["default"].tenorVoiceClef();
        }
      }
      clefs.push(clef);
      if (staffInfo.pedal) {
        part.hasPedal = true;
        break;
      }
    }
    clefs.forEach((clef, idx) => {
      const staff = new _models_staff__WEBPACK_IMPORTED_MODULE_37__["default"]();
      staff.part = part;
      staff.type = (0,_utils_staff_type__WEBPACK_IMPORTED_MODULE_56__.createTypeFromClef)(clef);
      this.score.insertBlankStaffAt(staff, staffCount + idx, clef);
    });
    this.scoreDocumentView.updateLayout();
    this.keyMediator = new _controller_key_mediator__WEBPACK_IMPORTED_MODULE_0__["default"](this.scoreDocumentController);
    this.hideAddPart();
  }
}
EditorContainerComponent.ɵfac = function EditorContainerComponent_Factory(t) {
  return new (t || EditorContainerComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_60__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵdirectiveInject"](_text_editor_fonts_service__WEBPACK_IMPORTED_MODULE_57__.EditorFontsService), _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵdirectiveInject"](_note_editor_service__WEBPACK_IMPORTED_MODULE_58__.NoteEditorService));
};
EditorContainerComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵdefineComponent"]({
  type: EditorContainerComponent,
  selectors: [["app-editor-container"]],
  viewQuery: function EditorContainerComponent_Query(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵviewQuery"](_c0, 7);
    }
    if (rf & 2) {
      let _t;
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵloadQuery"]()) && (ctx.svgEl = _t.first);
    }
  },
  hostBindings: function EditorContainerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵlistener"]("scroll", function EditorContainerComponent_scroll_HostBindingHandler($event) {
        return ctx.onScroll($event);
      })("keydown", function EditorContainerComponent_keydown_HostBindingHandler($event) {
        return ctx.keydown($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵresolveWindow"])("keypress", function EditorContainerComponent_keypress_HostBindingHandler($event) {
        return ctx.keypress($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵresolveWindow"])("keyup", function EditorContainerComponent_keyup_HostBindingHandler($event) {
        return ctx.keyup($event);
      }, false, _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵresolveWindow"]);
    }
  },
  decls: 7,
  vars: 4,
  consts: [[1, "container"], ["container", ""], [0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "xmlns", "http://www.w3.org/2000/svg", "width", "100%", 2, "fill", "rgb(0, 0, 0)", "stroke", "rgb(0, 0, 0)", 3, "ngStyle"], ["svg", ""], [1, "fab", 3, "click"], ["icon", "cloud-arrow-down"], [3, "isShow", "onSave", "onHide"]],
  template: function EditorContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementStart"](0, "div", 0, 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵnamespaceSVG"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelement"](2, "svg", 2, 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵnamespaceHTML"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementStart"](4, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵlistener"]("click", function EditorContainerComponent_Template_div_click_4_listener() {
        return ctx.savePdf();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelement"](5, "fa-icon", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementStart"](6, "app-add-part-modal", 6);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵlistener"]("onSave", function EditorContainerComponent_Template_app_add_part_modal_onSave_6_listener($event) {
        return ctx.addPart($event);
      })("onHide", function EditorContainerComponent_Template_app_add_part_modal_onHide_6_listener() {
        return ctx.hideAddPart();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵadvance"](2);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵpureFunction1"](2, _c1, ctx.height + "px"));
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵadvance"](4);
      _angular_core__WEBPACK_IMPORTED_MODULE_60__["ɵɵproperty"]("isShow", ctx.isShowAddPart);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_61__.NgStyle, _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_62__.FaIconComponent, _add_part_modal_add_part_modal_component__WEBPACK_IMPORTED_MODULE_59__.AddPartModalComponent],
  styles: ["[_nghost-%COMP%] {\n  display: block;\n  width: 100%;\n  height: 100%;\n  overflow-y: auto;\n  background-color: #d2d3c5;\n  position: relative;\n}\n.container[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  width: 1024px;\n  margin: 0 auto;\n  position: relative;\n}\n.fab[_ngcontent-%COMP%] {\n  position: fixed;\n  bottom: 60px;\n  right: 60px;\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  background-color: #33465e;\n  box-shadow: 0px 1.5px 2.5px 0px rgba(0, 0, 0, 0.2), 0px 3px 8px 0px rgba(0, 0, 0, 0.12);\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 23px;\n  color: #fff;\n}"]
});

/***/ }),

/***/ 31583:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/editor-container/pdf-downloader.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PDFDownloader)
/* harmony export */ });
/* harmony import */ var pdfkit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pdfkit */ 95071);
/* harmony import */ var blob_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! blob-stream */ 70971);
/* harmony import */ var blob_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(blob_stream__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! file-saver */ 94327);
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var svg_to_pdfkit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! svg-to-pdfkit */ 83980);
/* harmony import */ var svg_to_pdfkit__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(svg_to_pdfkit__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _text_font_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/font-names */ 20781);
/* harmony import */ var _utils_string_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/string-utils */ 31836);






class PDFDownloader {
  constructor(editorFonts, editor) {
    this.editorFonts = editorFonts;
    this.editor = editor;
    this.initializePdfkit();
  }
  initializePdfkit() {
    this.pdfkitDoc = this.createPdfkitDoc();
    this.pdfkitStream = this.pdfkitDoc.pipe(blob_stream__WEBPACK_IMPORTED_MODULE_1___default()());
  }
  createPdfkitDoc() {
    const pdfDocument = new pdfkit__WEBPACK_IMPORTED_MODULE_0__["default"]({
      autoFirstPage: false
    });
    for (let i = 0; i < this.editorFonts.editorFonts.length; i++) {
      const font = this.editorFonts.editorFonts[i];
      pdfDocument.registerFont(font.fontName, font.fontBuffer);
    }
    return pdfDocument;
  }
  initSvgDoc() {
    const layout = this.editor.createFullLayout();
    const pageViews = this.editor.getPrintViews(layout.context, layout);
    layout.doIncrementalFlow();
    for (let i = 0; i < layout.pageLayouts.length; i++) {
      layout.dispatchPageDisplayEvent(i);
    }
    for (let i = 0; i < pageViews.length; i++) {
      const pageView = pageViews[i];
      const pageSvg = pageView._svg;
      const svgNS = 'http://www.w3.org/2000/svg';
      const xlinkNS = 'http://www.w3.org/1999/xlink';
      const svgNode = document.createElementNS(svgNS, 'svg');
      svgNode.setAttribute('xmlns:xlink', xlinkNS);
      svgNode.setAttribute('style', 'width:100%;height:100%;');
      while (pageSvg.childNodes.length > 0) {
        svgNode.appendChild(pageSvg.childNodes[0]);
      }
      const orientation = 'portrait';
      const pageMetrics = this.editor.scoreController.score.pageMetrics;
      const pageParams = {
        layout: orientation,
        size: orientation === 'portrait' ? [pageMetrics.width, pageMetrics.height] : [pageMetrics.height, pageMetrics.width]
      };
      this.pdfkitDoc.addPage(pageParams);
      svg_to_pdfkit__WEBPACK_IMPORTED_MODULE_3___default()(this.pdfkitDoc, svgNode, 0, 0, {
        fontCallback: this.svgToPdfFontCallback,
        assumePt: true
      });
    }
  }
  savePdf() {
    this.initSvgDoc();
    const title = (0,_utils_string_utils__WEBPACK_IMPORTED_MODULE_5__.removeBreakLines)(this.editor.scoreController.score.title);
    this.pdfkitStream.on('finish', () => {
      const blob = this.pdfkitStream.toBlob('application/pdf');
      (0,file_saver__WEBPACK_IMPORTED_MODULE_2__.saveAs)(blob, title + '.pdf');
    });
    this.pdfkitDoc.end();
  }
  svgToPdfFontCallback(family, bold, italic, s) {
    return _text_font_names__WEBPACK_IMPORTED_MODULE_4__["default"].toFontName(family, bold, italic);
  }
}

/***/ }),

/***/ 93699:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/events/falsh-mouse-event.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FlashMouseEvent)
/* harmony export */ });
class FlashMouseEvent {
  static get CLICK() {
    return 'click';
  }
  static get CONTEXT_MENU() {
    return 'contextMenu';
  }
  static get DOUBLE_CLICK() {
    return 'doubleClick';
  }
  static get MIDDLE_CLICK() {
    return 'middleClick';
  }
  static get MIDDLE_MOUSE_DOWN() {
    return 'middleMouseDown';
  }
  static get MIDDLE_MOUSE_UP() {
    return 'middleMouseUp';
  }
  static get MOUSE_DOWN() {
    return 'mouseDown';
  }
  static get MOUSE_MOVE() {
    return 'mouseMove';
  }
  static get MOUSE_OUT() {
    return 'mouseOut';
  }
  static get MOUSE_OVER() {
    return 'mouseOver';
  }
  static get MOUSE_UP() {
    return 'mouseUp';
  }
  static get MOUSE_WHEEL() {
    return 'mouseWheel';
  }
  static get RELEASE_OUTSIDE() {
    return 'releaseOutside';
  }
  static get RIGHT_CLICK() {
    return 'rightClick';
  }
  static get RIGHT_MOUSE_DOWN() {
    return 'rightMouseDown';
  }
  static get RIGHT_MOUSE_UP() {
    return 'rightMouseUp';
  }
  static get ROLL_OUT() {
    return 'rollOut';
  }
  static get ROLL_OVER() {
    return 'rollOver';
  }
  static get TOUCHSTART() {
    return 'touchstart';
  }
  static get TOUCHEND() {
    return 'touchend';
  }
  constructor(type, bubbles, cancelable, x, y, localX = NaN, localY = NaN, relatedObject = null, ctrlKey, altKey, shiftKey, buttonDown, delta = 0, commandKey, controlKey, clickCount = 0) {
    this.altKey = false;
    this.buttonDown = false;
    this.clickCount = 0;
    this.commandKey = false;
    this.controlKey = false;
    this.ctrlKey = false;
    this.delta = 0;
    this.isRelatedObjectInaccessible = false;
    this.localX = NaN;
    this.localY = NaN;
    this.movementX = NaN;
    this.movementY = NaN;
    this.relatedObject = null;
    this.shiftKey = false;
    this.stageX = NaN;
    this.stageY = NaN;
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.x = x;
    this.y = y;
    this.localX = localX;
    this.localY = localY;
    this.relatedObject = relatedObject;
    this.ctrlKey = ctrlKey || commandKey;
    this.altKey = altKey;
    this.shiftKey = shiftKey;
    this.buttonDown = buttonDown;
    this.delta = delta;
    this.commandKey = commandKey;
    this.controlKey = controlKey;
    this.clickCount = clickCount;
  }
}

/***/ }),

/***/ 35074:
/*!******************************************************!*\
  !*** ./src/app/note-editor/events/keyboard-event.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeyboardEvent)
/* harmony export */ });
class KeyboardEvent {
  static get KEY_DOWN() {
    return 'keyDown';
  }
  static get KEY_UP() {
    return 'keyUp';
  }
  constructor(type, bubbles, cancelable, charCode = 0, keyCode = 0, keyLocation = 0, ctrlKey, altKey, shiftKey, controlKey, commandKey) {
    this.bubbles = false;
    this.cancelable = false;
    this.currentTarget = null;
    this.eventPhase = 0;
    this.target = null;
    this.type = null;
    this._cancelled = false;
    this._cancelledImmediate = false;
    this._defaultPrevented = false;
    this.altKey = false;
    this.charCode = 0;
    this.commandKey = false;
    this.controlKey = false;
    this.ctrlKey = false;
    this.keyCode = 0;
    this.keyLocation = 0;
    this.shiftKey = false;
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.charCode = charCode;
    this.keyCode = keyCode;
    this.keyLocation = keyLocation;
    this.ctrlKey = ctrlKey;
    this.altKey = altKey;
    this.shiftKey = shiftKey;
    this.controlKey = controlKey;
    this.commandKey = commandKey;
  }
}

/***/ }),

/***/ 80102:
/*!************************************************!*\
  !*** ./src/app/note-editor/events/keyboard.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Keyboard": () => (/* binding */ Keyboard)
/* harmony export */ });
var Keyboard;
(function (Keyboard) {
  Keyboard[Keyboard["A"] = 65] = "A";
  Keyboard[Keyboard["B"] = 66] = "B";
  Keyboard[Keyboard["C"] = 67] = "C";
  Keyboard[Keyboard["D"] = 68] = "D";
  Keyboard[Keyboard["E"] = 69] = "E";
  Keyboard[Keyboard["F"] = 70] = "F";
  Keyboard[Keyboard["G"] = 71] = "G";
  Keyboard[Keyboard["H"] = 72] = "H";
  Keyboard[Keyboard["I"] = 73] = "I";
  Keyboard[Keyboard["J"] = 74] = "J";
  Keyboard[Keyboard["K"] = 75] = "K";
  Keyboard[Keyboard["L"] = 76] = "L";
  Keyboard[Keyboard["M"] = 77] = "M";
  Keyboard[Keyboard["N"] = 78] = "N";
  Keyboard[Keyboard["O"] = 79] = "O";
  Keyboard[Keyboard["P"] = 80] = "P";
  Keyboard[Keyboard["PAGE_UP"] = 33] = "PAGE_UP";
  Keyboard[Keyboard["PAGE_DOWN"] = 34] = "PAGE_DOWN";
  Keyboard[Keyboard["NUMBER_0"] = 48] = "NUMBER_0";
  Keyboard[Keyboard["NUMBER_1"] = 49] = "NUMBER_1";
  Keyboard[Keyboard["NUMBER_2"] = 50] = "NUMBER_2";
  Keyboard[Keyboard["NUMBER_3"] = 51] = "NUMBER_3";
  Keyboard[Keyboard["NUMBER_4"] = 52] = "NUMBER_4";
  Keyboard[Keyboard["NUMBER_5"] = 53] = "NUMBER_5";
  Keyboard[Keyboard["NUMBER_6"] = 54] = "NUMBER_6";
  Keyboard[Keyboard["NUMBER_7"] = 55] = "NUMBER_7";
  Keyboard[Keyboard["NUMBER_8"] = 56] = "NUMBER_8";
  Keyboard[Keyboard["NUMBER_9"] = 57] = "NUMBER_9";
  Keyboard[Keyboard["BACKSPACE"] = 8] = "BACKSPACE";
  Keyboard[Keyboard["TAB"] = 9] = "TAB";
  Keyboard[Keyboard["ENTER"] = 13] = "ENTER";
  Keyboard[Keyboard["COMMAND"] = 15] = "COMMAND";
  Keyboard[Keyboard["SHIFT"] = 16] = "SHIFT";
  Keyboard[Keyboard["CONTROL"] = 17] = "CONTROL";
  Keyboard[Keyboard["ALTERNATE"] = 18] = "ALTERNATE";
  Keyboard[Keyboard["CAPS_LOCK"] = 20] = "CAPS_LOCK";
  Keyboard[Keyboard["ESCAPE"] = 27] = "ESCAPE";
  Keyboard[Keyboard["SPACE"] = 32] = "SPACE";
  Keyboard[Keyboard["END"] = 35] = "END";
  Keyboard[Keyboard["HOME"] = 36] = "HOME";
  Keyboard[Keyboard["LEFT"] = 37] = "LEFT";
  Keyboard[Keyboard["UP"] = 38] = "UP";
  Keyboard[Keyboard["RIGHT"] = 39] = "RIGHT";
  Keyboard[Keyboard["DOWN"] = 40] = "DOWN";
  Keyboard[Keyboard["INSERT"] = 45] = "INSERT";
  Keyboard[Keyboard["DELETE"] = 46] = "DELETE";
  Keyboard[Keyboard["F1"] = 112] = "F1";
  Keyboard[Keyboard["F2"] = 113] = "F2";
  Keyboard[Keyboard["F3"] = 114] = "F3";
  Keyboard[Keyboard["F4"] = 115] = "F4";
  Keyboard[Keyboard["F5"] = 116] = "F5";
  Keyboard[Keyboard["F6"] = 117] = "F6";
  Keyboard[Keyboard["F7"] = 118] = "F7";
  Keyboard[Keyboard["F8"] = 119] = "F8";
  Keyboard[Keyboard["F9"] = 120] = "F9";
  Keyboard[Keyboard["F10"] = 121] = "F10";
  Keyboard[Keyboard["F11"] = 122] = "F11";
  Keyboard[Keyboard["F12"] = 123] = "F12";
  Keyboard[Keyboard["EQUAL"] = 187] = "EQUAL";
  Keyboard[Keyboard["MINUS"] = 189] = "MINUS";
  Keyboard[Keyboard["LEFTBRACKET"] = 219] = "LEFTBRACKET";
})(Keyboard || (Keyboard = {}));

/***/ }),

/***/ 94333:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/events/measure-display-event.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureDisplayEvent)
/* harmony export */ });
class MeasureDisplayEvent {
  static get DISPLAY() {
    return 'display';
  }
  static get GEOMETRY_CHANGE() {
    return 'geometryChange';
  }
  static get SPAN_CHANGE() {
    return 'spanChange';
  }
  static get SEQUENCE_CHANGE() {
    return 'sequenceChange';
  }
  static get UPDATE_MEASURE_HANDLE_INDEX() {
    return 'updateMeasureHandleIndex';
  }
  constructor(type, measureIndices, systemLayout, justify, staves = null) {
    this.measureIndices = null;
    this.systemLayout = null;
    this.justify = false;
    this.staves = null;
    this.type = type;
    this.measureIndices = measureIndices;
    this.systemLayout = systemLayout;
    this.justify = justify;
    this.staves = staves;
  }
  clone() {
    return new MeasureDisplayEvent(this.type, this.measureIndices, this.systemLayout, this.justify);
  }
}

/***/ }),

/***/ 1179:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/events/measure-validation-event.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureValidationEvent)
/* harmony export */ });
class MeasureValidationEvent {
  static get SEQUENCE_CHANGE() {
    return 'sequenceChange';
  }
  static get ADD() {
    return 'add';
  }
  static get REMOVE() {
    return 'remove';
  }
  static get REFLOW() {
    return 'reflow';
  }
  static get VALIDATE() {
    return 'validate';
  }
  static get INVALIDATE() {
    return 'invalidate';
  }
  static get REBUILD_SCORE() {
    return 'rebuildScore';
  }
  static get BIG_CHANGES() {
    return MeasureValidationEvent.big_changes;
  }
  static get GEOMETRY_CHANGE() {
    return 'geometryChange';
  }
  static get SPAN_CHANGE() {
    return 'spanChange';
  }
  static get FOUNDRY_CHANGE() {
    return 'foundryChange';
  }
  static get VALIDATED() {
    return 'validated';
  }
  get measures() {
    return this._measures;
  }
  get staves() {
    return this._staves;
  }
  get measureIndices() {
    if (this._measures == null && !this.sequenceChanges.length) {
      return null;
    }
    if (this._measureIndices == null || this._measureIndices.length === 0) {
      this._measureIndices = [];
      for (let i = 0; i < this._measures.length; i++) {
        const measure = this._measures[i];
        if (measure.index >= 0 && this._measureIndices.indexOf(measure.index) < 0) {
          this._measureIndices.push(measure.index);
        }
      }
      this._measureIndices.sort((prev, next) => {
        return prev < next ? -1 : prev > next ? 1 : 0;
      });
    }
    return this._measureIndices;
  }
  get firstMeasureIndex() {
    if (this._measureIndices == null || this.measureIndices.length === 0) {
      return 0;
    } else {
      return this.measureIndices[0];
    }
  }
  constructor(type, measures = null, staves = null) {
    this.sequenceChanges = [];
    this.reflow = false;
    this._measures = null;
    this._measureIndices = null;
    this._staves = null;
    this.type = type;
    this._measures = measures;
    this._staves = staves;
  }
  clone() {
    return new MeasureValidationEvent(this.type, this.measures, this.staves);
  }
}
MeasureValidationEvent.big_changes = [MeasureValidationEvent.SEQUENCE_CHANGE, MeasureValidationEvent.VALIDATE];

/***/ }),

/***/ 73117:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/events/page-reflow-event.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageReflowEvent)
/* harmony export */ });
class PageReflowEvent {
  static get PAGE_REFLOW() {
    return 'pageReflow';
  }
  constructor(type, pageIndices, measureIndices, staves) {
    this.pageIndices = null;
    this.measureIndices = null;
    this.staves = null;
    this.type = type;
    this.pageIndices = pageIndices;
    this.measureIndices = measureIndices;
    this.staves = staves;
  }
  clone() {
    return new PageReflowEvent(this.type, this.pageIndices, this.measureIndices, this.staves);
  }
}

/***/ }),

/***/ 3634:
/*!******************************************************!*\
  !*** ./src/app/note-editor/geoms/color-transform.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ColorTransform)
/* harmony export */ });
class ColorTransform {
  constructor(redMultiplier = 1, greenMultiplier = 1, blueMultiplier = 1, alphaMultiplier = 1, redOffset = 0, greenOffset = 0, blueOffset = 0, alphaOffset = 0) {
    this.alphaMultiplier = NaN;
    this.alphaOffset = NaN;
    this.blueMultiplier = NaN;
    this.blueOffset = NaN;
    this.color = 0;
    this.greenMultiplier = NaN;
    this.greenOffset = NaN;
    this.redMultiplier = NaN;
    this.redOffset = NaN;
    this.redMultiplier = redMultiplier;
    this.greenMultiplier = greenMultiplier;
    this.blueMultiplier = blueMultiplier;
    this.alphaMultiplier = alphaMultiplier;
    this.redOffset = redOffset;
    this.greenOffset = greenOffset;
    this.blueOffset = blueOffset;
    this.alphaOffset = alphaOffset;
  }
}

/***/ }),

/***/ 81443:
/*!********************************************!*\
  !*** ./src/app/note-editor/geoms/point.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Point)
/* harmony export */ });
class Point {
  get length() {
    return Point.distance(Point.ORIGIN, this);
  }
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
  static distance(p1, p2) {
    const offsetX = p2.x - p1.x;
    const offsetY = p2.y - p1.y;
    return offsetX === 0 ? Math.abs(offsetY) : offsetY === 0 ? Math.abs(offsetX) : Math.sqrt(offsetX * offsetX + offsetY * offsetY);
  }
  add(vector) {
    return new Point(this.x + vector.x, this.y + vector.y);
  }
  subtract(vector) {
    return new Point(this.x - vector.x, this.y - vector.y);
  }
  normalize(scale) {
    const length = this.length;
    if (length === 0) {
      this.x = 0;
      this.y = 0;
    } else {
      this.x = this.x / length * scale;
      this.y = this.y / length * scale;
    }
  }
  static interpolate(p1, p2, percent) {
    return new Point(p1.x + percent * (p2.x - p1.x), p1.y + percent * (p2.y - p1.y));
  }
}
Point.ORIGIN = new Point(0, 0);

/***/ }),

/***/ 67292:
/*!************************************************!*\
  !*** ./src/app/note-editor/geoms/rectangle.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Rectangle)
/* harmony export */ });
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./point */ 81443);

class Rectangle {
  get top() {
    return this.y;
  }
  set top(t) {
    this.height -= t - this.y;
    this.y = t;
  }
  get bottom() {
    return this.y + this.height;
  }
  set bottom(b) {
    this.height = b - this.y;
  }
  get left() {
    return this.x;
  }
  set left(l) {
    this.width -= l - this.x;
    this.x = l;
  }
  get right() {
    return this.x + this.width;
  }
  set right(r) {
    this.width = r - this.x;
  }
  get topLeft() {
    return new _point__WEBPACK_IMPORTED_MODULE_0__["default"](this.left, this.top);
  }
  get bottomRight() {
    return new _point__WEBPACK_IMPORTED_MODULE_0__["default"](this.right, this.bottom);
  }
  get size() {
    return new _point__WEBPACK_IMPORTED_MODULE_0__["default"](this.width, this.height);
  }
  constructor(x = 0, y = 0, width = 0, height = 0) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  clone() {
    return new Rectangle(this.x, this.y, this.width, this.height);
  }
  inflate(xPadding, yPadding) {
    this.x -= xPadding;
    this.width += 2 * xPadding;
    this.y -= yPadding;
    this.height += 2 * yPadding;
  }
  union(rectangle) {
    const minX = Math.min(rectangle.x, this.x);
    const minY = Math.min(rectangle.y, this.y);
    const maxRight = Math.max(rectangle.right, this.right);
    const maxBottom = Math.max(rectangle.bottom, this.bottom);
    return new Rectangle(minX, minY, maxRight - minX, maxBottom - minY);
  }
}

/***/ }),

/***/ 18154:
/*!************************************************!*\
  !*** ./src/app/note-editor/geoms/transform.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Transform)
/* harmony export */ });
/* harmony import */ var _utils_color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/color */ 21506);

class Transform {
  get colorTransform() {
    return this._colorTransform;
  }
  set colorTransform(t) {
    this._colorTransform = t;
    // if (this._object.constructor.name === 'SlurView') {
    //   debugger;
    // }
    if (this._object._svg) {
      if (t.redOffset === 0 && t.greenOffset === 0 && t.blueOffset === 0) {
        this._object._svg.style.removeProperty('fill');
        this._object._svg.style.removeProperty('stroke');
      } else {
        const rgba = (0,_utils_color__WEBPACK_IMPORTED_MODULE_0__.colorToRGBA)(((255 & t.redOffset) << 16) + ((255 & t.greenOffset) << 8) + (255 & t.blueOffset), 1);
        this._object._svg.style.fill = rgba;
        this._object._svg.style.stroke = rgba;
        this.removeUnusedStrokes(this._object._svg);
      }
    }
  }
  constructor(object) {
    this._colorTransform = null;
    this._object = object;
  }
  removeUnusedStrokes(node) {
    for (let i = 0; i < node.childNodes.length; i++) {
      const childNode = node.childNodes[i];
      const stroke = childNode.getAttribute ? childNode.getAttribute('stroke') : null;
      if (stroke) {
        const alpha = (0,_utils_color__WEBPACK_IMPORTED_MODULE_0__.extractAlphaFromRGBA)(stroke);
        if (stroke !== 'none' && !isNaN(alpha) && alpha !== 0) {
          childNode.removeAttribute('stroke');
        }
      }
      this.removeUnusedStrokes(childNode);
    }
  }
}

/***/ }),

/***/ 94287:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/glyph/background-glyph.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BackgroundGlyph)
/* harmony export */ });
/* harmony import */ var _display_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/shape */ 15165);
/* harmony import */ var _empty_glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty-glyph */ 36705);


class BackgroundGlyph extends _empty_glyph__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(width, height, noteEditorService) {
    super(width, height, noteEditorService);
  }
  createDisplayObject() {
    const shape = new _display_shape__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const graphics = shape.graphics;
    graphics.beginFill(0xffffff);
    graphics.drawRect(0, 0, this.width, this.height);
    graphics.endFill();
    return shape;
  }
}

/***/ }),

/***/ 83446:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/glyph/described-glyph-foundry.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DescribedGlyphFoundry)
/* harmony export */ });
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_note_head__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/note-head */ 80160);
/* harmony import */ var _empty_glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty-glyph */ 36705);
/* harmony import */ var _note_head_metrics__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note-head-metrics */ 21965);
/* harmony import */ var _stem_glyph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./stem-glyph */ 5162);





class DescribedGlyphFoundry {
  static get RHYTHM_DOT() {
    return 'rhythmDot';
  }
  static get FLAG_DOWN() {
    return 'flagDown';
  }
  static get FLAG_UP() {
    return 'flagUp';
  }
  static get BUZZ() {
    return 'buzz';
  }
  static get KEEP_WITH_NEXT() {
    return 'keepWithNext';
  }
  static get PAGE_BREAK() {
    return 'pageBreak';
  }
  static get SYSTEM_BREAK() {
    return 'systemBreak';
  }
  constructor(metrics, descriptor, glyphSpriteFactoryGenerator, noteEditorService, fallbackFoundry = null) {
    this.metrics = null;
    this.clefGlyphs = {};
    this.accidentalGlyphs = {};
    this.restGlyphs = {};
    this.noteHeadGlyphMaps = {};
    this.noteHeadMetricsMaps = {};
    this.articulationAboveGlyphs = {};
    this.articulationBelowGlyphs = {};
    this.tremoloGlyphs = {};
    this.noteFlagGlyphs = {};
    this.barlineGlyphs = {};
    this.otherGlyphs = {};
    this.timeSignatureGlyphs = {};
    this.tabGlyphs = {};
    this.tupletNumberGlyphs = {};
    this.chordSymbolGlyphs = {};
    this.tabArticulationMap = {
      closed: 'tap'
    };
    this.deltaX = 0;
    this.deltaY = 0;
    this.descriptor = null;
    this.glyphSpriteFactoryGenerator = null;
    this.fallbackFoundry = null;
    this.metrics = metrics;
    this.descriptor = descriptor;
    this.glyphSpriteFactoryGenerator = glyphSpriteFactoryGenerator;
    this.fallbackFoundry = fallbackFoundry;
    this.noteEditorService = noteEditorService;
  }
  getScaleFoundry(t) {
    throw new Error('not implemented');
  }
  initializeGlyphs() {
    if (this.descriptor) {
      for (let i = 0; i < this.descriptor.clefs.length; i++) {
        const clef = this.descriptor.clefs[i];
        this.clefGlyphs[clef.sign] = this.glyphFromDescriptor(clef.glyph);
      }
      for (let i = 0; i < this.descriptor.accidentals.length; i++) {
        const accidental = this.descriptor.accidentals[i];
        this.accidentalGlyphs[accidental.sign] = this.glyphFromDescriptor(accidental.glyph);
      }
      for (let i = 0; i < this.descriptor.noteheads.length; i++) {
        const noteheadType = this.descriptor.noteheads[i];
        const type = noteheadType.type;
        const noteheadGlyph = {};
        this.noteHeadGlyphMaps[type] = noteheadGlyph;
        const noteheadMetrics = {};
        this.noteHeadMetricsMaps[type] = noteheadMetrics;
        for (let j = 0; j < noteheadType.noteheads.length; j++) {
          const notehead = noteheadType.noteheads[j];
          const noteheadValue = notehead.value;
          const noteheadVal = type === _models_note_head__WEBPACK_IMPORTED_MODULE_1__.NoteHead.NAMED_NOTE_HEAD ? ''.concat(noteheadValue).concat(notehead.pitch) : noteheadValue;
          noteheadGlyph[noteheadVal] = this.glyphFromDescriptor(notehead.glyph);
          noteheadMetrics[noteheadVal] = this.metricsFromDescriptor(notehead.metrics, noteheadGlyph[noteheadVal]);
        }
      }
      for (let i = 0; i < this.descriptor.articulations.length; i++) {
        const articulation = this.descriptor.articulations[i];
        const articulationType = articulation.type;
        const articulationPosition = articulation.position;
        const articulationGlyph = this.glyphFromDescriptor(articulation.glyph);
        if (articulationPosition === 'above' || articulationPosition === 'both') {
          this.articulationAboveGlyphs[articulationType] = articulationGlyph;
        }
        if (articulationPosition === 'below' || articulationPosition === 'both') {
          this.articulationBelowGlyphs[articulationType] = articulationGlyph;
        }
      }
      for (let i = 0; i < this.descriptor.ornaments.length; i++) {
        const ornament = this.descriptor.ornaments[i];
        switch (ornament.type) {
          case 'tremolo':
            const ornamentVal = ornament.value;
            const ornamentGlyph = this.glyphFromDescriptor(ornament.glyph);
            this.tremoloGlyphs[ornamentVal] = ornamentGlyph;
            break;
          case 'buzz':
            this.otherGlyphs[DescribedGlyphFoundry.BUZZ] = this.glyphFromDescriptor(ornament.glyph);
            break;
        }
      }
      for (let i = 0; i < this.descriptor.rests.length; i++) {
        const restDesc = this.descriptor.rests[i];
        for (let j = 0; j < restDesc.rests.length; j++) {
          const rest = restDesc.rests[j];
          if (rest.type) {
            this.restGlyphs['' + rest.value + rest.type] = this.glyphFromDescriptor(rest.glyph);
          } else {
            this.restGlyphs[rest.value] = this.glyphFromDescriptor(rest.glyph);
          }
        }
      }
      for (let i = 0; i < this.descriptor.barlines.length; i++) {
        const barline = this.descriptor.barlines[i];
        this.barlineGlyphs[barline.type] = this.glyphFromDescriptor(barline.glyph);
      }
      for (let i = 0; i < this.descriptor.chordSymbols.length; i++) {
        const chordSymbol = this.descriptor.chordSymbols[i];
        this.chordSymbolGlyphs[chordSymbol.char] = this.glyphFromDescriptor(chordSymbol.glyph);
      }
      for (let i = 0; i < this.descriptor.others.length; i++) {
        const other = this.descriptor.others[i];
        this.otherGlyphs[other.name] = this.glyphFromDescriptor(other.glyph);
      }
    }
  }
  glyphSpecFromDescriptor(descriptor) {
    return this.getGlyphSpriteFactory(descriptor.symbol);
  }
  getGlyphSpriteFactory(glyphDescriptor) {
    return this.glyphSpriteFactoryGenerator.createGlyphSpriteFactory(glyphDescriptor);
  }
  glyphFromDescriptor(descriptor) {
    if (descriptor) {
      const x = isNaN(descriptor.x) ? 0 : descriptor.x * this.metrics.sizeUnit;
      const y = isNaN(descriptor.y) ? 0 : -descriptor.y * this.metrics.sizeUnit;
      const height = isNaN(descriptor.height) ? -1 : descriptor.height * this.metrics.sizeUnit;
      const width = isNaN(descriptor.width) ? -1 : descriptor.width * this.metrics.sizeUnit;
      const scale = isNaN(descriptor.scale) ? 1 : descriptor.scale;
      const spacingX = isNaN(descriptor.spacingX) ? 0 : descriptor.spacingX * this.metrics.sizeUnit;
      return this.createGlyph(this.glyphSpecFromDescriptor(descriptor), x, y, width, height, scale, spacingX);
    }
    throw new Error('unable to convert glyph descriptor');
  }
  metricsFromDescriptor(descriptor, noteHeadGlyph) {
    const noteHeadMetrics = new _note_head_metrics__WEBPACK_IMPORTED_MODULE_3__["default"]();
    if (descriptor) {
      noteHeadMetrics.hasStem = descriptor.stem;
      noteHeadMetrics.downX = isNaN(descriptor.downX) ? 0 : descriptor.downX;
      noteHeadMetrics.downY = isNaN(descriptor.downY) ? 0 : descriptor.downY;
      noteHeadMetrics.upX = isNaN(descriptor.upX) ? noteHeadGlyph.width / this.metrics.sizeUnit : descriptor.upX;
      noteHeadMetrics.upY = isNaN(descriptor.upY) ? 0 : descriptor.upY;
    }
    return noteHeadMetrics;
  }
  createGlyph(glyphSpec, x, y, width, height, scale, spacingX) {
    throw new Error('createGlyph not overridden');
  }
  getClef(sign) {
    let clefGlyph = this.clefGlyphs[sign];
    if (!clefGlyph && this.fallbackFoundry) {
      clefGlyph = this.fallbackFoundry.getClef(sign);
    }
    if (!clefGlyph) {
      clefGlyph = new _empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService);
    }
    return clefGlyph;
  }
  getAccidental(sign) {
    let accidentalGlyph = this.accidentalGlyphs[sign];
    if (!accidentalGlyph && this.fallbackFoundry) {
      accidentalGlyph = this.fallbackFoundry.getAccidental(sign);
    }
    return accidentalGlyph;
  }
  getRest(noteValue, restType = null) {
    let restGlyph = null;
    if (restType) {
      restGlyph = this.restGlyphs[noteValue.toString() + restType];
    } else {
      restGlyph = this.restGlyphs[noteValue];
    }
    if (!restGlyph && this.fallbackFoundry) {
      restGlyph = this.fallbackFoundry.getRest(noteValue, restType);
    }
    return restGlyph;
  }
  getNoteHead(noteValue, noteHeadType = null) {
    if (noteHeadType == null) {
      noteHeadType = _models_note_head__WEBPACK_IMPORTED_MODULE_1__.NoteHead.NORMAL_NOTE_HEAD;
    }
    let noteHeadGlyph = this.noteHeadGlyphMaps[noteHeadType][noteValue];
    if (!noteHeadGlyph && this.fallbackFoundry) {
      noteHeadGlyph = this.fallbackFoundry.getNoteHead(noteValue, noteHeadType);
    }
    return noteHeadGlyph;
  }
  getArticulation(articulationStr, aboveGlyph, isTab) {
    if (isTab && articulationStr in this.tabArticulationMap) {
      articulationStr = this.tabArticulationMap[articulationStr];
    }
    let glyphs = aboveGlyph ? this.articulationAboveGlyphs : this.articulationBelowGlyphs;
    let glyph = glyphs[articulationStr];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getArticulation(articulationStr, aboveGlyph, isTab);
    }
    return glyph;
  }
  getStemDecorationSymbol(name) {
    let glyph = this.otherGlyphs[name];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getStemDecorationSymbol(name);
    }
    return glyph;
  }
  getTremolo(name, down) {
    let glyph = this.tremoloGlyphs[name];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getTremolo(name, down);
    }
    return glyph;
  }
  getRhythmDot() {
    let glyph = this.otherGlyphs[DescribedGlyphFoundry.RHYTHM_DOT];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getRhythmDot();
    }
    return glyph;
  }
  getStem(notationValue, stemLength, down, notBeam, graceStart, stemNoteHead = null) {
    if (stemNoteHead == null) {
      stemNoteHead = _models_note_head__WEBPACK_IMPORTED_MODULE_1__.NoteHead.NORMAL_NOTE_HEAD;
    }
    const stemGlyphs = [];
    const length = stemLength * this.metrics.lineSpacing;
    const hasFlag = notationValue > 0 && notationValue <= _models_notation_value__WEBPACK_IMPORTED_MODULE_0__.NotationValue.EIGHTH;
    const noteValue = Math.max(_models_notation_value__WEBPACK_IMPORTED_MODULE_0__.NotationValue.QUARTER, notationValue).toString();
    const nameOrValue = stemNoteHead === _models_note_head__WEBPACK_IMPORTED_MODULE_1__.NoteHead.NAMED_NOTE_HEAD ? ''.concat(noteValue, 'c') : noteValue;
    const noteHeadMetric = this.noteHeadMetricsMaps[stemNoteHead][nameOrValue];
    const startX = (down ? noteHeadMetric.downX : noteHeadMetric.upX) * this.metrics.sizeUnit;
    const startY = (down ? noteHeadMetric.downY : noteHeadMetric.upY) * this.metrics.sizeUnit;
    if (noteHeadMetric.hasStem || hasFlag && !graceStart) {
      let stemGlyph = new _stem_glyph__WEBPACK_IMPORTED_MODULE_4__["default"](length, this.metrics.stemThickness * this.metrics.sizeUnit, startX, startY, down, this.noteEditorService);
      if (graceStart) {
        const slash = notBeam ? this.metrics.graceSlashFlags : this.metrics.graceSlashBeams;
        stemGlyph.setSlash(slash.x * this.metrics.lineSpacing, slash.y * this.metrics.lineSpacing, slash.width * this.metrics.lineSpacing);
      }
      stemGlyphs.push(stemGlyph);
    }
    if (notBeam && hasFlag && (!graceStart || noteHeadMetric.hasStem)) {
      const foundryGlyph = this.otherGlyphs[(down ? DescribedGlyphFoundry.FLAG_DOWN : DescribedGlyphFoundry.FLAG_UP) + notationValue.toString()];
      stemGlyphs.push(foundryGlyph.offset(startX, down ? length : -length));
    }
    return stemGlyphs;
  }
  getBarline(barlineType) {
    let barlineGlyph = this.barlineGlyphs[barlineType];
    if (!barlineGlyph && this.fallbackFoundry) {
      barlineGlyph = this.fallbackFoundry.getBarline(barlineType);
    }
    return barlineGlyph;
  }
  getKeepWithNext() {
    let glyph = this.otherGlyphs[DescribedGlyphFoundry.KEEP_WITH_NEXT];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getKeepWithNext();
    }
    return glyph;
  }
  getTimeSignature(t) {
    throw new Error('getTimeSignature not overridden');
  }
  getTimeSignatureSymbol(timeSymbol) {
    let glyph = this.otherGlyphs[timeSymbol + 'Time'];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getTimeSignatureSymbol(timeSymbol);
    }
    return glyph;
  }
  getTupletNumber(t) {
    throw new Error('getTupletNumber not overridden');
  }
  getTabFret(t) {
    throw new Error('getTabFret not overridden');
  }
  getBendAlteration(t) {
    throw new Error('getBendAlteration not overridden');
  }
  getTempo(t, e, r) {
    throw new Error('getTempo not overridden');
  }
  getLineNotationStart(lineNotationType) {
    let glyph = this.getOtherWithSuffix(lineNotationType, 'LineNotationStart');
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getLineNotationStart(lineNotationType);
    }
    return glyph;
  }
  getLineNotationSegment(lineType) {
    let glyph = this.getOtherWithSuffix(lineType, 'LineNotationSegment');
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getLineNotationSegment(lineType);
    }
    return glyph;
  }
  getLineNotationEnd(lineType) {
    let glyph = this.getOtherWithSuffix(lineType, 'LineNotationEnd');
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getLineNotationEnd(lineType);
    }
    return glyph;
  }
  getDynamics(text) {
    let glyph = this.getOtherWithSuffix(text, 'Dynamics');
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getDynamics(text);
    }
    return glyph;
  }
  getChordSymbol(char) {
    let glyph = this.chordSymbolGlyphs[char];
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getChordSymbol(char);
    }
    return glyph;
  }
  getSymbol(symbolName) {
    let glyph = this.getOtherWithSuffix(symbolName, 'Symbol');
    if (!glyph && this.fallbackFoundry) {
      glyph = this.fallbackFoundry.getSymbol(symbolName);
    }
    return glyph;
  }
  getOtherWithSuffix(name, surffix) {
    return this.otherGlyphs[name + surffix];
  }
}

/***/ }),

/***/ 36705:
/*!**************************************************!*\
  !*** ./src/app/note-editor/glyph/empty-glyph.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EmptyGlyph)
/* harmony export */ });
/* harmony import */ var _display_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/shape */ 15165);

class EmptyGlyph {
  get originX() {
    return 0;
  }
  get originY() {
    return 0;
  }
  get width() {
    return this._w;
  }
  get height() {
    return this._h;
  }
  set text(t) {}
  constructor(width, height, noteEditorService) {
    this._w = width;
    this._h = height;
    this.noteEditorService = noteEditorService;
  }
  createDisplayObject(viewInfo) {
    return new _display_shape__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
  }
}

/***/ }),

/***/ 42890:
/*!*******************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/accidental-descriptor.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AccidentalDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class AccidentalDescriptor {
  constructor() {
    this.sign = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.sign) {
      json.sign = this.sign;
    }
    if (this.glyph) {
      json.glyph = this.glyph;
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new AccidentalDescriptor();
    if (json.sign) {
      descriptor.sign = json.sign;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new AccidentalDescriptor();
    descriptor.sign = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'sign');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 25163:
/*!*********************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/articulation-descriptor.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ArticulationDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class ArticulationDescriptor {
  constructor() {
    this.type = null;
    this.position = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.type) {
      json.type = this.type;
    }
    if (this.position) {
      json.position = this.position;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new ArticulationDescriptor();
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.position) {
      descriptor.position = json.position;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new ArticulationDescriptor();
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    descriptor.position = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'position');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 66696:
/*!****************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/barline-descriptor.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BarlineDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class BarlineDescriptor {
  constructor() {
    this.type = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.type) {
      json.type = this.type;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new BarlineDescriptor();
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new BarlineDescriptor();
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 59734:
/*!*********************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/chord-symbol-descriptor.ts ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChordSymbolDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class ChordSymbolDescriptor {
  constructor() {
    this.char = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.char) {
      json.char = this.char;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new ChordSymbolDescriptor();
    if (json.char) {
      descriptor.char = json.char;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new ChordSymbolDescriptor();
    descriptor.char = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'char');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 87362:
/*!*************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/clef-descriptor.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ClefDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class ClefDescriptor {
  constructor() {
    this.sign = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.sign) {
      json.sign = this.sign;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new ClefDescriptor();
    if (json.sign) {
      descriptor.sign = json.sign;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new ClefDescriptor();
    descriptor.sign = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'sign');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 12212:
/*!****************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/foundry-descriptor.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FoundryDescriptor)
/* harmony export */ });
/* harmony import */ var _accidental_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./accidental-descriptor */ 42890);
/* harmony import */ var _articulation_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./articulation-descriptor */ 25163);
/* harmony import */ var _barline_descriptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./barline-descriptor */ 66696);
/* harmony import */ var _chord_symbol_descriptor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chord-symbol-descriptor */ 59734);
/* harmony import */ var _clef_descriptor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clef-descriptor */ 87362);
/* harmony import */ var _note_heads_descriptor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./note-heads-descriptor */ 70284);
/* harmony import */ var _ornament_descriptor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ornament-descriptor */ 58318);
/* harmony import */ var _other_descriptor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./other-descriptor */ 99083);
/* harmony import */ var _rests_descriptor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rests-descriptor */ 77239);









class FoundryDescriptor {
  constructor() {
    this.clefs = [];
    this.accidentals = [];
    this.chordSymbols = [];
    this.noteheads = [];
    this.articulations = [];
    this.ornaments = [];
    this.rests = [];
    this.barlines = [];
    this.others = [];
  }
  toJSON() {
    const descriptor = {};
    const clefs = [];
    descriptor.clefs = clefs;
    for (let i = 0; i < this.clefs.length; i++) {
      const clef = this.clefs[i];
      clefs.push(clef.toJSON());
    }
    const accidentals = [];
    descriptor.accidentals = accidentals;
    for (let i = 0; i < this.accidentals.length; i++) {
      const accidental = this.accidentals[i];
      accidentals.push(accidental.toJSON());
    }
    const chordSymbols = [];
    descriptor.chordSymbols = chordSymbols;
    for (let i = 0; i < this.chordSymbols.length; i++) {
      const chordSymbol = this.chordSymbols[i];
      chordSymbols.push(chordSymbol.toJSON());
    }
    const noteheads = [];
    descriptor.noteheads = noteheads;
    for (let i = 0; i < this.noteheads.length; i++) {
      const notehead = this.noteheads[i];
      noteheads.push(notehead.toJSON());
    }
    const articulations = [];
    descriptor.articulations = articulations;
    for (let i = 0; i < this.articulations.length; i++) {
      const articulation = this.articulations[i];
      articulations.push(articulation.toJSON());
    }
    const ornaments = [];
    descriptor.ornaments = ornaments;
    for (let i = 0; i < this.ornaments.length; i++) {
      const ornament = this.ornaments[i];
      ornaments.push(ornament.toJSON());
    }
    const rests = [];
    descriptor.rests = rests;
    for (let i = 0; i < this.rests.length; i++) {
      const rest = this.rests[i];
      rests.push(rest.toJSON());
    }
    const barlines = [];
    descriptor.barlines = barlines;
    for (let i = 0; i < this.barlines.length; i++) {
      const barline = this.barlines[i];
      barlines.push(barline.toJSON());
    }
    const others = [];
    descriptor.others = others;
    for (let i = 0; i < this.others.length; i++) {
      const other = this.others[i];
      others.push(other.toJSON());
    }
    return descriptor;
  }
  static fromJSON(json) {
    const descriptor = new FoundryDescriptor();
    if (json.clefs) {
      for (let i = 0; i < json.clefs.length; i++) {
        const clef = json.clefs[i];
        descriptor.clefs.push(_clef_descriptor__WEBPACK_IMPORTED_MODULE_4__["default"].fromJSON(clef));
      }
    }
    if (json.accidentals) {
      for (let i = 0; i < json.accidentals.length; i++) {
        const accidental = json.accidentals[i];
        descriptor.accidentals.push(_accidental_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].fromJSON(accidental));
      }
    }
    if (json.chordSymbols) {
      for (let i = 0; i < json.chordSymbols.length; i++) {
        const chordSymbol = json.chordSymbols[i];
        descriptor.chordSymbols.push(_chord_symbol_descriptor__WEBPACK_IMPORTED_MODULE_3__["default"].fromJSON(chordSymbol));
      }
    }
    if (json.noteheads) {
      for (let i = 0; i < json.noteheads.length; i++) {
        const notehead = json.noteheads[i];
        descriptor.noteheads.push(_note_heads_descriptor__WEBPACK_IMPORTED_MODULE_5__["default"].fromJSON(notehead));
      }
    }
    if (json.articulations) {
      for (let i = 0; i < json.articulations.length; i++) {
        const articulation = json.articulations[i];
        descriptor.articulations.push(_articulation_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(articulation));
      }
    }
    if (json.ornaments) {
      for (let i = 0; i < json.ornaments.length; i++) {
        const ornament = json.ornaments[i];
        descriptor.ornaments.push(_ornament_descriptor__WEBPACK_IMPORTED_MODULE_6__["default"].fromJSON(ornament));
      }
    }
    if (json.rests) {
      for (let i = 0; i < json.rests.length; i++) {
        const rest = json.rests[i];
        descriptor.rests.push(_rests_descriptor__WEBPACK_IMPORTED_MODULE_8__["default"].fromJSON(rest));
      }
    }
    if (json.barlines) {
      for (let i = 0; i < json.barlines.length; i++) {
        const barline = json.barlines[i];
        descriptor.barlines.push(_barline_descriptor__WEBPACK_IMPORTED_MODULE_2__["default"].fromJSON(barline));
      }
    }
    if (json.others) {
      for (let i = 0; i < json.others.length; i++) {
        const other = json.others[i];
        descriptor.others.push(_other_descriptor__WEBPACK_IMPORTED_MODULE_7__["default"].fromJSON(other));
      }
    }
    return descriptor;
  }
  static parseString(xml, attr) {
    if (!xml) {
      return null;
    }
    const val = xml.attribute(attr);
    if (val.length > 0) {
      return val.toString();
    } else {
      return null;
    }
  }
  static parseNumber(xml, attr) {
    const val = FoundryDescriptor.parseString(xml, attr);
    if (val) {
      return parseFloat(val);
    } else {
      return NaN;
    }
  }
  static parseInterger(xml, attr) {
    const val = FoundryDescriptor.parseString(xml, attr);
    if (val) {
      return parseInt(val);
    } else {
      return NaN;
    }
  }
  static parseBoolean(xml, attr) {
    return 'true' === FoundryDescriptor.parseString(xml, attr);
  }
}

/***/ }),

/***/ 23306:
/*!**************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/glyph-descriptor.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);

class GlyphDescriptor {
  constructor() {
    this.symbol = null;
    this.x = NaN;
    this.y = NaN;
    this.scale = NaN;
    this.width = NaN;
    this.height = NaN;
    this.spacingX = NaN;
  }
  toJSON() {
    const json = {};
    if (this.symbol) {
      json.symbol = this.symbol;
    }
    if (this.x) {
      json.x = this.x;
    }
    if (this.y) {
      json.y = this.y;
    }
    if (this.scale) {
      json.scale = this.scale;
    }
    if (this.width) {
      json.width = this.width;
    }
    if (this.height) {
      json.height = this.height;
    }
    if (this.spacingX) {
      json.spacingX = this.spacingX;
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new GlyphDescriptor();
    if (json.symbol != null) {
      descriptor.symbol = json.symbol;
    }
    if (json.x != null) {
      descriptor.x = parseFloat(json.x);
    }
    if (json.y != null) {
      descriptor.y = parseFloat(json.y);
    }
    if (json.scale != null) {
      descriptor.scale = parseFloat(json.scale);
    }
    if (json.width != null) {
      descriptor.width = parseFloat(json.width);
    }
    if (json.height != null) {
      descriptor.height = parseFloat(json.height);
    }
    if (json.spacingX != null) {
      descriptor.spacingX = parseFloat(json.spacingX);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new GlyphDescriptor();
    descriptor.symbol = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'symbol');
    descriptor.x = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'x');
    descriptor.y = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'y');
    descriptor.scale = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'scale');
    descriptor.width = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'width');
    descriptor.height = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'height');
    descriptor.spacingX = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseNumber(xml, 'spacingX');
    return descriptor;
  }
}

/***/ }),

/***/ 82302:
/*!****************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/metrics-descriptor.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MetricsDescriptor)
/* harmony export */ });
/* harmony import */ var _utils_convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/convert */ 20065);
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);


class MetricsDescriptor {
  constructor() {
    this.stem = false;
    this.downX = NaN;
    this.downY = NaN;
    this.upX = NaN;
    this.upY = NaN;
  }
  toJSON() {
    const json = {};
    if (this.stem) {
      json.stem = this.stem;
    }
    if (this.downX) {
      json.downX = this.downX;
    }
    if (this.downY) {
      json.downY = this.downY;
    }
    if (this.upX) {
      json.upX = this.upX;
    }
    if (this.upY) {
      json.upY = this.upY;
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new MetricsDescriptor();
    if (json.stem) {
      descriptor.stem = (0,_utils_convert__WEBPACK_IMPORTED_MODULE_0__.parseBoolean)(json.stem);
    }
    if (json.downX) {
      descriptor.downX = (0,_utils_convert__WEBPACK_IMPORTED_MODULE_0__.parseNumber)(json.downX);
    }
    if (json.downY) {
      descriptor.downY = (0,_utils_convert__WEBPACK_IMPORTED_MODULE_0__.parseNumber)(json.downY);
    }
    if (json.upX) {
      descriptor.upX = (0,_utils_convert__WEBPACK_IMPORTED_MODULE_0__.parseNumber)(json.upX);
    }
    if (json.upY) {
      descriptor.upY = (0,_utils_convert__WEBPACK_IMPORTED_MODULE_0__.parseNumber)(json.upY);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new MetricsDescriptor();
    descriptor.stem = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].parseBoolean(xml, 'stem');
    descriptor.downX = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].parseNumber(xml, 'downX');
    descriptor.downY = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].parseNumber(xml, 'downY');
    descriptor.upX = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].parseNumber(xml, 'upX');
    descriptor.upY = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].parseNumber(xml, 'upY');
    return descriptor;
  }
}

/***/ }),

/***/ 43826:
/*!******************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/note-head-descriptor.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteHeadDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);
/* harmony import */ var _metrics_descriptor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./metrics-descriptor */ 82302);



class NoteHeadDescriptor {
  constructor() {
    this.value = 0;
    this.glyph = null;
    this.metrics = null;
    this.pitch = null;
  }
  toJSON() {
    const json = {};
    if (this.value) {
      json.value = this.value;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    if (this.metrics) {
      json.metrics = this.metrics.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new NoteHeadDescriptor();
    if (json.value) {
      descriptor.value = parseInt(json.value);
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    if (json.metrics) {
      descriptor.metrics = _metrics_descriptor__WEBPACK_IMPORTED_MODULE_2__["default"].fromJSON(json.metrics);
    }
    if (json.pitch) {
      descriptor.pitch = json.pitch;
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new NoteHeadDescriptor();
    descriptor.value = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseInterger(xml, 'value');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    descriptor.metrics = _metrics_descriptor__WEBPACK_IMPORTED_MODULE_2__["default"].fromXML(xml.child('metrics').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 70284:
/*!*******************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/note-heads-descriptor.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteHeadsDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _note_head_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./note-head-descriptor */ 43826);


class NoteHeadsDescriptor {
  constructor() {
    this.type = null;
    this.noteheads = [];
  }
  toJSON() {
    const json = {};
    if (this.type) {
      json.type = this.type;
    }
    const noteheads = [];
    json.noteheads = noteheads;
    for (let i = 0; i < this.noteheads.length; i++) {
      const notehead = this.noteheads[i];
      noteheads.push(notehead.toJSON());
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new NoteHeadsDescriptor();
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.noteheads) {
      for (let i = 0; i < json.noteheads.length; i++) {
        const notehead = json.noteheads[i];
        descriptor.noteheads.push(_note_head_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(notehead));
      }
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new NoteHeadsDescriptor();
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    for (let i = 0; i < xml.child('notehead').list.length; i++) {
      const notehead = xml.child('notehead').list[i];
      descriptor.noteheads.push(_note_head_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(notehead));
    }
    return descriptor;
  }
}

/***/ }),

/***/ 58318:
/*!*****************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/ornament-descriptor.ts ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OrnamentDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class OrnamentDescriptor {
  constructor() {
    this.type = null;
    this.value = 0;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.type) {
      json.type = this.type;
    }
    if (this.value) {
      json.value = this.value;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new OrnamentDescriptor();
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.value) {
      descriptor.value = parseInt(json.value.toString());
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new OrnamentDescriptor();
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    descriptor.value = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseInterger(xml, 'value');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 99083:
/*!**************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/other-descriptor.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OtherDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class OtherDescriptor {
  constructor() {
    this.name = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.name) {
      json.name = this.name;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new OtherDescriptor();
    if (json.name) {
      descriptor.name = json.name;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new OtherDescriptor();
    descriptor.name = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'name');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 36676:
/*!*************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/rest-descriptor.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RestDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-descriptor */ 23306);


class RestDescriptor {
  constructor() {
    this.value = 0;
    this.type = null;
    this.glyph = null;
  }
  toJSON() {
    const json = {};
    if (this.value) {
      json.value = this.value;
    }
    if (this.type) {
      json.type = this.type;
    }
    if (this.glyph) {
      json.glyph = this.glyph.toJSON();
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new RestDescriptor();
    if (json.value) {
      descriptor.value = parseInt(json.value.toString());
    }
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.glyph) {
      descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(json.glyph);
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new RestDescriptor();
    descriptor.value = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseInterger(xml, 'value');
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    descriptor.glyph = _glyph_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(xml.child('glyph').get(0));
    return descriptor;
  }
}

/***/ }),

/***/ 77239:
/*!**************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-descriptor/rests-descriptor.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RestsDescriptor)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-descriptor */ 12212);
/* harmony import */ var _rest_descriptor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./rest-descriptor */ 36676);


class RestsDescriptor {
  constructor() {
    this.type = null;
    this.rests = [];
  }
  toJSON() {
    const json = {};
    if (this.type) {
      json.type = this.type;
    }
    const rests = [];
    json.rests = rests;
    for (let i = 0; i < this.rests.length; i++) {
      const rest = this.rests[i];
      rests.push(rest.toJSON());
    }
    return json;
  }
  static fromJSON(json) {
    const descriptor = new RestsDescriptor();
    if (json.type) {
      descriptor.type = json.type;
    }
    if (json.rests) {
      for (let i = 0; i < json.rests.length; i++) {
        const rest = json.rests[i];
        descriptor.rests.push(_rest_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromJSON(rest));
      }
    }
    return descriptor;
  }
  static fromXML(xml) {
    const descriptor = new RestsDescriptor();
    descriptor.type = _foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].parseString(xml, 'type');
    for (let i = 0; i < xml.child('rest').list.length; i++) {
      const rest = xml.child('rest').list[i];
      descriptor.rests.push(_rest_descriptor__WEBPACK_IMPORTED_MODULE_1__["default"].fromXML(rest));
    }
    return descriptor;
  }
}

/***/ }),

/***/ 59402:
/*!***********************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-factory/ash-js-glyph-foundry-factory.ts ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AshJSGlyphFoundryFactory)
/* harmony export */ });
/* harmony import */ var _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-glyph-foundry-factory */ 68638);

class AshJSGlyphFoundryFactory extends _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get FOUNDRY_DEFINITION() {
    return AshJSGlyphFoundryFactory.foundry_definition;
  }
  constructor(noteEditorService, fallbackFoundryFactory = null) {
    super(AshJSGlyphFoundryFactory.FOUNDRY_DEFINITION, noteEditorService, fallbackFoundryFactory);
  }
}
AshJSGlyphFoundryFactory.foundry_definition = {
  descriptor: {
    clefs: [{
      sign: 'G',
      glyph: {
        symbol: 'gClef'
      }
    }, {
      sign: 'C',
      glyph: {
        symbol: 'cClef'
      }
    }, {
      sign: 'F',
      glyph: {
        symbol: 'fClef'
      }
    }, {
      sign: 'tenorVoice',
      glyph: {
        symbol: 'tenorVoiceClef'
      }
    }, {
      sign: 'percussion',
      glyph: {
        symbol: 'percussionClef'
      }
    }, {
      sign: 'percussion2',
      glyph: {
        symbol: 'percussionClef'
      }
    }, {
      sign: 'tab',
      glyph: {
        symbol: 'tabClef'
      }
    }],
    accidentals: [{
      sign: 'doubleFlat',
      glyph: {
        symbol: 'doubleFlat'
      }
    }, {
      sign: 'flat',
      glyph: {
        symbol: 'flat'
      }
    }, {
      sign: 'natural',
      glyph: {
        symbol: 'natural'
      }
    }, {
      sign: 'sharp',
      glyph: {
        symbol: 'sharp'
      }
    }, {
      sign: 'doubleSharp',
      glyph: {
        symbol: 'doubleSharp'
      }
    }],
    chordSymbols: [{
      char: '@',
      glyph: {
        symbol: 'flat',
        x: 0.25,
        y: 0.75,
        scale: 0.75,
        width: 0.925
      }
    }, {
      char: '#',
      glyph: {
        symbol: 'sharp',
        x: 0,
        y: 1,
        scale: 0.75,
        width: 0.9
      }
    }, {
      char: '$',
      glyph: {
        symbol: 'natural',
        x: 0,
        y: 1,
        scale: 1,
        width: 0.9
      }
    }, {
      char: '*',
      glyph: {
        symbol: 'doubleSharp',
        x: 0,
        y: 1,
        scale: 1
      }
    }, {
      char: '%',
      glyph: {
        symbol: 'doubleFlat',
        x: 0,
        y: 1,
        scale: 1
      }
    }, {
      char: '[',
      glyph: {
        symbol: 'repeatEndingBracket',
        y: 1,
        width: 0
      }
    }],
    noteheads: [{
      type: 'normal',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'solidNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'stemless',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'solidNoteHead'
        },
        metrics: {
          stem: false,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfNoteHead'
        },
        metrics: {
          stem: false,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'slash',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'slashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 1,
          upX: 2,
          upY: -1
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0,
          upX: 2.6,
          upY: 0
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'hit',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'slashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 1,
          upX: 2,
          upY: -1
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0,
          upX: 2.6,
          upY: 0
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'cross',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'crossNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.5,
          upX: 1.17,
          upY: -0.5
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'square',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'squareNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSquareNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSquareNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'diamond',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'diamondNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowDiamondNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowDiamondNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'triangle',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'triangleNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowTriangleNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowTriangleNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'harmonic',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'crossCircle',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'crossNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'crossCircleNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'crossCircleNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'background',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'filledBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }]
    }, {
      type: 'named',
      noteheads: [{
        value: 6,
        pitch: 'c',
        glyph: {
          symbol: 'namedFilledCNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'd',
        glyph: {
          symbol: 'namedFilledDNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'e',
        glyph: {
          symbol: 'namedFilledENoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'f',
        glyph: {
          symbol: 'namedFilledFNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'g',
        glyph: {
          symbol: 'namedFilledGNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'a',
        glyph: {
          symbol: 'namedFilledANoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'b',
        glyph: {
          symbol: 'namedFilledBNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.195,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'c',
        glyph: {
          symbol: 'namedHalfCNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'd',
        glyph: {
          symbol: 'namedHalfDNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'e',
        glyph: {
          symbol: 'namedHalfENoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'f',
        glyph: {
          symbol: 'namedHalfFNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'g',
        glyph: {
          symbol: 'namedHalfGNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'a',
        glyph: {
          symbol: 'namedHalfANoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'b',
        glyph: {
          symbol: 'namedHalfBNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.25,
          upY: -0.2
        }
      }, {
        value: 8,
        pitch: 'c',
        glyph: {
          symbol: 'namedWholeCNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'd',
        glyph: {
          symbol: 'namedWholeDNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'e',
        glyph: {
          symbol: 'namedWholeENoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'f',
        glyph: {
          symbol: 'namedWholeFNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'g',
        glyph: {
          symbol: 'namedWholeGNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'a',
        glyph: {
          symbol: 'namedWholeANoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'b',
        glyph: {
          symbol: 'namedWholeBNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }],
    articulations: [{
      type: 'marcato',
      position: 'both',
      glyph: {
        symbol: 'marcato'
      }
    }, {
      type: 'closed',
      position: 'both',
      glyph: {
        symbol: 'closed'
      }
    }, {
      type: 'open',
      position: 'both',
      glyph: {
        symbol: 'open'
      }
    }, {
      type: 'staccato',
      position: 'both',
      glyph: {
        symbol: 'staccato'
      }
    }, {
      type: 'tenuto',
      position: 'both',
      glyph: {
        symbol: 'tenuto'
      }
    }, {
      type: 'upBow',
      position: 'both',
      glyph: {
        symbol: 'upBow'
      }
    }, {
      type: 'downBow',
      position: 'both',
      glyph: {
        symbol: 'downBow'
      }
    }, {
      type: 'fermata',
      position: 'above',
      glyph: {
        symbol: 'fermataAbove'
      }
    }, {
      type: 'fermata',
      position: 'below',
      glyph: {
        symbol: 'fermataBelow'
      }
    }, {
      type: 'martellato',
      position: 'above',
      glyph: {
        symbol: 'martellatoAbove'
      }
    }, {
      type: 'martellato',
      position: 'below',
      glyph: {
        symbol: 'martellatoBelow'
      }
    }, {
      type: 'martellatoStaccato',
      position: 'above',
      glyph: {
        symbol: 'martellatoStaccatoAbove'
      }
    }, {
      type: 'martellatoStaccato',
      position: 'below',
      glyph: {
        symbol: 'martellatoStaccatoBelow'
      }
    }, {
      type: 'staccatissimo',
      position: 'above',
      glyph: {
        symbol: 'staccatissimoAbove'
      }
    }, {
      type: 'staccatissimo',
      position: 'below',
      glyph: {
        symbol: 'staccatissimoBelow'
      }
    }, {
      type: 'tap',
      position: 'both',
      glyph: {
        symbol: 'tap'
      }
    }, {
      type: 'caesura',
      position: 'both',
      glyph: {
        symbol: 'caesura'
      }
    }, {
      type: 'breath',
      position: 'both',
      glyph: {
        symbol: 'breath'
      }
    }, {
      type: 'mordent',
      position: 'both',
      glyph: {
        symbol: 'mordent'
      }
    }, {
      type: 'invertedMordent',
      position: 'both',
      glyph: {
        symbol: 'invertedMordent'
      }
    }, {
      type: 'turn',
      position: 'both',
      glyph: {
        symbol: 'turn'
      }
    }, {
      type: 'delayedTurn',
      position: 'both',
      glyph: {
        symbol: 'turn'
      }
    }, {
      type: 'invertedTurn',
      position: 'both',
      glyph: {
        symbol: 'invertedTurn'
      }
    }, {
      type: 'delayedInvertedTurn',
      position: 'both',
      glyph: {
        symbol: 'invertedTurn'
      }
    }, {
      type: 'hammerOn',
      position: 'both',
      glyph: {
        symbol: 'hammerOn'
      }
    }, {
      type: 'pullOff',
      position: 'both',
      glyph: {
        symbol: 'pullOff'
      }
    }, {
      type: 'bendJazz',
      position: 'both',
      glyph: {
        symbol: 'bendJazz',
        scale: 0.6
      }
    }],
    ornaments: [{
      type: 'tremolo',
      value: 1,
      glyph: {
        symbol: 'tremolo1'
      }
    }, {
      type: 'tremolo',
      value: 2,
      glyph: {
        symbol: 'tremolo2'
      }
    }, {
      type: 'tremolo',
      value: 3,
      glyph: {
        symbol: 'tremolo3'
      }
    }, {
      type: 'buzz',
      glyph: {
        symbol: 'buzz'
      }
    }],
    rests: [{
      type: 'normal',
      rests: [{
        value: 0,
        glyph: {
          symbol: 'twoHundredFiftySixthRest'
        }
      }, {
        value: 1,
        glyph: {
          symbol: 'oneHundredTwentyEighthRest'
        }
      }, {
        value: 2,
        glyph: {
          symbol: 'sixtyFourthRest'
        }
      }, {
        value: 3,
        glyph: {
          symbol: 'thirtySecondRest'
        }
      }, {
        value: 4,
        glyph: {
          symbol: 'sixteenthRest'
        }
      }, {
        value: 5,
        glyph: {
          symbol: 'eighthRest'
        }
      }, {
        value: 6,
        glyph: {
          symbol: 'quarterRest'
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfRest'
        }
      }, {
        value: 7,
        type: 'line',
        glyph: {
          symbol: 'halfRestWithLine'
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeRest'
        }
      }, {
        value: 8,
        type: 'line',
        glyph: {
          symbol: 'wholeRestWithLine'
        }
      }]
    }],
    barlines: [{
      type: 'single',
      glyph: {
        symbol: 'normalBarline'
      }
    }, {
      type: 'final',
      glyph: {
        symbol: 'finalBarline'
      }
    }, {
      type: 'double',
      glyph: {
        symbol: 'doubleBarline'
      }
    }, {
      type: 'initial',
      glyph: {
        symbol: 'initialBarline'
      }
    }, {
      type: 'dashed',
      glyph: {
        symbol: 'dashedBarline'
      }
    }, {
      type: 'repeat',
      glyph: {
        symbol: 'repeatBarline'
      }
    }, {
      type: 'invisible',
      glyph: {
        symbol: 'invisibleBarline'
      }
    }, {
      type: 'startRepeat',
      glyph: {
        symbol: 'endRepeat',
        x: 0.5
      }
    }, {
      type: 'endRepeat',
      glyph: {
        symbol: 'endRepeat',
        width: 1
      }
    }, {
      type: 'grandStaff',
      glyph: {
        symbol: 'grandStaff'
      }
    }, {
      type: 'topInitialWing',
      glyph: {
        symbol: 'topStartWing',
        y: -0.8
      }
    }, {
      type: 'bottomInitialWing',
      glyph: {
        symbol: 'bottomStartWing',
        y: 0.8
      }
    }, {
      type: 'topStartWing',
      glyph: {
        symbol: 'topStartWing',
        x: 0.63,
        y: -0.8
      }
    }, {
      type: 'bottomStartWing',
      glyph: {
        symbol: 'bottomStartWing',
        x: 0.63,
        y: 0.8
      }
    }, {
      type: 'topEndWing',
      glyph: {
        symbol: 'topEndWing',
        x: 0.63,
        y: -0.8
      }
    }, {
      type: 'bottomEndWing',
      glyph: {
        symbol: 'bottomEndWing',
        x: 0.62,
        y: 0.8
      }
    }, {
      type: 'braceBody',
      glyph: {
        symbol: 'braceBody'
      }
    }],
    others: [{
      name: 'rhythmDot',
      glyph: {
        symbol: 'rhythmDot'
      }
    }, {
      name: 'grandStaff',
      glyph: {
        symbol: 'grandStaff'
      }
    }, {
      name: 'pppDynamics',
      glyph: {
        symbol: 'pppDynamics'
      }
    }, {
      name: 'ppDynamics',
      glyph: {
        symbol: 'ppDynamics'
      }
    }, {
      name: 'pDynamics',
      glyph: {
        symbol: 'pDynamics'
      }
    }, {
      name: 'mpDynamics',
      glyph: {
        symbol: 'mpDynamics'
      }
    }, {
      name: 'mfDynamics',
      glyph: {
        symbol: 'mfDynamics'
      }
    }, {
      name: 'fDynamics',
      glyph: {
        symbol: 'fDynamics'
      }
    }, {
      name: 'ffDynamics',
      glyph: {
        symbol: 'ffDynamics'
      }
    }, {
      name: 'fffDynamics',
      glyph: {
        symbol: 'fffDynamics'
      }
    }, {
      name: 'sfDynamics',
      glyph: {
        symbol: 'sfDynamics'
      }
    }, {
      name: 'fzDynamics',
      glyph: {
        symbol: 'fzDynamics'
      }
    }, {
      name: 'sfzDynamics',
      glyph: {
        symbol: 'sfzDynamics'
      }
    }, {
      name: 'rfzDynamics',
      glyph: {
        symbol: 'rfzDynamics'
      }
    }, {
      name: 'fpDynamics',
      glyph: {
        symbol: 'fpDynamics'
      }
    }, {
      name: 'sfpDynamics',
      glyph: {
        symbol: 'sfpDynamics'
      }
    }, {
      name: 'tempo2',
      glyph: {
        symbol: 'sixtyFourthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo2dot',
      glyph: {
        symbol: 'sixtyFourthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo3',
      glyph: {
        symbol: 'thirtySecondTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo3dot',
      glyph: {
        symbol: 'thirtySecondDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo4',
      glyph: {
        symbol: 'sixteenthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo4dot',
      glyph: {
        symbol: 'sixteenthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo5',
      glyph: {
        symbol: 'eighthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo5dot',
      glyph: {
        symbol: 'eighthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo6',
      glyph: {
        symbol: 'quarterTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo6dot',
      glyph: {
        symbol: 'quarterDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo7',
      glyph: {
        symbol: 'halfTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo7dot',
      glyph: {
        symbol: 'halfDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo8',
      glyph: {
        symbol: 'wholeTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo8dot',
      glyph: {
        symbol: 'wholeDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempoEquals',
      glyph: {
        symbol: 'tempoEquals',
        scale: 1.25
      }
    }, {
      name: 'flagDown0',
      glyph: {
        symbol: 'twoHundredFiftySixthFlagDown'
      }
    }, {
      name: 'flagDown1',
      glyph: {
        symbol: 'oneHundredTwentyEighthFlagDown'
      }
    }, {
      name: 'flagDown2',
      glyph: {
        symbol: 'sixtyFourthFlagDown'
      }
    }, {
      name: 'flagDown3',
      glyph: {
        symbol: 'thirtySecondFlagDown'
      }
    }, {
      name: 'flagDown4',
      glyph: {
        symbol: 'sixteenthFlagDown'
      }
    }, {
      name: 'flagDown5',
      glyph: {
        symbol: 'eighthFlagDown'
      }
    }, {
      name: 'flagUp0',
      glyph: {
        symbol: 'twoHundredFiftySixthFlagUp'
      }
    }, {
      name: 'flagUp1',
      glyph: {
        symbol: 'oneHundredTwentyEighthFlagUp'
      }
    }, {
      name: 'flagUp2',
      glyph: {
        symbol: 'sixtyFourthFlagUp'
      }
    }, {
      name: 'flagUp3',
      glyph: {
        symbol: 'thirtySecondFlagUp'
      }
    }, {
      name: 'flagUp4',
      glyph: {
        symbol: 'sixteenthFlagUp'
      }
    }, {
      name: 'flagUp5',
      glyph: {
        symbol: 'eighthFlagUp'
      }
    }, {
      name: 'timeSignature0',
      glyph: {
        symbol: 'timeSignature0'
      }
    }, {
      name: 'timeSignature1',
      glyph: {
        symbol: 'timeSignature1'
      }
    }, {
      name: 'timeSignature2',
      glyph: {
        symbol: 'timeSignature2'
      }
    }, {
      name: 'timeSignature3',
      glyph: {
        symbol: 'timeSignature3'
      }
    }, {
      name: 'timeSignature4',
      glyph: {
        symbol: 'timeSignature4'
      }
    }, {
      name: 'timeSignature5',
      glyph: {
        symbol: 'timeSignature5'
      }
    }, {
      name: 'timeSignature6',
      glyph: {
        symbol: 'timeSignature6'
      }
    }, {
      name: 'timeSignature7',
      glyph: {
        symbol: 'timeSignature7'
      }
    }, {
      name: 'timeSignature8',
      glyph: {
        symbol: 'timeSignature8'
      }
    }, {
      name: 'timeSignature9',
      glyph: {
        symbol: 'timeSignature9'
      }
    }, {
      name: 'tuplet0',
      glyph: {
        symbol: 'tuplet0'
      }
    }, {
      name: 'tuplet1',
      glyph: {
        symbol: 'tuplet1'
      }
    }, {
      name: 'tuplet2',
      glyph: {
        symbol: 'tuplet2'
      }
    }, {
      name: 'tuplet3',
      glyph: {
        symbol: 'tuplet3'
      }
    }, {
      name: 'tuplet4',
      glyph: {
        symbol: 'tuplet4'
      }
    }, {
      name: 'tuplet5',
      glyph: {
        symbol: 'tuplet5'
      }
    }, {
      name: 'tuplet6',
      glyph: {
        symbol: 'tuplet6'
      }
    }, {
      name: 'tuplet7',
      glyph: {
        symbol: 'tuplet7'
      }
    }, {
      name: 'tuplet8',
      glyph: {
        symbol: 'tuplet8'
      }
    }, {
      name: 'tuplet9',
      glyph: {
        symbol: 'tuplet9'
      }
    }, {
      name: 'tab0',
      glyph: {
        symbol: 'tab0'
      }
    }, {
      name: 'tab1',
      glyph: {
        symbol: 'tab1'
      }
    }, {
      name: 'tab2',
      glyph: {
        symbol: 'tab2'
      }
    }, {
      name: 'tab3',
      glyph: {
        symbol: 'tab3'
      }
    }, {
      name: 'tab4',
      glyph: {
        symbol: 'tab4'
      }
    }, {
      name: 'tab5',
      glyph: {
        symbol: 'tab5'
      }
    }, {
      name: 'tab6',
      glyph: {
        symbol: 'tab6'
      }
    }, {
      name: 'tab7',
      glyph: {
        symbol: 'tab7'
      }
    }, {
      name: 'tab8',
      glyph: {
        symbol: 'tab8'
      }
    }, {
      name: 'tab9',
      glyph: {
        symbol: 'tab9'
      }
    }, {
      name: 'quarterBendAlteration',
      glyph: {
        symbol: 'quarterBendAlteration'
      }
    }, {
      name: 'halfBendAlteration',
      glyph: {
        symbol: 'halfBendAlteration'
      }
    }, {
      name: 'fullBendAlteration',
      glyph: {
        symbol: 'fullBendAlteration'
      }
    }, {
      name: 'pedalLineNotationStart',
      glyph: {
        symbol: 'pedalDown'
      }
    }, {
      name: 'octaveUpLineNotationStart',
      glyph: {
        symbol: 'octaveUp'
      }
    }, {
      name: 'octaveDownLineNotationStart',
      glyph: {
        symbol: 'octaveDown'
      }
    }, {
      name: 'twoOctavesUpLineNotationStart',
      glyph: {
        symbol: 'twoOctavesUp'
      }
    }, {
      name: 'trillLineNotationStart',
      glyph: {
        symbol: 'trill'
      }
    }, {
      name: 'wavyLineNotationSegment',
      glyph: {
        symbol: 'shake',
        spacingX: -0.2
      }
    }, {
      name: 'pedalLineNotationEnd',
      glyph: {
        symbol: 'pedalUp'
      }
    }, {
      name: 'segnoSymbol',
      glyph: {
        symbol: 'segno'
      }
    }, {
      name: 'codaSymbol',
      glyph: {
        symbol: 'coda'
      }
    }, {
      name: 'cutTime',
      glyph: {
        symbol: 'cutTime'
      }
    }, {
      name: 'commonTime',
      glyph: {
        symbol: 'commonTime'
      }
    }, {
      name: 'arpeggioSymbol',
      glyph: {
        symbol: 'arpeggio'
      }
    }, {
      name: 'arpeggioUpSymbol',
      glyph: {
        symbol: 'arpeggioUp'
      }
    }, {
      name: 'arpeggioDownSymbol',
      glyph: {
        symbol: 'arpeggioDown'
      }
    }, {
      name: 'leftParenthesisSymbol',
      glyph: {
        symbol: 'leftParenthesis'
      }
    }, {
      name: 'rightParenthesisSymbol',
      glyph: {
        symbol: 'rightParenthesis'
      }
    }, {
      name: 'measureRepeatSymbol',
      glyph: {
        symbol: 'measureRepeat'
      }
    }, {
      name: 'scoopSymbol',
      glyph: {
        symbol: 'scoop',
        scale: 0.7
      }
    }, {
      name: 'plopSymbol',
      glyph: {
        symbol: 'plop',
        scale: 0.7
      }
    }, {
      name: 'quickFallSymbol',
      glyph: {
        symbol: 'quickFall',
        scale: 0.7
      }
    }, {
      name: 'doitSymbol',
      glyph: {
        symbol: 'doit',
        scale: 0.7
      }
    }, {
      name: 'fall1LineNotationSegment',
      glyph: {
        symbol: 'fall1',
        spacingX: -0.58
      }
    }, {
      name: 'rip1LineNotationSegment',
      glyph: {
        symbol: 'rip1',
        spacingX: -0.58
      }
    }]
  },
  symbols: [{
    name: 'doubleBarline',
    bounds: {
      left: 0,
      right: 11,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M7,-42L7,0L11,0L11,-42L7,-42M0,-42L0,0L4,0L4,-42L0,-42'
    }]
  }, {
    name: 'initialBarline',
    bounds: {
      left: 0,
      right: 15.5,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M0,-42L0,0L9,0L9,-42L0,-42M11.5,-42L11.5,0L15.5,0L15.5,-42L11.5,-42'
    }]
  }, {
    name: 'normalBarline',
    bounds: {
      left: 0,
      right: 4,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M4,0L0,0L0,-42L4,-42L4,0'
    }]
  }, {
    name: 'finalBarline',
    bounds: {
      left: 0,
      right: 15.5,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M0,-42L0,0L4,0L4,-42L0,-42M6.5,-42L6.5,0L15.5,0L15.5,-42L6.5,-42'
    }]
  }, {
    name: 'dashedBarline',
    bounds: {
      left: 0,
      right: 1.5,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.5,-40.6L1.5,-36.4L0,-36.4L0,-40.6L1.5,-40.6M1.5,-29.25L0,-29.25L0,-33.4L1.5,-33.4L1.5,-29.25M1.5,-26.05L1.5,-21.9L0,-21.9L0,-26.05L1.5,-26.05M1.5,-18.7L1.5,-14.55L0,-14.55L0,-18.7L1.5,-18.7M1.5,-4.2L1.5,0L0,0L0,-4.2L1.5,-4.2M1.5,-7.2L0,-7.2L0,-11.35L1.5,-11.35L1.5,-7.2'
    }]
  }, {
    name: 'startRepeat',
    bounds: {
      left: 0,
      right: 18.55,
      top: -3.138,
      bottom: 3.112
    },
    svgPaths: [{
      d: 'M14.358,-2.531L13.75,1.656L14.904,2.748L16.484,3.112Q17.396,3.112 17.882,2.202Q18.368,1.352 18.489,-0.529L18.55,-1.803Q18.368,-2.349 17.396,-2.774L15.816,-3.138Q14.418,-3.138 14.358,-2.531'
    }]
  }, {
    name: 'endRepeat',
    bounds: {
      left: 0,
      right: 4.85,
      top: -2.688,
      bottom: 3.562
    },
    svgPaths: [{
      d: 'M0.614,-2.081L0,2.106L1.166,3.198L2.763,3.562Q3.684,3.562 4.175,2.652Q4.666,1.802 4.789,-0.079L4.85,-1.353Q4.666,-1.899 3.684,-2.324L2.087,-2.688Q0.675,-2.688 0.614,-2.081'
    }]
  }, {
    name: 'gClef',
    bounds: {
      left: 0,
      right: 34.55,
      top: -45.15,
      bottom: 28.4
    },
    svgPaths: [{
      d: 'M25.2,-24.8L20.6,-18.9L17.5,-14.95L17.05,-14.65L16.95,-14.15L16.9,-9.85L16.9,-8.75Q19.05,-10.9 22.1,-12.55Q25.6,-14.45 28.15,-14.45Q31.35,-14.45 33.05,-12.05Q34.55,-10 34.55,-6.6Q34.5,-1.3 28.55,6Q23.8,11.8 18.1,16Q18.2,16.75 18.8,17.55L19.8,19.15Q20.35,20.5 20.35,22.55L20.3,24.05Q17.45,28.4 16.25,28.4Q15.1,28.4 14.4,26.5Q13.85,25.05 13.85,23.7Q13.85,20.7 16.25,17.75L16.1,16.85Q12.2,18.05 8.75,18.05Q4.5,18.05 2.1,14.2Q0,11 0,6.4Q0.05,2.55 4.1,-3.8Q5.8,-6.6 10.8,-13.15L13.9,-17.6L14.1,-19.4L13.8,-26.35L13.55,-33.35Q13.55,-36.9 14.3,-39.55Q13.75,-41.05 13.75,-43Q13.7,-45.15 15.15,-45.15Q15.85,-45.15 16.45,-44.75Q17,-44.3 17.05,-43.6L17,-42.65L17.05,-41.7Q18.1,-40.45 20.95,-38.75Q24.4,-36.7 25.35,-35.85Q27.45,-34 27.45,-31.8Q27.45,-28.35 25.2,-24.8M23.25,-31.05L20.15,-33.45L16.6,-35.4L16.5,-33.05L16.6,-28.25L16.75,-23.45L16.75,-22.55L16.7,-21.65L16.75,-20.7L20.35,-25.75Q22.75,-29.2 23.25,-31.05M17.35,-1.4Q17.35,3.75 17.85,9.7Q19.05,9.4 23.8,4.35L29.5,-2.15Q31.35,-4.8 31.35,-6Q31.35,-8.2 28.85,-8.2Q26.6,-8.2 22.5,-6.4Q17.95,-4.4 17.5,-2.65Q17.35,-2.2 17.35,-1.4M14.1,-11.75Q11.3,-9.15 7.1,-2.6Q2.5,4.55 2.5,7.4Q2.5,9.95 4.55,11.3Q6.25,12.45 9,12.45Q12.15,12.45 14.9,11.1L15.05,10.05L14.75,5.7L14.55,1.35L14.6,-0.45L13.45,2.1Q12.5,3.9 11.65,3.9Q10.4,3.9 10.45,1.7Q10.45,0.1 11.75,-2.75Q12.75,-5 14.05,-6.9L14.1,-11.75'
    }]
  }, {
    name: 'fClef',
    bounds: {
      left: 0,
      right: 36.2,
      top: -13.65,
      bottom: 23.3
    },
    svgPaths: [{
      d: 'M5.7,-11.25Q10.35,-13.65 16.05,-13.65Q21.3,-13.65 24.3,-11.6Q26.4,-7.65 26.4,-3.25Q26.4,3.6 21.6,11.15Q17.9,17.2 11.75,23.1L10.45,23.3Q9.65,23.3 9.45,22.9L9.35,21.75L9.3,21.15L9.2,20.5Q9.2,19.35 10.3,18.5L12.25,17.1L15.2,13.9Q18.65,9.9 20.5,6.55Q22.8,2.45 23.45,-2L23.45,-2.8Q23.45,-5.1 21.85,-6.55Q20.2,-8.05 17.9,-8L16.25,-7.65L15.85,-4.85L15.2,-2.15Q14.4,-0.2 10.65,2.2Q6.95,4.55 4.8,4.55Q0,4.55 0,-3.1Q0,-8.3 5.7,-11.25M30.7,-5.35Q30.65,-6.9 31.4,-8.45L32.7,-8.75Q33.7,-8.75 35.95,-7.55L36.2,-6.8L35.85,-3.95Q35.4,-2.3 33.85,-2.3Q32.25,-2.3 31.1,-3.25Q30.65,-4.2 30.7,-5.35M36.15,3.6L35.45,6.4Q35.05,7.85 32.55,8.55L31.95,8.5L31.45,8.2Q30.85,7.6 30.85,6.45L31.05,5.15L31.15,3.8Q31.75,3 32.95,2.6L35.05,2L35.7,2.3Q36.15,2.85 36.15,3.6'
    }]
  }, {
    name: 'cClef',
    bounds: {
      left: 0,
      right: 25.65,
      top: -21.5,
      bottom: 22.5
    },
    svgPaths: [{
      d: 'M10.65,-14.05L11.1,8L11.35,17.35Q11.15,17.85 10.6,17.85L9.4,17.35L9.3,17.15Q8.9,16.25 8.55,6.7L8.3,-4.6Q8.3,-14.75 9.2,-17.65L9.65,-17.7L10.55,-17.5L10.65,-14.05M5.15,-18.3Q5.9,-16.05 5.9,1Q5.9,16.1 5.15,17.65L4.1,17.75Q0.8,17.75 0,16.6L0.25,8.25L0.35,-0.15L0.6,-9.6L0.7,-14.15Q0.9,-17.3 1.2,-18.55L3.45,-18.95Q4.5,-18.95 5.15,-18.3M17.35,-8.95Q20.1,-11.35 21.55,-14.55Q22.65,-17 23.55,-21.35L23.9,-21.5L24.7,-20.6L25.05,-19.35Q25.05,-15.9 23.5,-11.8Q22.05,-7.95 19.85,-5.05Q18.75,-3.65 17,-2.3Q14.85,-0.7 13.55,-0.7Q12.4,-0.7 11.75,-1.7L11.6,-3.1L11.45,-4.45Q11.45,-6.2 12.75,-6.4L13.85,-6.55Q14.8,-6.75 15.75,-7.5L17.35,-8.95M22.15,13.15Q20.45,9.95 15.5,6.95L12.75,5.4Q12.45,5.1 12.45,4Q12.45,2.2 13.35,1.3L13.9,1.25L15.3,1.55Q19.65,2.95 22.7,8Q25.65,12.7 25.65,17.55Q25.6,19.55 24.25,22.25L24.15,22.45L23.55,22.4L23.25,17.75Q23.1,14.9 22.15,13.15'
    }]
  }, {
    name: 'wholeRest',
    bounds: {
      left: -2.45,
      right: 17.55,
      top: -1.778,
      bottom: 15.722
    },
    svgPaths: [{
      d: 'M17.05,0.05L0.1,0.05L-1.4,6.75L0.85,6.6L15.75,6.75L17.05,0.05'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M17.55,-1.778L17.55,15.722L-2.45,15.722L-2.45,-1.778L17.55,-1.778'
    }]
  }, {
    name: 'halfRest',
    bounds: {
      left: -1.6,
      right: 18.4,
      top: -12.228,
      bottom: 5.272
    },
    svgPaths: [{
      d: 'M0.05,-6.85L-1.45,-0.15L15.7,-0.15L17,-6.85L0.05,-6.85'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M18.4,-12.228L18.4,5.272L-1.6,5.272L-1.6,-12.228L18.4,-12.228'
    }]
  }, {
    name: 'quarterRest',
    bounds: {
      left: 0,
      right: 13.15,
      top: -13.5,
      bottom: 12.8
    },
    svgPaths: [{
      d: 'M10.8,-13.4Q10.05,-13.15 9.85,-12.65Q9.65,-12.25 9.8,-11.7L10.1,-11.05L10.15,-10.25L10.4,-8.35L10.35,-6.5Q10.15,-5.55 9.2,-4.85Q8.45,-4.25 7.2,-3.9Q6.85,-3.85 6.5,-4.1L6.35,-4.25L5.25,-5.15L3.85,-5.25Q3.2,-4.4 3.15,-3.4Q3.1,-2.7 3.4,-1.75Q4.25,-0.7 4.75,0.75L5.5,3.8L5.75,4.3L5.85,5.2Q5.75,5.65 6.5,6.9L4.8,5.5L3.75,4.35L3.1,2.9L2.2,2.8L1.8,2.85L1.3,3Q0.85,5.85 0.35,10.85Q-0.1,11.55 0,12Q0.15,12.5 1,12.8L2.15,11.8L2.6,10.75L2.75,9.95L3.1,8.95Q4.2,9.8 5.25,10.3L7.85,11.2L8.8,9.75L9,7.95L7.35,0.35L7.65,0.35L8.9,0.2Q10.1,-0.3 11.45,-2.05L13.05,-4.95Q13.35,-7.7 12.7,-12.75L12.25,-13.05Q11.4,-13.7 10.8,-13.4'
    }]
  }, {
    name: 'eighthRest',
    bounds: {
      left: 0,
      right: 12.4,
      top: -8.85,
      bottom: 10
    },
    svgPaths: [{
      d: 'M4.05,-8.35Q4.05,-8.85 3.65,-8.85L3.4,-8.8Q2.75,-8.6 2.15,-7.85L1.05,-5.95Q0,-3.8 0,-2.35Q0,-0.5 0.95,0.3Q1.6,0.85 3.05,0.85L5.05,0.6L6.8,0.25L3.8,6.75L3.25,8.5L3.4,9.7Q3.6,10 4.15,10Q4.7,10 5.9,8.55Q7,7.2 7,6.65L6.6,5.9Q6.2,5.4 6.2,4.9Q6.9,2.75 8.25,0.6L10.4,-2.85Q11.7,-4.8 12.2,-5.9L12.25,-6.05L12.4,-6.85L12.3,-7.3L12.05,-7.6L11.6,-7.65L11.1,-7.6L10.95,-7.6Q9.5,-6.1 7.45,-5.05Q5.7,-4.2 4.6,-4.2Q3.85,-4.2 3.6,-4.45Q3.35,-4.75 3.35,-5.3Q3.35,-5.95 3.7,-6.95L4.05,-8.35'
    }]
  }, {
    name: 'sixteenthRest',
    bounds: {
      left: -0.3,
      right: 13,
      top: -10.5,
      bottom: 13.35
    },
    svgPaths: [{
      d: 'M4.15,-10.45Q3.55,-10.25 2.95,-9.5L1.85,-7.65Q0.8,-5.4 0.8,-3.95L0.95,-2.65L1.4,-1.7Q0.65,-0.5 0.2,0.9Q-0.3,2.25 -0.3,3.25Q-0.3,5.05 0.5,5.85Q1.15,6.5 2.45,6.5L3.5,6.45L4.8,6.15Q3.65,9.15 3.15,11.9L3.1,12.25L3.1,12.55L3.2,13.2L3.8,13.35Q4.4,13.35 5.55,11.9Q6.65,10.5 6.65,9.95L6.25,9.25Q5.85,8.8 5.85,8.25Q6.7,5.1 7.8,2.45L10.25,-2.9L12.8,-7.6L12.9,-7.85L13,-8.45Q13,-8.95 12.65,-9.25L12.15,-9.35L11.7,-9.3L11.55,-9.25Q10.05,-7.75 8.1,-6.7Q6.45,-5.85 5.4,-5.85Q4.7,-5.85 4.4,-6.15Q4.15,-6.4 4.15,-6.95L4.45,-8.6L4.85,-10Q4.85,-10.5 4.4,-10.5L4.15,-10.45M3.75,-0.75L5.8,-1L7.6,-1.45L6.7,0.65Q5.25,1.35 4.3,1.35L3.3,1.1Q3,0.8 3,0.25L3.2,-0.8L3.5,-0.75L3.75,-0.75'
    }]
  }, {
    name: 'thirtySecondRest',
    bounds: {
      left: 0,
      right: 14.05,
      top: -15.65,
      bottom: 15.55
    },
    svgPaths: [{
      d: 'M13.95,-13.95L13.65,-14.35L13.1,-14.5L12.65,-14.4L12.5,-14.35Q11.1,-12.8 9.35,-11.85Q7.7,-10.95 6.7,-10.95Q5.9,-10.95 5.55,-11.35Q5.3,-11.65 5.3,-12.3L5.8,-15.05Q5.8,-15.65 5.3,-15.65L5.05,-15.6Q4.45,-15.4 3.95,-14.7L3,-12.95Q2.25,-10.95 2.25,-9.4L2.25,-9.15L2.5,-7.8L3.1,-6.85Q2.45,-5.6 2.1,-4.3Q1.8,-2.8 1.8,-1.9L1.85,-1.3L2.05,-0.55L1.6,0.3L1.3,0.65Q0.7,1.7 0.35,3.15Q0,4.8 0,5.6Q0.15,7.35 1.1,8.15Q1.8,8.8 3.1,8.8L4.95,8.55L3.65,14.05L3.75,15.3Q3.85,15.55 4.45,15.55Q5.05,15.55 6.05,14.15Q7,12.75 7,12.2L6.7,11.65Q6.05,10.95 6.05,10.5Q7.05,6.05 8.15,2.75Q9.55,-1.75 11.25,-6.1Q12.65,-9.85 13.95,-12.65L13.95,-12.8L14.05,-13.4L13.95,-13.95M4.95,-5.9L5.5,-5.9L9.25,-6.55L8.55,-4.5Q7.15,-3.75 6.2,-3.75Q5.4,-3.75 5.1,-4.05Q4.8,-4.4 4.8,-5L4.95,-5.9M7.1,1.05L6.5,3.25L5.35,3.6L4.45,3.75Q3.65,3.75 3.4,3.4Q3.05,3 3.05,2.45L3.15,1.55L3.4,1.1L4.75,1.35L5.85,1.3L7.1,1.05'
    }]
  }, {
    name: 'sixtyFourthRest',
    bounds: {
      left: 0,
      right: 14.75,
      top: -18.85,
      bottom: 22
    },
    svgPaths: [{
      d: 'M13.2,-17.65Q11.75,-16 10.05,-15.1Q8.4,-14.2 7.4,-14.2Q6.65,-14.2 6.25,-14.6Q6,-14.9 6,-15.55L6.5,-18.3Q6.5,-18.85 6,-18.85L5.75,-18.85L4.65,-17.95L3.7,-16.2Q2.95,-14.2 2.95,-12.7L2.95,-12.4L3.2,-11.05Q3.45,-10.4 3.8,-10.05Q3.15,-8.95 2.8,-7.55L2.5,-5.1L2.55,-4.5L2.75,-3.8L2.3,-2.9L2,-2.6Q1.4,-1.5 1.05,-0.1Q0.7,1.35 0.7,2.3Q0.7,3.1 0.95,3.6L1.35,4.45L1.3,4.9Q0.7,5.95 0.35,7.4Q-0.05,9.05 0,9.85Q0.05,10.7 0.4,11.35L1.35,12.4Q2.4,13.05 3.95,13.05L4.35,13L4.65,13L4.2,20.5L4.35,21.75Q4.45,22 5.05,22Q5.6,22 6.6,20.55Q7.4,19.3 7.4,18.65L7.1,18.05Q6.45,17.45 6.45,16.95Q6.45,16 7,12.5L8.25,5.25Q9.15,0.85 9.95,-2.2L11.65,-8L14.65,-15.95L14.65,-16.05L14.75,-16.7L14.65,-17.2L14.35,-17.65L13.8,-17.75L13.35,-17.7L13.2,-17.65M9.95,-9.8L9.25,-7.75Q7.85,-7 6.9,-7Q6.15,-7 5.8,-7.35Q5.5,-7.65 5.5,-8.25L5.65,-9.15L5.9,-9.1L6.2,-9.1L8.2,-9.35L9.95,-9.8M4.1,-2.1L5.45,-1.85L7.8,-2.2L7.2,0L6.05,0.4L5.15,0.5L4,0.15Q3.7,-0.15 3.7,-0.7L4.1,-2.1M3.3,5.45L3.55,5.5L3.85,5.5L5.65,5.3L5.15,7.85L4.1,8.1Q3.5,8.1 3.3,7.7Q3.05,7.4 3.05,6.8L3.15,5.9L3.3,5.45'
    }]
  }, {
    name: 'oneHundredTwentyEighthRest',
    bounds: {
      left: 0,
      right: 15.7,
      top: -24.8,
      bottom: 23.4
    },
    svgPaths: [{
      d: 'M6.65,-24.8Q6.1,-24.55 5.6,-23.9L4.7,-22.15Q3.9,-20.15 3.9,-18.6L4.1,-17L4.75,-16Q4.05,-15.85 3.3,-13.95Q2.65,-12.15 2.65,-11.2L2.9,-10.6L3.7,-9.75L3,-8.55Q2.4,-7.8 2,-6Q1.65,-4.65 1.65,-3.65Q1.65,-2.95 1.9,-2.35L2.35,-1.5L2.25,-1.05Q1.6,0.1 1.3,1.45Q0.95,2.9 0.95,3.9L1.1,4.8L1.5,5.55Q0.7,6.6 0.35,7.8Q0,8.9 0,10.3L0.15,12.35Q0.4,13.4 1.4,13.85L3.45,14.15L5.05,14.1L4.9,22.3L5.2,23.05L5.7,23.4Q6.35,23.4 7.25,22L8.1,20.05L7.55,19.3Q7,18.85 7,18.35L8.35,3.45L10.9,-8.15L15.55,-21.9L15.6,-22L15.7,-22.6L15.6,-23.15L15.25,-23.6L14.75,-23.7L14.35,-23.65L14.15,-23.6Q12.75,-21.95 10.95,-21Q9.35,-20.15 8.35,-20.15Q7.65,-20.15 7.2,-20.55Q6.95,-20.9 6.95,-21.5L7.4,-24.2Q7.4,-24.8 6.95,-24.8L6.65,-24.8M10.2,-13.7Q8.7,-12.9 7.9,-12.9Q7.05,-12.9 6.8,-13.3Q6.45,-13.6 6.45,-14.2L6.55,-15.1L7.15,-15.1L9.15,-15.3L10.9,-15.75L10.2,-13.7M8.75,-8.15L8.1,-5.95L7,-5.6L6.1,-5.5Q5.35,-5.5 4.9,-5.8Q4.65,-6.15 4.65,-6.65L4.85,-7.6L5.05,-8.05L6.4,-7.8L8.75,-8.15M4.5,-0.4L4.75,-0.4L6.55,-0.65L6.05,1.9L5.05,2.15Q4.4,2.15 4.2,1.75L3.95,0.85L4.2,-0.45L4.5,-0.4M3,9.25Q2.65,8.8 2.65,8.25Q2.65,7.65 3,7.05L3,6.85L3,6.65L4.2,6.95L5.6,7.05L5.4,8.45L5.4,9.45L4.15,9.65Q3.4,9.65 3,9.25'
    }]
  }, {
    name: 'halfNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M8.039,-6.85L9.938,-6.65Q11.484,-6.15 12.014,-5.3Q12.544,-4.5 12.5,-2.7L12.456,-1.3Q12.412,2.2 9.938,4.6Q7.509,6.9 4.329,6.9Q2.341,6.95 1.193,5.55Q0.044,4.2 0,1.9Q0,-1.5 2.473,-4.15Q4.947,-6.9 8.039,-6.85M4.505,-2Q3.887,-1.6 3.004,-0.65Q1.988,0.5 1.988,1.1Q1.988,2 3.048,2.55L4.814,2.95Q6.714,2.95 8.525,1.55Q10.512,-0.05 10.468,-2.1L10.424,-2.4L10.336,-2.55L7.862,-3.1Q6.36,-3.05 4.505,-2'
    }]
  }, {
    name: 'solidNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M8.7,-5.5Q9.95,-5.5 10.8,-4.8Q11.7,-4.1 11.9,-2.8L11.95,-2.45L11.95,-1.8L11.85,-0.7L11.45,0.25L10.05,2.05Q9.2,2.85 8.15,3.5Q6.5,4.55 5,5.05L2.75,5.5Q1.5,5.5 0.75,4.55Q0,3.55 0,2.35Q0.05,1.3 0.6,0.05Q1.1,-1.15 1.9,-2.05L3.15,-3.15Q4.3,-4.2 5.1,-4.5L6.75,-5.15L8.7,-5.5'
    }]
  }, {
    name: 'wholeNoteHead',
    bounds: {
      left: 0,
      right: 14.15,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M9.1,-6.85L11.25,-6.65Q13,-6.15 13.6,-5.3Q14.2,-4.5 14.15,-2.7L14.1,-1.3Q14.05,2.2 11.25,4.6Q8.5,6.9 4.9,6.9Q2.65,6.95 1.35,5.55Q0.05,4.2 0,1.9Q0,-1.5 2.8,-4.15Q5.6,-6.9 9.1,-6.85M5.1,-2Q4.4,-1.6 3.4,-0.65Q2.25,0.5 2.25,1.1Q2.25,2 3.45,2.55L5.45,2.95Q7.6,2.95 9.65,1.55Q11.9,-0.05 11.85,-2.1L11.8,-2.4L11.7,-2.55L8.9,-3.1Q7.2,-3.05 5.1,-2'
    }]
  }, {
    name: 'eighthFlagUp',
    bounds: {
      left: -2,
      right: 10.9,
      top: -2.6,
      bottom: 28.75
    },
    svgPaths: [{
      d: 'M-0.2,-2.4L4.95,4Q7.8,7.55 9.15,10.7Q10.9,14.4 10.9,18.65L10.8,20.8L9.85,25.15Q8.85,28.45 7.85,28.75L7.35,28.5L7.15,28.05L7.1,27.45Q7.1,26.4 7.65,24.1L8.3,20.65Q8.3,17.05 7.35,14.35Q6.5,12.1 4.75,9.9L-1.05,2.5Q-2,1.05 -2,-0.4Q-2,-2.6 -0.9,-2.6L-0.2,-2.4'
    }]
  }, {
    name: 'sixteenthFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -29.45,
      bottom: 8
    },
    svgPaths: [{
      d: 'M12.7,-25.15L13.15,-22.25L12.9,-20.4L12.9,-20.45Q12.25,-20.3 12.25,-19L12.3,-18.6Q11.35,-16.75 9.7,-15.05L3.35,-9.2L1.75,-7.45L0.05,-7.45L0.05,-3.9L0,-3.45L0.05,5.1L0,5.55L0.05,6.8L0.1,6.8Q0.25,8 0.95,8L1.6,7.75Q2.85,6.15 7.4,1.7Q11.6,-2.25 13.15,-4.6Q15.7,-8.35 15.7,-12.2Q15.7,-14.25 15.05,-16.8L14.95,-17.05Q15.7,-19.15 15.7,-21.2Q15.7,-23.25 15.05,-25.8Q14.15,-29.2 12.9,-29.45Q12.25,-29.3 12.25,-28Q12.25,-26.75 12.7,-25.15M13.15,-13.25Q13.15,-9.55 9.7,-6.05L3.35,-0.2L2.05,1.2L2.05,-1.75L7.4,-7.3Q11.4,-11.1 13.1,-13.55L13.15,-13.25'
    }]
  }, {
    name: 'sixteenthFlagUp',
    bounds: {
      left: -2,
      right: 10.95,
      top: -9.25,
      bottom: 31.8
    },
    svgPaths: [{
      d: 'M7.4,7.7Q8.05,9.7 8.2,11.8Q6.9,9.4 5,7.05L0,0.8L0,-2.8L4.8,3.25Q6.6,5.55 7.4,7.7M8.35,23.7L7.75,27.15Q7.15,29.35 7.15,30.5L7.2,31.1L7.4,31.55L7.9,31.8Q8.95,31.4 9.9,28.2L10.85,23.8L10.95,21.7Q10.95,19.25 10.35,16.85L10.85,14.15L10.95,12Q10.95,7.75 9.2,4.05Q7.8,0.9 5,-2.65L-0.15,-9.05L-0.8,-9.25Q-1.75,-9.25 -1.9,-7.65L-2,-7.65L-2,6.6L-0.25,6.6L4.8,12.95Q6.55,15.15 7.4,17.4L7.6,18.05Q7.15,19.85 7.15,20.85L7.2,21.4L7.4,21.85L7.9,22.1L8.25,21.9L8.35,23.7'
    }]
  }, {
    name: 'thirtySecondFlagUp',
    bounds: {
      left: -2,
      right: 10.95,
      top: -14.25,
      bottom: 36.75
    },
    svgPaths: [{
      d: 'M0,-7.8L4.8,-1.75Q6.55,0.45 7.4,2.7Q8.1,4.65 8.25,7.15Q7.15,5 5,2.3L0,-3.95L0,-7.8M5,-7.65L-0.15,-14.05L-0.8,-14.25Q-1.9,-14.25 -1.9,-12.05L-1.9,-11.9L-2,-11.9L-2,8.65L-1.75,8.65L-0.95,10.5L0.85,12.95L4.8,17.9Q6.55,20.1 7.4,22.35L7.6,23Q7.15,24.8 7.15,25.75L7.2,26.35L7.45,26.8L7.95,27.05L8.3,26.85L8.35,28.65L7.75,32.1Q7.15,34.3 7.15,35.45L7.2,36.05L7.45,36.5L7.95,36.75Q8.95,36.35 9.9,33.15L10.85,28.75L10.95,26.65Q10.95,24.2 10.35,21.8L10.85,19.1L10.95,16.95Q10.95,14.3 10.3,12L10.85,9.15L10.95,7Q10.95,2.8 9.2,-1Q7.7,-4.3 5,-7.65M4.8,8.2Q6.6,10.5 7.4,12.65L7.55,13.2L7.2,15.05L5,12L0,5.7L0,2.15L4.8,8.2'
    }]
  }, {
    name: 'sixtyFourthFlagUp',
    bounds: {
      left: -2,
      right: 10.85,
      top: -19.4,
      bottom: 41.6
    },
    svgPaths: [{
      d: 'M4.7,-6.9Q6.45,-4.7 7.3,-2.45Q8,-0.4 8.15,2.05Q7.05,-0.1 4.9,-2.8L0,-8.95L0,-12.8L4.7,-6.9M4.9,-12.8L-0.25,-19.2L-0.9,-19.4Q-1.8,-19.4 -1.95,-18.05L-2,-18.05L-2,13.5L-1.9,13.5L-1.05,15.35L0.75,17.8L4.7,22.75Q6.45,24.95 7.3,27.2L7.5,27.85Q7.05,29.65 7.05,30.6L7.1,31.2L7.3,31.65L7.8,31.9L8.15,31.7L8.25,33.5L7.65,36.95Q7.05,39.15 7.05,40.3L7.1,40.9L7.3,41.35L7.8,41.6Q8.85,41.2 9.8,38L10.75,33.6L10.85,31.5Q10.85,29.05 10.25,26.65L10.75,23.95L10.85,21.8Q10.85,19.15 10.2,16.85L10.75,14L10.85,11.85Q10.85,9.25 10.2,6.85L10.75,4L10.85,1.85Q10.85,-2.35 9.1,-6.15Q7.6,-9.45 4.9,-12.8M0,1L0,-2.8L4.7,3.1Q6.45,5.3 7.3,7.55L7.45,8.05L7.1,10.2L4.9,7.15L0,1M0,7.15L4.7,13.05Q6.5,15.35 7.3,17.5L7.45,18.05L7.1,19.9L4.9,16.85L0,10.7L0,7.15'
    }]
  }, {
    name: 'oneHundredTwentyEighthFlagUp',
    bounds: {
      left: -2,
      right: 10.85,
      top: -25.9,
      bottom: 41.05
    },
    svgPaths: [{
      d: 'M0,-19.35L4.7,-13.4Q6.5,-11.15 7.3,-8.95Q7.85,-7.5 8.05,-5.75Q6.95,-7.75 4.9,-10.35L0,-16.5L0,-19.35M4.9,-19.35L-0.2,-25.75L-0.9,-25.9Q-1.9,-25.9 -2,-24.05L-2,13.1L-1.85,13.1L-1.05,14.8L0.75,17.3L4.7,22.2Q6.5,24.5 7.3,26.65L7.65,27.75Q7.05,29.95 7.05,31.1L7.1,31.65L7.35,32.1L7.85,32.4L8.2,32.1L8.25,33L7.65,36.4Q7.05,38.65 7.05,39.8L7.1,40.35L7.35,40.8L7.85,41.05Q8.85,40.75 9.8,37.45L10.75,33.1L10.85,30.95Q10.85,28.65 10.35,26.65L10.75,24.4L10.85,22.3Q10.85,19.95 10.35,17.8L10.75,15.45L10.85,13.3Q10.85,10.9 10.35,8.85L10.75,6.45L10.85,4.3Q10.85,1.9 10.35,-0.15L10.75,-2.55L10.85,-4.7Q10.85,-8.85 9.1,-12.65Q7.65,-15.9 4.9,-19.35M0,-10.35L4.7,-4.4Q6.5,-2.15 7.3,0.05L7.6,1L7.35,2.05L4.9,-1.35L0,-7.5L0,-10.35M7.6,10L7.35,11.05L4.9,7.6L0,1.5L0,-1.35L4.7,4.6Q6.5,6.85 7.3,9.05L7.6,10M0,7.6L4.7,13.55Q6.5,15.8 7.3,18L7.6,18.95L7.4,19.8L4.9,16.3L0,10.15L0,7.6'
    }]
  }, {
    name: 'eighthFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -25.05,
      bottom: 3.35
    },
    svgPaths: [{
      d: 'M12.25,-23.65Q12.25,-24.95 12.85,-25.05Q14.2,-24.75 15,-21.4Q15.7,-18.7 15.7,-16.8Q15.7,-13 13.1,-9.2Q11.55,-6.95 7.35,-2.9Q3,1.35 1.65,3.15L0.95,3.35Q0,3.35 0,0.95Q0,-1.65 3.35,-4.85L9.7,-10.7Q13.1,-14.15 13.1,-17.9L12.65,-20.75Q12.25,-22.5 12.25,-23.65'
    }]
  }, {
    name: 'oneHundredTwentyEighthFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -32.9,
      bottom: 27.55
    },
    svgPaths: [{
      d: 'M12.25,-31.45Q12.25,-30.2 12.7,-28.6L13.15,-25.7L13.1,-24.8L12.9,-24.9Q12.25,-24.75 12.25,-23.45L12.35,-22.25Q11.5,-20.3 9.7,-18.5L3.35,-12.65Q0.3,-9.7 0.05,-7.4L0.05,-7.35L0,-6.9L0.05,0.65L0,1.1L0.05,8.65L0,9.1L0.05,16.65L0,17.1L0.05,24.65L0,25.1L0.05,26.35L0.1,26.35Q0.25,27.55 0.95,27.55L1.6,27.3Q2.85,25.7 7.4,21.25Q11.6,17.3 13.15,14.95Q15.7,11.2 15.7,7.35Q15.7,5.55 15.1,3.05Q15.7,1.25 15.7,-0.65Q15.7,-2.45 15.1,-4.95Q15.7,-6.75 15.7,-8.65Q15.7,-10.45 15.1,-12.95Q15.7,-14.75 15.7,-16.65Q15.7,-18.45 15.1,-20.95Q15.7,-22.75 15.7,-24.65Q15.7,-26.7 15.05,-29.25Q14.15,-32.65 12.9,-32.9Q12.25,-32.75 12.25,-31.45M12.25,-15.45L12.35,-14.25Q11.5,-12.3 9.7,-10.5L3.35,-4.65L2.05,-3.25L2.05,-5.2L7.4,-10.75Q10.75,-13.9 12.3,-15.9L12.25,-15.45M13.1,-0.8L13,-0.85L13.1,-0.95L13.1,-0.8M12.35,-6.25Q11.5,-4.3 9.7,-2.5L3.35,3.35L2.05,4.75L2.05,2.8Q3.45,1.15 7.4,-2.75Q10.75,-5.9 12.3,-7.9L12.25,-7.45L12.35,-6.25M12.25,0.55L12.35,1.75Q11.5,3.7 9.7,5.5L3.35,11.35L2.05,12.75L2.05,10.8Q3.45,9.15 7.4,5.25L12.3,0.1L12.25,0.55M3.35,19.35L2.05,20.75L2.05,18.8Q3.45,17.15 7.4,13.25Q11.65,9.15 13.1,7.05Q12.8,10.4 9.7,13.5L3.35,19.35'
    }]
  }, {
    name: 'rhythmDot',
    bounds: {
      left: 0,
      right: 3.95,
      top: -2.05,
      bottom: 3.1
    },
    svgPaths: [{
      d: 'M0.5,-1.55L0,1.9L0.95,2.8L2.25,3.1Q3,3.1 3.4,2.35Q3.8,1.65 3.9,0.1L3.95,-0.95Q3.8,-1.4 3,-1.75L1.7,-2.05Q0.55,-2.05 0.5,-1.55'
    }]
  }, {
    name: 'staff',
    bounds: {
      left: 0,
      right: 40.9,
      top: -40,
      bottom: 0.6
    },
    svgPaths: [{
      d: 'M0,-40L40.9,-40L40.9,-39.25L0,-39.25L0,-40M0,-10L40.9,-10L40.9,-9.25L0,-9.25L0,-10M0,-20L40.9,-20L40.9,-19.25L0,-19.25L0,-20M0,-30L40.9,-30L40.9,-29.25L0,-29.25L0,-30M40.9,-0.15L40.9,0.6L0,0.6L0,-0.15L40.9,-0.15'
    }]
  }, {
    name: 'doubleFlat',
    bounds: {
      left: 0,
      right: 16.65,
      top: -21.45,
      bottom: 9.1
    },
    svgPaths: [{
      d: 'M0,-17.4L0.3,6.35Q0.65,8.8 1.2,9.1L1.95,8.5L6.95,3.3Q6.85,4.35 7.1,5.7Q7.4,7.45 8.2,7.45L9.05,7.25L13.2,3.1L15.2,0.35Q16,-0.85 16.2,-1.75L16.65,-4.95L16.35,-6.35L15.4,-7.4Q14.5,-7.95 12.6,-8.35L9.1,-9.05Q9.1,-13.15 9.5,-17.85L10,-20.75Q10,-21.45 8.8,-21.45Q8.2,-21.45 7.8,-20.75Q7.45,-20.1 7.45,-19.5L6.95,-7.2Q6.2,-7.85 4.95,-8.3L1.95,-9.05L1.9,-17.5L2.1,-19.5Q2.1,-20.3 1.2,-20.3Q0.6,-20.1 0.35,-19.6Q0.1,-19.05 0,-17.4M6.25,-1.35L4.15,1.8L1.95,4.55L2.2,-4.4Q4.2,-3.95 5.25,-3.2Q6.25,-2.45 6.25,-1.35M12.35,-3.75Q13.75,-3.25 13.75,-2.85L11.9,-0.1L9.8,2.45L9.35,2.9L9.25,2.9L9.25,-3.5Q9.5,-4.15 10.55,-4.15L12.35,-3.75'
    }]
  }, {
    name: 'doubleSharp',
    bounds: {
      left: 0,
      right: 11.15,
      top: -7.95,
      bottom: 8
    },
    svgPaths: [{
      d: 'M2.45,-7.15L1.95,-7.35Q1.6,-7.35 1.25,-7.05L0.65,-4.4L0.8,-3.95L4.05,0.5L1.75,3.45Q0.35,5.2 0,6.75L0.85,7.5L5.5,2.25L9.35,7.6L10,8Q10.5,7.95 10.7,7.15L10.95,4.8L10.95,4.65L7.65,-0.45L10.85,-5.65L11.15,-7.15Q11.15,-7.95 10.45,-7.95Q9.9,-7.95 8.2,-5.65L6.05,-2.65L2.45,-7.15'
    }]
  }, {
    name: 'flat',
    bounds: {
      left: 0,
      right: 8.95,
      top: -23.05,
      bottom: 10.25
    },
    svgPaths: [{
      d: 'M1.15,-22.85Q1.4,-23.05 1.75,-23.05Q2.4,-22.85 2.5,-21.9L2.45,-20.35Q2.45,-12.3 2.7,-10.05L4.8,-9.4L6.75,-8.45Q8.95,-6.7 8.95,-3.4Q8.95,-0.4 8.25,1.9L7.5,3.8Q5.35,8.85 2.6,10.25Q1.6,10.3 1.05,9.45Q0.75,9.05 0.5,6.3L0.4,2.6L0,-5L0.1,-7.85L0.2,-10.75L0.2,-12.7L0.2,-14.65Q0.2,-20.25 1.15,-22.85M3.5,-4.4L2.9,-4.35L2.7,3.3L2.7,5.05L3.15,4.8Q6.5,-0.05 6.6,-2.85Q5.35,-4.4 3.5,-4.4'
    }]
  }, {
    name: 'natural',
    bounds: {
      left: 0,
      right: 7.45,
      top: -18.4,
      bottom: 21.75
    },
    svgPaths: [{
      d: 'M1.45,-18.05Q0.6,-13.35 0.45,-10.35L0,2.7Q0,5.2 0.3,7.4L0.9,7.5L3.25,6.9L5.45,5.75L5.95,19.25Q5.95,21.75 6.4,21.75L6.8,21.4Q7.45,17.4 7.45,14.9L7.3,-7.7Q7.05,-8 6.65,-8L2.1,-6.65L2.6,-17.75Q2.6,-18.4 2.1,-18.4Q1.85,-18.4 1.45,-18.05M5.15,-3.7L5.45,-3.25L5.5,1.4Q5.45,1.75 4,2.25L2.05,2.95L2.2,-2.75L3.65,-3.35L5.15,-3.7'
    }]
  }, {
    name: 'sharp',
    bounds: {
      left: 0,
      right: 13.2,
      top: -21.95,
      bottom: 20
    },
    svgPaths: [{
      d: 'M3.5,-18.7L3.5,-16.05L3.45,-12.05L3.4,-7.95L3.45,-7.05L5.9,-8.25L5.85,-11.8Q5.8,-18.15 6.9,-21.55Q7.4,-21.95 7.8,-21.95Q8.15,-21.95 8.35,-21.35Q7.5,-18.45 7.5,-13.8L7.55,-11.55L7.55,-9.3L7.55,-8.8Q11,-10.35 12,-10.35L13.1,-10.1L13.2,-9.7Q13.2,-8.75 11,-7.3L7.85,-5.3L7.8,-4.65L8,1.7L11.3,0.5Q12,0.6 12,1.6L12,1.9Q11.35,3.2 8.2,5.7L8.2,6.15L8.3,13.55Q8.3,20.1 7.25,20Q6.6,19.45 6.4,13.75L6.2,6.65L3.6,8.05L3.6,15.2L3.35,18.15L2.95,18.4L2.75,18.4Q2.05,18.05 1.8,13.95L1.75,8.75L1.45,8.75Q0.2,8.8 0.2,6.75Q0.2,5.4 0.35,5.1Q0.55,4.7 1.65,4.25L1.7,1.8L1.7,-0.7L1.7,-2L1.2,-1.85Q0,-1.85 0,-2.8L0.1,-3.45L0.15,-4.1L0.1,-4.5L0.05,-4.95Q0.05,-5.55 0.6,-5.9L1.7,-6.4L1.75,-6.95L1.65,-9.2L1.6,-11.45Q1.6,-16.55 2.7,-18.8L3.15,-18.95L3.5,-18.7M3.6,-2.75L3.55,3.6L6.05,2.45L6.05,0.8L5.95,-4.15L3.6,-2.75'
    }]
  }, {
    name: 'timeSignature1',
    bounds: {
      left: 0,
      right: 2.8,
      top: -12.05,
      bottom: 12.1
    },
    svgPaths: [{
      d: 'M0.3,-7.8L0.45,-3.2L0.1,10.85Q0.1,12.1 0.75,12.1Q1.4,12.1 1.9,10.85L2.25,9.1L2.8,-8.7Q2.8,-10.6 2.4,-11.8L1.5,-12.05Q0.75,-12.05 0.4,-11.45Q0,-10.85 0,-9.65L0.3,-7.8'
    }]
  }, {
    name: 'timeSignature2',
    bounds: {
      left: 0,
      right: 11.15,
      top: -12,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M6.4,-10.55Q4.8,-9.4 3.6,-8.25L1.6,-5.75Q0.8,-4.45 0.4,-3.1Q0,-1.75 0,-0.25Q0,0.25 0.4,0.8Q0.8,1.35 1.3,1.35Q1.9,1.35 2.35,0.9L3.05,-0.4L4.05,-4.3L6.05,-6.15L8.25,-7.6L8.8,-7.1Q8.45,-5.8 7.5,-3.95L5.85,-0.85L3.15,4.5Q2.35,6.1 2,7.55Q1.6,8.95 1.6,10.1Q1.6,11.1 2.15,11.6Q2.7,12.05 3.8,12.05L7.35,11.5Q10.05,10.9 10.6,10.3L10.8,9.75L10.8,7.15Q10.8,6.4 10.25,6.4Q9.3,6.4 7.35,7.05L4.5,7.65L4,7.6L9.9,-4.3L10.8,-6.85L11.15,-9.35Q11.15,-10.65 10.8,-11.3Q10.45,-12 9.7,-12L8.25,-11.65L6.4,-10.55'
    }]
  }, {
    name: 'timeSignature3',
    bounds: {
      left: 0,
      right: 10.75,
      top: -11.95,
      bottom: 11.95
    },
    svgPaths: [{
      d: 'M8,-7.5L8.15,-7.4Q7.2,-5.65 5.3,-3.45Q3.9,-1.8 3.2,-0.4Q2.45,0.95 2.45,1.95Q2.45,2.85 3.35,2.9L4.65,1.85Q5.6,1.25 6.2,1.25Q7.05,1.25 7.55,1.6Q8,2 8,2.75Q8,4.1 6.95,5.25Q5.9,6.45 3.85,7.4L3.05,7.7Q2.4,7.7 2.45,6.6Q2.1,5.95 1.75,5.95Q1.15,5.95 0.55,7.65Q0.05,9.3 0.05,9.85Q0.05,10.9 0.4,11.4Q0.8,11.95 1.5,11.95L3.15,11.7L4.8,10.9Q6.85,9.1 7.8,7.7Q9.15,5.8 9.8,3.9Q10.45,2.05 10.45,0.25Q10.45,-0.7 9.85,-1.7Q9.3,-2.7 8.35,-2.9L10.45,-7.7L10.75,-9.45Q10.75,-10.7 10.4,-11.3Q10,-11.95 9.3,-11.95Q8,-11.95 6.55,-11.2Q5.05,-10.5 3.4,-9.05Q1.7,-7.55 0.85,-6.1Q0,-4.75 0,-3.5Q0,-2.55 0.45,-2.55L0.7,-2.6L4.15,-5.6L6.4,-7.1L8,-7.5'
    }]
  }, {
    name: 'timeSignature4',
    bounds: {
      left: 0,
      right: 14.4,
      top: -13.45,
      bottom: 12.55
    },
    svgPaths: [{
      d: 'M9.8,-13.45L10.35,-13.3L10.5,-13L9.8,0.95Q13.55,-0.2 13.95,-0.2Q14.25,-0.2 14.25,0.55L14.3,1.55L14.4,2.55Q14.4,3.35 14.1,3.6Q12.9,4.5 9.55,5.2L9.3,9Q9.05,11.6 8.6,12.55L8.15,12.55Q7.1,12.55 7.05,11.7Q7.1,8.65 7.5,5.7L4.95,6.1L2.4,6.4Q0,6.45 0,4.5Q0.05,3 1.5,0.45L4.25,-4.3L6.7,-9.15Q8.65,-13.45 9.8,-13.45M4,2L7.85,1.4L8.25,-6.8L3.5,1.9L4,2'
    }]
  }, {
    name: 'timeSignature5',
    bounds: {
      left: 0,
      right: 13.05,
      top: -11.45,
      bottom: 11.5
    },
    svgPaths: [{
      d: 'M8.9,-5.9L11.7,-7.7L12.85,-8.8L13.05,-9.8Q13.05,-11.15 12.1,-11.45L9.95,-10.7L6.65,-8.85L3.6,-6.7Q2.45,-5.75 2.2,-5.05L0.85,-1.3Q0.4,0.3 0.4,1.3Q0.4,2.15 1.2,2.15L2.4,1.9L3.55,1.7Q5.15,1.7 6.25,2.65L7.2,3.8L7.5,5.2Q7.5,6.1 6.8,6.55L4.7,7L2.4,6.6L0.85,6.1Q0.45,6.1 0.25,6.7Q0,7.3 0,8.45Q0,10 1.1,10.75Q2.2,11.5 4.35,11.5Q5.75,11.5 6.8,10.9Q7.8,10.25 8.5,9.05L9.4,6.8L9.65,4.1L9.4,1.25L8.65,-0.65L6.95,-2.1L4.35,-2.85Q5,-3.6 8.9,-5.9'
    }]
  }, {
    name: 'timeSignature6',
    bounds: {
      left: 0,
      right: 12.55,
      top: -12,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M9.55,-9.35L9.9,-10.9Q9.9,-11.95 9.1,-12L7.55,-11.05L6,-9.3Q3.9,-5.85 2.9,-3.3Q1.4,0.4 0.7,3.15Q0.2,5.05 0,8.1Q0,9.05 0.25,9.8L1,11.05L2.25,11.8L3.9,12.05Q5.45,12.05 6.95,11.1Q8.45,10.2 9.9,8.3Q11.2,6.55 11.9,4.9Q12.55,3.2 12.55,1.6Q12.55,0.55 12.2,-0.4Q11.75,-1.6 10.8,-1.6Q9.9,-1.6 8.85,-1.05L6.6,0.65Q5.4,1.75 3.55,4.5L2.4,6.6L2.15,5.75Q2.15,4.7 2.65,2.95L4.1,-1.2L5.95,-5.2Q6.85,-6.7 7.6,-7.25L8.8,-8.05Q9.15,-8.25 9.55,-9.35M9.05,2.6Q10,2.6 10.2,3.7Q9.95,4.5 9.3,5.2Q8.75,5.85 7.8,6.5Q6.95,7.15 6.1,7.45L4.35,7.85L3.95,7.7Q5.05,5.85 6.15,4.65Q7,3.65 7.75,3.1Q8.45,2.6 9.05,2.6'
    }]
  }, {
    name: 'timeSignature7',
    bounds: {
      left: 0,
      right: 14.95,
      top: -12,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M5.5,-4.9Q7.7,-5.95 11.85,-7Q11.75,-5.9 10.9,-3.65L8.4,2.05Q6.75,5.5 5.95,7.65Q5.15,9.9 5.15,10.95Q5.15,12.05 6.2,12.05Q6.8,12.05 7.15,11.15L7.45,9.75L14,-5.35L14.7,-7.5L14.95,-9.65Q14.95,-10.5 14.55,-11.2Q14.05,-12 13.15,-12L11.4,-11.75L3.55,-9.2Q2.4,-8.8 1.7,-7.3L0.6,-4.9Q0,-3.45 0,-2.35Q0,-1.45 0.25,-1.05Q0.5,-0.6 1,-0.6Q1.85,-0.6 3.2,-2.45L5.5,-4.9'
    }]
  }, {
    name: 'timeSignature8',
    bounds: {
      left: 0,
      right: 13.2,
      top: -12,
      bottom: 12
    },
    svgPaths: [{
      d: 'M8.95,-7Q8.55,-5.95 6.85,-4.8Q5.25,-3.7 4,-3.7L3.25,-3.85L3.9,-4.9L5.5,-6.05Q7.5,-7.25 8.55,-7.25L9,-7L8.95,-7M0.35,-2.65Q0.35,-1.3 0.9,-0.45Q1.4,0.3 2.75,1L2.85,1.15L0.9,4.1Q0.2,5.25 0,7.45L0.2,9.45Q0.4,10.3 0.75,10.85L1.75,11.7L3.15,12Q4.15,12 5.5,11.3L8.5,9.15L11.05,6.55L12.5,4.25Q13.2,1.8 13.2,0L13.2,-0.05Q13.2,-1.35 12.6,-2.35Q12,-3.4 10.8,-4.05L10.8,-4.25L11.7,-6.6L12,-8.45Q12,-10.2 11.4,-11.1Q10.85,-12 9.6,-12Q6.2,-12 3.25,-9.05Q1.75,-7.55 1.05,-5.95Q0.35,-4.4 0.35,-2.65M7.95,4.85L5.5,6.6L3.75,7.2Q2.9,7.2 2.6,6.85Q2.9,5.9 3.65,4.9Q4.4,3.85 5.65,2.75Q6.85,1.7 7.95,1.15Q9.1,0.6 10,0.6Q10.75,0.6 10.75,1Q10.75,1.75 10.05,2.7L7.95,4.85'
    }]
  }, {
    name: 'timeSignature9',
    bounds: {
      left: 0,
      right: 10.7,
      top: -12.05,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M5.8,-10.85Q3.8,-8.85 2.8,-7.25Q1.4,-5.1 0.7,-3.2Q0,-1.25 0,0.3Q0,1.35 0.4,1.85Q0.8,2.35 1.55,2.35Q2.75,2.35 4.25,1.05L6.8,-0.8L4.25,5.45Q2.45,10.05 2.45,10.8Q2.45,12.05 3,12.05L3.5,11.4L9.85,-4L10.4,-6.35L10.7,-8.85Q10.7,-10.45 10.2,-11.25Q9.75,-12.05 8.75,-12.05L7.25,-11.75L5.8,-10.85M8.2,-7.95L8.4,-6.8Q8.4,-5.95 7.7,-5.4L5.4,-3.4Q3.5,-1.75 2.95,-1.75L2.35,-2.15Q2.35,-2.95 2.85,-3.9Q3.3,-4.8 4.25,-5.9Q5.2,-7 6.1,-7.55Q6.95,-8.1 7.75,-8.1L8.2,-7.95'
    }]
  }, {
    name: 'timeSignature0',
    bounds: {
      left: 0,
      right: 11.75,
      top: -11.5,
      bottom: 11.55
    },
    svgPaths: [{
      d: 'M7.4,-11.5L5.85,-11.15L4.4,-10.1L3.1,-8.3L1.9,-5.8Q0.95,-3.4 0.5,-1.3Q0,0.85 0,2.75Q0,4.8 0.7,7.8L1.55,9.55L2.75,10.8Q3.9,11.55 4.8,11.55Q6.3,11.55 7.55,10.5Q8.85,9.4 9.95,7.25L11.3,3.65L11.75,0.25Q11.75,-1.9 11.15,-5.2L10.45,-8.35L9.65,-10.15L8.6,-11.2L7.4,-11.5M8,-6.3L8.85,-3.6Q9.55,-0.7 9.55,0.8L9.5,0.8L9.25,2.65L8.5,4.45L7.25,5.85L5.7,6.85L4.8,6.85Q3.8,6.85 3,5.4Q2.3,4 2.3,3L2.3,1.45Q2.3,0.3 2.6,-1Q2.9,-2.3 3.55,-3.75Q4.35,-5.45 5.25,-6.3Q6.15,-7.15 7.15,-7.15L8,-6.3'
    }]
  }, {
    name: 'sixtyFourthFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -32.4,
      bottom: 23.05
    },
    svgPaths: [{
      d: 'M12.7,-28.1L13.15,-25.2L12.9,-23.35L12.9,-23.4Q12.25,-23.25 12.25,-21.95L12.3,-21.55Q11.35,-19.7 9.7,-18L3.35,-12.15Q0,-8.95 0,-6.4L0.05,2.15L0,2.6L0.05,11.15L0,11.6L0.05,20.15L0,20.6L0.05,21.85L0.1,21.85Q0.25,23.05 0.95,23.05L1.6,22.8Q2.85,21.2 7.4,16.75Q11.6,12.8 13.15,10.45Q15.7,6.7 15.7,2.85Q15.7,0.8 15.05,-1.75L14.95,-2Q15.7,-4.1 15.7,-6.15Q15.7,-8.2 15.05,-10.75L14.95,-11Q15.7,-13.1 15.7,-15.15Q15.7,-17.2 15.05,-19.75L14.95,-20Q15.7,-22.1 15.7,-24.15Q15.7,-26.2 15.05,-28.75Q14.15,-32.15 12.9,-32.4Q12.25,-32.25 12.25,-30.95Q12.25,-29.7 12.7,-28.1M12.25,-12.95L12.3,-12.55Q11.35,-10.7 9.7,-9L3.35,-3.15L2.05,-1.75L2.05,-4.7L7.4,-10.25Q11.4,-14.05 13.1,-16.5L13.15,-16.2L12.9,-14.35L12.9,-14.4Q12.25,-14.25 12.25,-12.95M13.15,-7.2L12.9,-5.35L12.9,-5.4Q12.25,-5.25 12.25,-3.95L12.3,-3.55Q11.35,-1.7 9.7,0L3.35,5.85L2.05,7.25L2.05,4.3Q3.45,2.65 7.4,-1.25Q11.4,-5.05 13.1,-7.5L13.15,-7.2M13.15,1.8Q13.15,5.5 9.7,9L3.35,14.85L2.05,16.25L2.05,13.3Q3.45,11.65 7.4,7.75Q11.4,3.95 13.1,1.5L13.15,1.8'
    }]
  }, {
    name: 'thirtySecondFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -31.8,
      bottom: 14.65
    },
    svgPaths: [{
      d: 'M12.7,-27.5L13.15,-24.6L12.9,-22.75L12.9,-22.8Q12.25,-22.65 12.25,-21.35L12.3,-20.95Q11.35,-19.1 9.7,-17.4L3.35,-11.55Q0.45,-8.8 0.05,-6.45L0.05,-6.25L0,-5.8L0.05,2.75L0,3.2L0.05,11.75L0,12.2L0.05,13.45L0.1,13.45Q0.25,14.65 0.95,14.65L1.6,14.4Q2.85,12.8 7.4,8.35Q11.6,4.4 13.15,2.05Q15.7,-1.7 15.7,-5.55Q15.7,-7.6 15.05,-10.15L14.95,-10.4Q15.7,-12.5 15.7,-14.55Q15.7,-16.6 15.05,-19.15L14.95,-19.4Q15.7,-21.5 15.7,-23.55Q15.7,-25.6 15.05,-28.15Q14.15,-31.55 12.9,-31.8Q12.25,-31.65 12.25,-30.35Q12.25,-29.1 12.7,-27.5M13.15,-15.6L12.9,-13.75L12.9,-13.8Q12.25,-13.65 12.25,-12.35L12.3,-11.95Q11.35,-10.1 9.7,-8.4L3.35,-2.55L2.05,-1.15L2.05,-4.1L7.4,-9.65Q11.4,-13.45 13.1,-15.9L13.15,-15.6M13.15,-6.6Q13.15,-2.9 9.7,0.6L3.35,6.45L2.05,7.85L2.05,4.9Q3.45,3.25 7.4,-0.65Q11.4,-4.45 13.1,-6.9L13.15,-6.6'
    }]
  }, {
    name: 'grandStaff',
    bounds: {
      left: -12.5,
      right: 0,
      top: -160,
      bottom: 0.15
    },
    svgPaths: [{
      d: 'M-0.45,-160L-0.45,-159.4Q-3.55,-153.95 -5.45,-148.8L-5.65,-148.25Q-7.6,-142.85 -7.35,-136.45Q-7,-130.65 -5.45,-124.5L-5.35,-124.15L-2.15,-112.05Q-0.6,-106.2 -0.45,-101.6Q-0.4,-93.45 -3.2,-88.65Q-4.15,-87.1 -5.45,-85.55Q-8.05,-82.6 -12.1,-79.9Q-8.05,-77 -5.45,-74Q-4.15,-72.45 -3.2,-70.85Q-0.4,-66 -0.45,-57.8Q-0.6,-53.25 -2.15,-47.4L-5.35,-35.3Q-7,-29 -7.35,-22.95Q-7.6,-16.55 -5.65,-11.2Q-3.7,-5.85 -0.45,-0.4L-0.45,0.15Q-6.45,-8.3 -8.95,-16.25Q-11.45,-24.2 -11.4,-30.8Q-11.25,-37.45 -9.8,-44.1L-6.85,-56.45Q-5.35,-62.2 -5.3,-66.2Q-5.35,-67.85 -5.65,-69.35Q-6.15,-71.75 -7.35,-73.8Q-9.3,-77.1 -12.5,-79.6L-12.5,-80.2Q-9.3,-82.45 -7.35,-85.7Q-5.85,-88.15 -5.45,-91.2L-5.3,-93.2L-5.45,-95.65Q-5.8,-98.9 -6.85,-102.95L-9.8,-115.35Q-11.25,-121.95 -11.4,-128.65Q-11.45,-135.25 -8.95,-143.25Q-7.65,-147.35 -5.45,-151.65Q-3.35,-155.75 -0.45,-160'
    }]
  }, {
    name: 'slashNoteHead',
    bounds: {
      left: 0,
      right: 18.25,
      top: -10.25,
      bottom: 10.45
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M18.25,-8.8L18,-5.95L0.35,10.45Q0.05,10.05 0,9.4L0.1,5.5Q8.05,-3.1 17.5,-10.25Q18.25,-10.25 18.25,-8.8'
    }]
  }, {
    name: 'hollowSlashNoteHead',
    bounds: {
      left: 0,
      right: 18.7,
      top: -13.6,
      bottom: 10.85
    },
    svgPaths: [{
      d: 'M14,-13.6Q13.55,-13.6 12.9,-12.25L6.4,-7.35L3.3,-4.1Q1.95,-2.6 1.25,-1.25Q0.6,0 0.6,1.55L0.85,3.4L1.65,5.4L4.15,10.05L5,10.85L10.75,5.35L16.65,-0.85L18.2,-3.15Q18.7,-4.15 18.7,-4.95L14.65,-13.1L14,-13.6M9.4,-6.4L13,-9.2L16.15,-3.45L14.75,-1.5L6,7.15L4.25,3.8Q2.9,1.15 2.9,0.45L3,-0.2L6.15,-3.55L9.4,-6.4'
    }]
  }, {
    name: 'invisibleBarline',
    bounds: {
      left: 0,
      right: 1.5,
      top: -40.232,
      bottom: 0.368
    },
    svgPaths: [{
      fill: 'rgba(0,0,0,0)',
      d: 'M1.5,-40.232L1.5,0.368L0,0.368L0,-40.232L1.5,-40.232'
    }]
  }, {
    name: 'repeatBarline',
    bounds: {
      left: 0,
      right: 22,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M6.5,-42L6.5,0L15.5,0L15.5,-42L6.5,-42M18,-42L18,0L22,0L22,-42L18,-42M0,-42L0,0L4,0L4,-42L0,-42'
    }]
  }, {
    name: 'topStartWing',
    bounds: {
      left: 0,
      right: 23.25,
      top: -17.5,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M22.3,-17Q20.65,-17.9 19.75,-17.25Q15.9,-14.45 10.9,-13.45L1.25,-12.8Q0.3,-12.8 0.1,-12.4Q0,-12.05 0.45,-11.5L0,-11.5L0,0L9,0L9,-10.65Q13.1,-11 16.15,-11.95Q19.8,-13.1 22.8,-15.3Q23.95,-16.1 22.3,-17'
    }]
  }, {
    name: 'bottomStartWing',
    bounds: {
      left: 0,
      right: 23.25,
      top: 0,
      bottom: 17.1
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M22.8,14.9Q17.45,10.95 9,10.25L9,0L0,0L0,11.5L0.2,11.5Q-0.25,12.35 1.25,12.35L10.9,13.05Q15.95,14.05 19.75,16.85Q20.65,17.5 22.3,16.6Q23.95,15.7 22.8,14.9'
    }]
  }, {
    name: 'braceBody',
    bounds: {
      left: 0,
      right: 9,
      top: -42,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M9,0L0,0L0,-42L9,-42L9,0'
    }]
  }, {
    name: 'bottomEndWing',
    bounds: {
      left: -13.4,
      right: 9.8,
      top: 0,
      bottom: 17.55
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M9.55,11.8L9.55,0.45L0.55,0.45L0.55,10.7Q-7.55,11.4 -12.95,15.35Q-14.1,16.15 -12.45,17.05Q-10.8,17.95 -9.9,17.3Q-6.05,14.5 -1.05,13.5L8.65,12.8Q10.3,12.8 9.55,11.8'
    }]
  }, {
    name: 'topEndWing',
    bounds: {
      left: -13.85,
      right: 9.3,
      top: -17.25,
      bottom: 0.25
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M9.3,-12.15Q9.15,-12.55 8.2,-12.55L-1.5,-13.2Q-6.5,-14.2 -10.35,-17Q-11.25,-17.65 -12.9,-16.75Q-14.55,-15.85 -13.4,-15.05Q-8.05,-11.15 0.1,-10.4L0.1,0.25L9.1,0.25L9.1,-11.25L8.95,-11.25Q9.4,-11.8 9.3,-12.15'
    }]
  }, {
    name: 'repeatEndingBracket',
    bounds: {
      left: -10.5,
      right: 80.2,
      top: -22.5,
      bottom: 0
    },
    svgPaths: [{
      fill: 'none',
      'stroke-width': '1',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M-10,-5.5L-10,-22M-9.7,-22L79.7,-22'
    }]
  }, {
    name: 'halfRestWithLine',
    bounds: {
      left: -3.763,
      right: 18.516,
      top: -12.578,
      bottom: 4.922
    },
    svgPaths: [{
      d: 'M18.5,-0.196L18.5,0.804L-3.45,0.804L-3.45,-0.196L18.5,-0.196'
    }, {
      d: 'M0.05,-6.85L-1.45,-0.15L15.7,-0.15L17,-6.85L0.05,-6.85'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M18.516,-12.578L18.516,4.922L-3.763,4.922L-3.763,-12.578L18.516,-12.578'
    }]
  }, {
    name: 'wholeRestWithLine',
    bounds: {
      left: -3.5,
      right: 18.5,
      top: -1.878,
      bottom: 15.622
    },
    svgPaths: [{
      d: 'M18.5,-0.095L18.5,1.105L-3.5,1.105L-3.5,-0.095L18.5,-0.095'
    }, {
      d: 'M17,-0.05L0.05,-0.05L-1.45,6.65L0.8,6.5L15.7,6.65L17,-0.05'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M17.5,-1.878L17.5,15.622L-2.5,15.622L-2.5,-1.878L17.5,-1.878'
    }]
  }, {
    name: 'percussionClef',
    bounds: {
      left: 0,
      right: 9.85,
      top: -11.45,
      bottom: 11.45
    },
    svgPaths: [{
      d: 'M6.95,-11.35L6.85,-11.2L6.85,-10.95L6.85,10.75L6.9,11.2L7.1,11.4L7.25,11.45L9.2,11.45L9.75,11.35L9.85,10.75L9.85,-10.9L9.75,-11.1L7.35,-11.45L6.95,-11.35M3,-10.45L2.85,-10.6L0.85,-10.85Q0.3,-10.6 0.1,-10.1L0,-9.7L0.25,10.9L0.35,11.15L0.5,11.25L2.7,11.25L2.95,11.2L3.05,11.05L3.15,10.8L3.15,-10.2L3,-10.45'
    }]
  }, {
    name: 'fermataAbove',
    bounds: {
      left: -12.3,
      right: 9.7,
      top: 0,
      bottom: 27.45
    },
    svgPaths: [{
      d: 'M6.4,2.65Q4.1,0 1.15,0Q-0.65,0 -2.25,0.7Q-3.9,1.35 -5.35,2.7Q-7.1,4.3 -8.4,6.3Q-9.75,8.35 -10.65,10.8Q-11.45,13 -11.9,15.4Q-12.3,17.85 -12.3,20.4L-12.3,20.6Q-12.3,23.25 -11.95,24.55Q-11.65,25.75 -11.05,26.45Q-10.45,27.2 -9.55,27.45Q-8.85,27.35 -8.85,26.85Q-8.85,26.5 -9.3,25.8L-9.85,24.75L-10.5,22.5L-10.65,19.6L-10.3,16.05Q-9.85,13.3 -9.2,13L-9,13.05L-8.25,13.4L-2.8,12Q-0.95,11.45 1.15,10.25L3.3,8.8L4.25,7.55L4.5,5.5L4.7,5.3L5.85,6.45Q6.9,7.85 7.5,10Q8,12.1 8,14.9L7.55,21.1L6.95,24.95Q6.95,25.6 7.35,25.8L7.55,25.85Q8.1,25.85 8.5,25.15Q8.95,24.45 9.2,23Q9.7,18.1 9.7,14.25Q9.7,11.45 9.2,8L8.1,5.1Q7.4,3.75 6.4,2.65M2.85,16.1Q2.85,15 1.75,15L-3.15,15Q-4.15,15 -4.15,16.95L-4.15,18.55Q-4.15,19.3 -2.55,19.75L-0.3,20.1Q1.6,20.1 2.25,19.5Q2.85,18.9 2.85,17.05L2.85,16.1'
    }]
  }, {
    name: 'fermataBelow',
    bounds: {
      left: -11.45,
      right: 13.5,
      top: 0,
      bottom: 27.8
    },
    svgPaths: [{
      d: 'M11.75,10.55Q11.75,12.6 11.2,13.95Q10.7,15.3 9.7,15.95Q9.7,14.5 9.25,13.45L8.45,12.35Q7.95,12 7.3,12Q6.5,12 5.2,12.5Q3.85,12.95 2.05,13.9L-1,15.3L-2.85,15.8L-4.2,15.95Q-4.85,16.2 -4.85,17.1Q-4.85,18.85 -5.3,19.55L-7.15,17.6L-8.55,15.05L-9.3,11.9L-9.6,8.15Q-9.6,6.8 -9.05,4.6Q-8.45,2.3 -8.45,1.05Q-8.45,0 -8.9,0Q-9.2,0 -9.8,0.75L-11.05,6Q-11.45,8.5 -11.45,10.8Q-11.45,13.45 -10.9,15.8Q-10.35,18.15 -9.25,20.2L-7.4,23.1L-5.1,25.4Q-3.65,26.6 -2.1,27.2Q-0.55,27.8 0.95,27.8L3.75,27.4Q5.05,27 6.2,26.25Q7.4,25.45 8.45,24.3L10.4,21.55Q12.25,17.9 12.75,16Q13.5,12.1 13.5,10Q13.5,7.5 13,5.4Q12.45,3.35 11.35,1.75L10.85,1.6Q10.1,1.6 9.65,2.6Q9.75,3.9 10.8,6.55Q11.75,9.15 11.75,10.55M2.8,9.2Q3.5,8.65 3.5,6.85L3.45,5.25Q3.3,4.6 2.35,4.6L-2.5,4.6Q-3,4.6 -3.25,4.9L-3.55,7.25L-3.55,8.15Q-3.55,8.85 -1.85,9.3L0.4,9.65Q2.2,9.65 2.8,9.2'
    }]
  }, {
    name: 'crossNoteHead',
    bounds: {
      left: -0.8,
      right: 13.4,
      top: -6.3,
      bottom: 7.45
    },
    svgPaths: [{
      d: 'M3.4,-3L3.85,0.45L1.4,2.1Q-0.6,3.5 -0.65,3.8L-0.8,5.15Q-0.8,6.5 0.1,6.5L2.5,5.05L4.8,3.65L6.05,5.8Q7,7.35 7.65,7.45L8.15,7.3Q8.85,6.65 8.85,5.7Q8.85,5 8.15,3.9L7,2.2L9.6,0.3L12.3,-1.5L13,-2.55Q13.4,-3.3 13.4,-3.8Q13.4,-4.8 12.6,-4.8L9.2,-2.95L5.6,-0.6Q5.2,-1.6 5.2,-4.9L5.2,-5.75Q5.2,-6.3 4.75,-6.3Q4.1,-6.3 3.75,-5.45Q3.4,-4.65 3.4,-3'
    }]
  }, {
    name: 'hollowSquareNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -6,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M12.05,-6L12.05,6.2L0,6.2L0,-6L12.05,-6M1.4,-4.6L1.4,4.8L10.65,4.8L10.65,-4.6L1.4,-4.6'
    }]
  }, {
    name: 'squareNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 6.1
    },
    svgPaths: [{
      d: 'M12.1,-6L12.1,6.1L0,6.1L0,-6L12.1,-6'
    }]
  }, {
    name: 'hollowTriangleNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M0,4.9L6.05,-6L12.1,4.9L0,4.9M9.7,3.5L6.15,-3.25L2.35,3.5L9.7,3.5'
    }]
  }, {
    name: 'triangleNoteHead',
    bounds: {
      left: -0.008,
      right: 12.092,
      top: -6,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M5.928,-6L-0.008,4.9L12.092,4.9L5.928,-6'
    }]
  }, {
    name: 'hollowDiamondNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M0,0L6,-6L12.05,0L6,6L0,0M6,4.2L10.25,0L6,-4.2L1.8,0L6,4.2'
    }]
  }, {
    name: 'diamondNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M6.05,6L0,0L6.05,-6L12.1,0L6.05,6'
    }]
  }, {
    name: 'filledBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M10.8-4.6c-0.5-0.4-1.2-0.7-2-0.7L6.9-5L5.3-4.3C4.7-4.2,4.1-3.7,3.3-3L2-1.9c-0.4,0.4-0.9,1.2-1.2,2 C0.4,0.8,0.2,1.6,0.2,2.3c0,0.8,0.2,1.4,0.7,2.1C1.3,5,1.9,5.3,2.7,5.3L5,4.8c0.9-0.3,1.9-0.7,3-1.5c0.7-0.5,1.4-1,1.9-1.5l1.4-1.8 l0.4-0.9l0.1-1.1l0-0.6l0.1-0.3C11.7-3.6,11.4-4.1,10.8-4.6z'
    }]
  }, {
    name: 'halfBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M0.2,1.9c0,1.4,0.4,2.6,1.1,3.4C2.1,6.2,3,6.7,4.3,6.7c2,0,3.8-0.8,5.4-2.2c1.6-1.5,2.4-3.4,2.5-5.7v-1.4 c0-0.9-0.1-2-0.4-2.4l0,0c-0.4-0.6-0.9-0.9-2-1.3L8-6.7C6-6.6,4.2-5.7,2.7-4C1-2.3,0.2-0.4,0.2,1.9z'
    }]
  }, {
    name: 'wholeBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M13.6-5.3c-0.4-0.6-1.2-1-2.4-1.3L9.1-6.9C6.8-6.9,4.7-6,2.8-4.2C1-2.4,0-0.4,0,1.9c0,1.5,0.5,2.8,1.4,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.3-2.3C13.1,3,14.1,1,14.1-1.3v-1.4C14.2-3.9,14-4.8,13.6-5.3z'
    }]
  }, {
    name: 'namedFilledANoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M6.3-2.8C6.4-2,6.5-1.2,6.6-0.3C6.2-0.3,5.8-0.2,5.4-0.1C5.7-1.1,5.7-2,6.3-2.8z M12-2.5v0.6l-0.1,1.1l-0.4,1L10.1,2 c-0.6,0.5-1.2,1-1.9,1.5C7.1,4.2,6,4.7,5,5L2.8,5.5c-0.8,0-1.5-0.3-2-1C0.3,3.9,0,3.1,0,2.3c0-0.7,0.2-1.5,0.6-2.3 C1-0.8,1.4-1.5,1.9-2.1l1.2-1.1c0.8-0.7,1.4-1.2,2-1.3l1.6-0.7l2-0.3c0.8,0,1.5,0.2,2.1,0.7c0.6,0.5,1,1.1,1.1,2L12-2.5z M7.6,0.6 c0-0.2,0-0.3,0-0.5C7.5-0.4,7.3-0.9,7.3-1.4C7.2-2.2,7.1-3,7.1-3.8c0-0.3-0.1-0.5-0.4-0.6C6.4-4.5,6.2-4.4,6-4.2 C6-4.2,5.9-4.1,5.9-4c-0.2,0.3-0.4,0.6-0.5,1C4.7-1.3,4.2,0.5,4.1,2.3c0,0.5,0,0.9,0.1,1.4c0.5,0,0.6-0.2,0.7-0.5 C4.9,2.7,5,2.2,5.1,1.8c0-0.1,0-0.2,0.2-0.3c0.5-0.1,0.9-0.1,1.4-0.2c0,0.1,0,0.3,0,0.4c0.1,0.6,0.1,1.1,0.2,1.7 c0,0.2,0.2,0.4,0.4,0.3c0.2,0,0.4-0.2,0.4-0.4c0-0.3,0-0.6,0-1C7.6,1.7,7.5,1.2,7.6,0.6z'
    }]
  }, {
    name: 'namedFilledBNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M5.1-1.1c-0.1-0.5,0-1,0.5-1.3c0.3-0.2,0.7-0.5,1-0.7C6.7-3.2,6.8-3.2,7-3.3c0,0,0,0,0,0.1C7-3.1,7-3,6.9-2.9 C6.7-2.4,5.6-1.4,5.1-1.1z M11.9-2.5v0.6l-0.1,1.1l-0.4,1L10,2C9.5,2.5,8.8,3,8.1,3.4C7,4.1,6,4.7,5,5L2.7,5.4c-0.8,0-1.5-0.3-2-1 C0.2,3.8,0,3.1,0,2.3C0,1.6,0.2,0.8,0.6,0c0.3-0.8,0.8-1.5,1.3-2.1l1.3-1.1c0.8-0.7,1.4-1.2,2-1.3l1.6-0.7l2-0.3 c0.8,0,1.5,0.2,2.1,0.7c0.6,0.5,1,1.1,1.1,2L11.9-2.5z M8.4-0.1C8.3-1,7.9-1.4,7.1-1.6C7.2-1.7,7.3-1.9,7.3-2 c0.3-0.5,0.6-1.1,0.5-1.8c-0.1-0.6-0.6-1-1.2-0.8C5.5-4.1,4.8-3.3,4.3-2.2c-0.1,0.4,0,0.8,0,1.1c0,1.3,0,2.7,0,4 c0,0.4,0.2,0.6,0.6,0.6c0.2,0,0.5,0,0.7,0C7.3,3.3,8.6,1.6,8.4-0.1z M6.8-0.2C6.3-0.2,5.9,0,5.5,0.2C4.9,0.6,5,0.4,5,1.1 c0,0.1,0,0.2,0,0.3c0,0,0,0,0,0c0,0.2,0,0.5,0,0.7c0,0.1,0.1,0.2,0.2,0.2c0.9,0.2,2.1-0.6,2.4-1.5C7.8,0.1,7.5-0.3,6.8-0.2z'
    }]
  }, {
    name: 'namedFilledCNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M11.9-2.9c-0.1-0.9-0.5-1.5-1.1-2c-0.6-0.5-1.3-0.7-2.1-0.7l-2,0.3L5.1-4.6C4.6-4.4,3.9-3.9,3.1-3.2L1.9-2.1 C1.4-1.5,0.9-0.8,0.6,0C0.2,0.8,0,1.6,0,2.3c0,0.8,0.2,1.5,0.8,2.2c0.5,0.6,1.2,1,2,1L5,5c1-0.3,2-0.9,3.2-1.5C8.8,3,9.5,2.5,10,2 l1.4-1.8l0.4-1l0.1-1.1v-0.6L11.9-2.9z M8.1,1.8c-0.5,1-1.3,1.6-2.4,1.8c-0.6,0.1-1-0.2-1.3-0.7C4,2.3,3.9,1.6,3.9,1 C3.8-0.7,4.2-2.3,5.1-3.7c0.3-0.4,0.6-0.8,1.2-0.9c0.4-0.1,0.6,0.1,0.8,0.4C7.5-3.6,7.7-3,7.6-2.3c0,0.3-0.1,0.5-0.2,0.8 c0,0.1-0.2,0.2-0.3,0.3C7-1.2,6.9-1.4,6.8-1.5c-0.1-0.3-0.1-0.7-0.2-1c0-0.2-0.1-0.5-0.4-0.6C6-3.2,5.8-3,5.7-2.8 C5.3-2.3,5.1-1.7,5-1.1C4.9-0.6,4.8-0.2,4.7,0.2C4.8,0.6,4.9,1,5,1.3c0.2,0.5,0.6,0.8,1.2,0.6c0.3-0.1,0.5-0.3,0.8-0.5 c0.2-0.2,0.4-0.5,0.6-0.7c0.1-0.1,0.1-0.2,0.2-0.2c0.2-0.2,0.4-0.1,0.5,0.1C8.3,1,8.3,1.4,8.1,1.8z'
    }]
  }, {
    name: 'namedFilledDNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M7.8-2.2C7.7-1.9,7.6-1.5,7.3-1.1C6.8-0.2,6.2,0.7,5.6,1.6C5.4,1.9,5.3,1.9,5.1,1.8c0-0.7,0-1.5,0-2.2c0-0.5,0-1,0-1.5 c0-0.2,0-0.3,0.2-0.4c0.6-0.3,1.2-0.6,1.9-0.7C7.7-3,8-2.7,7.8-2.2z M11.9-2.5v0.6l-0.1,1.1l-0.4,1L10,2C9.5,2.5,8.8,3,8.1,3.4 C7,4.1,6,4.6,5,5L2.7,5.4c-0.8,0-1.5-0.3-2-1C0.2,3.8,0,3.1,0,2.3C0,1.6,0.2,0.8,0.6,0c0.3-0.8,0.8-1.5,1.3-2.1l1.2-1.1 c0.8-0.7,1.4-1.2,1.9-1.3l1.7-0.7l2-0.3c0.8,0,1.5,0.2,2.1,0.7c0.6,0.5,1,1.1,1.1,2L11.9-2.5z M8.6-3.5C8.4-4.4,7.8-4.8,7-4.5 C6.3-4.3,5.6-4,4.8-3.7C4.5-3.5,4.4-3.2,4.4-2.9c0,0.8,0,1.7,0,2.5c0,0,0,0,0,0c0,0.8,0,1.7,0,2.5c0,0.3,0.1,0.7,0.2,1 c0.2,0.5,0.6,0.6,1,0.2c0.2-0.2,0.4-0.5,0.5-0.7c0.8-1.2,1.6-2.4,2.2-3.7C8.6-1.9,8.8-2.7,8.6-3.5z'
    }]
  }, {
    name: 'namedFilledENoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M11.9-2.9c-0.1-0.9-0.5-1.5-1.1-2c-0.6-0.5-1.3-0.7-2.1-0.7L6.7-5.3L5.1-4.6C4.5-4.4,3.9-4,3.1-3.3L1.9-2.2 c-0.5,0.6-1,1.3-1.3,2.1C0.2,0.8,0,1.5,0,2.2C0,3,0.2,3.8,0.7,4.4c0.5,0.6,1.2,1,2,1L5,4.9c1-0.3,2-0.9,3.1-1.5 C8.8,2.9,9.5,2.5,10,1.9l1.4-1.8l0.4-1l0.1-1.1v-0.6L11.9-2.9z M7.6-3.5C6.7-3,5.8-2.5,4.8-2C4.6-1.9,4.6-1.7,4.6-1.5 c0,0.4,0,0.8-0.1,1.2C5-0.6,5.5-0.8,6-1C6.2-1,6.3-1.1,6.5-1.1c0.1,0,0.2,0,0.2,0.2c0,0.3,0,0.6,0,0.9c0,0.1-0.2,0.2-0.3,0.3 C5.8,0.5,5.3,0.7,4.7,1C4.5,1.1,4.5,1.1,4.5,1.3c0,0.2,0,0.4,0,0.5c0,0.2,0.1,0.3,0.3,0.3c0.5,0,1,0,1.5-0.1C6.5,2,6.7,2,7,2 c0.2,0,0.3,0.1,0.2,0.3c0,0.3,0,0.5,0,0.8c0,0.2-0.1,0.3-0.3,0.3C5.9,3.6,5,3.6,4.1,3.5c-0.1,0-0.2-0.1-0.2-0.2c0-0.3-0.1-0.6-0.1-1 c0-1.5,0.1-3,0.1-4.6c0-0.4,0.2-0.7,0.5-0.9c1-0.5,2-1,2.9-1.5c0.1,0,0.2-0.1,0.2-0.1c0.1,0,0.2,0.1,0.3,0.2C8-4.3,7.8-3.6,7.6-3.5z'
    }]
  }, {
    name: 'namedFilledFNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M11.9-2.9c-0.1-0.9-0.5-1.5-1.1-2c-0.6-0.5-1.3-0.7-2.1-0.7l-2,0.3L5.1-4.6C4.6-4.4,3.9-4,3.1-3.3L1.9-2.2 c-0.5,0.6-1,1.3-1.3,2.1C0.2,0.7,0,1.5,0,2.2C0,3,0.2,3.7,0.7,4.4c0.5,0.6,1.2,1,2,1L5,4.9c1-0.3,2-0.9,3.2-1.5 C8.8,2.9,9.5,2.4,10,1.9l1.4-1.8l0.4-1l0.1-1.1v-0.6L11.9-2.9z M5.4-0.4c0.1-0.1,0.2-0.1,0.3-0.2C6.4-1,7-1.4,7.6-1.8 C7.8-2,8-1.8,8-1.6c0.1,0.5,0,1-0.5,1.3C6.8,0.2,6.2,0.6,5.6,1C5.5,1.1,5.4,1.2,5.4,1.4c0,0.5,0,1.1,0,1.6c0,0.1,0,0.3,0,0.4 c0,0.1-0.1,0.2-0.2,0.2C5,3.6,4.9,3.5,4.8,3.4C4.7,3.3,4.7,3.1,4.7,3c0-1.8,0.1-3.5,0.1-5.3c0-0.2,0.1-0.4,0.3-0.5 C5.8-3.4,6.6-4,7.4-4.6c0.1-0.1,0.3-0.2,0.5-0.2c0.2,0.1,0.2,0.3,0.2,0.5c0,0.4-0.1,0.8-0.5,1.1c-0.7,0.5-1.3,1-1.9,1.4 C5.5-1.7,5.5-1.5,5.5-1.4C5.4-1.1,5.4-0.8,5.4-0.4z'
    }]
  }, {
    name: 'namedFilledGNoteHead',
    bounds: {
      left: 0,
      right: 11.95,
      top: -5.5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M11.9-3c-0.1-0.9-0.5-1.5-1.1-2c-0.6-0.5-1.3-0.7-2.1-0.7l-2,0.3L5.1-4.7C4.6-4.5,3.9-4,3.2-3.3L1.9-2.2 c-0.5,0.6-1,1.3-1.3,2.1C0.2,0.7,0,1.5,0,2.2C0,3,0.3,3.7,0.8,4.4c0.5,0.6,1.2,1,2,1L5,4.9c1-0.3,2-0.9,3.2-1.5 c0.7-0.4,1.3-0.9,1.9-1.5l1.4-1.8l0.4-1L12-2v-0.6L11.9-3z M8.8-0.9c0,0.2-0.1,0.5-0.4,0.6C8.1-0.1,7.7,0.1,7.4,0.3 C7.2,0.4,7.2,0.5,7.2,0.6c0,0.7-0.1,1.4-0.5,2c-0.4,0.6-1,0.9-1.8,0.8c-0.4,0-0.6-0.3-0.7-0.6C4.1,2.4,4,2,4,1.5 C3.9,0.2,4-1,4.4-2.2C4.7-3,5.1-3.7,5.7-4.3C6-4.6,6.3-4.8,6.7-4.7C7-4.5,7.3-4.2,7.3-3.8c0,0.5-0.1,1-0.1,1.5 c0,0.1-0.2,0.2-0.3,0.2c-0.1,0-0.2-0.1-0.2-0.2C6.6-2.5,6.6-2.7,6.6-2.9c0-0.1-0.1-0.2-0.2-0.3c-0.1,0-0.2,0-0.3,0.1 C5.7-2.8,5.5-2.4,5.3-2C5-1,4.8,0,4.8,1.1c0,0.2,0,0.3,0.1,0.5C5,1.9,5.2,2,5.6,1.9c0.5-0.2,0.8-0.7,0.7-1.3c-0.1,0-0.2,0-0.4,0 c-0.2,0-0.3-0.1-0.3-0.3c0-0.3,0-0.6,0.1-0.9c0-0.1,0.2-0.3,0.3-0.3c0.8-0.2,1.6-0.6,2.3-0.9c0.3-0.1,0.5,0,0.5,0.3 C8.9-1.3,8.8-1.1,8.8-0.9z'
    }]
  }, {
    name: 'namedHalfCNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8.1-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M1.6,2C0.8,0.2,2.2-2.2,4.8-3.3 C4.9-3.4,5-3.4,5.2-3.4C4.3-2,4-0.5,4,1.2c0,0.7,0.2,1.3,0.5,1.9c0.3,0.5,0.7,0.7,1.2,0.7C3.8,4,2.1,3.4,1.6,2z M7.6,3.2 C7.1,3.4,6.6,3.6,6,3.7C7,3.5,7.8,2.9,8.2,2c0.2-0.4,0.2-0.8,0.1-1.2C8.3,0.6,8.1,0.5,7.9,0.7C7.8,0.8,7.7,0.8,7.7,0.9 C7.5,1.1,7.3,1.4,7,1.6C6.8,1.8,6.6,2,6.3,2.1c-0.5,0.2-1,0-1.2-0.6C5,1.2,5,0.8,4.9,0.4C5,0,5-0.4,5.1-0.8c0.2-0.6,0.3-1.2,0.7-1.8 C6-2.8,6.1-3,6.4-2.9c0.3,0.1,0.3,0.3,0.4,0.6C6.9-2,6.9-1.6,7-1.3C7-1.2,7.1-1,7.2-1c0.1,0,0.3-0.1,0.3-0.3 c0.1-0.3,0.1-0.5,0.2-0.8c0.1-0.7,0-1.3-0.4-1.8c1.6,0,3,0.6,3.5,1.8C11.6-0.3,10.2,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedHalfDNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8.1-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M5.4,2c0-0.7,0-1.5,0-2.2c0-0.5,0-1,0-1.5 c0-0.2,0-0.3,0.2-0.4c0.6-0.3,1.2-0.6,1.9-0.7C8-2.8,8.3-2.5,8.1-2C8-1.6,7.9-1.2,7.7-0.9C7.1,0.1,6.5,1,5.9,1.9 C5.8,2.1,5.6,2.1,5.4,2z M1.6,2C0.8,0.2,2.2-2.2,4.8-3.3c0.3-0.1,0.7-0.3,1-0.3C5.5-3.6,5.4-3.5,5.2-3.4C4.8-3.3,4.7-3,4.7-2.6 c0,0.8,0,1.7,0,2.5c0,0,0,0,0,0c0,0.8,0,1.7,0,2.5c0,0.3,0.1,0.7,0.2,1C4.9,3.6,5,3.7,5.2,3.8C3.5,3.8,2.1,3.2,1.6,2z M7.6,3.2 c-0.7,0.3-1.3,0.5-2,0.5c0.1,0,0.1-0.1,0.2-0.1C6,3.4,6.2,3.2,6.4,2.9C7.2,1.7,8,0.5,8.6-0.8c0.3-0.8,0.5-1.6,0.4-2.5 c0-0.1-0.1-0.3-0.1-0.4c0.9,0.3,1.7,0.8,2,1.6C11.6-0.3,10.2,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedHalfENoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8.1-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M1.6,2C0.8,0.2,2.2-2.2,4.8-3.3 c0.4-0.2,0.9-0.3,1.3-0.4C5.6-3.5,5.2-3.3,4.8-3.1C4.4-2.9,4.3-2.5,4.2-2.1c-0.1,1.5-0.1,3-0.1,4.6c0,0.3,0,0.6,0.1,1 c0,0.1,0.1,0.2,0.2,0.2c0.7,0.1,1.3,0.1,2,0C4.2,4.1,2.2,3.5,1.6,2z M7.6,3.2C7.6,3.2,7.5,3.2,7.6,3.2C7.5,3.2,7.5,3.2,7.6,3.2 C7.5,3,7.5,2.7,7.6,2.4c0-0.2-0.1-0.3-0.2-0.3c-0.3,0-0.5,0-0.8,0c-0.5,0-1,0-1.5,0.1c-0.2,0-0.3,0-0.3-0.3c0-0.2,0-0.4,0-0.5 c0-0.2,0-0.2,0.2-0.3c0.6-0.2,1.2-0.5,1.7-0.8C6.9,0.3,7,0.2,7.1,0.1c0-0.3,0-0.6,0-0.9C7.1-1,7-1,6.8-1C6.7-1,6.5-0.9,6.4-0.9 c-0.5,0.2-1,0.4-1.5,0.6c0-0.4,0.1-0.8,0.1-1.2c0-0.2,0.1-0.4,0.3-0.5c0.9-0.5,1.8-1,2.7-1.5C8-3.4,8.1-3.6,8.2-3.8 c1.2,0.2,2.2,0.8,2.6,1.7C11.6-0.3,10.2,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedHalfFNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8.1-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M1.6,2C0.8,0.2,2.2-2.2,4.8-3.3 c0.7-0.3,1.4-0.5,2.1-0.5C6.2-3.4,5.6-2.9,5-2.5C4.8-2.3,4.7-2.2,4.7-1.9c0,1.8-0.1,3.5-0.1,5.3c0,0.1,0,0.3,0.1,0.4c0,0,0,0,0,0 C3.3,3.7,2,3.1,1.6,2z M7.6,3.2C6.8,3.6,6,3.7,5.2,3.8c0,0,0,0,0.1-0.1c0-0.1,0-0.2,0-0.4c0-0.5,0-1.1,0-1.6c0-0.2,0.1-0.2,0.2-0.3 C6.1,1,6.8,0.5,7.4,0.1C7.9-0.2,8-0.7,7.9-1.2c0-0.2-0.2-0.4-0.4-0.2C6.9-1,6.3-0.6,5.7-0.2C5.6-0.2,5.5-0.1,5.4,0c0-0.4,0-0.7,0-1 c0-0.1,0.1-0.2,0.2-0.3c0.6-0.5,1.3-1,1.9-1.4C7.8-3.1,8-3.4,8-3.8c1.3,0.1,2.4,0.7,2.8,1.8C11.6-0.3,10.2,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedHalfGNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8.1-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M1.6,2C0.8,0.2,2.2-2.2,4.8-3.3 C5-3.4,5.3-3.5,5.6-3.6c-0.4,0.5-0.8,1.1-1,1.7C4.2-0.6,4.1,0.6,4.1,1.9c0,0.5,0.2,1,0.3,1.4c0.1,0.2,0.2,0.4,0.4,0.5 C3.3,3.8,2,3.1,1.6,2z M7.6,3.2C7.1,3.4,6.7,3.6,6.2,3.7C6.5,3.5,6.7,3.3,6.9,3c0.4-0.6,0.5-1.3,0.5-2c0-0.2,0.1-0.2,0.2-0.3 c0.4-0.2,0.7-0.4,1.1-0.6C8.9,0,9-0.2,9-0.5c0-0.2,0-0.5,0-0.7c0-0.4-0.2-0.5-0.5-0.3C7.8-1.1,7.1-0.8,6.2-0.5 c-0.1,0-0.3,0.2-0.3,0.3C5.8,0.1,5.8,0.4,5.8,0.7C5.8,0.9,6,1,6.2,1.1c0.1,0,0.2,0,0.4,0c0.1,0.6-0.2,1.1-0.7,1.3 c-0.4,0.1-0.6,0-0.7-0.4C5,1.8,5,1.6,5,1.4c-0.1-1,0.2-2,0.5-3C5.7-2,5.9-2.4,6.3-2.7c0.1-0.1,0.2-0.1,0.3-0.1 c0.1,0,0.2,0.2,0.2,0.3c0.1,0.2,0.1,0.4,0.1,0.5c0,0.1,0.2,0.2,0.2,0.2c0.1,0,0.2-0.1,0.3-0.2c0.1-0.5,0.2-1,0.1-1.5 c0-0.1-0.1-0.3-0.1-0.4c1.6,0,2.9,0.6,3.5,1.8C11.6-0.3,10.2,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedHalfANoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8-6.9C6-6.9,4.1-6,2.5-4.2C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.7,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M7-0.3C6.6-0.2,6.2-0.2,5.8-0.1C6.1-1,6.1-2,6.7-2.7 C6.8-1.9,6.9-1.1,7-0.3z M1.5,2C0.7,0.2,2.2-2.2,4.7-3.3c0.5-0.2,0.9-0.3,1.4-0.4C6-3.5,5.9-3.3,5.8-3C5.1-1.3,4.7,0.5,4.5,2.3 c0,0.4,0,0.9,0.1,1.4c0.5,0,0.6-0.2,0.7-0.5c0.1-0.5,0.2-0.9,0.2-1.4c0-0.1,0-0.2,0.2-0.3c0.5-0.1,0.9-0.1,1.4-0.2 c0,0.1,0,0.3,0,0.4c0.1,0.5,0.1,1.1,0.2,1.6C4.8,4.3,2.3,3.7,1.5,2z M8.1,3c0-0.2,0-0.4,0-0.6c0-0.6-0.1-1.1,0-1.7 c0-0.2,0-0.3,0-0.5C7.9-0.3,7.8-0.9,7.7-1.4C7.6-2.2,7.6-3,7.5-3.8c0,0,0,0,0-0.1c1.5,0,2.8,0.7,3.3,1.8C11.5-0.4,10.3,1.8,8.1,3z'
    }]
  }, {
    name: 'namedHalfBNoteHead',
    bounds: {
      left: 0,
      right: 12.5,
      top: -6.85,
      bottom: 6.9
    },
    svgPaths: [{
      d: 'M12-5.3c-0.4-0.6-1-1-2.1-1.4L8-6.8C6-6.9,4.1-6,2.5-4.1C0.8-2.4,0-0.4,0,1.9c0,1.5,0.4,2.8,1.2,3.6C2,6.5,3,6.9,4.3,6.9 c2.1,0,4-0.8,5.6-2.3C11.6,3,12.4,1,12.5-1.3l0-1.4C12.5-3.9,12.4-4.8,12-5.3z M5.5,2.5c-0.1,0-0.2-0.1-0.2-0.2c0-0.2,0-0.5,0-0.7 c0,0,0,0,0,0c0-0.1,0-0.2,0-0.3c0-0.7-0.1-0.5,0.5-0.9c0.4-0.2,0.8-0.4,1.3-0.4c0.7,0,1,0.3,0.8,0.9C7.7,1.9,6.4,2.7,5.5,2.5z M7.2-2.6C7-2.1,5.9-1.1,5.4-0.9c-0.1-0.5,0-1,0.5-1.3c0.3-0.2,0.7-0.5,1-0.7C7-2.9,7.1-2.9,7.3-3c0,0,0,0,0,0.1 C7.3-2.8,7.3-2.7,7.2-2.6z M1.5,2C0.7,0.2,2.2-2.2,4.7-3.3c0.4-0.2,0.8-0.3,1.2-0.4c-0.6,0.4-1,1.1-1.3,1.8c-0.1,0.4,0,0.7,0,1.1 c0,1.3,0,2.7,0,4c0,0.3,0.1,0.5,0.3,0.6C3.3,3.8,2,3.1,1.5,2z M7.6,3.2C7.4,3.3,7.3,3.3,7.1,3.4c1-0.7,1.7-1.9,1.6-3.2 C8.6-0.7,8.2-1.1,7.4-1.3c0.1-0.1,0.2-0.3,0.3-0.4C8-2.2,8.2-2.8,8.1-3.5c0-0.1-0.1-0.3-0.1-0.4c1.3,0.1,2.3,0.7,2.8,1.8 C11.6-0.3,10.1,2.1,7.6,3.2z'
    }]
  }, {
    name: 'namedWholeCNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.7-5.3c-0.4-0.6-1.2-1-2.4-1.3L9.2-6.9C6.8-6.9,4.7-6,2.9-4.2C1-2.4,0.1-0.4,0.1,1.9c0,1.5,0.5,2.8,1.4,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.3-2.3C13.2,3,14.1,1,14.2-1.3l0-1.4C14.3-3.9,14.1-4.8,13.7-5.3z M2.5,1.7 c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1C6-3.8,6.2-3.9,6.5-3.9C6.4-3.9,6.4-3.8,6.3-3.7C5.4-2.3,5.1-0.7,5.1,1 c0,0.7,0.2,1.3,0.5,1.9c0.2,0.4,0.5,0.6,0.9,0.7C4.7,3.7,3,3.1,2.5,1.7z M8.6,3C8.4,3.1,8.1,3.2,7.8,3.3C8.5,3,9,2.5,9.3,1.8 C9.5,1.4,9.5,1,9.4,0.6C9.4,0.4,9.2,0.3,9,0.5C8.9,0.6,8.8,0.6,8.8,0.7C8.6,0.9,8.4,1.2,8.1,1.4C7.9,1.6,7.7,1.8,7.4,1.9 c-0.5,0.2-1,0-1.2-0.6C6.1,1,6,0.6,6,0.2C6.1-0.2,6.1-0.6,6.2-1c0.2-0.6,0.3-1.2,0.7-1.8C7.1-3,7.2-3.2,7.5-3.1 c0.3,0.1,0.3,0.3,0.4,0.6c0.1,0.3,0.1,0.7,0.2,1c0,0.1,0.2,0.3,0.3,0.3c0.1,0,0.3-0.1,0.3-0.3C8.7-1.7,8.8-2,8.8-2.3 C8.9-3,8.8-3.6,8.3-4.2c0,0,0,0-0.1-0.1c1.7,0,3.1,0.6,3.7,1.8C12.7-0.6,11.3,1.8,8.6,3z'
    }]
  }, {
    name: 'namedWholeDNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.7-5.3c-0.4-0.6-1.2-1-2.3-1.3L9.2-6.9C6.8-6.9,4.7-6,2.9-4.2C1-2.4,0.1-0.4,0.1,1.9c0,1.5,0.5,2.8,1.3,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.4-2.3C13.2,3,14.1,1,14.2-1.3l0-1.4C14.3-3.9,14.1-4.8,13.7-5.3z M6.3,1.8 c0-0.7,0-1.5,0-2.2c0-0.5,0-1,0-1.5c0-0.2,0-0.3,0.2-0.4c0.6-0.3,1.2-0.6,1.9-0.7C8.9-3,9.2-2.7,9-2.2C8.9-1.8,8.8-1.4,8.6-1.1 C8-0.1,7.4,0.8,6.8,1.7C6.7,1.9,6.5,1.9,6.3,1.8z M2.5,1.7c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1 c0.6-0.3,1.2-0.4,1.8-0.5C7-4,6.6-3.8,6.1-3.6C5.8-3.5,5.6-3.2,5.6-2.8c0,0.8,0,1.7,0,2.5c0,0,0,0,0,0c0,0.8,0,1.7,0,2.5 c0,0.3,0.1,0.7,0.2,1c0.1,0.2,0.2,0.3,0.3,0.4C4.4,3.6,3,2.9,2.5,1.7z M8.6,3C8,3.3,7.3,3.5,6.6,3.5c0.1,0,0.1-0.1,0.2-0.1 C7,3.2,7.1,3,7.3,2.7C8.1,1.5,8.9,0.3,9.5-1C9.8-1.8,10-2.6,9.8-3.5C9.8-3.7,9.7-4,9.5-4.1c1.1,0.2,2,0.8,2.4,1.7 C12.7-0.6,11.3,1.8,8.6,3z'
    }]
  }, {
    name: 'namedWholeENoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.7-5.3c-0.4-0.6-1.2-1-2.4-1.3L9.2-6.9C6.8-6.9,4.7-6,2.9-4.2C1-2.4,0.1-0.4,0.1,1.9c0,1.5,0.5,2.8,1.4,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.3-2.3C13.2,3,14.1,1,14.2-1.3l0-1.4C14.3-3.9,14.1-4.8,13.7-5.3z M2.5,1.7 c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1c0.5-0.2,1-0.3,1.5-0.4c-0.5,0.2-1,0.5-1.4,0.7 C5.4-3.2,5.2-2.9,5.2-2.5C5.2-1,5.1,0.5,5.1,2.1c0,0.3,0,0.6,0.1,1c0,0.1,0.1,0.2,0.2,0.2c0.8,0.1,1.7,0.1,2.5,0 C5.5,4,3.2,3.4,2.5,1.7z M8.6,3C8.6,3,8.5,3,8.4,3c0,0,0.1-0.1,0.1-0.2c0-0.3,0-0.5,0-0.8c0-0.2-0.1-0.3-0.2-0.3c-0.3,0-0.5,0-0.8,0 c-0.5,0-1,0-1.5,0.1c-0.2,0-0.3,0-0.3-0.3c0-0.2,0-0.4,0-0.5c0-0.2,0-0.2,0.2-0.3C6.6,0.5,7.2,0.2,7.7,0C7.9-0.1,8-0.2,8-0.3 c0-0.3,0-0.6,0-0.9c0-0.1-0.1-0.2-0.2-0.2c-0.1,0-0.3,0.1-0.4,0.1C6.9-1,6.4-0.8,5.8-0.6c0-0.4,0.1-0.8,0.1-1.2C5.9-2,6-2.1,6.2-2.3 c0.9-0.5,1.8-1,2.7-1.5C9-3.8,9.1-4,9.2-4.2c1.3,0.2,2.3,0.8,2.7,1.8C12.7-0.6,11.3,1.8,8.6,3z'
    }]
  }, {
    name: 'namedWholeFNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.6-5.3c-0.4-0.6-1.2-1-2.3-1.3L9.1-6.9C6.8-6.9,4.7-6,2.8-4.2C1-2.4,0-0.4,0,1.9c0,1.5,0.5,2.8,1.3,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.4-2.3C13.2,3,14.1,1,14.1-1.3l0-1.4C14.2-3.9,14-4.8,13.6-5.3z M2.4,1.7 c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1C6.5-4,7.3-4.2,8.1-4.3C7.4-3.7,6.7-3.2,6-2.7C5.8-2.6,5.7-2.4,5.7-2.2 c0,1.8-0.1,3.5-0.1,5.3c0,0.1,0,0.3,0.1,0.4C4.2,3.5,2.9,2.9,2.4,1.7z M8.6,3C7.8,3.3,7,3.5,6.3,3.5c0,0,0,0,0,0c0-0.1,0-0.2,0-0.4 c0-0.5,0-1.1,0-1.6c0-0.2,0.1-0.2,0.2-0.3c0.6-0.4,1.3-0.9,1.9-1.3C9-0.4,9-0.9,9-1.4c0-0.2-0.2-0.4-0.4-0.2 C7.9-1.3,7.3-0.9,6.7-0.5C6.6-0.4,6.5-0.3,6.4-0.2c0-0.4,0-0.7,0-1c0-0.1,0.1-0.2,0.2-0.3c0.6-0.5,1.3-1,1.9-1.4 C8.9-3.3,9-3.7,9-4.1c0,0,0-0.1,0-0.1c1.3,0.1,2.4,0.8,2.9,1.8C12.7-0.6,11.2,1.8,8.6,3z'
    }]
  }, {
    name: 'namedWholeGNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.7-5.3c-0.4-0.6-1.2-1-2.4-1.3L9.2-6.9C6.8-6.9,4.7-6,2.9-4.2C1-2.4,0.1-0.4,0.1,1.9c0,1.5,0.5,2.8,1.4,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.3-2.3C13.2,3,14.1,1,14.2-1.3l0-1.4C14.3-3.9,14.1-4.8,13.7-5.3z M2.5,1.7 c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1c0.5-0.2,1-0.4,1.5-0.4c-0.6,0.6-1,1.3-1.3,2.1 C5.5-0.9,5.4,0.4,5.5,1.6c0,0.5,0.2,1,0.3,1.4c0.1,0.2,0.2,0.4,0.3,0.5C4.4,3.6,3,2.9,2.5,1.7z M8.6,3C8.3,3.1,8,3.2,7.7,3.3 C7.9,3.2,8.1,3,8.2,2.8c0.4-0.6,0.5-1.3,0.5-2c0-0.2,0.1-0.2,0.2-0.3C9.2,0.3,9.6,0.1,10-0.1c0.2-0.1,0.3-0.3,0.4-0.6 c0-0.2,0-0.5,0-0.7c0-0.4-0.2-0.5-0.5-0.3C9.1-1.4,8.4-1,7.5-0.8c-0.1,0-0.3,0.2-0.3,0.3C7.1-0.1,7.1,0.2,7.1,0.5 c0,0.2,0.1,0.3,0.3,0.3c0.1,0,0.2,0,0.4,0C8,1.4,7.7,1.9,7.1,2.1c-0.4,0.1-0.6,0-0.7-0.4c0-0.2-0.1-0.3-0.1-0.5c-0.1-1,0.2-2,0.5-3 C7-2.2,7.2-2.6,7.6-2.9C7.6-3,7.8-3,7.9-3C8-2.9,8-2.8,8.1-2.7c0.1,0.2,0.1,0.4,0.1,0.5C8.2-2.1,8.3-2,8.4-2c0.1,0,0.2-0.1,0.3-0.2 c0.1-0.5,0.2-1,0.1-1.5c0-0.2-0.1-0.4-0.3-0.6c1.6,0,2.9,0.7,3.4,1.8C12.7-0.6,11.3,1.8,8.6,3z'
    }]
  }, {
    name: 'namedWholeANoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.6-5.3c-0.4-0.6-1.2-1-2.4-1.3L9.1-6.9C6.8-6.9,4.7-6,2.8-4.2C1-2.4,0-0.4,0,1.9c0,1.5,0.5,2.8,1.4,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.3-2.3C13.1,3,14.1,1,14.1-1.3l0-1.4C14.2-3.9,14-4.8,13.6-5.3z M7.9-0.5 C7.5-0.4,7.2-0.4,6.7-0.3C7-1.2,7-2.2,7.7-2.9C7.7-2.1,7.8-1.3,7.9-0.5z M2.4,1.7c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1 c-0.5-1.8,0.9-4,3.4-5.1c0.5-0.2,1-0.4,1.5-0.5C7-3.8,6.8-3.5,6.7-3.2C6-1.5,5.6,0.3,5.4,2.2c0,0.4,0,0.9,0.1,1.4 C6,3.5,6.1,3.3,6.2,3c0.1-0.5,0.2-0.9,0.2-1.4c0-0.1,0-0.2,0.2-0.3C7.1,1.3,7.5,1.2,8,1.1c0,0.1,0,0.3,0,0.4C8.1,2,8.2,2.6,8.2,3.1 C5.7,4,3.2,3.5,2.4,1.7z M9,2.8c0-0.2,0-0.4,0-0.6c0-0.6-0.1-1.1,0-1.7C9,0.3,9,0.2,9,0C8.8-0.5,8.7-1,8.6-1.6 C8.5-2.4,8.5-3.2,8.4-4c0-0.1,0-0.2-0.1-0.2c1.6,0,3,0.6,3.5,1.8C12.6-0.7,11.3,1.6,9,2.8z'
    }]
  }, {
    name: 'namedWholeBNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M13.6-5.3c-0.4-0.6-1.2-1-2.3-1.3L9.1-6.9C6.8-6.9,4.7-6,2.8-4.2C1-2.4,0-0.4,0,1.9c0,1.5,0.5,2.8,1.3,3.6 c0.9,0.9,2,1.4,3.5,1.4c2.4,0,4.5-0.8,6.4-2.3C13.2,3,14.1,1,14.1-1.3l0-1.4C14.2-3.9,14-4.8,13.6-5.3z M6.2,2.3C6,2.3,6,2.2,6,2.1 c0-0.2,0-0.5,0-0.7c0,0,0,0,0,0c0-0.1,0-0.2,0-0.3c0-0.7-0.1-0.5,0.5-0.9c0.4-0.2,0.8-0.4,1.3-0.4c0.7,0,1,0.3,0.8,0.9 C8.3,1.7,7.1,2.5,6.2,2.3z M7.9-2.8C7.6-2.3,6.6-1.3,6-1.1C5.9-1.6,6-2,6.5-2.4c0.3-0.2,0.7-0.5,1-0.7c0.1-0.1,0.3-0.1,0.5-0.1 c0,0,0,0,0,0.1C7.9-3,7.9-2.9,7.9-2.8z M2.4,1.7c0-0.1,0-0.1-0.1-0.2c0,0,0-0.1,0-0.1c-0.5-1.8,0.9-4,3.4-5.1c0.3-0.2,0.7-0.3,1-0.4 C6.1-3.6,5.6-2.9,5.3-2.1c-0.1,0.4,0,0.8,0,1.1c0,1.3,0,2.7,0,4c0,0.3,0.1,0.4,0.2,0.5C4.1,3.4,2.9,2.8,2.4,1.7z M8.6,3 C8.2,3.2,7.8,3.3,7.4,3.4c1.2-0.6,2.1-2,1.9-3.4C9.3-0.9,8.9-1.3,8-1.5c0.1-0.1,0.2-0.3,0.3-0.4C8.6-2.4,8.9-3,8.8-3.7 c0-0.3-0.2-0.5-0.3-0.6c1.6,0,2.9,0.7,3.4,1.8C12.7-0.6,11.2,1.8,8.6,3z'
    }]
  }, {
    name: 'marcato',
    bounds: {
      left: -5,
      right: 4.8,
      top: 0,
      bottom: 14.7
    },
    svgPaths: [{
      d: 'M1.25,3.1L-1.95,0.05L-2.35,0Q-2.85,0 -3.4,1.15L-4.05,2.75L-4.05,2.95L-3.95,3.35L1.3,8.7L-3.5,10.9Q-4,11.15 -4.5,12.2Q-5,13.25 -5,13.85Q-5,14.7 -4.35,14.7L3.05,11.8L3.95,11.4L4.35,10.45L4.8,7.15L4.75,6.75L1.25,3.1'
    }]
  }, {
    name: 'staccato',
    bounds: {
      left: -1.8,
      right: 2,
      top: 0,
      bottom: 3.8
    },
    svgPaths: [{
      d: 'M2,1.85Q1.8,3.55 0.1,3.8Q-1.65,3.55 -1.8,1.85Q-1.65,0.15 0.1,0Q1.8,0.15 2,1.85'
    }]
  }, {
    name: 'closed',
    bounds: {
      left: -6.7,
      right: 6.95,
      top: 0,
      bottom: 16.3
    },
    svgPaths: [{
      d: 'M0.35,0.25L-0.25,0.6Q-0.55,1.4 -0.55,3.05L-0.5,6.35L-3.45,6.6L-6.1,6.85Q-6.35,6.9 -6.55,7.5L-6.7,8.3L-6.2,9.7Q-5.85,10.3 -3.95,10.3L-0.4,10.15L-0.25,13.15Q-0.2,15 0.2,16.1L0.4,16.3Q0.85,16.3 1.05,15.15L1.25,11.65L1.25,10.05L6.3,9.6Q6.9,9.55 6.95,8.85L6.45,7.4Q5.65,6.75 3.95,6.55L1.2,6.3L1.05,1.85L1.15,0.9Q1.15,0.25 0.35,0.25'
    }]
  }, {
    name: 'tenuto',
    bounds: {
      left: -7.2,
      right: 7.2,
      top: 0,
      bottom: 3.85
    },
    svgPaths: [{
      d: 'M6.25,0.15L-5.75,0Q-6.35,0 -6.55,0.3L-6.95,1.7L-7.2,3.25Q-7.2,3.75 -6.65,3.85L-1.2,3.85L6.65,3.6Q7.2,2.75 7.2,1.8L7.2,1.4Q7.2,0.15 6.25,0.15'
    }]
  }, {
    name: 'martellatoBelow',
    bounds: {
      left: -3.8,
      right: 5.7,
      top: -0.35,
      bottom: 17.25
    },
    svgPaths: [{
      d: 'M5.25,-0.35Q5,-0.35 4.8,-0.1L-0.45,11.05L-1.75,2.55Q-2,0.65 -2.85,0.65L-3.5,1.3L-3.8,2.3L-3.75,2.85L-3.6,3.45L-1.5,16.3Q-1.35,17.25 -0.9,17.25Q0.05,17.25 0.25,16L0.6,14.05L3.15,7.4L5.5,1.15L5.7,0.25Q5.7,-0.35 5.25,-0.35'
    }]
  }, {
    name: 'martellatoStaccatoBelow',
    bounds: {
      left: -4.8,
      right: 4.95,
      top: -0.6,
      bottom: 22
    },
    svgPaths: [{
      d: 'M-4.8,6.75L-2.4,21.05Q-2.25,22 -1.7,22Q-0.9,22 -0.65,20.7L-0.25,18.75Q0.3,16.85 2.35,11.95L4.05,8.4Q4.7,7 4.95,4.55Q4.95,4 4.5,4Q4.25,4 4,4.25L-1.35,15.65L-2.1,10.35Q-2.65,6.45 -3.05,5.5Q-3.3,4.95 -3.8,4.95Q-4.1,4.95 -4.5,5.7L-4.8,6.75M-1.05,3.75Q-0.6,4.5 0.3,4.8Q0.9,4.75 1.15,4.15L1.45,2.4Q1.45,0.9 1.05,0.15Q0.6,-0.6 -0.25,-0.6Q-0.9,-0.6 -1.25,0.3L-1.5,1.75Q-1.5,2.95 -1.05,3.75'
    }]
  }, {
    name: 'open',
    bounds: {
      left: -5.35,
      right: 4.2,
      top: 0,
      bottom: 14.75
    },
    svgPaths: [{
      d: 'M4.2,5.75Q4.2,3.7 3.65,2.15Q3.25,1.1 2.6,0.6Q1.95,0.05 1.05,0.05Q-0.7,0.05 -2.5,1.45L-3.95,2.9L-4.85,4.5Q-5.35,6.1 -5.35,8.55L-5.15,11.2L-4.4,13Q-3.9,13.7 -2.7,14.2Q-1.45,14.75 -0.6,14.75Q0.65,14.75 1.6,13.9Q2.55,13.05 3.25,11.35L3.95,8.7L4.2,5.75M1.45,8.5Q0.85,9.65 -0.4,10.1L-1.7,9.95L-2.7,9.1L-3.05,8.3Q-3.05,7.1 -2.25,6.2Q-1.45,5.25 0.15,4.5L0.55,4.5Q2.05,4.5 2.05,5.4Q2.05,7.3 1.45,8.5'
    }]
  }, {
    name: 'staccatissimoBelow',
    bounds: {
      left: -2.5,
      right: 2.8,
      top: 0,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M0.1,0L-2.5,6.5L2.8,6.5L0.1,0'
    }]
  }, {
    name: 'staccatissimoAbove',
    bounds: {
      left: -2.5,
      right: 2.8,
      top: 0,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M0.1,6.5L-2.5,0L2.8,0L0.1,6.5'
    }]
  }, {
    name: 'martellatoAbove',
    bounds: {
      left: -6.5,
      right: 3.8,
      top: -0.05,
      bottom: 17.65
    },
    svgPaths: [{
      d: 'M2.25,16.1L2.7,16.2Q3.2,15.95 3.45,15.2L3.8,13.9Q3.8,13 2.45,6.85L0.85,0.1L0.25,-0.05L-0.3,0.1L-3.2,7.05L-6.2,14.85L-6.5,16.65L-6.5,17.25L-6.2,17.65L-5.8,17.5Q-4.45,15 -3.25,11.7L-0.6,5L-0.5,5L0.75,10.9Q1.4,14 2.25,16.1'
    }]
  }, {
    name: 'martellatoStaccatoAbove',
    bounds: {
      left: -6.9,
      right: 4.35,
      top: -0.15,
      bottom: 19.5
    },
    svgPaths: [{
      d: 'M0.1,-0.15L-0.85,0.7L-5.25,9.95L-6.25,12.2Q-6.85,13.65 -6.9,14.55Q-6.5,15.4 -5.55,15.05L-5.05,14.3L-2.7,9.15L-0.5,4.65L-0.35,4.5L-0.15,4.65L0.9,8.8L2.35,13.8L2.7,14.15L3.15,14.25Q4.3,14.1 4.35,13.15Q4.05,9.4 3.2,6.15Q1.8,0.7 0.45,-0.1L0.1,-0.15M-1.35,19.5Q-0.2,19.5 0.15,18.35L0.35,16.15L-0.05,14.2L-0.7,14.05Q-1.35,14.05 -2.05,14.7Q-2.7,15.7 -2.7,17.3L-2.4,18.65Q-2.05,19.5 -1.35,19.5'
    }]
  }, {
    name: 'tuplet0',
    bounds: {
      left: 0,
      right: 8.35,
      top: -8.2,
      bottom: 8.25
    },
    svgPaths: [{
      d: 'M6.25,-2.55L6.75,0.6Q6.75,2 5.95,3.15Q5.25,4.35 4,4.95L3.35,4.95Q2.7,4.95 2.05,3.8Q1.55,2.95 1.55,2.1L1.55,1.05Q1.55,-0.6 2.45,-2.65Q3.05,-3.9 3.65,-4.5Q4.3,-5.15 5.05,-5.15Q5.7,-5.15 6.25,-2.55M3.1,-7.15Q2.1,-6.1 1.3,-3.9Q0.65,-2.2 0.3,-0.6Q0,0.95 0,2.35Q0,4.4 0.45,5.7Q0.95,7.05 1.9,7.75Q2.65,8.25 3.35,8.25Q4.4,8.25 5.3,7.5Q6.25,6.75 7.05,5.2L8,2.65L8.35,0.15L7.9,-3.7Q7.45,-6.5 6.85,-7.35Q6.25,-8.2 5.25,-8.2Q4.1,-8.2 3.1,-7.15'
    }]
  }, {
    name: 'tuplet1',
    bounds: {
      left: 0,
      right: 1.95,
      top: -8.2,
      bottom: 8.25
    },
    svgPaths: [{
      d: 'M0.3,-2.1L0.05,8.1L0.6,8.25Q0.85,8.15 1.05,8Q1.5,7.15 1.5,6.3L1.95,-5.85L1.65,-7.95L1.15,-8.2L0.65,-8.15Q0,-7.35 0,-6.5L0.05,-5.85L0.2,-5.2L0.3,-2.1'
    }]
  }, {
    name: 'tuplet2',
    bounds: {
      left: 0,
      right: 7.6,
      top: -8.15,
      bottom: 8.2
    },
    svgPaths: [{
      d: 'M6.65,-8.15Q5.8,-8.15 4.35,-7.2L2.45,-5.65L1.1,-3.95L0.3,-2.15Q0,-1.2 0,-0.2Q0,0.95 0.9,0.95Q1.65,0.95 2.1,-0.3L2.75,-2.95L4.15,-4.2L5.65,-5.15L5.85,-5.1L6,-4.85L2.15,3.05Q1.45,4.55 1.1,6.9Q1.1,7.55 1.5,7.9L2.6,8.2L5.05,7.8Q7,7.35 7.25,7.05L7.35,6.65L7.35,4.9L7.35,4.55L7.2,4.4L7,4.35L5,4.75L3,5.2L2.8,5.15L6.75,-2.9Q7.6,-4.6 7.6,-6.3L7.35,-7.7L6.65,-8.15'
    }]
  }, {
    name: 'tuplet3',
    bounds: {
      left: 0,
      right: 7.35,
      top: -8.6,
      bottom: 7.65
    },
    svgPaths: [{
      d: 'M6.75,-8.6L7,-8.45Q7.4,-7.85 7.35,-6.85Q7.4,-5.85 6.6,-4.2L5.85,-2.6L6.55,-1.85Q7.2,-1.25 7.2,-0.25Q7.15,2.15 5.4,4.8Q3.35,7.7 1.05,7.65Q0.65,7.7 0.25,7.4L0.15,7.25L0.05,6.2Q0.05,4.55 1.05,3.65L1.2,3.55L1.55,3.7L1.7,4.05L1.75,4.65L1.9,4.8L2.1,4.8L4.3,3.55Q5.45,2.5 5.45,1.4L5.4,0.9L5.15,0.65Q4.8,0.35 4.25,0.4Q3.8,0.4 3.2,0.85L2.3,1.5L1.95,1.45L1.75,1.25L1.7,0.9Q1.7,-0.45 3.3,-2.35L5.65,-5.35L5.65,-5.55L5.45,-5.6Q4.45,-5.45 2.85,-4.2L0.45,-2.25L0.25,-2.15L0.15,-2.25Q0,-2.45 0,-2.85Q0.05,-4.5 2.35,-6.6Q4.65,-8.6 6.4,-8.6L6.75,-8.6'
    }]
  }, {
    name: 'tuplet4',
    bounds: {
      left: 0,
      right: 9.05,
      top: -8.2,
      bottom: 8.2
    },
    svgPaths: [{
      d: 'M4.25,-5.5Q2.9,-2.7 0.95,0.55Q0,2.1 0,3.1Q0,3.7 0.4,3.95L1.5,4.25L4.75,3.85Q4.5,5.55 4.5,7.6Q4.5,8.2 5.15,8.2L5.4,8.15Q5.7,7.45 5.8,5.9L6,3.55Q8.15,3.05 8.9,2.55L9.05,1.85L8.95,0.6L8.8,0.15L6.15,0.85L6.6,-7.9L6.55,-8.1L6.2,-8.2L5.35,-7.5L4.25,-5.5M2.5,1.5L2.25,1.45L5.2,-4.05L4.9,1.1L2.5,1.5'
    }]
  }, {
    name: 'tuplet5',
    bounds: {
      left: 0,
      right: 10.25,
      top: -8.3,
      bottom: 8.35
    },
    svgPaths: [{
      d: 'M2.6,-4.45L1.5,-3.25Q0.3,0.05 0.3,1.25Q0.3,1.7 0.6,1.85L0.85,1.9L2.45,1.5Q3.55,1.5 4.4,2.15Q5.25,2.95 5.25,4L4.9,4.95L3.9,5.25L1.15,4.8L0.5,4.55L0.35,4.7Q0,5.3 0,6.3Q0,6.95 0.45,7.45L1.75,8.2L3.25,8.35L4.6,8.2Q5.7,7.55 6.3,6Q6.8,4.7 6.8,3.2Q6.8,1.5 6.35,0.4Q5.9,-0.7 4.95,-1.2L3.25,-1.65L3.25,-1.8Q3.85,-2.45 6.9,-4.2Q9.9,-5.95 10.15,-6.4L10.25,-7.2Q10.25,-7.9 9.85,-8.25L9.65,-8.3L7.95,-7.7L2.6,-4.45'
    }]
  }, {
    name: 'tuplet6',
    bounds: {
      left: 0,
      right: 8.85,
      top: -8.45,
      bottom: 8.45
    },
    svgPaths: [{
      d: 'M6.85,-8.2L6.7,-8.4L6.35,-8.45Q5.55,-8.15 4.75,-7.1Q3.9,-6 3.05,-4.15L1.05,1.3Q0,4.55 0,5.7Q0,7.1 0.7,7.8Q1.4,8.45 2.75,8.45Q3.85,8.45 4.9,7.8L6.95,5.9L8.4,3.5L8.85,1.2L8.6,-0.25Q8.25,-1.1 7.65,-1.1L6.25,-0.7L4.65,0.45Q3.25,1.8 2.5,3.15L1.8,4.5L1.65,4.6L1.55,4.5L1.5,4.3L2.1,1.35Q2.5,-0.1 3.4,-2.05Q4.5,-4.4 5.35,-5.1L6.2,-5.65L6.7,-6.45L7,-7.35L6.85,-8.2M5.5,4.6Q4.35,5.45 3.05,5.55L2.9,5.5L2.8,5.35Q3.5,4.15 4.35,3.2Q5.55,1.85 6.35,1.85L6.9,1.95L7.15,2.65Q6.85,3.65 5.5,4.6'
    }]
  }, {
    name: 'tuplet7',
    bounds: {
      left: 0,
      right: 10.55,
      top: -8.45,
      bottom: 8.45
    },
    svgPaths: [{
      d: 'M8.05,-8.3L2.5,-6.45Q1.65,-6.2 1.2,-5.15L0.45,-3.45Q0,-2.4 0,-1.7Q0,-0.4 0.7,-0.4Q1.3,-0.4 2.25,-1.75L3.9,-3.45Q6.9,-4.8 7.85,-4.85L8.1,-4.65L8.25,-4.35L4.75,4.2Q3.65,6.8 3.65,7.7L3.9,8.4L4.1,8.45L4.3,8.45Q4.85,8.4 5.05,7.8L5.3,6.9L9.85,-3.75Q10.55,-5.35 10.55,-6.75L10.25,-7.9L9.25,-8.45L8.05,-8.3'
    }]
  }, {
    name: 'tuplet8',
    bounds: {
      left: 0,
      right: 9.2,
      top: -8.4,
      bottom: 8.45
    },
    svgPaths: [{
      d: 'M6.15,-8.4L4.55,-8.1Q3.75,-7.75 3,-7.1Q1.7,-5.95 1.05,-4.45Q0.6,-3.4 0.6,-2.3L0.8,-0.85L1.15,-0.15L1.95,0.25L1.9,0.35Q0.95,1.6 0.5,2.75Q0,3.9 0,4.95Q0,6.7 0.45,7.6Q0.9,8.45 1.8,8.45L3.25,8.1L5.1,7.15L6.7,5.7L8.05,3.85L9.15,1.55L9.2,0.45Q9.2,-1.2 8.8,-1.8Q8.2,-2.5 6.55,-2.5L7.25,-3.75L7.45,-5.9Q7.45,-8.35 6.85,-8.3L6.15,-8.4M3.75,-4.65Q4.45,-5.3 5.35,-5.5L5.65,-5.55L5.75,-5.45L5.75,-5.3L4.55,-3.65Q3.75,-3 2.45,-2.7Q3,-3.95 3.75,-4.65M7.5,0.35L7.55,0.45L5.5,3.55L4.3,4.65L3.05,5.35L1.75,5.75Q1.55,5.8 1.5,5.65L1.5,5.25L1.8,4.45Q2.4,3.25 3.3,2.25Q4.25,1.3 5.55,0.6L6.25,0.25L7.5,0.35'
    }]
  }, {
    name: 'tuplet9',
    bounds: {
      left: 0,
      right: 7.4,
      top: -8.25,
      bottom: 8.3
    },
    svgPaths: [{
      d: 'M6.05,-8.25Q5.15,-8.25 4.1,-7.4Q2.65,-6.25 1.7,-4.7Q0.75,-3.15 0.35,-1.3L0,0.25Q0,1.35 0.9,1.65L1.95,1.55L4.7,-0.5L4.6,-0.25L1.9,6.65L1.75,7.65L1.75,8.1L1.95,8.3L2.25,8.25L2.45,7.85L6.8,-2.7L7.4,-6.05Q7.4,-7.15 7.05,-7.7Q6.75,-8.25 6.05,-8.25M4.45,-5.25L5.5,-5.55L5.65,-5.4L5.8,-4.65L5.35,-3.65L2.7,-1.45L2.05,-1.15L1.85,-1.15L1.75,-1.3L1.65,-1.4Q1.65,-2.35 2.65,-3.6Q3.45,-4.7 4.45,-5.25'
    }]
  }, {
    name: 'hollowMiscNoteHead',
    bounds: {
      left: -0.3,
      right: 10.9,
      top: -10.8,
      bottom: 8.4
    },
    svgPaths: [{
      d: 'M8.25,-1L6.45,1.8L4.45,4.45L3,1.65Q1.95,-0.65 1.95,-1.05Q1.95,-1.95 5.6,-6.4L5.8,-6.45L8.25,-1M0.15,-0.7L-0.3,1.6L3,8.2L3.35,8.4L3.7,8.3L7.25,3.45L10.9,-1.95L7.6,-10.45Q7.4,-10.8 7,-10.8L6.5,-10.55L1.5,-3.2Q0.6,-1.9 0.15,-0.7'
    }]
  }, {
    name: 'downBow',
    bounds: {
      left: -7.15,
      right: 8.55,
      top: -0.35,
      bottom: 18.6
    },
    svgPaths: [{
      d: 'M5.8,17.2Q5.8,18.6 6.3,18.6L6.6,18.5Q7.4,15.4 7.55,12.8L7.8,6.85L8.45,3.7L8.3,2.6L8.55,1Q8.55,-0.35 7.95,-0.35L-2.95,0.35L-4.7,0.15L-5.6,0.35Q-6.3,1.5 -6.3,2.55L-5.8,4.65L-6.55,11.65Q-7.15,15.5 -7.15,17.85Q-7.15,18.6 -6.7,18.6L-6.55,18.6Q-5.95,17.9 -5.8,17L-4.8,7.15Q0.55,7.3 6.4,6.1L5.8,17.2'
    }]
  }, {
    name: 'upBow',
    bounds: {
      left: -3.65,
      right: 5.85,
      top: 0,
      bottom: 17.6
    },
    svgPaths: [{
      d: 'M5.4,0Q5.15,0 4.95,0.25L-0.3,11.4L-1.6,2.9Q-1.85,1 -2.7,1L-3.35,1.65L-3.65,2.65L-3.6,3.2L-3.45,3.8L-1.35,16.65Q-1.2,17.6 -0.75,17.6Q0.2,17.6 0.4,16.35L0.75,14.4L3.3,7.75L5.65,1.5L5.85,0.6Q5.85,0 5.4,0'
    }]
  }, {
    name: 'bendJazz',
    bounds: {
      left: -2.98,
      right: 21.42,
      top: 19,
      bottom: 30.68
    },
    svgPaths: [{
      d: 'M-8.47345,0.5940603Q-5.5878281075,4.99563715 -0.7834364699999998,7.0413986Q3.2883779674999993,8.4320562 6.9232906,6.110419Q10.320623625,3.7157501675 12.438914,0.11234973Q13.686661,0.08259433249999998 13.380126,1.9210999Q12.869485249999997,3.27721275 11.951734,4.436489Q8.1824022,10.098975274999999 1.6203971,11.543306Q-4.099513750000001,12.172615875 -8.5394899,8.4323575Q-9.8461565,7.3704509 -10.971531,6.1175742Q-10.605494250000001,4.418329175 -10.381323,3.0020634999999998Q-9.29091755,1.8372932024999997 -9.7419568,0.7247762899999999Q-8.739827950000002,0.4606732149999999 -8.47345,0.5940602999999999z'
    }]
  }, {
    name: 'twoHundredFiftySixthRest',
    bounds: {
      left: -2.55,
      right: 14.4,
      top: -26.75,
      bottom: 27.4
    },
    svgPaths: [{
      d: 'M5.95,-26.35L5.5,-26.75L5.25,-26.7Q4.05,-26.1 3.3,-23.6Q2.55,-21.25 2.7,-19.9L2.75,-19.5Q2.15,-19.2 1.5,-18.05L0.45,-16.15Q-0.1,-15.1 -0.05,-14.5L0,-14.2Q0,-13.5 0.25,-12.85Q0.5,-12.3 0.9,-11.9Q0.25,-11.7 -0.45,-9.75Q-1,-7.9 -0.95,-7L-0.65,-6.45L0.15,-5.6L-0.25,-4.7L-0.45,-4.4Q-0.95,-3.65 -1.35,-1.8L-1.55,0.6L-1.25,1.85L-0.75,2.7L-0.8,3.15Q-1.4,4.3 -1.7,5.7L-1.9,8.15L-1.7,9.05L-1.25,9.8Q-2,10.85 -2.3,12.05L-2.55,14.65L-2.25,16.65Q-1.9,17.7 -0.95,18.05L1.1,18.25L2.65,18.15L2.85,24.85L2.95,26.35L3.3,27.1L3.8,27.4Q4.45,27.4 5.25,25.9L6.05,23.95L5.4,23.2Q4.8,22.75 4.8,22.3L4.85,19.1L5,14L5.45,7.35L7.4,-4.35L8.8,-10.25L10.3,-15.1L11.35,-18.35L12.95,-21.7L14.35,-24.9L14.4,-25.05L14.4,-25.85L14.25,-26.3L13.95,-26.55L13.5,-26.55L13.05,-26.5L12.9,-26.4Q11.65,-24.75 9.7,-23.45Q8.15,-22.45 7.05,-22.3L6,-22.45Q5.7,-22.65 5.6,-23.2L5.75,-24.9L5.95,-26.35M3.65,-16.1Q3.6,-17.15 3.8,-17.5L3.95,-17.4Q4.65,-16.9 6.1,-17.05L8.05,-17.55L8.4,-17.65L6.7,-15.7Q5.3,-14.9 4.25,-15.2Q3.5,-15.45 3.65,-16.1M7.75,-11.8L7.1,-9.75Q5.6,-9 4.75,-9Q3.95,-9 3.65,-9.35Q3.3,-9.7 3.3,-10.3L3.45,-11.15L4,-11.15L6,-11.4L7.75,-11.8M1.9,-4.15L3.3,-3.85L5.65,-4.2L5,-2L3.85,-1.65L3,-1.55Q2.15,-1.55 1.8,-1.9Q1.55,-2.25 1.55,-2.75L1.7,-3.7L1.9,-4.15M1.65,3.5L3.45,3.25L2.95,5.85L1.9,6.1Q1.35,6.1 1.1,5.7L0.9,4.8L1,3.9L1.1,3.45L1.4,3.5L1.65,3.5M2.5,11L2.3,12.4L2.25,13.4L1.1,13.55Q0.4,13.55 -0.1,13.15L-0.45,12.15L-0.1,11L-0.1,10.8L-0.1,10.55L1.1,10.85L2.5,11'
    }]
  }, {
    name: 'twoHundredFiftySixthFlagDown',
    bounds: {
      left: 0,
      right: 15.7,
      top: -33.4,
      bottom: 35.05
    },
    svgPaths: [{
      d: 'M12.25,-31.95Q12.25,-30.7 12.7,-29.1L13.15,-26.2L13.1,-25.3L12.9,-25.4Q12.25,-25.25 12.25,-23.95L12.35,-22.75Q11.5,-20.8 9.7,-19L3.35,-13.15Q0,-9.95 0,-7.4L0.05,0.15L0,0.6L0.05,8.15L0,8.6L0.05,16.15L0,16.6L0.05,24.15L0,24.6L0.05,32.15L0,32.6L0.05,33.85L0.1,33.85Q0.25,35.05 0.95,35.05L1.6,34.8Q2.85,33.2 7.4,28.75Q11.6,24.8 13.15,22.45Q15.7,18.7 15.7,14.85Q15.7,13.05 15.1,10.55Q15.7,8.75 15.7,6.85Q15.7,5.05 15.1,2.55Q15.7,0.75 15.7,-1.15Q15.7,-2.95 15.1,-5.45Q15.7,-7.25 15.7,-9.15Q15.7,-10.95 15.1,-13.45Q15.7,-15.25 15.7,-17.15Q15.7,-18.95 15.1,-21.45Q15.7,-23.25 15.7,-25.15Q15.7,-27.2 15.05,-29.75Q14.15,-33.15 12.9,-33.4Q12.25,-33.25 12.25,-31.95M12.25,-15.95L12.35,-14.75Q11.5,-12.8 9.7,-11L3.35,-5.15L2.05,-3.75L2.05,-5.7L7.4,-11.25Q10.75,-14.4 12.3,-16.4L12.25,-15.95M13.1,-1.3L13,-1.35L13.1,-1.45L13.1,-1.3M12.35,-6.75Q11.5,-4.8 9.7,-3L3.35,2.85L2.05,4.25L2.05,2.3Q3.45,0.65 7.4,-3.25Q10.75,-6.4 12.3,-8.4L12.25,-7.95L12.35,-6.75M12.25,8.05L12.35,9.25Q11.5,11.2 9.7,13L3.35,18.85L2.05,20.25L2.05,18.3Q3.45,16.65 7.4,12.75L12.3,7.6L12.25,8.05M12.35,1.25Q11.5,3.2 9.7,5L3.35,10.85L2.05,12.25L2.05,10.3Q3.45,8.65 7.4,4.75L12.3,-0.4L12.25,0.05L12.35,1.25M9.7,21L3.35,26.85L2.05,28.25L2.05,26.3Q3.45,24.65 7.4,20.75Q11.65,16.65 13.1,14.55Q12.8,17.9 9.7,21'
    }]
  }, {
    name: 'twoHundredFiftySixthFlagUp',
    bounds: {
      left: -2,
      right: 10.85,
      top: -35,
      bottom: 40.95
    },
    svgPaths: [{
      d: 'M0,-28.45L4.7,-22.5Q6.5,-20.25 7.3,-18.05Q7.85,-16.6 8.05,-14.85Q6.95,-16.85 4.9,-19.45L0,-25.6L0,-28.45M4.7,-13.5Q6.5,-11.25 7.3,-9.05L7.6,-8.1L7.35,-7.05L4.9,-10.45L0,-16.6L0,-19.45L4.7,-13.5M4.7,-4.5Q6.5,-2.25 7.3,-0.05L7.6,0.9L7.35,1.95L4.9,-1.45L0,-7.6L0,-10.45L4.7,-4.5M10.75,-11.65L10.85,-13.8Q10.85,-17.95 9.1,-21.75Q7.65,-25 4.9,-28.45L-0.2,-34.85L-0.9,-35Q-2,-35 -2,-32.85L-2,12.65L-1.95,12.65L-1.05,14.7L0.75,17.2L4.7,22.1Q6.5,24.4 7.3,26.55L7.65,27.65Q7.05,29.85 7.05,31L7.1,31.55L7.35,32L7.85,32.3L8.2,32L8.25,32.9L7.65,36.3Q7.05,38.55 7.05,39.7L7.1,40.25L7.35,40.7L7.85,40.95Q8.85,40.65 9.8,37.35L10.75,33L10.85,30.85Q10.85,28.55 10.35,26.55L10.75,24.3L10.85,22.2Q10.85,19.85 10.35,17.7L10.75,15.35L10.85,13.2Q10.85,10.8 10.35,8.75L10.75,6.35L10.85,4.2Q10.85,1.8 10.35,-0.25L10.75,-2.65L10.85,-4.8Q10.85,-7.2 10.35,-9.25L10.75,-11.65M0,1.4L0,-1.45L4.7,4.5Q6.5,6.75 7.3,8.95L7.6,9.9L7.35,10.95L4.9,7.5L0,1.4M0,7.5L4.7,13.45Q6.5,15.7 7.3,17.9L7.6,18.85L7.4,19.7L4.9,16.2L0,10.05L0,7.5'
    }]
  }, {
    name: 'wholeTempo',
    bounds: {
      left: 0,
      right: 8.95,
      top: 0,
      bottom: 23.15
    },
    svgPaths: [{
      d: 'M8.25,14.3L7.35,13.55L6.15,13.3L4.95,13.5Q4.35,13.7 3.7,14.05L2.15,15.2Q1.45,15.85 1,16.65Q0,18.3 0,20.25Q0,20.95 0.15,21.5L0.55,22.4L1.2,22.95L2.15,23.15L3.75,22.9L5.25,22.25L6.6,21.2L7.85,19.65L8.7,18.05L8.95,16.55L8.8,15.3L8.25,14.3M6.95,16.15Q7.45,16.45 7.45,16.9L7,18L5.7,19.15L4.15,20L2.9,20.3Q1.5,20.3 1.5,19.55Q1.5,18.95 1.9,18.3Q2.3,17.7 3.2,17.05L4.7,16.2L6.1,15.9L6.95,16.15'
    }]
  }, {
    name: 'wholeDotTempo',
    bounds: {
      left: 0,
      right: 11.8,
      top: 0,
      bottom: 22.85
    },
    svgPaths: [{
      d: 'M8.25,14L7.35,13.25L6.15,13L4.95,13.2Q4.35,13.4 3.7,13.75L2.15,14.9Q1.45,15.55 1,16.35Q0,18 0,19.95Q0,20.65 0.15,21.2L0.55,22.1L1.2,22.65L2.15,22.85L3.75,22.6L5.25,21.95L6.6,20.9L7.85,19.35L8.7,17.75L8.95,16.25L8.8,15L8.25,14M7.45,16.6L7,17.7L5.7,18.85L4.15,19.7L2.9,20Q1.5,20 1.5,19.25Q1.5,18.65 1.9,18Q2.3,17.4 3.2,16.75L4.7,15.9L6.1,15.6L6.95,15.85Q7.45,16.15 7.45,16.6M9.2,21.55L9.8,22.15L10.7,22.35L11.45,21.85L11.75,20.35L11.8,19.7L11.2,19.15L10.3,18.95Q9.55,18.95 9.55,19.3L9.2,21.55'
    }]
  }, {
    name: 'halfTempo',
    bounds: {
      left: 0,
      right: 7.75,
      top: 0,
      bottom: 22.85
    },
    svgPaths: [{
      d: 'M6.65,1.25L6.65,11.5L6.55,12.85L5.85,12.65L4.7,12.85Q4.15,13 3.65,13.3Q2.6,13.95 1.65,15.2Q0.85,16.35 0.4,17.55Q0,18.75 0,20Q0,21.1 0.45,21.85Q1,22.85 2,22.85Q2.7,22.85 3.45,22.3L5.05,20.55L6.2,18.75L7.05,17L7.45,15.45L7.6,13.95L7.75,0.35L7.7,0.05L7.3,0Q7,0 6.85,0.3L6.65,1.25M5.6,16.7L4.55,18.25L3.15,19.65Q2.55,20.15 2,20.15Q1.35,20.15 1.35,19.35Q1.35,18.75 1.7,18.1Q2.05,17.4 2.8,16.65L4.2,15.55Q4.85,15.15 5.5,15.15L6.15,15.35L5.6,16.7'
    }]
  }, {
    name: 'halfDotTempo',
    bounds: {
      left: 0,
      right: 9.6,
      top: 0,
      bottom: 22.85
    },
    svgPaths: [{
      d: 'M7.7,0Q7.4,0 7.25,0.3Q7.05,0.6 7.05,1.25L7.05,11.5L6.95,12.85L6.25,12.65L5.1,12.85Q4.55,13 4.05,13.3Q3,13.95 2.05,15.2Q1.25,16.35 0.8,17.55Q0.4,18.75 0.4,20Q0.4,21.1 0.85,21.85Q1.4,22.85 2.4,22.85Q3.1,22.85 3.85,22.3L5.45,20.55L6.6,18.75L7.45,17L7.85,15.45L8,13.95L8.15,0.35L8.1,0.05L7.7,0M6.55,15.35L6,16.7L4.95,18.25L3.55,19.65L2.4,20.15Q1.75,20.15 1.75,19.35Q1.75,18.75 2.1,18.1L3.2,16.65Q3.95,15.9 4.6,15.55L5.9,15.15L6.55,15.35M8.1,18.8Q7.35,18.8 7.35,19.15L7,21.4L7.6,22L8.5,22.2L9.25,21.7L9.55,20.2L9.6,19.55L9,19L8.1,18.8'
    }]
  }, {
    name: 'quarterTempo',
    bounds: {
      left: 0,
      right: 6.1,
      top: 0,
      bottom: 22.2
    },
    svgPaths: [{
      d: 'M5.05,2.45L5,14.9L3.05,15.25Q2.15,15.6 1.45,16.3Q0.7,16.95 0.35,17.85Q0,18.75 0,19.8Q0,21.05 0.4,21.65Q0.85,22.2 1.7,22.2L2.8,21.95L4.1,21.1L5.25,19.65L5.9,17.45L6.1,13.25L6,2.8Q6,2.3 5.55,2.3L5.05,2.45'
    }]
  }, {
    name: 'quarterDotTempo',
    bounds: {
      left: 0,
      right: 9.9,
      top: 0,
      bottom: 21.95
    },
    svgPaths: [{
      d: 'M6.25,2.2L6.2,14.65L4.25,15Q3.35,15.35 2.65,16.05Q1.9,16.7 1.55,17.6Q1.2,18.5 1.2,19.55Q1.2,20.8 1.6,21.4Q2.05,21.95 2.9,21.95L4,21.7L5.3,20.85L6.45,19.4L7.1,17.2L7.3,13L7.2,2.55Q7.2,2.05 6.75,2.05L6.25,2.2M7.9,21.75L8.8,21.95L9.55,21.45L9.85,19.95L9.9,19.3L9.3,18.75L8.4,18.55Q7.65,18.55 7.65,18.9L7.3,21.15L7.9,21.75'
    }]
  }, {
    name: 'eighthTempo',
    bounds: {
      left: 0,
      right: 12.35,
      top: -5,
      bottom: 21.05
    },
    svgPaths: [{
      d: 'M4.95,-2.6L4.95,13.1L4.45,13.15L3,13.3Q2.25,13.55 1.65,14Q1.1,14.4 0.75,15.05Q0.4,15.7 0.2,16.5L0,18.35Q0,19.5 0.5,20.2L1.25,20.85L2.2,21.05L3.3,20.9L4.2,20.4L5.65,18.45L6.3,16.35L6.55,13.9L6.35,13.2L6.25,12.5L6.35,0.5L9.65,4.15L10.75,6.35Q11.1,7.55 11.1,8.8L10.4,12.7Q9.75,15.3 9.75,16.65L9.9,16.85L10,16.75Q10.6,16.35 11,15.4L11.8,13.05L12.35,8.8L12.1,6.25L11.5,4.1L10.55,2.15L9,0.05L7.95,-1.15L7.1,-2.35L6.8,-3.9Q6.6,-5 6.1,-5L5.75,-4.9L5.25,-3.75L4.95,-2.6'
    }]
  }, {
    name: 'eighthDotTempo',
    bounds: {
      left: 0,
      right: 14.7,
      top: -4.5,
      bottom: 21.55
    },
    svgPaths: [{
      d: 'M9.15,-3.4Q8.95,-4.5 8.45,-4.5L8.1,-4.4L7.6,-3.25L7.3,-2.1L7.3,13.6L6.8,13.65L5.35,13.8L4,14.5L3.1,15.55Q2.75,16.2 2.55,17L2.35,18.85Q2.35,20 2.85,20.7L3.6,21.35L4.55,21.55L5.65,21.4L6.55,20.9Q7.3,20.3 7.85,19.25L8,18.95L8.25,18.4L8.65,16.85L8.9,14.4L8.7,13.7L8.6,13L8.7,1L12,4.65L13.1,6.85Q13.45,8.05 13.45,9.3L12.75,13.2Q12.1,15.8 12.1,17.15Q12.1,17.35 12.25,17.35L12.35,17.25Q12.95,16.85 13.35,15.9L14.15,13.55L14.7,9.3L14.45,6.75L13.85,4.6L12.9,2.65L11.35,0.55L10.3,-0.65L9.45,-1.85L9.15,-3.4M9.25,17.6L8.9,19.85L9.5,20.45L10.4,20.65L11.15,20.15L11.45,18.65L11.5,18Q11.4,17.7 10.9,17.45L10,17.25Q9.25,17.25 9.25,17.6'
    }]
  }, {
    name: 'sixteenthTempo',
    bounds: {
      left: 0,
      right: 12.3,
      top: -5,
      bottom: 20.7
    },
    svgPaths: [{
      d: 'M5.05,-4.5L5,14.4L3.8,14.2L2.6,14.45L1.4,15.05Q0.7,15.55 0.35,16.1Q0,16.6 0,17.2L0,17.75Q0,18.55 0.15,19.15L0.5,20L1.3,20.5L2.65,20.7Q4.45,20.7 5.35,18.65L5.85,17.05L6.1,15.05L6.1,10.5L6.2,7.3L7.85,8.45L8.9,9.45L10,10.4L9.8,11.35Q9.8,12.05 10.5,12.05L10.7,12L11,12.95L10.85,14.6Q10.85,15.55 11.35,15.55L11.5,15.55L12.05,14.55L12.3,13.1L12.1,11.45L11.55,9.75L11.9,7.75Q11.9,6.65 11.5,5.45Q11.1,4.15 10.25,2.9L7.2,-1.45Q6.9,-1.9 6.4,-4.7L5.75,-5L5.3,-4.8L5.05,-4.5M10.6,8.1L8.5,5.8L6.1,3.65L6.1,1.4L8.9,4.4L10.25,6.35L10.7,7.8L10.6,8.1'
    }]
  }, {
    name: 'sixteenthDotTempo',
    bounds: {
      left: 0,
      right: 12.35,
      top: -4.15,
      bottom: 21.55
    },
    svgPaths: [{
      d: 'M5.8,-4.15Q5.6,-4.15 5.35,-3.95L5.1,-3.65L5.05,15.25L3.85,15.05L2.65,15.3L1.45,15.9Q0.75,16.4 0.4,16.95Q0.05,17.45 0.05,18.05L0.05,18.6Q0.05,19.4 0.2,20L0.55,20.85L1.35,21.35L2.7,21.55Q4.5,21.55 5.4,19.5L5.9,17.9L6.15,15.9L6.15,11.35L6.25,8.15L7.9,9.3L8.95,10.3L10.05,11.25L9.85,12.2Q9.85,12.9 10.55,12.9L10.75,12.85L11.05,13.8L10.9,15.45Q10.9,16.4 11.4,16.4L11.55,16.4L12.1,15.4L12.35,13.95L12.15,12.3L11.6,10.6L11.95,8.6Q11.95,7.5 11.55,6.3L10.3,3.75L7.25,-0.6Q6.95,-1.05 6.45,-3.85L5.8,-4.15M10.65,8.95L8.55,6.65L6.15,4.5L6.15,2.25L8.95,5.25L10.3,7.2L10.75,8.65L10.65,8.95M7.05,17.85L6.7,20.1L7.3,20.7L8.2,20.9L8.95,20.4L9.25,18.9L9.3,18.25Q9.2,17.95 8.7,17.7L7.8,17.5Q7.05,17.5 7.05,17.85'
    }]
  }, {
    name: 'thirtySecondTempo',
    bounds: {
      left: 0,
      right: 12.3,
      top: -5,
      bottom: 20.7
    },
    svgPaths: [{
      d: 'M10.737408,14.447398Q11.33894475,12.5714935 10.737408,10.703476Q11.667194475000002,7.609805799999999 9.7790061,5.0210806Q8.330406125,3.3173394249999997 6.6507901,1.8380146Q6.2273792,0.5749264350000001 5.6745492,-0.05084746Q5.6745491999999995,9.311474115 5.6745492,18.673795Q3.2483170750000006,17.574436499999997 1.2258227000000002,19.452178999999997Q-0.3556710625,20.848880749999992 0.6804255800000002,22.534636999999996Q2.4800291549999995,23.731984999999995 4.4267317,22.510906999999996Q6.2630415500000005,21.545100749999996 6.3044148,19.541661999999995Q6.3044148,15.686615499999997 6.3044148,11.831568999999995Q7.946012250000001,12.846181999999994 9.4880391,13.998281999999994Q10.964619225000002,15.264941499999994 10.828659,17.224693999999992Q10.741799025000002,19.064761999999995 9.9223629,20.734717999999994Q10.668822775,20.42842174999999 10.853282,19.353127999999995Q11.77405075,16.86571474999999 10.737408,14.447401999999995zM6.0852214,3.5022238Q5.95743865,3.454594375 6.0852214,3.5022238zM10.457118,13.963661Q9.184240800000001,12.18775 7.5134322,10.753431Q6.327591900000001,9.381758824999999 6.3044148,7.617559Q7.033806375000001,7.7200001 7.9656849,8.5576035Q10.138206075000001,10.083960375 10.554117,12.639054Q10.549537,13.303911249999999 10.457117,13.963661zM10.713473,9.5816855Q10.4481886,10.2092544 9.6672666,8.7660103Q8.314000225000001,7.264985424999999 6.816131,5.9100028Q6.152503824999999,5.001708975 6.3044148,3.8691131Q6.625878425,3.4160171749999995 7.6203376,4.3050182Q9.829176675,5.705429425 10.65902,8.1186579Q10.7438375,8.8463515 10.71347,9.5816855z'
    }]
  }, {
    name: 'thirtySecondDotTempo',
    bounds: {
      left: 0,
      right: 12.35,
      top: -4.15,
      bottom: 21.55
    },
    svgPaths: [{
      d: 'M6.3573163,22.294916Q6.9036087749999995,20.590573 8.3946371,21.580398000000002Q9.190974475,23.150242499999997 7.469016600000001,23.515782Q6.169599400000001,23.17451725 6.5368028,22.308881000000003Q7.266914925000002,22.341136000000006 7.4013688,22.345851000000003Q6.8793425500000005,22.320386000000003 6.3573163,22.294921000000002zM6.6747037,22.497082000000002Q8.075676474999998,20.861494 8.1636091,23.013208000000002Q6.14600255,23.4076475 7.356086100000001,22.533573000000004Q7.0156118,22.511570500000005 6.6747037,22.497083000000003zM4.362717,17.859654Q6.066428825000001,18.03906025 5.993629,19.782305Q5.85715705,20.952257499999998 4.9338616,21.76053Q3.3298512999999996,23.18930725 1.2135352,23.390582Q-0.47135588749999996,22.758134000000002 0.16171333,20.962418Q0.8069161050000001,19.3477615 2.3377388,18.46227Q3.2986954749999997,17.987395499999998 4.362717,17.859654ZM5.9990631,-0.9205623Q7.675326425,1.099028665 9.1836439,3.2395325Q10.087902349999998,4.799076125000001 10.152864,6.606629Q8.33203525,3.7131840250000003 6.0810185,1.1203224Q5.938110625,0.5950252475000001 5.9990631,-0.00178226Q5.999063099999999,-0.46117228000000005 5.9990631,-0.9205623000000001zM8.516517799999999,-0.8450383Q7.2200285,-2.45620995 5.9235392,-4.0673816Q4.9070329,-4.143314725 4.992396,-2.9248968Q5.0038497500000005,0.04206090000000018 5.029099,3.0060984Q5.719275450000001,2.665490725 5.8790129,3.0218504Q5.912395900000001,6.03864965 5.9457789000000005,9.0554489Q7.67672155,11.01105415 9.1836797,13.133130900000001Q10.0477963,14.252773150000003 9.6309216,15.552641900000001Q9.416115025000002,16.284403900000004 10.001858,16.6260999Q10.30515375,16.664702650000002 10.203058,17.4247559Q9.9070353,19.0661064 9.6037493,20.7024109Q9.543967075000001,21.66163865 10.251999000000001,21.3211539Q11.228165,19.508150399999998 11.464804,17.422122899999998Q11.609722750000003,15.649762649999996 11.221129000000001,13.923795899999998Q11.81689175,11.479080649999997 11.185029000000002,9.048559899999997Q11.71842825,6.964986725 11.366886,4.8461793Q10.662064525,1.6536341325 8.516531,-0.8450391M8.415831,7.135294Q9.397852274999998,8.287238075 9.7892712,9.7116846Q9.747161874999998,10.547704825000002 9.4838444,10.389626Q7.780274425,8.041429025000001 5.9990631,5.7508532Q5.498835025,3.829449075 6.6751469,4.7583313Q7.56341555,5.93327335 8.4158198,7.135294M4.9920806,2.9752395Q5.6598484000000004,2.7104887249999994 5.905785600000001,2.9666094999999997Q5.952424850000002,11.294242924999999 5.9990626,19.6218768Q5.34770975,19.709758549999997 4.992080100000001,19.5019168Q4.992079975,11.238580124999999 4.9920803000000005,2.975243299999999z'
    }]
  }, {
    name: 'sixtyFourthTempo',
    bounds: {
      left: 0,
      right: 12.3,
      top: -5,
      bottom: 20.7
    },
    svgPaths: [{
      d: 'M5.5816414,3.7300787Q6.34853335,3.5882769999999997 6.6300607,3.9318399Q6.630060699999998,8.936308750000002 6.6300607,13.940777Q5.863168749999999,14.082578499999999 5.5816414,13.739016000000001Q5.5816414000000005,8.734546900000002 5.5816414,3.7300787000000017zM4.9161418,19.525713Q6.7089040749999995,19.730306750000004 6.5821648,21.570235Q6.39119705,22.80162925 5.3873292,23.626009Q3.775969325,25.004179 1.6864135,25.198111Q-0.12037894750000003,24.473314249999998 0.66658416,22.551315Q1.3543256350000001,21.008514749999996 2.8393694,20.143743Q3.824515775,19.65602025 4.9161422,19.525713ZM9.0212781,0.72987053Q10.684499225,2.7437081674999995 10.802752,5.3513759Q8.9157433,2.3600114299999997 6.5943421,-0.32868652Q6.594342100000002,-1.3226974324999998 6.5943421,-2.3167083Q7.807810100000002,-0.7934188700000001 9.0212781,0.7298705299999999zM9.1245519,-2.3167083Q7.79490085,-3.9690901499999995 6.4652498,-5.621472Q5.430167225,-5.782023800000001 5.5616039,-4.5568711Q5.561603899999998,3.353466427499999 5.5616039,11.263804Q5.896297324999999,11.923957500000002 6.3308903,12.598478Q8.315862,15.020459249999998 10.044133,17.614441Q10.670252000000001,18.78267975 10.234746000000001,20.093719999999998Q10.27321975,20.811659249999995 10.806485000000002,20.728875999999996Q10.877626000000003,22.207108749999996 10.471959000000002,23.648196999999996Q9.971509825000002,24.833102249999996 10.544309000000002,25.734919999999995Q11.553825750000005,25.030724749999994 11.725741000000003,23.586157999999994Q12.192933000000002,21.94218224999999 12.192122000000003,20.242578999999992Q12.041834000000001,18.96608324999999 11.948372000000003,17.72341399999999Q12.468275500000003,15.31335074999999 11.874072000000004,12.927606999999991Q12.519608750000003,10.37574152499999 11.861332000000003,7.8299484999999915Q12.674708500000003,4.661003274999991 11.505121000000003,1.6109256999999912Q10.604795900000003,-0.5265650950000088 9.124577400000003,-2.3167083000000086M6.5943616,4.8091881Q6.594361600000001,3.8280864 6.5943616,2.8469847Q8.418780375,4.9892251000000005 9.9693008,7.3236644Q10.523608049999998,8.096060575 10.354849,8.9806311Q10.320271900000002,9.884239 9.8671294,9.0143381Q8.28529555,6.870510925 6.5943421,4.8091881M6.5943421,7.9848593Q8.4290315,10.136101625000002 9.981402000000001,12.485744Q10.537605000000001,13.2599965 10.341282000000001,14.141937Q10.239654575000003,14.813522749999999 9.788442700000001,13.914031Q8.240930174999999,11.828435149999999 6.5943461,9.8179704Q6.594346100000002,8.901414850000002 6.5943461,7.9848593zM5.5616033,3.6546509Q6.3189318,3.6127505000000006 6.5943420999999995,3.9931622Q6.5943421,12.6630833 6.5943420999999995,21.333005Q5.834382225000001,21.47571475 5.5616033,21.131244Q5.561603299999998,12.39294745 5.5616033,3.6546509z'
    }]
  }, {
    name: 'sixtyFourthDotTempo',
    bounds: {
      left: 0,
      right: 12.35,
      top: -4.15,
      bottom: 21.55
    },
    svgPaths: [{
      d: 'M6.7428626,24.288989Q7.3608845249999995,22.51484525 8.8446622,23.667062Q9.47035755,25.40566875 7.6237244,25.472629Q6.367917625000001,24.837726500000002 7.0784256,24.312243000000002Q8.127504250000001,24.356478000000003 7.4994746,24.325893Q7.121168599999999,24.307438000000005 6.7428626000000005,24.288983zM5.5816414,3.7300787Q6.34853335,3.5882769999999997 6.6300607,3.9318399Q6.630060699999998,8.936308750000002 6.6300607,13.940777Q5.863168749999999,14.082578499999999 5.5816414,13.739016000000001Q5.5816414000000005,8.734546900000002 5.5816414,3.7300787000000017zM4.9161418,19.525713Q6.7089040749999995,19.730306750000004 6.5821648,21.570235Q6.39119705,22.80162925 5.3873292,23.626009Q3.775969325,25.004179 1.6864135,25.198111Q-0.12037894750000003,24.473314249999998 0.66658416,22.551315Q1.3543256350000001,21.008514749999996 2.8393694,20.143743Q3.824515775,19.65602025 4.9161422,19.525713ZM9.0212781,0.72987053Q10.684499225,2.7437081674999995 10.802752,5.3513759Q8.915743375,2.3600114299999997 6.5943421,-0.32868652Q6.594342100000002,-1.3226974324999998 6.5943421,-2.3167083Q7.807810100000002,-0.7934188700000001 9.0212781,0.7298705299999999zM9.1245519,-2.3167083Q7.79490085,-3.9690901499999995 6.4652498,-5.621472Q5.430167225,-5.782023800000001 5.5616039,-4.5568711Q5.561603899999998,3.3534664349999987 5.5616039,11.263804Q5.896297324999999,11.923957500000002 6.3308903,12.598478Q8.315861674999999,15.020459249999998 10.044134,17.614441Q10.67025225,18.78267975 10.234747,20.093719999999998Q10.273220750000002,20.811658499999997 10.806486,20.728875999999996Q10.877626499999998,22.207108749999996 10.471959,23.648196999999996Q9.9715099,24.833102249999996 10.544309,25.734919999999995Q11.553824000000002,25.030723999999996 11.725739,23.586157999999994Q12.192931000000002,21.94218224999999 12.192120000000001,20.242578999999992Q12.041831750000002,18.96608324999999 11.948371000000002,17.72341399999999Q12.468273000000002,15.31335074999999 11.874071000000002,12.927606999999991Q12.519606250000002,10.37574152499999 11.861331000000002,7.8299484999999915Q12.674707500000004,4.661003274999991 11.505120000000002,1.6109256999999912Q10.604794900000003,-0.526565320000009 9.124576400000002,-2.3167083000000086M6.5943616,4.8091881Q6.594361600000001,3.8280864 6.5943616,2.8469847Q8.418780375,4.9892251000000005 9.9693008,7.3236644Q10.523608049999998,8.096060649999998 10.354849,8.9806311Q10.320271900000002,9.884239 9.8671294,9.0143381Q8.28529555,6.870510925 6.5943421,4.8091881M6.5943421,7.9848593Q8.4290315,10.136101625000002 9.981402000000001,12.485744Q10.537605000000001,13.2599965 10.341282000000001,14.141937Q10.239654575000003,14.813522749999999 9.788442700000001,13.914031Q8.240930174999999,11.828435149999999 6.5943461,9.8179704Q6.594346100000002,8.901414850000002 6.5943461,7.9848593zM5.5616033,3.6546509Q6.3189318,3.6127505000000006 6.5943420999999995,3.9931622Q6.5943421,12.6630833 6.5943420999999995,21.333005Q5.834382225000001,21.47571475 5.5616033,21.131244Q5.561603299999998,12.39294745 5.5616033,3.6546509z'
    }]
  }, {
    name: 'tempoEquals',
    bounds: {
      left: 0,
      right: 7.7,
      top: 0,
      bottom: 16.3
    },
    svgPaths: [{
      d: 'M0.5,10Q0.1,10 0,10.65L0,11.65L0.55,12.2L1.7,12.4L7.05,12.15L7.15,11.9L7.15,10.65Q7.15,10.2 6.4,10.15L0.5,10M7.5,16.3Q7.7,16.25 7.7,15.65L7.55,14.4L7.45,14.25Q4.9,14.1 0.75,14.1Q0.2,14.1 0.2,14.85L0.3,15.9Q0.5,16.3 1.15,16.3L7.5,16.3'
    }]
  }, {
    name: 'pDynamics',
    bounds: {
      left: -3.25,
      right: 11.5,
      top: -19.65,
      bottom: 5.55
    },
    svgPaths: [{
      d: 'M11.5,-17.4Q11.5,-19.65 9.45,-19.65Q6.85,-19.65 3.9,-15L1.95,-11.5L0.45,-7.9L-0.55,-4.1L-0.85,-0.7L-0.85,1.35L-1.85,1.9L-2.75,2.45L-3.25,4.85Q-3.15,5.45 -2.6,5.55Q-1.15,5.25 1.2,3.7Q3.65,2.05 4.3,0.95Q4.75,0.2 4.75,-1.15Q4.75,-2 4.15,-2Q3.6,-2 0.95,0.3L0.7,-1.5Q0.7,-3.55 1.05,-4.25Q1.3,-3.8 2,-3.8Q3.05,-3.8 4.25,-4.55Q5.5,-5.35 6.85,-6.9Q8.3,-8.55 10.2,-11.95L11.2,-14.75L11.5,-17.4M7.8,-15.9Q8.65,-16.4 9.1,-16.4Q9.75,-16.4 9.75,-15.7Q9.75,-14.6 9.15,-13.4Q8.6,-12.15 7.5,-10.8Q6.45,-9.45 5.35,-8.6Q4.3,-7.7 3.25,-7.25L2.95,-7.25Q2.5,-7.25 2.15,-7.7L2.9,-9.7Q3.95,-12 5.15,-13.55Q6.4,-15.1 7.8,-15.9'
    }]
  }, {
    name: 'fDynamics',
    bounds: {
      left: -0.95,
      right: 14.55,
      top: -22.35,
      bottom: 6.15
    },
    svgPaths: [{
      d: 'M12.2,-22.35Q11.3,-22.15 10.45,-21.2Q9.6,-20.2 8.75,-18.45L5.75,-10.65L3.3,-10.2Q2.85,-9.9 2.5,-8.9Q2.15,-7.95 2.15,-7.3Q2.15,-6.2 2.9,-6.2L4.3,-6.4L2.2,-1.55L1.45,-1.55L1.2,-1.65Q0.7,-1.65 0.3,-1.15L-0.4,0.3L-0.95,3.1L-0.5,3.8L-0.25,4.6L-0.3,5.65Q-0.2,6.15 0.45,6.15Q0.9,6.15 1.65,4.75L3.45,0.45L6.15,-6.7L9.85,-7.3Q10.5,-7.5 10.85,-8.3Q11.2,-9.1 11.2,-10.4Q11.2,-11.4 10.8,-11.4L7.65,-10.85L9.45,-15.6L10.75,-18.45Q11.3,-19.4 11.75,-19.4L12.6,-18.85L12.9,-17.85L12.5,-15.95L12.75,-15.55Q12.95,-15.25 13.15,-15.25Q13.5,-15.25 13.9,-15.65L14.55,-18.85Q14.55,-20.1 13.95,-21Q13.35,-21.85 12.2,-22.35'
    }]
  }, {
    name: 'sfDynamics',
    bounds: {
      left: -0.3,
      right: 18,
      top: -15.55,
      bottom: 11.95
    },
    svgPaths: [{
      d: 'M14.3,-14.75L12.85,-13Q11.75,-11.2 10.8,-8.45L9.4,-4.4L6.9,-4.05Q6.4,-3.7 6.2,-3.05Q5.95,-2.4 5.95,-1.45Q5.95,-0.6 6.75,-0.65L8.15,-0.75L5.95,4.2L5.3,4.2L4.95,4.15Q4.5,4.15 4.1,4.6Q3.7,5.1 3.4,6.05L2.85,8.85L3.5,10.35L3.5,11.4Q3.6,11.95 4.2,11.95L5.35,10.5L7.2,6.2L9.8,-0.95L12.15,-1.2Q13.3,-1.35 14,-2Q14.75,-2.7 14.75,-4.25Q14.75,-5.2 14.35,-5.2L12.7,-5L11.05,-4.65L12.75,-9.4L14.15,-12.2Q14.75,-13.15 15.2,-13.15Q15.7,-13.15 16.05,-12.6L16.4,-11.6L16,-9.7L16.25,-9.3L16.65,-9Q17.05,-9 17.35,-9.4Q18,-11.3 18,-12.6Q18,-13.9 17.45,-14.5L15.85,-15.55Q15.05,-15.4 14.3,-14.75M6.7,-8.8L5.85,-10.15L4.6,-11.15L3.2,-11.5Q1.7,-11.5 0.95,-10.8Q0.2,-10.1 0.2,-8.65Q0.2,-7.8 0.55,-6.25L2.25,-0.45Q2.25,-0.3 2.05,-0.3Q1.4,-0.3 1.15,-0.85L0.6,-1.5Q0.25,-1.5 -0.05,-0.75L-0.3,0.35Q-0.3,1.35 0.35,2.1Q0.95,2.8 1.95,2.8L3.1,2.55Q3.8,1.65 3.8,-0.45Q3.5,-3.05 2.85,-4.65Q1.9,-7 1.9,-8Q1.9,-8.65 2.3,-8.65L4.15,-8.1Q5.3,-7.5 5.3,-6.8L4.95,-4.65Q4.95,-4.05 5.65,-4.05Q6.25,-4.05 6.65,-5.45Q7.05,-6.55 7.05,-7.35L6.7,-8.8'
    }]
  }, {
    name: 'ppDynamics',
    bounds: {
      left: -3.05,
      right: 18.65,
      top: -21.8,
      bottom: 5.7
    },
    svgPaths: [{
      d: 'M18.25,-21Q17.85,-21.8 17,-21.8Q15.95,-21.8 14.75,-20.6Q13.55,-19.4 12.2,-17.05L11.85,-19Q11.4,-20.25 10.45,-20.25Q9.55,-20.25 8.95,-19.85L7.6,-18.55L5.8,-16.05Q4.05,-13.45 3.25,-11.55Q2.1,-8.9 1.15,-5.45L0.65,-2.1Q0.4,-0.05 -0.05,1L-2.05,2.4Q-3.05,3.3 -3.05,4.5Q-3.05,5.7 -2.45,5.7Q-2.15,5.7 1.95,3.05L6.75,-0.25L6.65,0.3L4.8,2.15Q4,3.15 4,4.7L4.2,5.3L4.3,5.35L4.5,5.4L4.85,5.35L5.3,5.05Q5.7,4.45 9.35,1.6L11.7,-0.45Q12.5,-1.25 12.5,-1.7Q12.5,-3.15 11.8,-3.15Q11.45,-3.15 8.45,-0.9L8.45,-1.1Q8.45,-2.35 8.75,-4Q9.15,-6.2 9.7,-6.5Q10.5,-6.55 11.85,-7.45L14.2,-9.55L16.35,-12.45L18.1,-15.75Q18.65,-17.3 18.65,-18.7Q18.65,-20.2 18.25,-21M14.5,-17.1Q15.35,-17.95 16.05,-18.25L16.45,-18.2L16.6,-17.95L16.6,-17.75L16.15,-15.45Q15.65,-14.25 14.7,-13.1L12.8,-11.3Q11.75,-10.5 10.55,-9.95Q11.2,-12.05 12.75,-14.65L14.5,-17.1M10.1,-15.85Q10.1,-15 9.7,-14.05L8.55,-12.25L7,-10.75L5.35,-9.8L5.05,-9.8L4.8,-10.05L4.65,-10.25Q4.95,-11.55 6.15,-13.55Q7.45,-15.75 8.3,-16.3L9.5,-16.85L9.75,-16.8L9.95,-16.6L10.1,-15.85M8.2,-8.55Q7.6,-6.65 7.05,-2.35L4.3,-1.25L1.7,0.2L2.2,-2.8Q2.45,-4.55 2.85,-5.7L3.1,-5.85Q4.3,-5.8 5.8,-6.9L8.2,-8.55'
    }]
  }, {
    name: 'pppDynamics',
    bounds: {
      left: -1.65,
      right: 27.4,
      top: -20.9,
      bottom: 5
    },
    svgPaths: [{
      d: 'M17.55,-19.95Q16.15,-18.95 14.5,-17.05L14.55,-17.7Q14.55,-18.7 14.2,-19.4Q13.7,-20.25 12.9,-20.25Q11.85,-20.25 10.6,-19.45Q9.3,-18.65 7.7,-17.05Q4.85,-13.7 3.75,-11.95L1.35,-6.5Q0.75,-4.6 0.2,-0.6L-0.05,0.5Q-0.75,1 -1.05,1.95L-1.65,3.65L-1.65,3.95L-1.45,4.25L-1.15,4.45Q-0.5,4.45 1.75,3.4Q4.15,2.3 4.95,2.2L4.4,3.95Q4.4,4.7 4.9,4.7Q5.3,4.7 6,4.15L7.05,3.3L9.2,2.45Q10.75,1.9 11.2,1.45L11.95,0.3Q12.45,-0.5 12.45,-1.05Q12.45,-1.65 11.75,-1.65Q11.15,-1.65 10.25,-1.2L8.65,-0.55L8.65,-1.05Q8.65,-2.35 9.2,-4.25Q9.8,-6.1 10.6,-7.25Q12.75,-7.25 16.25,-9.05Q15.05,-6.25 14.45,-3.85Q13.9,-1.65 13.9,0.1L13.9,0.6L11.8,2.1Q10.85,2.95 10.85,4.4L10.9,4.8L11.1,5L11.25,5Q12.6,4.65 14.15,3.9L17,2.45L17.45,1.1L17.75,-0.25L17.3,-0.7L16.2,-0.4L16,-1.7L16.4,-5.05Q16.9,-7.35 17.5,-8.1L19.6,-8.35Q20.45,-8.55 21.45,-9.25Q23.45,-10.7 24.85,-12.5Q26.2,-14.3 26.95,-16.45L27.4,-18.65Q27.4,-19.6 27,-20.05Q26.6,-20.55 25.75,-20.55Q24.95,-20.55 23.6,-19.85L21.75,-18.45L21.3,-20Q20.85,-20.9 20.1,-20.9Q19,-20.9 17.55,-19.95M12.3,-17.05L12.6,-15.9Q12.6,-15.25 11.75,-14.45Q10.95,-13.7 9.35,-12.75L6.8,-11.4Q5.7,-10.95 4.85,-10.85Q6.05,-12.9 7.7,-14.65L9.95,-16.75Q10.85,-17.45 11.4,-17.45Q11.95,-17.45 12.3,-17.05M17.05,-12.7Q15.4,-11.4 13.9,-11L13.5,-11.05L13.2,-11.4L13.15,-11.85L13.95,-13.1L16.8,-16.45Q18.05,-17.55 18.95,-17.55Q19.75,-17.55 19.75,-16.25L19.4,-15.35Q18.7,-13.95 17.05,-12.7M9.95,-9.65L8.4,-5.75Q7.4,-3.25 6.65,0.25L6,0.5L6,0.35L6.15,-0.9L6.1,-1.25L5.95,-1.35L1.8,0.05L1.75,-0.3Q1.75,-1.5 2.3,-4.15Q2.8,-6.7 3.35,-7.75L4.1,-7.7Q5.65,-7.7 7.15,-8.3L9.95,-9.7L9.95,-9.65M19.55,-12.15L19.6,-12.45Q20.5,-14 21.7,-15.35L23.2,-16.75Q23.9,-17.25 24.45,-17.25Q25.15,-17.25 25.15,-16.4L24.7,-15.1L23.4,-13.6Q22,-12.35 20.45,-11.5L20.1,-11.5L19.55,-12.15'
    }]
  }, {
    name: 'mpDynamics',
    bounds: {
      left: -4.1,
      right: 17.35,
      top: -15.9,
      bottom: 8.95
    },
    svgPaths: [{
      d: 'M13.9,-14.95Q12.8,-14 11.45,-12.05Q9.1,-8.4 8.25,-6.55Q7.35,-4.6 6.45,-1.7L4.65,5L4,5.4Q3.05,5.85 2.7,6.75Q2.5,7.25 2.4,8.65Q2.45,8.95 2.65,8.95Q3.25,8.95 8.2,6.5L8.9,6.05L9.25,5.25L9.65,3.15L9.55,3L9.4,2.95L6.4,4.15Q6.7,1.8 7.5,0.1L10.25,-1.15Q11.4,-2 12.55,-3.4L14.9,-6.85Q16.1,-8.9 16.75,-10.6Q17.35,-12.35 17.35,-13.6Q17.35,-14.75 16.95,-15.35Q16.6,-15.9 15.85,-15.9Q14.95,-15.9 13.9,-14.95M5.8,-12.85L4.5,-11.3L3.65,-10.25L3.85,-12.15L3.65,-13.7L3,-14.2Q2.4,-14.2 1.6,-13.55L-0.15,-11.6L-2.45,-7.8L-3.85,-4.15L-4.1,-3.05Q-4.1,-2.4 -3.6,-2.4Q-3.05,-2.4 -2.8,-2.8L-2.1,-4.55L-0.45,-7.85Q0.9,-10.25 1.65,-10.6L1.85,-10.25Q1.85,-9.15 1.1,-7.35Q0.35,-5.5 0.35,-4.5Q0.35,-3.6 1.1,-3.55Q1.65,-3.7 3.45,-6.65L5.1,-9L6.4,-10.25L5.45,-7.2Q4.9,-5.25 4.9,-4.15Q4.9,-3.2 5.35,-3.2Q5.9,-3.2 6.25,-3.55Q7,-5.15 7.75,-7.7Q8.55,-10.5 8.55,-12Q8.55,-13.6 7.6,-13.6Q6.65,-13.6 5.8,-12.85M9,-3.35L8.85,-3.5Q8.85,-4.95 11.25,-8.75L13.4,-11.7Q14.3,-12.7 14.95,-12.7Q15.35,-12.7 15.35,-11.95Q15.35,-10.95 14.8,-9.7L13.2,-7.1L11.15,-4.9Q10.2,-4 9.15,-3.4L9,-3.35'
    }]
  }, {
    name: 'mfDynamics',
    bounds: {
      left: -5.9,
      right: 19.25,
      top: -21.1,
      bottom: 9.85
    },
    svgPaths: [{
      d: 'M17.65,-21.1Q16.8,-21.1 15.85,-19.85Q14.85,-18.5 13.75,-15.95L11.15,-9.1L9.45,-9.2Q8.5,-9.2 8,-8.2Q7.65,-7.4 7.65,-6.4Q7.65,-5.85 8.1,-5.55L9.5,-5.35L9.9,-5.4L7.9,0.6L7.35,0.35Q6.95,0.35 6.6,0.85Q6.25,1.4 5.95,2.45Q5.45,4.1 5.45,5.35L5.9,7.65L5.8,9Q5.8,9.85 6.4,9.85Q6.85,9.85 7.2,9.35L8.5,4.05Q9.45,0.7 11.75,-5.55Q14.1,-5.85 15.4,-6.4Q16.75,-6.95 17.05,-7.8L17.2,-9.3Q17.2,-10.25 16.8,-10.25L16,-10L15.2,-9.6L12.95,-9.2L15.7,-16.15Q16.75,-18.45 17.15,-18.45L17.25,-17.9L17.05,-15.65Q17.05,-14.35 17.7,-14.35Q18.5,-14.35 18.85,-15.45Q19.25,-16.55 19.25,-18.7L18.8,-20.25Q18.35,-21.1 17.65,-21.1M0.55,-13.25Q-0.25,-13.25 -1.3,-12.15L-3.55,-9.05L-5.3,-5.6Q-5.9,-4.1 -5.9,-3.15Q-5.9,-1.65 -5.4,-1.65Q-4.75,-1.65 -4.4,-2.55L-4.15,-3.85Q-4,-4.7 -2.7,-6.8L-0.7,-9.5L-0.55,-9.55Q-0.3,-9.55 -0.3,-8.95Q-0.3,-8.35 -0.65,-7.1L-1,-5.25Q-1,-4.45 -0.35,-4.45L0.4,-4.7L1.15,-5.75Q1.65,-6.7 3.5,-8.8Q5.5,-11 6.15,-11L6.3,-11L6.4,-10.55Q6.4,-9.3 5.15,-7.1Q3.9,-4.9 3.9,-3.65Q3.9,-2.6 4.5,-2.6Q5.7,-2.6 7.1,-6.8Q7.95,-9.3 8.35,-12.25L8.05,-13.8Q7.8,-14.3 7.2,-14.3L5.65,-13.95L4.05,-12.7L1.6,-9.85L1.4,-12.4Q1.1,-13.25 0.55,-13.25'
    }]
  }, {
    name: 'fzDynamics',
    bounds: {
      left: -1.6,
      right: 15.05,
      top: -22.7,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M10.85,-19.85Q11.3,-19.35 11.3,-18.6L10.8,-16.25Q11.1,-15.75 11.45,-15.75Q12.15,-15.75 12.7,-17.6Q13.1,-18.95 13.1,-20.05Q13.1,-21.1 12.65,-21.85Q12.1,-22.7 11.05,-22.7Q10.35,-22.7 9.75,-22.1L8.55,-20.3Q7.75,-18.85 6.85,-16.2L5.25,-11.9Q2.6,-10.65 0.95,-9.3Q0.4,-8.4 0.4,-7.3Q0.4,-6.75 1.05,-6.55Q1.35,-6.6 2.45,-7.15L3.85,-7.95L2.5,-4.75L0.95,-1.55L0.75,-1.5L0.45,-1.55L0.15,-1.55Q-0.7,-1.55 -1.15,-0.75Q-1.6,0.1 -1.6,1.7L-1.2,4.35Q-0.7,6.5 -0.05,6.5L0.5,6.1L0.8,4.45Q1.15,1.95 2,-0.15L5.55,-8.35L5.8,-8.85Q8.25,-10 11.45,-11Q9.85,-7.9 8.05,-5.4L6.2,-2.9Q5.7,-2 5.7,-0.8Q5.7,-0.4 5.95,-0.1Q6.3,0.2 6.6,0.2Q7.1,0.2 8.75,-0.7L13,-3.35Q14.2,-4.1 14.6,-4.95Q15.05,-5.7 15.05,-7.15Q15.05,-7.75 14.55,-7.75L12.05,-6.4L9.8,-4.8L12.15,-8.55L13.25,-10.8L13.6,-12.55L13.4,-13.95Q13.15,-14.4 12.65,-14.4L7.15,-12.7L9.4,-18.25Q9.9,-19.3 10.7,-19.85L10.85,-19.85'
    }]
  }, {
    name: 'ffDynamics',
    bounds: {
      left: -1.5,
      right: 21.75,
      top: -22.9,
      bottom: 8.95
    },
    svgPaths: [{
      d: 'M11,-22.9Q10.05,-22.9 8.95,-21.4Q7.8,-19.9 6.55,-16.85L3.6,-8.95L3.4,-8.9L1,-9.25L0.25,-9.05L-0.3,-7.9L-0.55,-6.65Q-0.55,-6 0.1,-5.65L2.2,-5.3L2.35,-5.3Q1.35,-2.2 0.95,-1.85Q0.4,-1.35 -0.3,-1.15L-1.2,-0.65Q-1.5,-0.15 -1.5,1.25Q-1.5,2.75 -1.15,3.45Q-0.8,4.2 -0.1,4.2L0.9,3.6Q1.4,3 1.75,1.8L2.85,-1.9Q3.45,-4 4.2,-5.45L9.2,-6.95Q8.85,-6.45 8.85,-6.1Q8.85,-5.3 9.6,-4.9L11.05,-4.45L8.25,2.35L7.5,1.75L7,1.95Q6.35,2.7 6.35,4.05L6.7,6.75Q7.15,8.95 7.5,8.95Q7.95,8.95 8.3,8.4L8.95,6.8L9.55,4Q10,1.95 10.9,-0.25L12.65,-4.3L16.05,-4.85Q17.2,-5.1 17.9,-5.55Q18.55,-6 18.75,-6.6L19.2,-8.3Q19.2,-8.95 18.5,-8.95L16.2,-8.45Q14.6,-7.95 13.9,-8L16.2,-13.8Q17.15,-16.05 17.85,-17.2Q18.6,-18.4 19.05,-18.4Q19.5,-18.4 19.5,-17.6L19.15,-15.3Q19.15,-14.9 19.45,-14.3Q19.8,-13.85 20.15,-13.85Q20.7,-13.85 21.25,-16.3L21.75,-19.4L21.45,-21Q21,-21.9 20.25,-21.9Q19.05,-21.9 18.05,-20.95Q17.1,-20 16.3,-18.1L12.25,-8.15Q11.3,-8.25 10.5,-8.65L10.55,-9.65L10,-10.4L5.5,-9.1L8.75,-17.7L9.85,-19.35L10,-19.4Q10.6,-19.4 10.6,-17.45L10.4,-14.95Q10.4,-13.7 11,-13.7L11.45,-13.85Q11.9,-14.1 12.45,-16.5L13,-19.5Q13,-20.65 12.45,-21.65Q11.85,-22.9 11,-22.9'
    }]
  }, {
    name: 'fffDynamics',
    bounds: {
      left: -3.05,
      right: 29.55,
      top: -24.3,
      bottom: 7.2
    },
    svgPaths: [{
      d: 'M18.4,-23.4Q17.75,-22.75 17.35,-21.8L14.7,-15.8L11.9,-9.85Q11.45,-9.85 10.75,-10.25L9.65,-10.6Q9.3,-10.6 8.95,-9.8L8.45,-8.65L8.35,-9.25L8.05,-9.75L4.95,-9.2L10.2,-20.15L10.55,-20.3L10.95,-19.95L10.6,-17.25Q10.6,-16.6 11.2,-16.6L12,-17.05L12.7,-19.05L13.1,-21.2Q13.1,-22.6 12.75,-23.35Q12.4,-24.05 11.7,-24.05Q10.95,-24.05 10.3,-23.4Q9.6,-22.7 9,-21.3L3.45,-9.2L1.5,-9.3L0.75,-9.2L0.2,-8.15L-0.15,-6.95Q-0.15,-6.15 0.55,-5.95L1.85,-5.8Q1.1,-3.5 -0.45,-0.5L-0.5,-0.5L-0.8,-1.75L-1.25,-2.9L-1.65,-3L-2.2,-2.95L-3.05,-0.45L-2.85,1.8Q-2.55,3.45 -2.25,3.9Q-1.8,4.65 -0.65,4.65L-0.2,4.55Q0.25,4 0.75,2.15L1.45,-0.5Q2.3,-3.25 3.5,-5.75L5.85,-5.95Q7.15,-6.2 8,-6.85L8.5,-7.35L8.6,-7.35L10.2,-6.4L7.4,-0.85L7.05,0.2L6.95,0.3L6.85,0.15L6.75,-0.75L6.05,-1.2Q5.4,-1.2 4.8,0.65Q4.25,2.2 4.25,3.15Q4.25,4 4.7,5.05Q5.2,6.4 5.85,6.4Q6.55,6.4 6.9,5.05Q7.25,3.55 7.6,3.4L8.35,1.7L8.8,-0.15L10.2,-3.4Q11.35,-5.85 11.8,-6.35L15.25,-7.3Q16.15,-7.75 16.6,-8.45Q17,-9.15 17,-10.15L16.95,-10.8L16.8,-10.95L16.65,-10.95L15.25,-10.6L13.8,-10.05L18,-19.5L18.9,-20.65Q19.2,-20.65 19.2,-20.05L18.85,-18.2L18.4,-16.4Q18.4,-15.05 19.15,-15.05Q19.5,-15.05 19.9,-15.8L20.75,-18.05L21.45,-21.8Q21.45,-22.7 21.1,-23.4Q20.7,-24.3 19.95,-24.3Q19.25,-24.3 18.4,-23.4M18.5,-10.9Q17.9,-10.9 17.4,-9.75Q16.95,-8.65 16.95,-8.05Q16.95,-7.5 17.5,-7.25L18.45,-6.85L15.25,0.45L15.2,0.5L15.15,0.45L14.55,-0.7L14.15,-0.85L13.75,-0.8L13.05,0.25L12.85,2.05Q12.85,3.55 13.35,4.9Q13.9,6.5 15,7.15L15.35,7.2L15.7,6.95Q16,6.45 16.15,4.05Q16.3,1.35 16.65,0.7L19.65,-5.7L20.1,-6.5L22.3,-6.95Q23.9,-7.25 24.3,-7.7L25.15,-10.7Q25.15,-11.1 24.8,-11.1L23.3,-10.55Q22.25,-10.1 21.75,-10.15L21.55,-10.15L23.85,-15.05L25.5,-17.9L26.75,-19.25Q27.25,-19.25 27.25,-18.85L27.05,-15.95Q27,-15.2 27.8,-15.2L28.3,-15.4Q28.65,-15.7 29.1,-17.7L29.55,-20.35Q29.55,-21.35 29.2,-22Q28.75,-22.95 27.9,-22.95Q27.1,-22.95 26.1,-21.9Q25.05,-20.8 23.95,-18.65L19.9,-10.35Q18.9,-10.9 18.5,-10.9'
    }]
  }, {
    name: 'sfzDynamics',
    bounds: {
      left: -5.7,
      right: 15.95,
      top: -24.1,
      bottom: 6.1
    },
    svgPaths: [{
      d: 'M12.1,-19.55L11.6,-17.1Q11.95,-16.65 12.2,-16.65L12.85,-16.85L13.65,-19.05L14.05,-21.4Q14.05,-22.55 13.6,-23.25Q13,-24.1 11.95,-24.1Q11.1,-24.1 10.25,-23.15L9.25,-21.3L5.9,-12.6L3.5,-11.45L1.4,-10Q1,-8.7 0.95,-7.9Q1,-7.2 1.55,-7.2Q1.95,-7.2 4.5,-8.6L3,-5.2L1.45,-1.95L1.25,-1.9L0.6,-2Q-0.25,-2 -0.7,-1.15Q-1.15,-0.35 -1.15,1.35Q-1.15,2.55 -0.75,4.05Q-0.25,6.1 0.45,6.1L0.95,5.9L1.25,4.2Q2.05,0.7 2.55,-0.6L6.45,-9.5Q9,-10.65 12.3,-11.7Q10.75,-8.65 8.7,-5.9L6.8,-3.35Q6.4,-2.6 6.4,-1.2L6.65,-0.5Q6.9,-0.2 7.3,-0.2Q7.75,-0.2 9.4,-1.1L13.85,-3.8Q14.9,-4.5 15.4,-5.45Q15.95,-6.35 15.95,-7.5L15.9,-8.1Q15.85,-8.3 15.4,-8.35Q14.35,-7.95 12.95,-6.95L10.7,-5.25L14.1,-11.5Q14.5,-12.5 14.5,-13.25L14.25,-14.7L13.5,-15.15Q10.75,-14.6 7.85,-13.4L10.1,-19.15Q10.7,-20.45 11.55,-21Q12.1,-20.5 12.1,-19.55M3.75,-18.3L2.7,-19.35Q1.4,-20.15 -0.05,-20.15L-1.4,-19.9L-2.4,-19.05L-3,-17.65L-3.15,-15.75L-2.85,-13L-1.5,-7.2L-1.55,-7.1L-1.9,-7.05Q-2.95,-7.05 -3.45,-7.35L-3.95,-8Q-4.25,-8.35 -4.6,-8.35L-4.8,-8.3Q-5.7,-7.5 -5.7,-6.05Q-5.7,-5.1 -5.25,-4.4Q-4.8,-3.55 -3.9,-3.55L-1.8,-3.55L-1.3,-3.65Q-0.95,-3.95 -0.2,-5.95L0.45,-8.55Q0.45,-9.65 -0.4,-12.1Q-1.25,-14.4 -1.25,-15.75L-1.15,-16.45L-0.1,-16.75Q0.8,-16.75 1.3,-16.3Q1.75,-15.9 1.75,-15.1L1.65,-13.7Q1.65,-12.5 2.3,-12.5L2.6,-12.5L2.8,-12.75Q3.65,-14.7 4.1,-17L3.75,-18.3'
    }]
  }, {
    name: 'sfpDynamics',
    bounds: {
      left: -5.2,
      right: 18.3,
      top: -21.3,
      bottom: 8.2
    },
    svgPaths: [{
      d: 'M11.25,-21.3Q10.35,-21.3 9.25,-19.95Q8.35,-18.9 7.95,-17.9L5.95,-12.7L4.35,-9L1.2,-8.65L0.6,-7.65Q0.3,-7 0.3,-6.5Q0.3,-5.85 1.2,-5.85L3.15,-5.9L2.15,-3.2L0.9,-0.65Q0.7,-1.4 0.25,-1.4Q-0.4,-1.4 -0.6,-1.05L-1.2,0.75L-0.75,3.3L-0.2,5.6L0.25,5.7L0.75,5.5L1.9,3.15Q2.3,2.15 2.3,1.45L2.2,0.1L2.35,-0.55L4.35,-5.45L4.65,-6L8.4,-6.5Q9.55,-6.8 9.85,-7.3L10.3,-9L10.35,-9.1L10.3,-9.3Q10.1,-9.8 9.55,-9.8L5.95,-9.2Q7.25,-12.65 9.1,-16.8L9.75,-17.6L10.55,-18.1Q11.05,-18.1 11.05,-17.45L10.65,-15.55Q10.3,-14.25 10.3,-13.6Q10.3,-12.55 10.95,-12.55L11.5,-13L12.4,-15.45L13.05,-18.1Q13.05,-19.2 12.7,-20.1Q12.15,-21.3 11.25,-21.3M16.75,-13.25Q15.6,-13.25 14.7,-12.65L12.5,-10.55L10.05,-7.1Q7.35,-2.4 6.65,-0.55L6.2,1.75L5.6,3.95L4.25,4.75Q3.4,5.2 3.25,5.7L2.7,7.9L3.15,8.2L10.1,4.75L10.45,3.55L10.6,2.3L10.55,2L10.4,1.9Q9.55,2 7.35,3.15L7.65,1.85Q9.7,1.25 11.05,0.2L13.55,-2.1L15.8,-4.9L17.65,-8.35Q18.3,-9.95 18.3,-11.3Q18.3,-12.1 17.9,-12.65Q17.5,-13.25 16.75,-13.25M1.05,-13.05L1,-12.85Q0,-11.75 0,-10.2Q0,-9.35 0.7,-9.35Q1.2,-9.35 1.65,-9.8L2.5,-11.1Q3.15,-12.55 3.15,-13.85Q3.15,-15.15 2.3,-16.4Q1.4,-17.8 0.1,-17.8Q-0.7,-17.8 -1.35,-17.3Q-2,-16.85 -2.45,-15.9Q-3.3,-14.4 -3.3,-12.65Q-3.3,-11.65 -2.55,-10Q-1.85,-8.35 -1.85,-7.55Q-1.85,-6.75 -2.2,-6.2L-3.2,-5.35L-3.3,-5.6L-3.2,-6.8Q-3.2,-7.7 -3.7,-7.7L-4,-7.5Q-5.2,-5.35 -5.2,-4Q-5.2,-3.05 -4.85,-2.6Q-4.55,-2.1 -3.9,-2.1Q-3.05,-2.1 -2.35,-2.75Q-1.6,-3.45 -1,-4.75Q-0.5,-5.85 -0.25,-6.95L-0.05,-8.9Q-0.05,-9.9 -0.7,-11.5L-1.35,-13.7L-1.35,-14.15L-0.45,-14.45L0.55,-14.1L1.05,-13.05M8.95,-1.5L9.55,-2.75Q10.85,-5.2 13.05,-8.3L14.55,-9.7Q15.3,-10.15 15.95,-10.15L16.15,-10.15L16.25,-10.05L16.3,-9.5Q16.3,-8.95 15.9,-8.15L14.65,-6.3Q13.25,-4.35 12.1,-3.6L9.1,-1.45L9,-1.4L8.95,-1.5'
    }]
  }, {
    name: 'fpDynamics',
    bounds: {
      left: -0.95,
      right: 18.5,
      top: -21.4,
      bottom: 8.2
    },
    svgPaths: [{
      d: 'M11.5,-21.4Q10.6,-21.4 9.5,-20.05L8.2,-17.9L6.5,-13.45L4.65,-9.05L2.15,-9.45L1.3,-8.55Q0.8,-7.8 0.8,-7.3Q0.8,-6.55 1.75,-6.2L3.3,-5.75L2.4,-3.15L1.15,-0.7L0.85,-1.1L0.45,-1.3Q-0.2,-1.3 -0.65,-0.55L-0.95,0.8L-0.5,3.6Q0.1,5.75 0.7,5.8L0.95,5.6L2.1,3.2Q2.5,2.2 2.5,1.5L2.4,0.25Q2.4,-0.3 3.45,-2.65L4.75,-5.7L7.75,-6Q8.75,-6.25 9.3,-6.6Q9.85,-6.95 10.05,-7.5L10.45,-9.05Q10.45,-9.65 9.5,-9.65L6.2,-9.15L9.35,-16.9Q10.05,-18.1 10.95,-18.15L11.25,-17.1L10.95,-15.35L10.55,-13.7Q10.55,-12.6 11.15,-12.6L11.8,-13Q12.05,-13.25 12.7,-15.45L13.4,-18.15L12.95,-20.2Q12.45,-21.4 11.5,-21.4M16.95,-13.4Q15.9,-13.4 14.95,-12.8Q13.95,-12.15 12.8,-10.75L10.25,-7.2L8.2,-3.65Q7.3,-1.95 6.85,-0.6L6.35,1.85Q5.95,3.8 5.75,3.95L4.5,4.6Q3.75,5 3.45,5.65L2.9,7.7L3.3,8.2Q7.9,6.05 10.3,4.65Q10.85,3.75 10.85,2.5L10.6,1.85Q9.65,1.95 7.55,3Q7.65,2.15 7.95,1.8Q8.65,1.45 9,1.45Q10,1.1 11.25,0.1L13.8,-2.25L16,-5.05L17.85,-8.45Q18.5,-10.05 18.5,-11.45Q18.5,-12.2 18.15,-12.8Q17.7,-13.4 16.95,-13.4M9.15,-1.6L10.45,-4.15L13.55,-8.75L14.95,-9.95L16.15,-10.3L16.45,-10.3L16.5,-10.2L16.6,-9.65Q16.6,-8.8 15.9,-7.65L13.75,-5.05L11.35,-2.85L9.35,-1.55L9.25,-1.5L9.15,-1.6'
    }]
  }, {
    name: 'rfzDynamics',
    bounds: {
      left: -7.6,
      right: 16.3,
      top: -25.1,
      bottom: 5.1
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M14.85,-14.25Q14.85,-12.65 13.35,-10.2L11.05,-6.25L13.3,-7.95Q14.9,-9.05 15.8,-9.35L16.25,-9.1L16.3,-8.5Q16.3,-6.2 14.2,-4.8Q8.65,-1.2 7.65,-1.2Q7.3,-1.2 7,-1.5L6.75,-2.2Q6.75,-3.5 7.2,-4.35L9.1,-6.9Q12.15,-11.05 12.65,-12.7Q10.65,-12.25 6.8,-10.5L4.8,-6.05L2.95,-1.6Q1.9,0.85 1.6,3.2L1.35,4.9L0.85,5.1Q0.1,5.1 -0.35,3.1L-0.8,0.35Q-0.8,-3 1,-3L1.3,-2.9L1.6,-2.9L1.85,-2.95L3.4,-6.2L4.85,-9.6Q2.35,-8.15 1.9,-8.15Q1.4,-8.15 1.3,-8.9L1.8,-11Q2.1,-11.5 3.9,-12.4L6.3,-13.6L8.15,-18.7L9.6,-22.3L10.65,-24.1Q11.5,-25.1 12.3,-25.1Q13.35,-25.1 13.95,-24.25Q14.4,-23.55 14.4,-22.35L14.05,-20.05L13.2,-17.85L12.55,-17.6Q12.25,-17.6 12,-18.1L12.25,-19.3L12.45,-20.55Q12.45,-21.5 11.95,-22Q11.05,-21.4 10.5,-20.15L8.2,-14.4Q12.6,-16.15 13.9,-16.15Q14.85,-16.15 14.85,-14.25M-6.25,-20.05L-5.85,-19.95L-3.15,-21.1L-0.3,-20.8Q1.3,-20.05 1.5,-18.7Q1.75,-17.3 1,-14.3L0.8,-14.05L0.55,-14Q-0.1,-13.85 -0.35,-15L-0.45,-16.4Q-0.75,-18.1 -2.6,-17.7L-3.55,-17.25L-3.5,-16.5Q-3.35,-15.3 -2.05,-13.1Q-0.8,-10.75 -0.6,-9.75L-0.8,-7.05L-1.15,-6L-1.5,-5.8L-2.35,-7.95L-2.3,-8.1L-3,-9.75L-4.5,-13.55L-5.45,-16.15L-6.7,-17.6Q-7.65,-18.5 -7.6,-18.85Q-7.4,-19.8 -6.7,-20.2L-6.25,-20.05'
    }]
  }, {
    name: 'tabClef',
    bounds: {
      left: 0,
      right: 14.15,
      top: 0,
      bottom: 67
    },
    svgPaths: [{
      d: 'M11.1,10.6L9.1,11.45L9.1,16.8L9.05,22.15Q9,26 7.75,26.05Q7.25,26 7.25,24.95L7.25,12.15L4.9,13.1Q3.25,13.8 2.65,13.8Q2,13.8 2,12.45Q2,10.45 3.2,9.85L8.6,7.8L13.4,6Q14.15,6 14.15,7.1Q14.15,9.15 13.1,9.8L11.1,10.6M7.65,31.4Q6.85,31.6 6.2,34.2L5.4,37.6L6.8,37.4L8.25,37.15L7.7,31.5L7.65,31.4M8.95,27.7Q9.35,28.05 9.4,28.5L10.05,35.8Q10.1,36.3 10.5,37.4Q10.85,38.35 10.8,38.95L10.65,39.9L10.5,40.85L10.65,43.1L10.8,45.45Q10.8,46.55 10,46.6Q9.45,46.6 9.2,46.3Q8.85,45.9 8.6,40.85L4.8,41.45L4.4,43.25L4,45.55Q3.75,46.55 3,46.55Q2.25,46.55 2.3,44.45Q2.4,40.9 3.75,35.6Q5.95,27.3 8.15,27.3Q8.65,27.3 8.95,27.7M12.3,59Q12.3,62.2 9.95,64.6Q7.65,67 4.55,67L3.3,66.75Q2.5,66.45 2.5,65.95L2.55,60.65L2.55,55.35Q2.4,55.1 2.4,54.65L2.45,54Q2.65,52.1 4.75,49.85Q6.9,47.6 8.75,47.55Q10.85,47.55 10.85,50.35Q10.85,52.15 8.85,54.75L9.15,54.7Q9.55,54.7 10.25,55.05Q12.3,55.9 12.3,59M8.65,50.6Q7.7,50.6 6,52Q4.25,53.45 4.25,54.35L4.25,55.15L4.3,55.9L7.15,53.6Q8.95,51.8 9.05,50.7L8.65,50.6M4.25,61.6L4.3,63.65L5.3,63.9Q7,63.9 8.75,62.5Q10.5,61.1 10.45,59.35Q10.45,57.9 8.7,57.9Q6.7,57.9 4.2,59.55L4.25,61.6'
    }]
  }, {
    name: 'tab0',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M2.55,-0.4Q2.55,1.9 2.8,2.75Q3,3.6 3.35,3.9L4.15,4.15L5,3.9L5.55,2.85L5.8,-0.4L5.55,-3.55L4.95,-4.7L4.15,-4.95L3.35,-4.7Q3,-4.4 2.8,-3.65Q2.55,-2.7 2.55,-0.4M1.3,-5.7Q2.3,-7 4.15,-7Q6.05,-7 7.15,-5.65Q8.4,-4.05 8.4,-0.4Q8.4,3.3 7.1,4.9Q6.05,6.2 4.15,6.2Q2.25,6.2 1.15,4.75Q0,3.3 0,-0.4Q0,-4.05 1.3,-5.7'
    }]
  }, {
    name: 'tab1',
    bounds: {
      left: 0,
      right: 5.7,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M0,-1.5L0,-3.75Q0.95,-4.1 2.15,-4.95Q3.25,-5.85 3.7,-7L5.7,-7L5.7,6L3.2,6L3.2,-3.4Q1.9,-2.15 0,-1.5'
    }]
  }, {
    name: 'tab2',
    bounds: {
      left: 0,
      right: 8.8,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M2.75,-3L0.3,-3.25Q0.5,-5.25 1.7,-6.15Q2.85,-7 4.6,-7Q6.55,-7 7.65,-5.95Q8.8,-4.95 8.8,-3.4L8.45,-1.75L7.4,-0.1L5.75,1.55L4.25,3L3.75,3.7L8.8,3.7L8.8,6L0,6Q0.15,4.7 0.85,3.5Q1.6,2.35 3.7,0.4L5.75,-1.7Q6.3,-2.5 6.3,-3.25Q6.3,-4.05 5.8,-4.5L4.55,-4.95Q3.75,-4.95 3.3,-4.5Q2.85,-4.05 2.75,-3'
    }]
  }, {
    name: 'tab3',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M4.15,-7Q5.95,-7 6.95,-5.85Q7.85,-4.9 7.85,-3.7Q7.85,-2 6.05,-1Q7.1,-0.75 7.75,0.1Q8.4,0.9 8.4,2.1Q8.4,3.8 7.15,5Q6,6.2 4.2,6.2Q2.45,6.2 1.3,5.2Q0.2,4.15 0,2.5L2.4,2.2Q2.5,3.15 2.95,3.65Q3.45,4.15 4.15,4.15Q4.85,4.15 5.35,3.6Q5.85,3 5.85,2Q5.85,1.05 5.4,0.5Q4.95,-0.05 4.25,-0.05L3.25,0.15L3.5,-1.85Q4.45,-1.85 4.95,-2.3Q5.4,-2.75 5.4,-3.55Q5.4,-4.2 5.05,-4.6Q4.7,-4.95 4.05,-4.95Q3.45,-4.95 3.05,-4.5Q2.6,-4.05 2.55,-3.2L0.3,-3.6Q0.5,-4.8 1,-5.5Q1.45,-6.2 2.3,-6.6L4.15,-7'
    }]
  }, {
    name: 'tab4',
    bounds: {
      left: 0,
      right: 9.2,
      top: -7,
      bottom: 5.9
    },
    svgPaths: [{
      d: 'M7.6,-7L7.6,1.15L9.2,1.15L9.2,3.35L7.6,3.35L7.6,5.9L5.15,5.9L5.15,3.35L0,3.35L0,1.2L5.45,-7L7.6,-7M5.15,1.15L5.15,-3.1L2.3,1.15L5.15,1.15'
    }]
  }, {
    name: 'tab5',
    bounds: {
      left: 0,
      right: 8.7,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M3.05,-2.5L4.75,-2.9Q6.4,-2.9 7.55,-1.7Q8.7,-0.5 8.7,1.4Q8.7,3.05 7.8,4.3Q6.55,6 4.3,6Q2.5,6 1.35,5.05Q0.2,4.05 0,2.4L2.45,2.15Q2.55,3 3.1,3.5Q3.6,3.95 4.3,3.95Q5.05,3.95 5.6,3.35Q6.1,2.7 6.1,1.5Q6.1,0.3 5.6,-0.3Q5.05,-0.9 4.2,-0.9Q3.1,-0.9 2.3,0.05L0.3,-0.25L1.55,-7L8.15,-7L8.15,-4.7L3.4,-4.7L3.05,-2.5'
    }]
  }, {
    name: 'tab6',
    bounds: {
      left: 0,
      right: 8.6,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M2.55,-1.35Q3.45,-2.45 4.85,-2.45Q6.4,-2.45 7.5,-1.25Q8.6,-0.05 8.6,1.8Q8.6,3.8 7.45,5Q6.3,6.2 4.5,6.2Q2.55,6.2 1.25,4.7Q0,3.15 0,-0.3Q0,-3.85 1.3,-5.45Q2.6,-7 4.7,-7Q6.2,-7 7.15,-6.2Q8.05,-5.35 8.3,-3.8L6,-3.55L5.5,-4.65L4.55,-4.95Q3.75,-4.95 3.2,-4.25Q2.7,-3.55 2.55,-1.35M3.25,-0.05Q2.75,0.5 2.75,1.6Q2.75,2.85 3.3,3.5Q3.9,4.15 4.6,4.15Q5.3,4.15 5.8,3.65Q6.25,3.1 6.25,1.85Q6.25,0.6 5.75,0Q5.25,-0.6 4.5,-0.6Q3.75,-0.6 3.25,-0.05'
    }]
  }, {
    name: 'tab7',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 5.8
    },
    svgPaths: [{
      d: 'M8.4,-7L8.4,-5.15Q7.35,-4.15 6.25,-2.2Q5.2,-0.25 4.65,1.9Q4.05,4.1 4.1,5.8L1.7,5.8Q1.75,3.1 2.8,0.3Q3.85,-2.45 5.6,-4.7L0,-4.7L0,-7L8.4,-7'
    }]
  }, {
    name: 'tab8',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M0.3,-3.7Q0.3,-5.15 1.3,-6.05Q2.3,-7 4.15,-7Q6,-7 7,-6.05Q7.95,-5.15 7.95,-3.7Q7.95,-2.8 7.55,-2.1Q7.1,-1.4 6.25,-1Q7.3,-0.6 7.9,0.25Q8.4,1.1 8.4,2.15Q8.4,3.95 7.3,5.1Q6.15,6.2 4.3,6.2Q2.55,6.2 1.35,5.3Q0,4.2 0,2.25Q0,1.2 0.5,0.35Q1.05,-0.55 2.15,-1Q1.2,-1.45 0.75,-2.15Q0.3,-2.85 0.3,-3.7M4.15,-1.95Q4.85,-1.95 5.3,-2.35Q5.7,-2.8 5.7,-3.5Q5.7,-4.2 5.3,-4.65Q4.85,-5.05 4.15,-5.05Q3.45,-5.05 3.05,-4.6Q2.6,-4.2 2.6,-3.5Q2.6,-2.75 3.05,-2.35Q3.45,-1.95 4.15,-1.95M6,2.05Q6,1.15 5.5,0.6Q5,0 4.2,0Q3.35,0 2.9,0.65Q2.45,1.3 2.45,2.05Q2.45,3.1 2.95,3.65Q3.5,4.25 4.25,4.25Q5,4.25 5.5,3.7Q6,3.15 6,2.05'
    }]
  }, {
    name: 'tab9',
    bounds: {
      left: 0,
      right: 8.6,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M2.9,-4.4Q2.45,-3.9 2.45,-2.65Q2.45,-1.35 2.95,-0.8Q3.45,-0.2 4.2,-0.2Q4.9,-0.2 5.35,-0.75Q5.85,-1.3 5.85,-2.45Q5.85,-3.65 5.3,-4.3Q4.75,-4.95 4.05,-4.95Q3.35,-4.95 2.9,-4.4M1.15,-5.8Q2.35,-7 4.15,-7Q6.1,-7 7.35,-5.5Q8.6,-3.95 8.6,-0.5Q8.6,3.05 7.3,4.65Q6,6.2 3.9,6.2Q2.4,6.2 1.5,5.4Q0.55,4.6 0.3,3L2.7,2.75Q2.75,3.5 3.15,3.85Q3.5,4.15 4.1,4.15Q4.85,4.15 5.4,3.45Q5.9,2.75 6.05,0.55Q5.15,1.65 3.75,1.65Q2.2,1.65 1.1,0.45Q0,-0.7 0,-2.6Q0,-4.6 1.15,-5.8'
    }]
  }, {
    name: 'halfBendAlteration',
    bounds: {
      left: 0,
      right: 17.15,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M2.7,-4.95L4.25,-4.95L4.25,4.85L2.4,4.85L2.4,-2.25Q1.35,-1.25 0,-0.8L0,-2.5L1.6,-3.4Q2.45,-4.1 2.7,-4.95M10.75,-2.1Q10.9,-3.65 11.8,-4.35Q12.65,-4.95 14,-4.95Q15.5,-4.95 16.3,-4.2Q17.15,-3.4 17.15,-2.25L16.9,-1L16.1,0.25L14.85,1.5L13.75,2.55L13.35,3.1L17.15,3.1L17.15,4.85L10.55,4.85Q10.7,3.85 11.2,2.95Q11.7,2.05 13.3,0.6L14.85,-1Q15.25,-1.55 15.25,-2.1L14.95,-3.1L13.95,-3.4L13,-3.1Q12.65,-2.75 12.6,-1.95L10.75,-2.1M10.2,-5L7.85,5L6.4,5L8.7,-5L10.2,-5'
    }]
  }, {
    name: 'fullBendAlteration',
    bounds: {
      left: 0,
      right: 19.25,
      top: -5,
      bottom: 5.05
    },
    svgPaths: [{
      d: 'M4.65,-4.8L4.4,-3.5L3.55,-3.6L3,-3.45Q2.75,-3.2 2.75,-2.7L2.75,-2.25L4.2,-2.25L4.2,-0.75L2.75,-0.75L2.75,4.9L0.95,4.9L0.95,-0.75L0,-0.75L0,-2.25L0.95,-2.25L0.95,-2.75L1.15,-4.05Q1.3,-4.5 1.8,-4.8L3.1,-5L4.65,-4.8M7.15,-2.25L7.15,1.05L7.2,2.9L7.6,3.4L8.25,3.65L9.1,3.35L9.6,2.7Q9.8,2.3 9.8,0.75L9.8,-2.25L11.6,-2.25L11.6,4.9L9.85,4.9L9.85,3.8L8.9,4.75L7.6,5.05L6.35,4.75Q5.75,4.45 5.5,3.9Q5.25,3.3 5.25,2.3L5.25,-2.25L7.15,-2.25M19.25,-4.85L19.25,4.9L17.4,4.9L17.4,-4.85L19.25,-4.85M15.45,-4.85L15.45,4.9L13.6,4.9L13.6,-4.85L15.45,-4.85'
    }]
  }, {
    name: 'pullOff',
    bounds: {
      left: -4.5,
      right: 5.4,
      top: -6,
      bottom: 6.95
    },
    svgPaths: [{
      d: 'M2.75,-1.95L2.3,-3.15Q1.9,-3.6 1.25,-3.7L-0.65,-3.8L-1.9,-3.8L-1.9,-0.1L-0.45,-0.1L1.6,-0.3Q2.15,-0.5 2.45,-0.95L2.75,-1.95M5.4,-2Q5.4,-0.8 4.95,0Q4.55,0.85 3.85,1.3L2.5,1.9L-0.2,2.1L-1.9,2.1L-1.9,6.95L-4.5,6.95L-4.5,-6L-0.3,-6L2.8,-5.8Q3.9,-5.5 4.65,-4.5Q5.4,-3.55 5.4,-2'
    }]
  }, {
    name: 'hammerOn',
    bounds: {
      left: -5,
      right: 5.3,
      top: -6,
      bottom: 6.95
    },
    svgPaths: [{
      d: 'M2.7,-6L5.3,-6L5.3,6.95L2.7,6.95L2.7,1.25L-2.4,1.25L-2.4,6.95L-5,6.95L-5,-6L-2.4,-6L-2.4,-0.9L2.7,-0.9L2.7,-6'
    }]
  }, {
    name: 'octaveUp',
    bounds: {
      left: 0,
      right: 25.75,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M25.55,3.75Q25.55,0 24.2,0Q23.65,0 23.1,0.45Q22.55,0.95 21.95,1.95Q20.45,5.2 19.7,7.8Q17.65,14.6 17.65,17.85Q17.65,18.8 18.3,19L18.55,18.8L19.2,15.8Q19.4,13.9 19.9,12.8L23.8,11.35L22.95,14.8Q22.35,16.9 22.35,18.35Q22.35,18.85 22.8,19Q23.3,18.9 23.6,18.1L24.35,13.95Q24.6,12.3 25,11.1L25.45,10.05L25.75,9L25.65,8.35Q25.4,8.1 25.4,7.5L25.5,5.65L25.55,3.75M23.55,2.75Q24.1,2.75 24.1,4.9L24.1,8.35L22.4,9.25L20.45,9.9Q20.4,9.05 21.65,5.95L22.8,3.55Q23.25,2.75 23.55,2.75M12.95,7.75Q12.95,6.1 12.7,6.1Q12.3,6.1 11.9,6.9L11.5,8.05L11.5,15Q11.5,16.05 11.95,17.2Q12.45,18.7 13.35,18.7L14.45,18.25L15.75,16.05L17.45,11.65Q19.25,6.3 19.25,4.45Q19.25,3.25 18.95,3.25Q18.5,3.25 18.05,4.95L15.9,11.75L14.7,14.45L13.65,15.7Q12.9,14.6 12.9,9.8L12.95,7.75M8.45,5.7Q8.45,6.5 7.05,7.25L4.95,7.9Q4.45,7.9 4.4,7.55Q4.7,6.85 6,5.65Q7.35,4.35 8.05,4.35L8.35,4.45L8.45,5L8.45,5.7M7.5,1.85L5.75,3.05Q4.1,4.55 3.4,6Q2.7,7.6 2.7,9Q2.7,10 3.9,10.65L4.05,10.8Q3.75,11.7 1.75,14Q0.85,14.95 0.45,15.9Q0,16.8 0,17.65Q0,18.8 0.5,19.4Q1.05,20 2.1,20Q3.6,20 4.95,19.2Q6.35,18.45 7.6,16.9Q8.8,15.4 9.45,13.9Q10.05,12.45 10.05,10.95L9.55,7.65L10.35,3.45Q10.35,2.45 10.05,1.95Q9.7,1.45 9.05,1.45L7.5,1.85M7.55,11.15Q7.9,11.15 8.25,11.4L8.55,12.1Q8.55,12.85 8,13.65L6.4,15.35L4.45,16.7L2.8,17.1Q2.1,17.1 1.8,16.75Q1.85,16.15 2.45,15.3L4.15,13.35Q5.25,12.25 6.1,11.7Q7,11.15 7.55,11.15'
    }]
  }, {
    name: 'octaveDown',
    bounds: {
      left: 0,
      right: 28.6,
      top: -19.95,
      bottom: 0
    },
    svgPaths: [{
      d: 'M17.35,-12.5L13.85,-6.65L13.35,-5.95L13.25,-5.9L13,-12.7L12.45,-13.05L11.8,-12.7Q11.35,-11.3 11.35,-10.35Q11.35,-6.45 11.65,-4.15Q11.9,-1.9 12.4,-1.3L12.85,-1.25Q13.55,-1.25 14.05,-2.25L14.7,-3.85L17.9,-9.7L19.55,-13.25Q20.05,-14.7 20.05,-15.5L20.05,-17.35Q20.05,-17.8 19.45,-17.65L17.35,-12.5M6,-13.85Q6.3,-13.85 6.3,-13.65Q6.1,-12.95 4.85,-12.05Q3.55,-11.25 2.75,-11.25Q2.2,-11.25 2.25,-11.6Q3.2,-12.75 4.15,-13.3Q5.05,-13.85 6,-13.85M2.35,-15.05Q1.25,-14.05 0.75,-12.95Q0.25,-11.85 0.25,-10.6Q0.25,-9.6 0.65,-9L1.95,-8.05L2.05,-7.95L0.7,-5.85Q0,-4.6 0,-3.5Q0,-1.9 0.55,-1.1Q1.1,-0.3 2.2,-0.3Q2.9,-0.3 3.85,-0.8L5.95,-2.35L7.7,-4.1L8.75,-5.7Q9.2,-6.8 9.2,-8.75Q9.2,-9.65 8.8,-10.4L7.55,-11.55L7.5,-11.75Q8.4,-13.6 8.4,-14.65Q8.4,-15.85 8,-16.5Q7.6,-17.1 6.75,-17.1Q4.35,-17.1 2.35,-15.05M7.6,-8L7.1,-6.8L5.65,-5.3L3.9,-4L2.65,-3.6Q1.9,-3.6 1.8,-3.9L1.85,-4.1Q3.15,-6.2 4.45,-7.3Q5.75,-8.35 7.05,-8.35L7.4,-8.25L7.6,-8.1L7.6,-8M19.75,-1.1Q19.95,-0.4 20.4,-0.05L20.75,0Q22.1,-0.45 23.4,-1.3L25.85,-3.35L27.8,-6Q28.45,-7.35 28.45,-8.65Q28.45,-10 27.9,-10.75Q27.5,-11.4 26.2,-12.1Q28.6,-15.8 28.6,-17.6Q28.6,-19.1 27.7,-19.8L26.9,-19.95Q25.9,-19.95 24.6,-19.05L22.95,-17.5L21.75,-15.5Q21,-13.75 20.6,-11.1L19.55,-2.7L19.75,-1.1M23.85,-14.9Q25.2,-16.2 26.45,-16.65L26.65,-16.65L26.65,-16.5L24.8,-14.05Q23.4,-12.4 22.65,-12.05L22.45,-12.05L22.4,-12.2L22.8,-13.5L23.85,-14.9M22.05,-8.95L23.05,-9Q26.15,-9 26.55,-7.9Q26.2,-6.85 24.5,-5.35Q22.75,-3.75 21.8,-3.75L21.25,-4L21.1,-4.4L21.5,-6.75Q21.85,-8.8 22.05,-8.95'
    }]
  }, {
    name: 'trill',
    bounds: {
      left: 0,
      right: 15.7,
      top: -12.7,
      bottom: 7.9
    },
    svgPaths: [{
      d: 'M7.2,-12.65Q6.4,-11.9 5.8,-10L4.8,-6.95L1.05,-6.65Q0.75,-6.4 0.4,-5.4L0,-3.95Q0,-3.05 1.95,-3.05L3.9,-3.15L3.95,-3.15Q3.05,0.9 2.6,5.35Q2.6,6.15 3.05,6.5Q3.5,6.95 4.35,6.95Q5.6,6.95 9.15,3.4L12.05,0.7Q13.1,-0.2 13.5,-0.2L13.75,0.3Q13.75,1.25 13.15,3.25Q12.55,5.2 12.55,6.3Q12.55,7.1 12.8,7.5Q13.1,7.9 13.6,7.9Q14,7.9 14.4,6.8L14.9,5.4L14.7,4.75L14.4,4.2L15.2,1.15Q15.7,-0.65 15.7,-2Q15.7,-2.95 15.35,-3.45Q15,-3.95 14.25,-3.95Q13.65,-3.95 12.4,-3.05L9.35,-0.35Q6.85,2.05 5.05,3.2L4.75,3L5.05,-0.3Q5.3,-2.55 5.7,-3.35L9,-3.65Q9.65,-3.7 9.9,-4.3L10.2,-6Q10.2,-6.65 9.8,-6.8L6.35,-6.95L8,-12.2L7.6,-12.7L7.2,-12.65'
    }]
  }, {
    name: 'graceUp',
    bounds: {
      left: -4.45,
      right: 9.6,
      top: 0,
      bottom: 20.85
    },
    svgPaths: [{
      d: 'M9.6,11.7L-4.45,20.85L-4.45,18.4L9.6,9.2L9.6,11.7'
    }]
  }, {
    name: 'graceDown',
    bounds: {
      left: -2.75,
      right: 10.7,
      top: -18.45,
      bottom: 0
    },
    svgPaths: [{
      d: 'M10.7,-9.85L-2.75,-18.45L-2.75,-16.55L10.7,-8L10.7,-9.85'
    }]
  }, {
    name: 'tap',
    bounds: {
      left: -5,
      right: 5.2,
      top: 0,
      bottom: 12.95
    },
    svgPaths: [{
      d: 'M5.2,2.2L1.4,2.2L1.4,12.95L-1.2,12.95L-1.2,2.2L-5,2.2L-5,0L5.2,0L5.2,2.2'
    }]
  }, {
    name: 'tremolo3',
    bounds: {
      left: -9.35,
      right: 9.5,
      top: -11.1,
      bottom: 10.85
    },
    svgPaths: [{
      d: 'M8.1,-9.05Q8.9,-9.75 8.9,-10.35L8.45,-11.1L3.45,-9.9L-1.05,-8.25L-4.3,-7.05L-7.45,-6.2L-8,-6.15L-8.85,-4.6L-9.35,-2.8Q-9.35,-1.9 -8.55,-1.9Q-6,-2.35 -3.7,-3.2Q-1.4,-4.05 1.1,-5.3L5.55,-7.45L8.1,-9.05M5.3,-4.2L0.3,-2.15L-5.9,0.1Q-7.15,0.55 -7.95,1.25Q-8.7,1.9 -9.05,2.7Q-9.35,2.95 -9.35,3.5Q-9.35,4.5 -8.4,4.6Q-3.5,3.05 1.35,1.1Q5.35,-0.85 7.45,-2.25Q9.45,-3.65 9.45,-4.35Q9.45,-4.9 8.85,-4.9L5.3,-4.2M8.1,1.3L-3.3,5.5Q-6.9,6.9 -7.75,7.45L-8.4,8.55Q-8.8,9.2 -8.8,9.75Q-8.8,10.85 -7.7,10.85L-7.1,10.8L-4.7,10L2.55,7.45Q5.45,6.05 7.15,4.85Q8.85,3.6 9.4,2.5L9.5,2.3Q9.5,1.65 9,1.55L8.1,1.3'
    }]
  }, {
    name: 'tremolo1',
    bounds: {
      left: -8.5,
      right: 8.35,
      top: -5.4,
      bottom: 5.9
    },
    svgPaths: [{
      d: 'M8.3,-3.7L8.35,-3.9Q8.35,-4.5 7.95,-4.9Q7.55,-5.4 7,-5.4L5.75,-5Q1.45,-3.3 -0.6,-2.2L-6.6,1.55L-7.75,2.75Q-8.5,3.75 -8.5,4.1L-8.45,5.2L-7.9,5.9Q-7.1,5.9 -5,4.85Q-2.9,3.8 0.45,1.8L5.75,-1.55Q7.7,-2.95 8.3,-3.7'
    }]
  }, {
    name: 'tremolo2',
    bounds: {
      left: -10.4,
      right: 9.35,
      top: -7.7,
      bottom: 9.2
    },
    svgPaths: [{
      d: 'M8.25,-7.7Q5.7,-7.5 4.35,-6.9L-9.9,0.65Q-10.2,1.55 -9.6,2.7L-9.3,2.95L-8.9,2.95L-7.4,2.65L-5.65,1.8L4.45,-4.1L8.85,-6.85Q8.9,-7.25 8.25,-7.7M5,-1.25Q3.15,-0.5 0.95,0.65L-5.95,4.45Q-9.35,6.45 -10.4,7.7Q-10.3,8.55 -9.6,8.95L-9.2,9.2Q-7.55,8.9 -5.75,7.8L7,0.3L9.35,-1.45Q8.9,-2.35 8.3,-2.3L5,-1.25'
    }]
  }, {
    name: 'quarterBendAlteration',
    bounds: {
      left: 0,
      right: 17.2,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M16,-4.9L16,1.25L17.2,1.25L17.2,2.9L16,2.9L16,4.85L14.1,4.85L14.1,2.9L10.2,2.9L10.2,1.25L14.35,-4.9L16,-4.9M10.2,-5L7.95,5L6.45,5L8.7,-5L10.2,-5M0,-0.85L0,-2.5Q0.75,-2.75 1.55,-3.4Q2.45,-4.1 2.75,-4.95L4.25,-4.95L4.25,4.85L2.4,4.85L2.4,-2.25Q1.4,-1.25 0,-0.85M14.1,1.25L14.1,-2L11.95,1.25L14.1,1.25'
    }]
  }, {
    name: 'repeatMeasure',
    bounds: {
      left: 0,
      right: 21,
      top: -19.25,
      bottom: 0
    },
    svgPaths: [{
      d: 'M19.25,-19L1.9,-6.1L0.25,-4.35Q0,-3.9 0,-2.65L0.05,-0.9Q0.2,-0.3 1.2,0Q4.9,-3.5 8.1,-5.9L14.5,-10.6L20.75,-15.3L21,-16.55Q21,-18.45 20.25,-19L19.75,-19.1L19.25,-19M4.85,-19.25L3.45,-18.8L2.45,-17.65Q1.85,-16.3 1.85,-14.6Q1.85,-11.6 3.55,-11.4Q6.15,-12.3 6.15,-17.9L6.15,-18.6Q5.95,-19.25 4.85,-19.25M17,-7.65Q15.75,-7.65 15.15,-6.55Q14.5,-5.45 14.5,-3.25Q14.5,-2.1 14.9,-1.25Q15.45,-0.15 16.45,-0.15Q17.15,-0.15 17.55,-0.6L18.2,-2.65L18.45,-4.85Q18.45,-6.25 18.1,-6.95Q17.7,-7.65 17,-7.65'
    }]
  }, {
    name: 'breath',
    bounds: {
      left: -2.7,
      right: 2.55,
      top: 0,
      bottom: 13.8
    },
    svgPaths: [{
      d: 'M2.55,3.9Q2.55,2.9 2.05,1.55Q1.5,0 0.55,0Q-0.65,0 -1.75,2.3Q-2.7,4.25 -2.7,5.6L-2.55,6.45Q-2.1,7.1 -1.1,7.1L0.05,6.8L0.2,6.85Q0.25,7.35 -0.85,9.7Q-2.1,12.2 -2.1,12.95L-2.1,13.15L-1.85,13.65L-1.4,13.8Q-0.85,13.7 -0.05,12.8Q1.1,11.3 1.85,8.6Q2.55,6.15 2.55,3.9'
    }]
  }, {
    name: 'caesura',
    bounds: {
      left: -12.1,
      right: 9.65,
      top: -0.65,
      bottom: 26.7
    },
    svgPaths: [{
      d: 'M9.4,-0.65Q8.95,-0.65 8.05,0.05Q6.8,0.95 5.5,2.9L3.35,6.15L1.35,9.75L-2,16.85L-4.1,20.95L-5.55,23.6L-6.35,26Q-5.85,26.7 -5.05,26.7L-4.55,26.7Q-3.3,25.6 -2.25,23.75L-0.4,20.4Q1.1,17.8 2.4,14.75L6.7,5.25L8.45,2.4Q9.65,0.35 9.65,-0.35L9.4,-0.65M3.15,-0.45L2.65,-0.5Q0.55,0.7 -2,4.95L-6.2,13.3L-9.6,20.15L-12.1,24.05Q-11.9,24.95 -10.8,25.7L-10.35,25.75Q-9.7,25.45 -9.1,24.8L-7.85,23.1L-6,19.7Q-5.05,18 -4.2,15.9L-1.7,10.1Q0.05,6.1 1,4.45L2.4,2.15L3.55,-0.25L3.15,-0.45'
    }]
  }, {
    name: 'commonTime',
    bounds: {
      left: 0,
      right: 14.75,
      top: -12.05,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M7.75,-8L9.2,-8.4L10.1,-7.9L9.5,-5.95Q9.05,-4.7 9.05,-3.9Q9.05,-2.3 9.85,-2.3Q10.7,-2.3 11.3,-2.7Q11.9,-3.1 12.3,-3.9Q13,-5.25 13,-6.95L12.8,-9.2Q12.6,-10.15 12.2,-10.75L11.2,-11.7L9.8,-12.05L8,-11.7Q7.15,-11.35 6.25,-10.6L4.55,-8.85L2.95,-6.35Q1.45,-3.85 0.75,-1.6Q0,0.65 0,2.65Q0,6.35 1.8,9.05Q2.85,10.55 4.25,11.25Q5.65,12.05 7.4,12.05Q9.2,12.05 10.8,11.2Q12.45,10.4 13.9,8.75Q14.65,7.85 14.7,7.25L14.75,6Q14.75,4.7 14.45,4.7L13.45,5.75L11.5,7.5Q10.1,8.45 8.55,8.45L5.9,8.05Q4.75,7.65 3.85,6.8Q2.95,5.95 2.5,4.8Q2.05,3.65 2.05,2.2Q2.05,0.75 2.45,-0.7L3.65,-3.65Q4.45,-5.2 5.5,-6.3Q6.55,-7.4 7.75,-8'
    }]
  }, {
    name: 'cutTime',
    bounds: {
      left: 0,
      right: 14.85,
      top: -21.85,
      bottom: 21.9
    },
    svgPaths: [{
      d: 'M7.45,-21.7L6.95,-21.85Q6.45,-21.85 6.1,-20.9L5.85,-19.45L6.15,-7.8L3.9,-5.1L2,-2Q1,-0.05 0.5,1.6Q0,3.35 0,4.85Q0,6.65 0.4,7.9Q0.8,9.2 1.55,10Q2.3,10.75 3.55,11.2L6.55,11.75L6.65,20.3Q6.65,21.25 7.05,21.8L7.5,21.9L8.15,20.85L8.35,19.15L8.3,11.55L10.2,10.55L12.15,8.8L13.8,6.7Q14.4,5.7 14.45,4.85L14.7,2.6Q14.75,2.1 14.25,2.1Q13.85,2.1 11.5,4.9L9.45,7L8.05,7.65L8.05,7.5L8.1,-5.8Q9,-6.5 11.25,-6.9L10.15,-4.3Q9.4,-2.6 9.4,-1.65Q9.4,-0.55 9.75,0.05Q10.1,0.55 10.8,0.55Q11.55,0.55 12.2,-0.1L13.6,-2.1Q14.85,-4.5 14.85,-6.1Q14.85,-7.75 14.25,-9.1L13.3,-10.35L11.95,-10.8L9.95,-10.35L7.95,-9.1L7.8,-18.35Q7.7,-21.5 7.45,-21.7M4.85,-2.7L6.35,-4.35L6.5,7.9L6.35,7.9L4.65,7.65Q3.9,7.45 3.4,6.95L2.7,5.75Q2.45,5.05 2.45,4.1Q2.45,2 3.6,-0.45L4.85,-2.7'
    }]
  }, {
    name: 'turn',
    bounds: {
      left: -14.75,
      right: 12.75,
      top: 0,
      bottom: 15.3
    },
    svgPaths: [{
      d: 'M12.75,2.75L12.6,0.7Q12.45,0 12.15,0Q11.7,0 10.6,2.5L8.25,7.1L6.5,8.95Q5.65,9.55 4.8,9.55Q3.8,9.55 2.85,9L0.85,7.3L-2.55,3.15Q-3.55,2.05 -4.7,1.5Q-5.75,0.95 -6.9,0.95L-8.4,1.25L-9.85,2.15Q-11.65,4.15 -12.5,5.8Q-13.65,7.9 -14.2,9.8Q-14.75,11.75 -14.75,13.45L-14.45,15.15L-13.95,15.3Q-13.35,15.3 -12.8,13.6L-11.6,9.95L-10.6,8L-9.35,6.85Q-8.7,6.4 -8.25,6.4Q-7.15,6.4 -6.15,6.95Q-5.1,7.45 -4.15,8.55L-0.7,12.65Q0.3,13.75 1.45,14.3L3.75,14.8L5.4,14.55L7,13.7Q8.05,12.95 10.05,10.4Q11.4,8.4 12.1,6.45Q12.75,4.55 12.75,2.75'
    }]
  }, {
    name: 'mordent',
    bounds: {
      left: -12.75,
      right: 14.8,
      top: -0.25,
      bottom: 9.25
    },
    svgPaths: [{
      d: 'M14.8,1.4L14.6,0.15L14.35,-0.1Q13.8,0 12.2,2.25Q10.55,4.65 9.9,5.05L9.7,5.1L8.55,4.45L6.75,2.4Q4.6,-0.25 4,-0.25Q3.05,-0.25 0.9,1.9L-2.2,4.65Q-2.65,4.65 -4.25,2.25Q-5.05,1 -5.7,0.45Q-6.35,-0.15 -6.95,-0.15Q-8.6,-0.15 -10.75,3.25L-12.25,6.2L-12.75,8.45Q-12.75,9.4 -12.2,9.25Q-11.3,8.75 -9.6,6.15L-8.3,4.35Q-7.7,3.7 -7.35,3.7Q-6.85,3.9 -5.15,6.3Q-3.65,8.45 -2.55,8.45L-1.2,8L0.6,6.6L3.65,4L4,4L7.1,7.5L9.5,9.1L11.1,8L12.95,5.8L14.35,3.35L14.8,1.4'
    }]
  }, {
    name: 'invertedMordent',
    bounds: {
      left: -9.95,
      right: 12.4,
      top: 0,
      bottom: 21.25
    },
    svgPaths: [{
      d: 'M12.4,7.5Q12.4,6.55 11.7,6.35Q10.95,6.45 9.6,8.7L7.7,11.6L7.6,11.6Q6.95,11.15 5.65,9.1Q4.45,7.2 3.65,6.75Q2.5,6.95 1.25,8.55L1.35,3Q1.35,1.15 0.9,0.3L0.1,0Q-0.5,0 -0.85,0.55Q-1.15,1.05 -1.15,2L-0.9,3.8Q-0.75,4.85 -0.75,7.5L-0.85,11.15L-1.5,11.6Q-1.9,11.6 -3.15,9.2Q-4.4,6.85 -5.3,6.85L-6.1,7L-6.75,7.85Q-8.35,10 -9.15,11.8Q-9.95,13.6 -9.95,14.95L-9.9,16L-9.75,16.3L-9.5,16.25Q-9,15.9 -7.5,13.15Q-6.2,10.7 -5.6,10.65L-5.45,10.75L-4.3,12.15L-3.25,14.1Q-2.55,15.45 -1.8,15.45L-1,15.2L-1.15,20.2Q-1.15,21.25 -0.55,21.25Q0.05,21.25 0.4,20.35Q0.8,19.45 0.9,17.7L1.1,13.05L3.2,10.9L3.45,10.9L4.75,12.9Q5.4,14.25 6.65,15.2Q7.15,15.55 7.35,15.55L8.85,14.35L10.55,11.95L11.95,9.35L12.4,7.5'
    }]
  }, {
    name: 'pedalDown',
    bounds: {
      left: 0,
      right: 29.6,
      top: 0,
      bottom: 19.05
    },
    svgPaths: [{
      d: 'M21.35,3.75Q18.3,4.9 18.15,5.3L17.7,6.5L17.5,7.85L17.5,8.15L17.7,8.45L18.2,8.6L19.2,8.1Q19.95,7.65 20.35,7.65L19.75,12.1L19.6,17.1Q19.6,18.55 19.75,18.9L20.3,19Q21.1,19 21.7,18.25L22.65,16.9L26.4,10.4L27.35,7.85L27.65,5.75Q27.65,2.55 24.9,2.55L21.35,3.75M21.95,7Q23.3,6.15 24.7,6.15Q25.9,6.15 25.9,7.15Q25.9,7.9 25.55,8.65L23.7,12.05Q22,14.8 21.7,14.8Q21.3,14.8 21.15,14.4L21.4,10.3Q21.75,7.35 21.95,7M27.65,18.25Q27.65,19.05 28.2,19.05Q28.8,19.05 29.25,17.95L29.6,16.25Q29.6,15.5 28.95,15.5Q28.35,15.5 27.95,16.6Q27.65,17.55 27.65,18.25M16.65,1.1L13.95,2.6Q10.5,4.85 10.05,5.55Q9.6,6.1 9.4,6.9L9.2,8.75Q9.2,9.15 9.6,9.15L10,9L9.6,16.2Q9.6,17.75 10.1,18.25Q10.65,18.8 12.2,18.8Q16.85,18.8 16.85,14.95Q16.85,14.15 16.4,14.25L16.2,14.3L14.45,15.25L12.45,15.55L11,15.45L11.15,13L14.05,12.05Q16.25,11.1 16.4,10.5L16.85,8.3L16.85,8L16.4,7.7L14.05,8.85Q11.9,9.95 11.05,9.95L11.1,8.75L11.05,8.25Q11.25,7.8 11.8,7.45L17.8,3.8Q18.55,3.25 18.55,1.55L18.3,0.65Q17.75,0.6 16.65,1.1M9.15,0.8Q8.5,0 6.85,0Q4.95,0 2.85,1.6L1.15,3.25Q0.45,4.1 0.2,5L0,6.65Q0,7.1 0.3,7.45L0.65,7.45L2.4,5.8L3.95,4.25Q4.95,3.5 6.3,3.5Q7.25,3.5 7.85,3.95Q7.75,4.55 7.25,5.15L5.6,6.5Q3.65,7.75 2.4,7.85L2.35,6.65L2.15,6.5L1.85,6.65Q1.45,7.55 1.35,8.9L0.85,17.55Q0.8,18.25 1.4,18.25L2.4,17.6Q2.8,17.1 2.8,16.45L2.45,15.7L2.15,15.05L2.35,11.6L4.3,10.5L6.25,9.4Q8,8 8.85,6.45Q9.7,4.9 9.7,3.25Q9.7,1.5 9.15,0.8'
    }]
  }, {
    name: 'pedalUp',
    bounds: {
      left: 0,
      right: 18.95,
      top: -3.95,
      bottom: 18.95
    },
    svgPaths: [{
      d: 'M7,-0.05L7.25,3.35L7.35,3.95L5.45,2.2Q4.7,1.65 4.3,1.65Q3.65,1.65 3.3,2.5Q2.95,3.35 2.95,5Q2.95,5.45 3.65,5.9L4.75,6.55L3.55,6.65L1.7,6.55Q0.65,6.55 0.3,7.3Q0,7.85 0,9Q0,10 0.5,10.55Q0.9,11.05 1.8,11.05L5.1,10.25L4.3,11.9Q3.75,12.95 3.75,13.65L3.95,14.7Q4.3,15.1 4.6,15.1L5.45,14.5L7.65,10.8L8.05,15.25Q8.05,16.85 8.3,17.8Q8.45,18.7 8.8,18.95L9,18.9L9.2,18.75Q9.95,17.05 9.95,16.4L9.45,10.6L11.75,12.2L14.05,13.5L14.3,13.35Q14.9,12.5 14.9,11.85Q14.9,11.05 14.15,10L11.85,7.7L15.8,6.4Q17.1,5.95 17.9,5.35L18.95,4.15Q18.7,3 18.2,2.4L17.4,2.2Q16.85,2.2 15.25,2.85L13.1,3.7L14.45,2.1Q15.35,1.05 15.35,0.35Q15.35,-1.25 14.45,-1.2L13.05,0.15L9.05,4.85L8.95,0.45L8.5,-3.75L8.15,-3.95Q7.5,-3.95 7.2,-2.25L7,-0.05'
    }]
  }, {
    name: 'tenorVoiceClef',
    bounds: {
      left: 0,
      right: 34.6,
      top: -47.55,
      bottom: 40.15
    },
    svgPaths: [{
      d: 'M25.45,-38.25Q27.55,-36.4 27.6,-34.2Q27.6,-30.75 25.3,-27.2L20.6,-21.3L17.5,-17.35L17.05,-17.05L16.95,-16.55L16.9,-12.25L16.9,-11.15Q19.05,-13.3 22.1,-14.95Q25.7,-16.85 28.3,-16.85Q31.5,-16.85 33.2,-14.45Q34.65,-12.4 34.6,-9Q34.6,-3.7 28.7,3.6Q23.85,9.4 18.1,13.6Q18.15,14.35 18.75,15.15L19.8,16.75Q20.35,18.1 20.35,20.15L20.3,21.65Q17.4,26 16.25,26Q15.1,26 14.4,24.1Q13.85,22.65 13.85,21.3Q13.85,18.3 16.25,15.35L16.1,14.45Q12.2,15.65 8.75,15.65Q4.5,15.65 2.1,11.8Q0,8.6 0,4Q0.05,0.15 4.1,-6.2Q5.8,-9 10.8,-15.55L13.9,-20L14.1,-21.8L13.8,-28.75L13.55,-35.75Q13.55,-39.3 14.3,-41.95Q13.75,-43.45 13.75,-45.4Q13.7,-47.55 15.2,-47.55Q15.85,-47.55 16.4,-47.15Q17,-46.7 17.05,-46L17,-45.05L17.05,-44.1Q18.05,-42.85 20.95,-41.15Q24.45,-39.1 25.45,-38.25M23.25,-33.45Q22.05,-34.7 20.1,-35.85L16.55,-37.8L16.45,-35.45L16.55,-30.65L16.7,-25.85L16.7,-24.95L16.7,-24.05L16.7,-23.1L20.35,-28.15Q22.75,-31.6 23.25,-33.45M11.75,-5.15Q12.75,-7.4 14.05,-9.3L14.1,-14.15Q11.3,-11.55 7.1,-5Q2.5,2.15 2.5,5Q2.5,7.55 4.55,8.9Q6.25,10.05 9,10.05Q12.15,10.05 14.9,8.7L15.05,7.65L14.8,3.3L14.55,-1.05L14.6,-2.85L13.45,-0.3Q12.5,1.5 11.65,1.5Q10.4,1.5 10.45,-0.7Q10.45,-2.3 11.75,-5.15M17.35,-3.8Q17.35,1.35 17.85,7.3Q19,7 23.85,1.95L29.65,-4.55Q31.5,-7.2 31.5,-8.4Q31.5,-10.6 29,-10.6Q26.75,-10.6 22.5,-8.8Q17.95,-6.8 17.5,-5.05Q17.35,-4.6 17.35,-3.8M17.1,29.35Q16.55,29.55 15.85,30.35Q15.1,31.15 15.15,31.7L15.15,31.8L15.4,31.85Q16.9,31.85 19.65,28.55L20.25,27.65L20.15,27.45L19.8,27.35L19.4,27.45L18.7,28.75Q18.15,29.5 17.65,29.5L17.1,29.35M14.75,34.05Q13.7,33 13.7,31.3Q13.7,29.85 14.75,28.5Q17.55,25.05 19.7,25Q21.65,25 21.65,27.9Q21.7,29.25 21,30.05L20.75,30.25Q22.95,30.5 23.55,30.9Q24.6,31.55 24.6,33.5Q24.55,35.35 21.5,37.8Q18.55,40.15 16.6,40.15Q15.35,40.15 14.55,39.05Q13.8,38.05 13.8,36.7Q13.8,35.15 14.75,34.05M16.25,37.85Q17.5,37.85 18.9,36.95L21.2,35.2Q22.85,33.8 22.85,33.15L22.75,32.95L21.25,32.65L20.6,32.75L17.5,34.85Q15.1,36.4 15.15,37.2Q15.1,37.85 16.25,37.85'
    }]
  }, {
    name: 'coda',
    bounds: {
      left: 0,
      right: 32.2,
      top: -2,
      bottom: 42.1
    },
    svgPaths: [{
      d: 'M14.8,-0.5Q14.5,0.7 14.5,2.8L14.5,5.6Q13.05,6 11.75,7Q10.45,8.05 9.35,9.8Q8.3,11.3 7.7,12.85Q7.05,14.45 6.75,16.15L1.2,16.35Q0.6,16.6 0.3,17.5Q0,18.4 0,19.9Q0,20.55 0.4,20.9Q0.85,21.25 1.7,21.25L6.65,21.2Q6.85,22.9 7.7,24.6Q8.55,26.35 10.05,28.05L11.8,29.45L14.4,30.6L14.5,40.95Q14.5,42.1 15.15,42.1L15.7,41.8Q16.05,41.45 16.1,36.55L16.1,30.55Q17.6,30.15 19,29.2L21.5,26.8L23.25,24.05Q24,22.55 24.4,20.95L30.75,20.6L31.9,20.1Q32.15,19.85 32.2,18.35L32.2,16.5Q31.65,16 28.35,16L26.65,16.05L24.55,16.1L24,13.05Q23.65,11.65 22.95,10.35L21.35,8.05Q20.25,6.7 19.1,6.05Q17.9,5.4 16.65,5.4L16.2,5.4L16.1,-1.5L16.2,-1.55Q16.15,-1.95 15.55,-2Q15.05,-1.7 14.8,-0.5M22.3,16L22.25,16.1L16.25,16.05L16.25,9.1L16.45,9.05Q17,9.05 17.9,9.65L19.55,10.8L20.9,12.3Q21.6,13.25 21.95,14.15Q22.3,15.1 22.3,16M20.85,22.45L19.35,24.2Q17.55,26 16.2,26.5L16.2,21.1L21.45,21.1L20.85,22.45M13.05,10Q13.85,9.35 14.45,9.35L14.35,16.1L9.2,16.1L9.15,15.85Q9.15,14.6 11.2,12L13.05,10M9.25,21.2L14.25,21.15L14.25,26.6Q12.15,25.7 11.05,24.55L10,23.1L9.25,21.2'
    }]
  }, {
    name: 'segno',
    bounds: {
      left: 0,
      right: 21.85,
      top: 0,
      bottom: 29.6
    },
    svgPaths: [{
      d: 'M20.85,12.4Q20.35,11 19.55,11Q19,11 18.75,11.45Q18.5,11.95 18.5,12.9Q18.5,14.45 19.3,15.85L20.15,16.1Q21.25,16.1 21.25,14.6Q21.25,13.5 20.85,12.4M15.45,9L12,14.65L7.9,13Q6.05,12.25 3.6,10.55Q2.6,9.75 2.15,8.85Q1.65,7.95 1.65,7Q1.65,6.2 1.95,5.45Q2.2,4.75 2.75,4.15Q3.3,3.55 4,3.25L5.5,2.95Q7.35,2.95 7.65,3.8Q7.2,4.6 7.2,5.6Q7.2,6.75 7.6,7.8Q8.15,9.05 9.15,9.05Q10,9.05 10.45,8.1Q10.8,7.4 10.8,6.45L10.35,4.3L9.5,2.25Q8.9,1.25 7.7,0.6Q6.45,0 5.35,0Q4.15,0 3.15,0.45Q2.15,0.85 1.4,1.75Q0.7,2.55 0.35,3.6Q0,4.6 0,5.85Q0,7.55 0.35,8.9Q0.7,10.3 1.4,11.35L2.95,13.05Q3.85,13.85 5.15,14.6L10.3,16.95L7.55,20.8Q5.3,24 5.3,24.45Q5.3,25.15 5.8,26.75L6.25,26.95L6.55,26.95Q8.05,25.4 9.9,22.55L12.95,17.95Q13.9,18.25 15.05,19L17.5,20.95L19.65,23.35Q20.35,24.45 20.35,25.35L20.1,25.95L19.6,26.3Q19.25,26.3 18.55,25.15Q17.8,24 17.3,24Q16.65,24 16.3,24.4Q15.95,24.8 15.95,25.55Q15.95,27.15 16.6,28.25L17.6,29.25Q18.15,29.6 18.9,29.6Q20.2,29.6 21,28.7Q21.85,27.8 21.85,26.5Q21.85,24.95 21.25,23.3Q20.65,21.7 19.45,20.1Q18.3,18.6 17,17.45Q15.65,16.3 14.15,15.55L17.55,9.95L19.4,6.45Q20,5.05 20,4.3Q20,4 19.55,4L18.85,4.15Q17.3,6.05 15.45,9M3.8,17.05Q3.2,17.05 2.85,17.75Q2.55,18.25 2.55,19.05Q2.55,20.15 3.25,21.7L4.1,21.95Q5,21.95 5.5,20.35L4.9,17.75Q4.3,17.05 3.8,17.05'
    }]
  }, {
    name: 'arpeggio',
    bounds: {
      left: 0,
      right: 5.65,
      top: -11.65,
      bottom: 0
    },
    svgPaths: [{
      d: 'M5.65,-8.15L5.6,-8.3L5.55,-8.5L3.25,-11.6L3.1,-11.65L2.9,-11.55L2,-10.2Q2,-9.7 3.45,-7.95L3.85,-7.4L3.85,-7.35L3.35,-6.85L2.75,-6.45Q1.05,-5.5 0.9,-5.15L0.3,-4.4Q0,-4 0,-3.6Q0.45,-2.15 2.25,0L3.25,-0.55L3.95,-1.15L2.05,-4.25L2.05,-4.4L2.6,-4.85L4.05,-5.6Q4.85,-6.1 5.2,-6.7Q5.65,-7.35 5.65,-8.15'
    }]
  }, {
    name: 'arpeggioUp',
    bounds: {
      left: -2.65,
      right: 7.95,
      top: -16.55,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.6,-5.75L-2.65,-3.6L2.55,-16.55L7.95,-3.6L4.7,-5.25L3.6,-4.15Q2.3,-3.2 2.05,-1.85Q2.15,-1.05 2.95,0L2.25,0L0.9,-1.5Q0.2,-2.35 0,-3.3Q0.2,-4.75 1.6,-5.75'
    }]
  }, {
    name: 'arpeggioDown',
    bounds: {
      left: -2.65,
      right: 7.95,
      top: -10.05,
      bottom: 6.65
    },
    svgPaths: [{
      d: 'M2.25,-10L2.95,-10L4.35,-8.5Q5.05,-7.65 5.25,-6.7Q5.05,-5.25 3.6,-4.15L3.35,-3.95L7.95,-6.3L2.55,6.65L-2.65,-6.3L0.55,-4.65L1.65,-5.8Q2.95,-6.8 3.2,-8.1Q3,-9.25 2.25,-10'
    }]
  }, {
    name: 'twoOctavesUp',
    bounds: {
      left: 0,
      right: 36.65,
      top: -22,
      bottom: 0
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M16.75,-21.4L16.6,-21.95L16.35,-22Q14.3,-21.6 12,-20.4Q9.3,-19.1 8.15,-17.95L6.45,-15.3Q5.25,-13.4 5.25,-12.35Q5.25,-12 5.5,-11.85L6.8,-12.05L8.1,-12.3Q9.5,-12.3 10.4,-11.6Q11.55,-10.75 11.55,-9.55Q11.55,-8.45 10.95,-7.2Q10.25,-5.65 9.45,-5.45L9.25,-5.45L8.7,-6.3L8.4,-6.4Q7.85,-6.2 7.3,-5L6.9,-3.15Q6.9,-1.65 8.05,-1.65Q9.45,-1.65 11.15,-4.1Q12.6,-6.2 13.15,-7.85Q13.8,-9.65 13.8,-11.3Q13.8,-15.1 9.4,-15.65L9.95,-16.05L15.35,-18.75Q16.75,-19.4 16.75,-21.4M3.5,-17.85L3.2,-17.75Q2.15,-16.2 1.85,-14.15L0,-1.75L0,-1.3Q0,-0.45 0.35,-0.1L0.5,0L0.7,-0.1L1.4,-1.7L1.95,-3.5L3.75,-17.2L3.75,-17.4L3.5,-17.85M20.2,-10.75L20.55,-9.9L20.2,-7.85L19.9,-5.7Q19.9,-4.6 20.65,-4.6L21,-4.65L21.9,-6.5L24.45,-9.9Q26.6,-12.65 26.9,-12.8L26.9,-12.25Q26.9,-10.4 26,-6.65Q25.1,-2.95 25.1,-1.05L25.15,-0.9L26,-0.65L26.2,-0.75Q27.35,-2.9 28.3,-7.5Q29.15,-11.9 29.15,-14.55Q29.15,-16.8 28.15,-16.8Q27.25,-16.8 25.55,-14.5L23.1,-11.5L22.85,-11.4L22.55,-13.2Q22.25,-14.7 21.15,-14.7Q20.2,-14.7 19.35,-13.55Q18.1,-11.8 16.5,-8.1Q14.7,-3.95 14.7,-2.35Q14.7,-0.5 15.5,-0.6L15.75,-0.65L16.1,-1.05Q16.75,-2.75 16.8,-3.65Q18.2,-8.55 19.9,-10.65L20.2,-10.75M35.1,-19.3Q32.95,-19.3 30.55,-11.45Q28.5,-4.6 28.5,-1.4Q28.5,-0.45 29.15,-0.3L29.45,-0.45L30.1,-3.5Q30.3,-5.4 30.8,-6.45L34.7,-7.9L33.85,-4.45Q33.25,-2.5 33.25,-0.95Q33.25,-0.35 33.7,-0.3Q34.15,-0.3 34.5,-1.15L35.25,-5.3L35.9,-8.15L36.35,-9.15L36.65,-10.25L36.55,-10.9Q36.3,-11.15 36.3,-11.75L36.4,-13.6L36.45,-15.5Q36.45,-19.3 35.1,-19.3M35,-14.35L35,-10.9L33.25,-10L31.35,-9.35Q31.3,-10.25 32.55,-13.3Q33.8,-16.5 34.4,-16.5Q35,-16.5 35,-14.35'
    }]
  }, {
    name: 'invertedTurn',
    bounds: {
      left: -13.9,
      right: 13.6,
      top: 0,
      bottom: 22.3
    },
    svgPaths: [{
      d: 'M11.45,4.7L9.1,9.3L7.35,11.15Q6.5,11.75 5.65,11.75Q4.65,11.75 3.7,11.2Q2.7,10.65 1.7,9.5L1.4,9.15L1.4,0.65L1.3,0.4L1.2,0.25L-0.2,0L-0.75,0.75L-0.8,1.15L-0.75,6.5L-1.7,5.35Q-2.7,4.25 -3.85,3.7Q-4.9,3.15 -6.05,3.15L-7.55,3.45Q-8.3,3.75 -9,4.35Q-10.8,6.35 -11.65,8Q-12.8,10.1 -13.35,12Q-13.9,13.95 -13.9,15.65L-13.6,17.35L-13.1,17.5Q-12.5,17.5 -11.95,15.8L-10.75,12.15L-9.75,10.2L-8.5,9.05Q-7.85,8.6 -7.4,8.6Q-6.3,8.6 -5.3,9.15Q-4.25,9.65 -3.3,10.75L-0.7,13.85L-0.65,21.95L-0.55,22.2L-0.45,22.3L1.1,22.3L1.25,22.25L1.35,22.1L1.4,21.85L1.4,16L2.3,16.5Q3.4,17 4.6,17L6.25,16.75L7.85,15.9Q8.9,15.15 10.9,12.6Q12.25,10.6 12.95,8.65Q13.6,6.75 13.6,4.95L13.45,2.9Q13.3,2.2 13,2.2Q12.55,2.2 11.45,4.7'
    }]
  }, {
    name: 'shake',
    bounds: {
      left: 0,
      right: 25.6,
      top: -5,
      bottom: 3.45
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M4.05,-2.1Q2.6,-2 1.8,-1.15L0,0.75Q0.55,-0.75 3.3,-3.1Q5.05,-4.65 7.6,-5Q8.85,-4.85 9.35,-3.5Q9.8,-2.3 10.6,-1.05L12.7,-0.95L16.25,-4.45L18.45,-4.35L19.15,-3.3L20.65,-0.95Q21.8,0.4 23.5,0.05L25.6,-1.25L22.6,1.95L20.85,3.05L19.7,3.25L19.15,3.15Q18.25,2.9 17.4,1.9L15.3,-0.3Q14.4,-1.35 13.9,-0.85L11.75,1.6Q10.3,3.2 8.8,3.45Q7.55,3.4 6.85,2.2L5.6,-0.85Q4.95,-2.05 4.05,-2.1'
    }]
  }, {
    name: 'twoOctavesDown',
    bounds: {
      left: 0,
      right: 40.05,
      top: -21.5,
      bottom: 0.5
    },
    svgPaths: [{
      fill: 'rgba(35,31,32,1)',
      d: 'M10.4,-15.55L9.85,-15.15Q14.25,-14.6 14.25,-10.8Q14.25,-9.15 13.6,-7.35Q13.05,-5.7 11.6,-3.6Q9.9,-1.15 8.5,-1.15Q7.35,-1.15 7.35,-2.65L7.75,-4.5Q8.3,-5.7 8.85,-5.9L9.15,-5.8L9.7,-4.95L9.9,-4.95Q10.7,-5.15 11.4,-6.7Q12,-7.95 12,-9.05Q12,-10.25 10.85,-11.1Q9.95,-11.8 8.55,-11.8L7.25,-11.55L5.95,-11.35Q5.7,-11.5 5.7,-11.85Q5.7,-12.9 6.9,-14.8L8.6,-17.45Q9.75,-18.6 12.45,-19.9Q14.75,-21.1 16.8,-21.5L17.05,-21.45L17.2,-20.9Q17.2,-18.9 15.8,-18.25L10.4,-15.55M3.65,-17.25L3.95,-17.35L4.2,-16.9L4.2,-16.7L2.4,-3L1.85,-1.2L1.15,0.4L0.95,0.5L0.8,0.4Q0.45,0.05 0.45,-0.8L0.45,-1.25L2.3,-13.65Q2.6,-15.7 3.65,-17.25M16.2,-0.15L15.95,-0.1Q15.15,0 15.15,-1.85Q15.15,-3.45 16.95,-7.6Q18.55,-11.3 19.8,-13.05Q20.65,-14.2 21.6,-14.2Q22.7,-14.2 23,-12.7L23.3,-10.9L23.55,-11L26,-14Q27.7,-16.3 28.6,-16.3Q29.6,-16.3 29.6,-14.05Q29.6,-11.4 28.75,-7Q27.8,-2.4 26.65,-0.25L26.45,-0.15L25.6,-0.4L25.55,-0.55Q25.55,-2.45 26.45,-6.15Q27.35,-9.9 27.35,-11.75L27.35,-12.3L24.9,-9.4L22.35,-6L21.45,-4.15L21.1,-4.1Q20.35,-4.1 20.35,-5.2L20.65,-7.35L21,-9.4L20.65,-10.25L20.35,-10.15Q18.65,-8.05 17.25,-3.15Q17.2,-2.25 16.55,-0.55L16.2,-0.15M34.45,-16.05Q37.1,-18.15 38.7,-18.15Q40.05,-18.15 40.05,-17Q40.05,-15.25 38.85,-13.75L37.45,-11.95L37.5,-11.75Q38.5,-11.5 39.05,-10.95Q39.55,-10.3 39.55,-9.25Q39.55,-6.05 36.5,-3Q33.55,0.1 30.4,0.1Q28.85,0.1 28.9,-0.85L31.55,-11.35L31.7,-12.4Q31.95,-14.05 34.45,-16.05M38.25,-15.55L38.1,-15.55Q37.05,-15.4 35.5,-14.6Q33.85,-13.75 33.5,-12.9L32.8,-10.8L32.85,-10.75L36,-12.8Q38.1,-14.45 38.4,-15.4L38.25,-15.55M36.05,-9L33.8,-8.45Q32.4,-7.85 31.9,-7.35L31.3,-5.3L30.9,-3.05L30.9,-2.7L31.85,-2.55Q33.5,-2.55 35.7,-4.4Q38,-6.35 38,-7.85Q38,-9 36.05,-9'
    }]
  }, {
    name: 'crossCircleNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'buzz',
    bounds: {
      left: -6.55,
      right: 6.4,
      top: -6.2,
      bottom: 6.75
    },
    svgPaths: [{
      d: 'M6.4,-4.05L-2.3,4.5L6.4,4.5L6.4,6.75L-6.55,6.75L-6.55,4.5L2,-3.95L-6.3,-3.95L-6.3,-6.2L6.4,-6.2L6.4,-4.05'
    }]
  }, {
    name: 'leftParenthesis',
    bounds: {
      left: 0,
      right: 6,
      top: -12.25,
      bottom: 12.25
    },
    svgPaths: [{
      d: 'M4.3,-11.2Q4.85,-12.25 5.5,-12.25L6,-12.1L5.85,-11.15Q3.6,-5.8 3,-3.8Q1.75,0.2 1.75,4.05L1.85,6.65L2,9.25Q2,11.1 1.55,12.05L1.2,12.25L0.65,11.8Q0,10.3 0,6.15Q0,-0.4 3.05,-8.15Q3.4,-9.25 4.3,-11.2'
    }]
  }, {
    name: 'rightParenthesis',
    bounds: {
      left: 0,
      right: 4.25,
      top: -12.9,
      bottom: 12.05
    },
    svgPaths: [{
      d: 'M4.25,-2.5Q4.25,1.1 3.6,4.55Q2.85,8.65 1.4,11.2L0.55,12.05Q0,12.05 0,11.45L0.35,10.1Q2.65,3.6 2.65,-1.55L2.3,-5.65L1.65,-8Q1.2,-9.4 1.2,-10.35Q1.2,-12.9 1.9,-12.9Q2.95,-12.9 3.7,-8.3Q4.25,-4.75 4.25,-2.5'
    }]
  }, {
    name: 'shortFlagDown',
    bounds: {
      left: 0,
      right: 10.9,
      top: 0,
      bottom: 21.35
    },
    svgPaths: [{
      d: 'M9.05,7.45L9.75,5.3L10,3.35Q10.15,1.65 9.85,0.45L10.2,0Q10.85,1.45 10.9,3.6Q10.95,5.6 10.25,8.05Q9.5,10.5 7.8,12.7Q6,14.9 3.1,17.35Q1.85,18.6 1.5,19.75L1.05,21.35L0,21.35L0,14.2L1.05,14.2L1.05,15Q3.75,13.55 5.75,11.9Q7.75,10.3 9.05,7.45'
    }]
  }, {
    name: 'shortFlagUp',
    bounds: {
      left: 0,
      right: 10.9,
      top: 0,
      bottom: 21.75
    },
    svgPaths: [{
      d: 'M1.05,0Q1.1,1.1 1.45,2.45Q1.85,3.8 3.1,5Q6.15,7.6 8.1,10Q10.75,13.15 10.9,17.2Q10.9,19.55 10.2,21.75L9.7,21.1L9.85,19.35L9.85,17.6Q9.55,14.55 7.35,12.15Q4.75,9.25 1.05,7.35L1.05,8.15L0,8.15L0,0L1.05,0'
    }]
  }, {
    name: 'measureRepeat',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0,10L17.14,-10L23.35,-10L6.2,10L0,10M3.67,-4.69Q3.67,-6.98 5.96,-6.98Q8.24,-6.98 8.24,-4.69Q8.24,-2.41 5.96,-2.41Q3.67,-2.41 3.67,-4.69M15.76,4.69Q15.76,2.41 18.04,2.41Q20.33,2.41 20.33,4.69Q20.33,6.98 18.04,6.98Q15.76,6.98 15.76,4.69'
    }]
  }, {
    name: 'scoop',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,5.0775169Q7.707703275,4.809784475000001 13.416165,1.1625042Q19.983455999999997,-3.6921621250000007 22.15731,-11.625713Q24.272540999999997,-11.799181275 23.723043,-9.4144189Q19.264120400000003,3.2424174249999993 6.7027564,7.9250343Q3.9189615825000006,8.8722898 0.99414587,9.0346622Q-0.45279885249999996,7.993417775000001 0.18496889,6.0314828Q0.2840982475,5.318978625000001 0.8946198,5.0775169Z'
    }]
  }, {
    name: 'plop',
    bounds: {
      left: 0.055,
      right: 23.95,
      top: -16.86,
      bottom: 4.05
    },
    svgPaths: [{
      d: 'M0.8946198,-5.0775169Q7.707703274999998,-4.809784475000001 13.416165,-1.1625041999999999Q19.983455999999997,3.6921621250000003 22.15731,11.625713000000001Q24.272540999999997,11.799181275000002 23.723043,9.414418900000001Q19.264120400000003,-3.242417425 6.7027564,-7.9250343Q3.9189615825000006,-8.8722898 0.99414587,-9.0346622Q-0.45279885249999996,-7.993417774999999 0.18496888999999994,-6.031482799999999Q0.2840982474999998,-5.318978625 0.8946198,-5.077516899999999z'
    }]
  }, {
    name: 'quickFall',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,-5.0775169Q7.707703274999998,-4.809784475000001 13.416165,-1.1625041999999999Q19.983455999999997,3.6921621250000003 22.15731,11.625713000000001Q24.272540999999997,11.799181275000002 23.723043,9.414418900000001Q19.264120400000003,-3.242417425 6.7027564,-7.9250343Q3.9189615825000006,-8.8722898 0.99414587,-9.0346622Q-0.45279885249999996,-7.993417774999999 0.18496888999999994,-6.031482799999999Q0.2840982474999998,-5.318978625 0.8946198,-5.077516899999999z'
    }]
  }, {
    name: 'doit',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,5.0775169Q7.707703275,4.809784475000001 13.416165,1.1625042Q19.983455999999997,-3.6921621250000007 22.15731,-11.625713Q24.272540999999997,-11.799181275 23.723043,-9.4144189Q19.264120400000003,3.2424174249999993 6.7027564,7.9250343Q3.9189615825000006,8.8722898 0.99414587,9.0346622Q-0.45279885249999996,7.993417775000001 0.18496889,6.0314828Q0.2840982475,5.318978625000001 0.8946198,5.0775169Z'
    }]
  }, {
    name: 'fall1',
    bounds: {
      left: 0,
      right: 14.1,
      top: 0,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M13.74,0.84Q13.077154499999999,1.7898712749999999 12.124194,2.3651318Q11.272585,2.3679983 10.666748,1.6573568Q9.737038349999999,0.9312787075 8.7201406,0.34078125Q7.799688225,0.228511725 7.1801255,1.0150737Q6.698317225,1.813860725 5.92875,2.2975Q5.092956449999999,2.4554022250000003 4.4993541,1.7447023Q3.5008874499999996,0.9684009150000001 2.40425,0.34542188Q1.5342372425,0.23072044500000002 0.93862463,0.96781891Q0.182500605,1.6906083224999997 -0.01626953,2.6986328Q0.49236681,2.948487375 1.0325,2.095Q1.66750905,2.3706235749999998 2.0971555,3.0068329Q2.9599608500000003,4.026191799999999 3.936408,4.9280086Q4.827511825,5.456732075 5.5613501,4.6865649Q6.402679974999999,3.7124464250000004 6.9384021,2.5343692Q7.376179925000001,1.75891275 7.9,2.48Q9.025655625,3.7866099749999997 10.314392,4.9280086Q11.201394250000002,5.4570279500000005 11.929221,4.6865649Q12.930769000000002,3.2911493 13.744208,1.7618677Q14.3750215,1.0720072550000002 13.74,0.84Z'
    }]
  }, {
    name: 'rip1',
    bounds: {
      left: 0,
      right: 14.1,
      top: 0,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M13.74,0.84Q13.077154499999999,1.7898712749999999 12.124194,2.3651318Q11.272585,2.3679983 10.666748,1.6573568Q9.737038349999999,0.9312787075 8.7201406,0.34078125Q7.799688225,0.228511725 7.1801255,1.0150737Q6.698317225,1.813860725 5.92875,2.2975Q5.092956449999999,2.4554022250000003 4.4993541,1.7447023Q3.5008874499999996,0.9684009150000001 2.40425,0.34542188Q1.5342372425,0.23072044500000002 0.93862463,0.96781891Q0.182500605,1.6906083224999997 -0.01626953,2.6986328Q0.49236681,2.948487375 1.0325,2.095Q1.66750905,2.3706235749999998 2.0971555,3.0068329Q2.9599608500000003,4.026191799999999 3.936408,4.9280086Q4.827511825,5.456732075 5.5613501,4.6865649Q6.402679974999999,3.7124464250000004 6.9384021,2.5343692Q7.376179925000001,1.75891275 7.9,2.48Q9.025655625,3.7866099749999997 10.314392,4.9280086Q11.201394250000002,5.4570279500000005 11.929221,4.6865649Q12.930769000000002,3.2911493 13.744208,1.7618677Q14.3750215,1.0720072550000002 13.74,0.84Z'
    }]
  }]
};

/***/ }),

/***/ 69260:
/*!**************************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-factory/common-js-glyph-foundry-factory.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CommonJSGlyphFoundryFactory)
/* harmony export */ });
/* harmony import */ var _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-glyph-foundry-factory */ 68638);

class CommonJSGlyphFoundryFactory extends _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get FOUNDRY_DEFINITION() {
    return CommonJSGlyphFoundryFactory.foundry_definition;
  }
  constructor(noteEditorService) {
    super(CommonJSGlyphFoundryFactory.FOUNDRY_DEFINITION, noteEditorService);
  }
}
CommonJSGlyphFoundryFactory.foundry_definition = {
  descriptor: {
    clefs: [],
    accidentals: [],
    chordSymbols: [],
    noteheads: [{
      type: 'normal',
      noteheads: []
    }, {
      type: 'stemless',
      noteheads: []
    }, {
      type: 'slash',
      noteheads: []
    }, {
      type: 'hit',
      noteheads: []
    }, {
      type: 'cross',
      noteheads: []
    }, {
      type: 'square',
      noteheads: []
    }, {
      type: 'diamond',
      noteheads: []
    }, {
      type: 'triangle',
      noteheads: []
    }, {
      type: 'harmonic',
      noteheads: []
    }, {
      type: 'crossCircle',
      noteheads: []
    }, {
      type: 'named',
      noteheads: []
    }],
    articulations: [],
    ornaments: [],
    rests: [{
      type: 'normal',
      rests: []
    }],
    barlines: [{
      type: 'pageBreak',
      glyph: {
        symbol: 'pageBreak'
      }
    }, {
      type: 'systemBreak',
      glyph: {
        symbol: 'systemBreak'
      }
    }],
    others: [{
      name: 'annotationIconSymbol',
      glyph: {
        symbol: 'annotationIcon'
      }
    }, {
      name: 'keepWithNext',
      glyph: {
        symbol: 'keepWithNext'
      }
    }]
  },
  symbols: [{
    name: 'pageBreak',
    bounds: {
      left: 0,
      right: 21.2,
      top: 0,
      bottom: 38.9
    },
    svgPaths: [{
      fill: 'rgba(153,153,153,1)',
      d: 'M3.85,13.9L17.3,13.9L17.3,14.85L3.85,14.85L3.85,13.9M3.85,17.65L17.3,17.65L17.3,18.6L3.85,18.6L3.85,17.65M3.85,21.55L17.3,21.55L17.3,22.5L3.85,22.5L3.85,21.55M17.3,30.15L3.85,30.15L3.85,29.2L17.3,29.2L17.3,30.15M17.3,26.4L3.85,26.4L3.85,25.45L17.3,25.45L17.3,26.4M17.3,34.05L3.85,34.05L3.85,33.1L17.3,33.1L17.3,34.05M21.2,38.9L0,38.9L0,10L21.2,10L21.2,38.9M0.95,10.95L0.95,37.95L20.25,37.95L20.25,10.95L0.95,10.95'
    }]
  }, {
    name: 'systemBreak',
    bounds: {
      left: 0,
      right: 20.9,
      top: 0,
      bottom: 23.35
    },
    svgPaths: [{
      fill: 'rgba(153,153,153,1)',
      d: 'M20.9,10L20.9,12.8Q20.9,15.6 20.5,16.9Q20.05,18.2 18.8,19.15Q17.15,20.45 13.15,20.45L5.75,20.45L5.75,23.35L0,17.65L5.75,11.95L5.75,14.85L14.85,14.85Q17.9,14.85 19.05,13.9Q20.25,12.9 20.25,10.4L20.25,10L20.9,10'
    }]
  }, {
    name: 'annotationIcon',
    bounds: {
      left: 0,
      right: 17.5,
      top: 0,
      bottom: 21
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      'stroke-width': '1',
      'stroke-linecap': 'butt',
      'stroke-linejoin': 'miter',
      'stroke-miterlimit': '38.4',
      d: 'M16.9,0.5L16.9,11.75L9.95,11.75L9.95,20.4L0.5,20.4L0.5,0.5L16.9,0.5'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '1',
      'stroke-linecap': 'butt',
      'stroke-linejoin': 'miter',
      'stroke-miterlimit': '38.4',
      d: 'M17,11.95L9.95,20.5'
    }]
  }, {
    name: 'keepWithNext',
    bounds: {
      left: -8.5,
      right: 7.5,
      top: 20,
      bottom: 36
    },
    svgPaths: [{
      fill: 'rgba(153,153,153,1)',
      d: 'M-8.5,36Q-8.5,28 -0.5,28Q7.5,28 7.5,36L5.5,36Q5.5,30 -0.5,30Q-6.5,30 -6.5,36L-8.5,36'
    }]
  }]
};

/***/ }),

/***/ 68638:
/*!*******************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-factory/js-glyph-foundry-factory.ts ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JSGlyphFoundryFactory)
/* harmony export */ });
/* harmony import */ var _foundry_descriptor_foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../foundry-descriptor/foundry-descriptor */ 12212);
/* harmony import */ var _glyph_js_sprite_factory_generator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyph-js-sprite-factory-generator */ 22161);
/* harmony import */ var _vector_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector-glyph-foundry */ 44072);



class JSGlyphFoundryFactory {
  get complete() {
    return true;
  }
  constructor(foundryDef, noteEditorService, fallbackFoundryFactory = null) {
    this._foundryDef = null;
    this._fallbackFoundryFactory = null;
    this._foundryDef = foundryDef;
    this._fallbackFoundryFactory = fallbackFoundryFactory;
    this.noteEditorService = noteEditorService;
  }
  initialize() {
    // todo
    // this.dispatchEvent(new FlashEvent(FlashEvent.COMPLETE));
  }
  createFoundry(metrics) {
    const foundryDescriptor = _foundry_descriptor_foundry_descriptor__WEBPACK_IMPORTED_MODULE_0__["default"].fromJSON(this._foundryDef.descriptor);
    const glyphJSSpriteFactoryGenerator = new _glyph_js_sprite_factory_generator__WEBPACK_IMPORTED_MODULE_1__["default"](this._foundryDef.symbols || [], this.noteEditorService);
    let foundry = null;
    if (this._fallbackFoundryFactory) {
      foundry = this._fallbackFoundryFactory.createFoundry(metrics);
    }
    return new _vector_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"](metrics, foundryDescriptor, glyphJSSpriteFactoryGenerator, 40, this.noteEditorService, foundry);
  }
}

/***/ }),

/***/ 95284:
/*!**************************************************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-factory/sonata-js-glyph-foundry-factory.ts ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SonataJSGlyphFoundryFactory)
/* harmony export */ });
/* harmony import */ var _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./js-glyph-foundry-factory */ 68638);

class SonataJSGlyphFoundryFactory extends _js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get FOUNDRY_DEFINITION() {
    return SonataJSGlyphFoundryFactory.foundry_definition;
  }
  constructor(noteEditorService, fallbackFoundryFactory = null) {
    super(SonataJSGlyphFoundryFactory.FOUNDRY_DEFINITION, noteEditorService, fallbackFoundryFactory);
  }
}
SonataJSGlyphFoundryFactory.foundry_definition = {
  descriptor: {
    clefs: [{
      sign: 'G',
      glyph: {
        symbol: 'gClef'
      }
    }, {
      sign: 'C',
      glyph: {
        symbol: 'cClef'
      }
    }, {
      sign: 'F',
      glyph: {
        symbol: 'fClef'
      }
    }, {
      sign: 'F8below',
      glyph: {
        symbol: 'f8Clef'
      }
    }, {
      sign: 'tenorVoice',
      glyph: {
        symbol: 'tenorVoiceClef'
      }
    }, {
      sign: 'percussion',
      glyph: {
        symbol: 'percussionClef'
      }
    }, {
      sign: 'percussion2',
      glyph: {
        symbol: 'percussion2Clef'
      }
    }, {
      sign: 'tab',
      glyph: {
        symbol: 'tabClef'
      }
    }],
    accidentals: [{
      sign: 'doubleFlat',
      glyph: {
        symbol: 'doubleFlat'
      }
    }, {
      sign: 'flat',
      glyph: {
        symbol: 'flat'
      }
    }, {
      sign: 'natural',
      glyph: {
        symbol: 'natural'
      }
    }, {
      sign: 'sharp',
      glyph: {
        symbol: 'sharp'
      }
    }, {
      sign: 'doubleSharp',
      glyph: {
        symbol: 'doubleSharp'
      }
    }],
    chordSymbols: [{
      char: '@',
      glyph: {
        symbol: 'flat',
        x: 0.25,
        y: 0.375,
        scale: 0.75,
        width: 0.85
      }
    }, {
      char: '#',
      glyph: {
        symbol: 'sharp',
        x: 0.25,
        y: 0.75,
        scale: 0.75,
        width: 0.925
      }
    }, {
      char: '$',
      glyph: {
        symbol: 'natural',
        x: 0.25,
        y: 0.75,
        scale: 0.75,
        width: 0.775
      }
    }, {
      char: '*',
      glyph: {
        symbol: 'doubleSharp',
        x: 0.25,
        y: 0.75,
        scale: 0.75,
        width: 1
      }
    }, {
      char: '%',
      glyph: {
        symbol: 'doubleFlat',
        x: 0.25,
        y: 0.375,
        scale: 0.75,
        width: 1.25
      }
    }, {
      char: '[',
      glyph: {
        symbol: 'repeatEndingBracket',
        width: 0
      }
    }],
    noteheads: [{
      type: 'normal',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'solidNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'stemless',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'solidNoteHead'
        },
        metrics: {
          stem: false,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfNoteHead'
        },
        metrics: {
          stem: false,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'slash',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'slashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 1,
          upX: 2,
          upY: -1
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0,
          upX: 2.6,
          upY: 0
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'hit',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'slashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 1,
          upX: 2,
          upY: -1
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0,
          upX: 2.6,
          upY: 0
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSlashNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'cross',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'crossNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.5,
          upX: 1.17,
          upY: -0.5
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'square',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'squareNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowSquareNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowSquareNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'diamond',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'diamondNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowDiamondNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowDiamondNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'triangle',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'triangleNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowTriangleNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowTriangleNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'harmonic',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'hollowMiscNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'crossCircle',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'crossNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'crossCircleNoteHead'
        },
        metrics: {
          stem: true
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'crossCircleNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }, {
      type: 'background',
      noteheads: [{
        value: 6,
        glyph: {
          symbol: 'filledBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeBackgroundNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }]
    }, {
      type: 'named',
      noteheads: [{
        value: 6,
        pitch: 'c',
        glyph: {
          symbol: 'namedFilledCNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'd',
        glyph: {
          symbol: 'namedFilledDNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'e',
        glyph: {
          symbol: 'namedFilledENoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'f',
        glyph: {
          symbol: 'namedFilledFNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'g',
        glyph: {
          symbol: 'namedFilledGNoteHead'
        },
        metrics: {
          stem: true,
          downX: 0.5,
          downY: 0.5,
          upX: 0.67,
          upY: -0.5
        }
      }, {
        value: 6,
        pitch: 'a',
        glyph: {
          symbol: 'namedFilledANoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 6,
        pitch: 'b',
        glyph: {
          symbol: 'namedFilledBNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'c',
        glyph: {
          symbol: 'namedHalfCNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'd',
        glyph: {
          symbol: 'namedHalfDNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'e',
        glyph: {
          symbol: 'namedHalfENoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'f',
        glyph: {
          symbol: 'namedHalfFNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'g',
        glyph: {
          symbol: 'namedHalfGNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'a',
        glyph: {
          symbol: 'namedHalfANoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 7,
        pitch: 'b',
        glyph: {
          symbol: 'namedHalfBNoteHead'
        },
        metrics: {
          stem: true,
          downY: 0.2,
          upX: 1.295,
          upY: -0.2
        }
      }, {
        value: 8,
        pitch: 'c',
        glyph: {
          symbol: 'namedWholeCNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'd',
        glyph: {
          symbol: 'namedWholeDNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'e',
        glyph: {
          symbol: 'namedWholeENoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'f',
        glyph: {
          symbol: 'namedWholeFNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'g',
        glyph: {
          symbol: 'namedWholeGNoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'a',
        glyph: {
          symbol: 'namedWholeANoteHead'
        },
        metrics: {
          stem: false
        }
      }, {
        value: 8,
        pitch: 'b',
        glyph: {
          symbol: 'namedWholeBNoteHead'
        },
        metrics: {
          stem: false
        }
      }]
    }],
    articulations: [{
      type: 'marcato',
      position: 'both',
      glyph: {
        symbol: 'marcato'
      }
    }, {
      type: 'closed',
      position: 'both',
      glyph: {
        symbol: 'closed'
      }
    }, {
      type: 'open',
      position: 'both',
      glyph: {
        symbol: 'open'
      }
    }, {
      type: 'staccato',
      position: 'both',
      glyph: {
        symbol: 'staccato'
      }
    }, {
      type: 'tenuto',
      position: 'both',
      glyph: {
        symbol: 'tenuto'
      }
    }, {
      type: 'upBow',
      position: 'both',
      glyph: {
        symbol: 'upBow'
      }
    }, {
      type: 'downBow',
      position: 'both',
      glyph: {
        symbol: 'downBow'
      }
    }, {
      type: 'fermata',
      position: 'above',
      glyph: {
        symbol: 'fermataAbove'
      }
    }, {
      type: 'fermata',
      position: 'below',
      glyph: {
        symbol: 'fermataBelow'
      }
    }, {
      type: 'martellato',
      position: 'above',
      glyph: {
        symbol: 'martellatoAbove'
      }
    }, {
      type: 'martellato',
      position: 'below',
      glyph: {
        symbol: 'martellatoBelow'
      }
    }, {
      type: 'martellatoStaccato',
      position: 'above',
      glyph: {
        symbol: 'martellatoStaccatoAbove'
      }
    }, {
      type: 'martellatoStaccato',
      position: 'below',
      glyph: {
        symbol: 'martellatoStaccatoBelow'
      }
    }, {
      type: 'staccatissimo',
      position: 'above',
      glyph: {
        symbol: 'staccatissimoAbove'
      }
    }, {
      type: 'staccatissimo',
      position: 'below',
      glyph: {
        symbol: 'staccatissimoBelow'
      }
    }, {
      type: 'tap',
      position: 'both',
      glyph: {
        symbol: 'tap'
      }
    }, {
      type: 'caesura',
      position: 'both',
      glyph: {
        symbol: 'caesura'
      }
    }, {
      type: 'breath',
      position: 'both',
      glyph: {
        symbol: 'breath'
      }
    }, {
      type: 'mordent',
      position: 'both',
      glyph: {
        symbol: 'mordent'
      }
    }, {
      type: 'invertedMordent',
      position: 'both',
      glyph: {
        symbol: 'invertedMordent'
      }
    }, {
      type: 'turn',
      position: 'both',
      glyph: {
        symbol: 'turn'
      }
    }, {
      type: 'delayedTurn',
      position: 'both',
      glyph: {
        symbol: 'turn'
      }
    }, {
      type: 'invertedTurn',
      position: 'both',
      glyph: {
        symbol: 'invertedTurn'
      }
    }, {
      type: 'delayedInvertedTurn',
      position: 'both',
      glyph: {
        symbol: 'invertedTurn'
      }
    }, {
      type: 'hammerOn',
      position: 'both',
      glyph: {
        symbol: 'hammerOn'
      }
    }, {
      type: 'pullOff',
      position: 'both',
      glyph: {
        symbol: 'pullOff'
      }
    }, {
      type: 'bendJazz',
      position: 'both',
      glyph: {
        symbol: 'bendJazz',
        scale: 0.6
      }
    }],
    ornaments: [{
      type: 'tremolo',
      value: 1,
      glyph: {
        symbol: 'tremolo1'
      }
    }, {
      type: 'tremolo',
      value: 2,
      glyph: {
        symbol: 'tremolo2'
      }
    }, {
      type: 'tremolo',
      value: 3,
      glyph: {
        symbol: 'tremolo3'
      }
    }, {
      type: 'buzz',
      glyph: {
        symbol: 'buzz'
      }
    }],
    rests: [{
      type: 'normal',
      rests: [{
        value: 0,
        glyph: {
          symbol: 'twoHundredFiftySixthRest'
        }
      }, {
        value: 1,
        glyph: {
          symbol: 'oneHundredTwentyEighthRest'
        }
      }, {
        value: 2,
        glyph: {
          symbol: 'sixtyFourthRest'
        }
      }, {
        value: 3,
        glyph: {
          symbol: 'thirtySecondRest'
        }
      }, {
        value: 4,
        glyph: {
          symbol: 'sixteenthRest'
        }
      }, {
        value: 5,
        glyph: {
          symbol: 'eighthRest'
        }
      }, {
        value: 6,
        glyph: {
          symbol: 'quarterRest'
        }
      }, {
        value: 7,
        glyph: {
          symbol: 'halfRest'
        }
      }, {
        value: 7,
        type: 'line',
        glyph: {
          symbol: 'halfRestWithLine'
        }
      }, {
        value: 8,
        glyph: {
          symbol: 'wholeRest'
        }
      }, {
        value: 8,
        type: 'line',
        glyph: {
          symbol: 'wholeRestWithLine'
        }
      }]
    }],
    barlines: [{
      type: 'single',
      glyph: {
        symbol: 'normalBarline'
      }
    }, {
      type: 'final',
      glyph: {
        symbol: 'finalBarline'
      }
    }, {
      type: 'double',
      glyph: {
        symbol: 'doubleBarline'
      }
    }, {
      type: 'initial',
      glyph: {
        symbol: 'initialBarline'
      }
    }, {
      type: 'dashed',
      glyph: {
        symbol: 'dashedBarline'
      }
    }, {
      type: 'repeat',
      glyph: {
        symbol: 'repeatBarline'
      }
    }, {
      type: 'invisible',
      glyph: {
        symbol: 'invisibleBarline'
      }
    }, {
      type: 'startRepeat',
      glyph: {
        symbol: 'endRepeat',
        x: 0.5
      }
    }, {
      type: 'endRepeat',
      glyph: {
        symbol: 'endRepeat',
        width: 1
      }
    }, {
      type: 'grandStaff',
      glyph: {
        symbol: 'grandStaff'
      }
    }, {
      type: 'topInitialWing',
      glyph: {
        symbol: 'topStartWing',
        y: -0.8
      }
    }, {
      type: 'bottomInitialWing',
      glyph: {
        symbol: 'bottomStartWing',
        y: 0.8
      }
    }, {
      type: 'topStartWing',
      glyph: {
        symbol: 'topStartWing',
        x: 0.42,
        y: -0.8
      }
    }, {
      type: 'bottomStartWing',
      glyph: {
        symbol: 'bottomStartWing',
        x: 0.42,
        y: 0.8
      }
    }, {
      type: 'topEndWing',
      glyph: {
        symbol: 'topEndWing',
        x: 0.42,
        y: -0.8
      }
    }, {
      type: 'bottomEndWing',
      glyph: {
        symbol: 'bottomEndWing',
        x: 0.42,
        y: 0.8
      }
    }, {
      type: 'braceBody',
      glyph: {
        symbol: 'braceBody'
      }
    }],
    others: [{
      name: 'rhythmDot',
      glyph: {
        symbol: 'rhythmDot'
      }
    }, {
      name: 'grandStaff',
      glyph: {
        symbol: 'grandStaff'
      }
    }, {
      name: 'pppDynamics',
      glyph: {
        symbol: 'pppDynamics'
      }
    }, {
      name: 'ppDynamics',
      glyph: {
        symbol: 'ppDynamics'
      }
    }, {
      name: 'pDynamics',
      glyph: {
        symbol: 'pDynamics'
      }
    }, {
      name: 'mpDynamics',
      glyph: {
        symbol: 'mpDynamics'
      }
    }, {
      name: 'mfDynamics',
      glyph: {
        symbol: 'mfDynamics'
      }
    }, {
      name: 'fDynamics',
      glyph: {
        symbol: 'fDynamics'
      }
    }, {
      name: 'ffDynamics',
      glyph: {
        symbol: 'ffDynamics'
      }
    }, {
      name: 'fffDynamics',
      glyph: {
        symbol: 'fffDynamics'
      }
    }, {
      name: 'sfDynamics',
      glyph: {
        symbol: 'sfDynamics'
      }
    }, {
      name: 'fzDynamics',
      glyph: {
        symbol: 'fzDynamics'
      }
    }, {
      name: 'sfzDynamics',
      glyph: {
        symbol: 'sfzDynamics'
      }
    }, {
      name: 'rfzDynamics',
      glyph: {
        symbol: 'rfzDynamics'
      }
    }, {
      name: 'fpDynamics',
      glyph: {
        symbol: 'fpDynamics'
      }
    }, {
      name: 'sfpDynamics',
      glyph: {
        symbol: 'sfpDynamics'
      }
    }, {
      name: 'tempo2',
      glyph: {
        symbol: 'sixtyFourthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo2dot',
      glyph: {
        symbol: 'sixtyFourthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo3',
      glyph: {
        symbol: 'thirtySecondTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo3dot',
      glyph: {
        symbol: 'thirtySecondDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo4',
      glyph: {
        symbol: 'sixteenthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo4dot',
      glyph: {
        symbol: 'sixteenthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo5',
      glyph: {
        symbol: 'eighthTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo5dot',
      glyph: {
        symbol: 'eighthDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo6',
      glyph: {
        symbol: 'quarterTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo6dot',
      glyph: {
        symbol: 'quarterDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo7',
      glyph: {
        symbol: 'halfTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo7dot',
      glyph: {
        symbol: 'halfDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo8',
      glyph: {
        symbol: 'wholeTempo',
        scale: 1.25
      }
    }, {
      name: 'tempo8dot',
      glyph: {
        symbol: 'wholeDotTempo',
        scale: 1.25
      }
    }, {
      name: 'tempoEquals',
      glyph: {
        symbol: 'tempoEquals',
        scale: 1.25
      }
    }, {
      name: 'flagDown0',
      glyph: {
        symbol: 'twoHundredFiftySixthFlagDown'
      }
    }, {
      name: 'flagDown1',
      glyph: {
        symbol: 'oneHundredTwentyEighthFlagDown'
      }
    }, {
      name: 'flagDown2',
      glyph: {
        symbol: 'sixtyFourthFlagDown'
      }
    }, {
      name: 'flagDown3',
      glyph: {
        symbol: 'thirtySecondFlagDown'
      }
    }, {
      name: 'flagDown4',
      glyph: {
        symbol: 'sixteenthFlagDown'
      }
    }, {
      name: 'flagDown5',
      glyph: {
        symbol: 'eighthFlagDown'
      }
    }, {
      name: 'flagUp0',
      glyph: {
        symbol: 'twoHundredFiftySixthFlagUp'
      }
    }, {
      name: 'flagUp1',
      glyph: {
        symbol: 'oneHundredTwentyEighthFlagUp'
      }
    }, {
      name: 'flagUp2',
      glyph: {
        symbol: 'sixtyFourthFlagUp'
      }
    }, {
      name: 'flagUp3',
      glyph: {
        symbol: 'thirtySecondFlagUp'
      }
    }, {
      name: 'flagUp4',
      glyph: {
        symbol: 'sixteenthFlagUp'
      }
    }, {
      name: 'flagUp5',
      glyph: {
        symbol: 'eighthFlagUp'
      }
    }, {
      name: 'timeSignature0',
      glyph: {
        symbol: 'timeSignature0'
      }
    }, {
      name: 'timeSignature1',
      glyph: {
        symbol: 'timeSignature1'
      }
    }, {
      name: 'timeSignature2',
      glyph: {
        symbol: 'timeSignature2'
      }
    }, {
      name: 'timeSignature3',
      glyph: {
        symbol: 'timeSignature3'
      }
    }, {
      name: 'timeSignature4',
      glyph: {
        symbol: 'timeSignature4'
      }
    }, {
      name: 'timeSignature5',
      glyph: {
        symbol: 'timeSignature5'
      }
    }, {
      name: 'timeSignature6',
      glyph: {
        symbol: 'timeSignature6'
      }
    }, {
      name: 'timeSignature7',
      glyph: {
        symbol: 'timeSignature7'
      }
    }, {
      name: 'timeSignature8',
      glyph: {
        symbol: 'timeSignature8'
      }
    }, {
      name: 'timeSignature9',
      glyph: {
        symbol: 'timeSignature9'
      }
    }, {
      name: 'tuplet0',
      glyph: {
        symbol: 'tuplet0'
      }
    }, {
      name: 'tuplet1',
      glyph: {
        symbol: 'tuplet1'
      }
    }, {
      name: 'tuplet2',
      glyph: {
        symbol: 'tuplet2'
      }
    }, {
      name: 'tuplet3',
      glyph: {
        symbol: 'tuplet3'
      }
    }, {
      name: 'tuplet4',
      glyph: {
        symbol: 'tuplet4'
      }
    }, {
      name: 'tuplet5',
      glyph: {
        symbol: 'tuplet5'
      }
    }, {
      name: 'tuplet6',
      glyph: {
        symbol: 'tuplet6'
      }
    }, {
      name: 'tuplet7',
      glyph: {
        symbol: 'tuplet7'
      }
    }, {
      name: 'tuplet8',
      glyph: {
        symbol: 'tuplet8'
      }
    }, {
      name: 'tuplet9',
      glyph: {
        symbol: 'tuplet9'
      }
    }, {
      name: 'tab0',
      glyph: {
        symbol: 'tab0'
      }
    }, {
      name: 'tab1',
      glyph: {
        symbol: 'tab1'
      }
    }, {
      name: 'tab2',
      glyph: {
        symbol: 'tab2'
      }
    }, {
      name: 'tab3',
      glyph: {
        symbol: 'tab3'
      }
    }, {
      name: 'tab4',
      glyph: {
        symbol: 'tab4'
      }
    }, {
      name: 'tab5',
      glyph: {
        symbol: 'tab5'
      }
    }, {
      name: 'tab6',
      glyph: {
        symbol: 'tab6'
      }
    }, {
      name: 'tab7',
      glyph: {
        symbol: 'tab7'
      }
    }, {
      name: 'tab8',
      glyph: {
        symbol: 'tab8'
      }
    }, {
      name: 'tab9',
      glyph: {
        symbol: 'tab9'
      }
    }, {
      name: 'quarterBendAlteration',
      glyph: {
        symbol: 'quarterBendAlteration'
      }
    }, {
      name: 'halfBendAlteration',
      glyph: {
        symbol: 'halfBendAlteration'
      }
    }, {
      name: 'fullBendAlteration',
      glyph: {
        symbol: 'fullBendAlteration'
      }
    }, {
      name: 'pedalLineNotationStart',
      glyph: {
        symbol: 'pedalDown'
      }
    }, {
      name: 'octaveUpLineNotationStart',
      glyph: {
        symbol: 'octaveUp'
      }
    }, {
      name: 'octaveDownLineNotationStart',
      glyph: {
        symbol: 'octaveDown'
      }
    }, {
      name: 'twoOctavesUpLineNotationStart',
      glyph: {
        symbol: 'twoOctavesUp'
      }
    }, {
      name: 'trillLineNotationStart',
      glyph: {
        symbol: 'trill'
      }
    }, {
      name: 'wavyLineNotationSegment',
      glyph: {
        symbol: 'shake',
        spacingX: -0.58
      }
    }, {
      name: 'pedalLineNotationEnd',
      glyph: {
        symbol: 'pedalUp'
      }
    }, {
      name: 'segnoSymbol',
      glyph: {
        symbol: 'segno'
      }
    }, {
      name: 'codaSymbol',
      glyph: {
        symbol: 'coda'
      }
    }, {
      name: 'cutTime',
      glyph: {
        symbol: 'cutTime'
      }
    }, {
      name: 'commonTime',
      glyph: {
        symbol: 'commonTime'
      }
    }, {
      name: 'arpeggioSymbol',
      glyph: {
        symbol: 'arpeggio'
      }
    }, {
      name: 'arpeggioUpSymbol',
      glyph: {
        symbol: 'arpeggioUp'
      }
    }, {
      name: 'arpeggioDownSymbol',
      glyph: {
        symbol: 'arpeggioDown'
      }
    }, {
      name: 'leftParenthesisSymbol',
      glyph: {
        symbol: 'leftParenthesis'
      }
    }, {
      name: 'rightParenthesisSymbol',
      glyph: {
        symbol: 'rightParenthesis'
      }
    }, {
      name: 'measureRepeatSymbol',
      glyph: {
        symbol: 'measureRepeat'
      }
    }, {
      name: 'scoopSymbol',
      glyph: {
        symbol: 'scoop',
        scale: 0.7
      }
    }, {
      name: 'plopSymbol',
      glyph: {
        symbol: 'plop',
        scale: 0.7
      }
    }, {
      name: 'quickFallSymbol',
      glyph: {
        symbol: 'quickFall',
        scale: 0.7
      }
    }, {
      name: 'doitSymbol',
      glyph: {
        symbol: 'doit',
        scale: 0.7
      }
    }, {
      name: 'fall1LineNotationSegment',
      glyph: {
        symbol: 'fall1',
        spacingX: -0.9,
        scale: 0.7
      }
    }, {
      name: 'rip1LineNotationSegment',
      glyph: {
        symbol: 'rip1',
        spacingX: -0.9,
        scale: 0.7
      }
    }]
  },
  symbols: [{
    name: 'doubleBarline',
    bounds: {
      left: 0,
      right: 4.9,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.75,-40.6L1.75,0L0,0L0,-40.6L1.75,-40.6M4.9,-40.6L4.9,0L3.15,0L3.15,-40.6L4.9,-40.6'
    }]
  }, {
    name: 'initialBarline',
    bounds: {
      left: 0,
      right: 10.3,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M10.3,-40.6L10.3,0L8.75,0L8.75,-40.6L10.3,-40.6M6,-40.6L6,0L0,0L0,-40.6L6,-40.6'
    }]
  }, {
    name: 'normalBarline',
    bounds: {
      left: 0,
      right: 1.506,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.506,0L0.006,0L0.006,-40.6L1.506,-40.6L1.506,0'
    }]
  }, {
    name: 'finalBarline',
    bounds: {
      left: 0,
      right: 10.4,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.6,-40.6L1.6,0L0,0L0,-40.6L1.6,-40.6M10.4,-40.6L10.4,0L4.4,0L4.4,-40.6L10.4,-40.6'
    }]
  }, {
    name: 'dashedBarline',
    bounds: {
      left: 0,
      right: 1.5,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.5,-40.6L1.5,-36.4L0,-36.4L0,-40.6L1.5,-40.6M1.5,-29.25L0,-29.25L0,-33.4L1.5,-33.4L1.5,-29.25M1.5,-26.05L1.5,-21.9L0,-21.9L0,-26.05L1.5,-26.05M1.5,-14.55L0,-14.55L0,-18.7L1.5,-18.7L1.5,-14.55M0,-11.35L1.5,-11.35L1.5,-7.2L0,-7.2L0,-11.35M1.5,-4.2L1.5,0L0,0L0,-4.2L1.5,-4.2'
    }]
  }, {
    name: 'startRepeat',
    bounds: {
      left: 0,
      right: 18.184,
      top: -2.05,
      bottom: 3.1
    },
    svgPaths: [{
      d: 'M18.184,0.457Q17.916,2.761 15.634,3.1Q13.286,2.761 13.084,0.457Q13.286,-1.847 15.634,-2.05Q17.916,-1.847 18.184,0.457'
    }]
  }, {
    name: 'endRepeat',
    bounds: {
      left: -0.016,
      right: 5.084,
      top: -2.05,
      bottom: 3.1
    },
    svgPaths: [{
      d: 'M5.084,0.457Q4.816,2.761 2.534,3.1Q0.186,2.761 -0.016,0.457Q0.186,-1.847 2.534,-2.05Q4.816,-1.847 5.084,0.457'
    }]
  }, {
    name: 'gClef',
    bounds: {
      left: 0,
      right: 24.5,
      top: -43,
      bottom: 26.4
    },
    svgPaths: [{
      d: 'M16.8,-41.3Q17.85,-39.35 18.65,-36.5Q19.45,-33.75 19.55,-31.35Q19.3,-22.85 12.95,-16.4L14.25,-9.7L15.8,-9.85Q19.7,-9.75 22.1,-6.9Q24.45,-4.05 24.5,-0.1Q24.45,3.15 22.7,5.45Q20.95,7.8 18.05,9.2L19.7,17.3L19.8,19.15Q19.6,25.45 12.95,26.35Q10.35,26.6 8.1,25.05Q5.85,23.5 5.45,20.8Q5.35,18.9 6.35,17.4Q7.4,15.95 9.2,15.65Q10.8,15.5 12,16.65Q13.2,17.75 13.3,19.45Q13.25,21.75 11.75,22.6Q10.25,23.5 9.2,23.25Q9.4,24.25 10.65,24.7L12.85,25Q18.35,24.15 18.45,19.05Q18.5,17.7 18.15,16.15L16.75,9.75L13.15,10.3Q7.85,10.15 4.2,6.4Q0.55,2.65 0,-3.15Q-0.2,-8.95 3.25,-13.5Q6.7,-18 10.6,-21.7Q9.45,-26.05 9.4,-30.55Q9.4,-33.6 10.75,-37.6Q12.1,-41.65 14.9,-43Q15.75,-43.2 16.8,-41.3M15.65,-37.1Q13.2,-36.35 12.15,-33.25Q11.1,-30.2 11.05,-27.75Q11.1,-25.2 11.75,-22.8Q14.2,-24.85 16.05,-27.95Q17.85,-31.1 17.8,-34.55Q17.8,-35.55 17.25,-36.3Q16.7,-37.05 15.65,-37.1M11.05,-2.85Q9.85,-1.35 9.85,0.55Q10.1,3.7 12.95,4.9L13.25,5.3L12.7,5.7Q10.4,4.85 8.95,2.9Q7.5,0.9 7.5,-1.65Q7.6,-4.2 9.2,-6.35Q10.8,-8.45 13.1,-9.35L11.9,-15.4Q8.55,-12.6 5.85,-9.05Q3.15,-5.55 2.95,-0.95Q3.1,3.8 6.25,6.4Q9.45,9.05 13.95,8.9L16.55,8.4L13.95,-4.9Q12.2,-4.35 11.05,-2.85M15.15,-5.05L17.8,8Q21.7,5.85 21.75,1.3Q21.5,-1.55 19.7,-3.25Q17.9,-5 15.15,-5.05'
    }]
  }, {
    name: 'fClef',
    bounds: {
      left: 0,
      right: 27.8,
      top: -10,
      bottom: 22
    },
    svgPaths: [{
      d: 'M6.8,-8.15L4.75,-7Q4,-6.2 3.55,-5.2Q3.1,-4.2 4.5,-3.9L6.1,-4.25Q7.75,-4.35 8.8,-3.4Q9.9,-2.4 9.95,-1Q9.9,0.4 8.85,1.5Q7.8,2.6 5.9,2.65Q3.9,2.65 2.5,1.45Q1.15,0.3 1.05,-1.55Q1,-3.6 2.15,-5.45Q3.3,-7.25 5.25,-8.35Q6.35,-9 8,-9.5L10.9,-10Q14.7,-10.25 18.25,-7.5Q20.05,-6.05 20.85,-4.5Q21.6,-2.95 21.85,-0.5Q22.1,3.2 19.8,7.2Q17.55,11.15 14.5,13.65L7.85,18.05L0.25,22L0,21.15L7.85,15.65Q11.1,13.05 13.65,8.75Q14.8,6.75 15.5,4.25Q16.25,1.8 16.25,-0.35Q16.4,-3.55 15.3,-5.75Q14.55,-7.15 13.1,-8Q11.55,-8.9 9.55,-8.75L6.8,-8.15M25.65,-6.85Q27.7,-6.6 27.8,-4.7Q27.7,-2.75 25.65,-2.5Q23.5,-2.75 23.45,-4.7Q23.5,-6.6 25.65,-6.85M27.8,4.05Q27.7,6 25.65,6.25Q23.5,6 23.45,4.05Q23.5,2.15 25.65,1.9Q27.7,2.15 27.8,4.05'
    }]
  }, {
    name: 'cClef',
    bounds: {
      left: 0,
      right: 27,
      top: -20,
      bottom: 20.6
    },
    svgPaths: [{
      d: 'M18.25,-20Q22.2,-19.95 24.6,-17.4Q26.9,-14.8 26.95,-10.5Q26.9,-7.05 24.95,-4.65Q23,-2.25 19.55,-1.9Q17.7,-1.7 15.35,-2.65L13.5,0.3L15.35,3.25Q17.7,2.3 19.55,2.5Q23,2.9 24.95,5.25Q26.9,7.65 27,11.1Q26.9,15.4 24.6,17.95Q22.2,20.55 18.25,20.6Q15.8,20.65 13.45,19.5Q11.1,18.45 10.95,15.7Q10.95,14.5 11.7,13.6Q12.45,12.75 13.6,12.7Q16.1,12.8 16.35,15.2Q16.25,16.5 15.5,17.1Q14.8,17.7 14.7,18.2Q14.75,18.9 15.6,19.15L17.05,19.4Q20.2,19.2 21,16.7Q21.85,14.2 21.65,11.6Q21.8,9.3 21.2,6.65Q20.65,4.05 17.7,4.05Q15.7,4.35 14.65,6.05Q13.65,7.8 13.45,9.7L13.35,9.7Q13,7.65 11.95,4.95Q10.8,2.25 8.6,0.65L8.6,20.6L7.05,20.6L7.05,-20L8.6,-20L8.6,-0.05Q10.8,-1.6 11.9,-4.35Q13,-7.1 13.35,-9.05L13.45,-9.05Q13.65,-7.2 14.65,-5.45Q15.7,-3.75 17.7,-3.45Q20.7,-3.45 21.25,-6.2Q21.8,-8.9 21.65,-11.25Q21.85,-14.05 21,-16.2Q20.2,-18.4 17.05,-18.75L15.6,-18.6Q14.75,-18.35 14.7,-17.6Q14.8,-17.15 15.5,-16.55Q16.25,-15.95 16.35,-14.65Q16.1,-12.25 13.6,-12.2Q11.15,-12.5 10.95,-15.15Q11.1,-17.9 13.45,-19Q15.85,-20.05 18.25,-20M4.7,-20L4.7,20.6L0,20.6L0,-20L4.7,-20'
    }]
  }, {
    name: 'wholeRest',
    bounds: {
      left: -2.478,
      right: 15.022,
      top: -5.5,
      bottom: 12
    },
    svgPaths: [{
      d: 'M12.627,5L-0.023,5L-0.023,0L12.627,0L12.627,5'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M15.022,12L-2.478,12L-2.478,-5.5L15.022,-5.5L15.022,12'
    }]
  }, {
    name: 'halfRest',
    bounds: {
      left: -2.428,
      right: 15.072,
      top: -11.25,
      bottom: 6.25
    },
    svgPaths: [{
      d: 'M12.627,0L-0.023,0L-0.023,-5L12.627,-5L12.627,0'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M15.072,6.25L-2.428,6.25L-2.428,-11.25L15.072,-11.25L15.072,6.25'
    }]
  }, {
    name: 'quarterRest',
    bounds: {
      left: 0,
      right: 10.4,
      top: -15,
      bottom: 15.35
    },
    svgPaths: [{
      d: 'M10.4,-7.2Q6.65,-3.15 6.3,0.2Q6.35,2.3 7.6,4.2L10.2,7.65L9.6,8.45Q8.15,7.65 6.8,7.55Q5.5,7.5 4.65,8.75Q3.6,10.6 4.4,12.2Q5.15,13.8 6.1,14.55L5.55,15.35L1.95,12.2Q0.25,10.45 0,8.1Q0.35,4.7 3.85,4.65Q5.2,4.65 6.95,5.6L6.95,5.5L0.65,-2.7Q2.4,-4.2 3.6,-6.25Q4.8,-8.3 4.6,-10.65Q4,-13.05 2.25,-15L3.95,-15L10.4,-7.2'
    }]
  }, {
    name: 'eighthRest',
    bounds: {
      left: 0,
      right: 10.4,
      top: -10,
      bottom: 8.5
    },
    svgPaths: [{
      d: 'M5.35,-6.25L5.25,-5.8Q5.55,-5.15 6.25,-5.5Q8.65,-6.6 9.75,-8.9L10.4,-8.9L5.65,8.5L4.25,8.5L8.1,-5.15Q6.05,-3.85 3.75,-3.65Q2.25,-3.7 1.15,-4.6Q0.1,-5.5 0,-6.95Q0.05,-9.35 2.45,-9.95Q3.7,-10.15 4.6,-9.35Q5.5,-8.55 5.55,-7.25L5.35,-6.25'
    }]
  }, {
    name: 'sixteenthRest',
    bounds: {
      left: 0,
      right: 13.3,
      top: -10,
      bottom: 18.4
    },
    svgPaths: [{
      d: 'M3.85,-4.55Q2.75,-5.45 2.7,-6.9Q2.7,-9.3 5.15,-9.95Q6.35,-10.15 7.25,-9.3Q8.15,-8.5 8.2,-7.2L8,-6.15L7.9,-5.7Q8.2,-5.1 8.9,-5.45Q11.25,-6.5 12.55,-8.85L13.3,-8.85L5.7,18.4L4.3,18.4L8.1,4.75Q6.1,6.05 3.8,6.25Q2.3,6.2 1.2,5.3Q0.1,4.4 0,2.95Q0.15,0.15 2.95,-0.15Q4.2,-0.1 4.9,0.8Q5.65,1.7 5.6,2.9L5.3,4.25Q5.45,4.55 5.8,4.5Q6.5,4.5 7.35,3.85L8.65,2.8L10.75,-5.1Q8.7,-3.8 6.4,-3.6Q5,-3.65 3.85,-4.55'
    }]
  }, {
    name: 'thirtySecondRest',
    bounds: {
      left: 0,
      right: 16.1,
      top: -20,
      bottom: 18.5
    },
    svgPaths: [{
      d: 'M10.9,-16.2L10.75,-15.75Q11.05,-15.1 11.75,-15.45Q14.1,-16.55 15.4,-18.85L16.1,-18.85L5.75,18.5L4.35,18.5L8.15,4.85Q6.1,6.15 3.8,6.35Q2.3,6.3 1.2,5.4Q0.1,4.5 0,3.05Q0.15,0.25 2.95,-0.05Q5.45,0.3 5.6,2.8L5.3,4.35Q5.45,4.65 5.8,4.6Q6.55,4.6 7.4,3.95L8.75,2.75L10.8,-5.1Q8.75,-3.8 6.45,-3.6Q5,-3.65 3.85,-4.55Q2.75,-5.45 2.7,-6.85Q2.8,-9.65 5.65,-9.95Q6.85,-9.85 7.6,-8.95Q8.3,-8.05 8.25,-6.9L7.95,-5.6Q8.1,-5.3 8.45,-5.35Q9.2,-5.3 10.05,-6L11.4,-7.35L13.6,-15.1Q11.55,-13.8 9.25,-13.6Q7.8,-13.65 6.65,-14.55Q5.55,-15.45 5.5,-16.9Q5.55,-19.3 7.95,-19.95Q9.2,-20.15 10.1,-19.3Q11.05,-18.5 11.05,-17.2Q11.15,-16.65 10.9,-16.2'
    }]
  }, {
    name: 'sixtyFourthRest',
    bounds: {
      left: 0,
      right: 18.9,
      top: -20,
      bottom: 28.5
    },
    svgPaths: [{
      d: 'M12.1,-13.6Q10.65,-13.65 9.5,-14.55Q8.4,-15.45 8.35,-16.9Q8.4,-19.3 10.8,-19.95Q12.1,-20.15 13,-19.3Q13.9,-18.5 13.95,-17.2L13.75,-16.2L13.6,-15.75Q13.9,-15.1 14.6,-15.45Q17,-16.55 18.2,-18.85L18.9,-18.85L5.75,28.5L4.35,28.5L8.1,14.9Q6.1,16.2 3.8,16.4Q2.3,16.35 1.2,15.45Q0.1,14.55 0,13.1Q0.15,10.3 2.95,10Q5.45,10.35 5.6,12.85L5.3,14.4Q5.45,14.7 5.8,14.65Q6.5,14.65 7.35,14L8.7,12.8L10.85,4.9Q8.8,6.2 6.45,6.4Q5,6.35 3.85,5.45Q2.75,4.55 2.7,3.15Q2.8,0.35 5.65,0.05Q6.85,0.15 7.6,1.05Q8.35,1.95 8.3,3.1L8,4.4Q8.15,4.7 8.5,4.65Q9.25,4.7 10.1,4L11.45,2.65L13.65,-5.1Q11.6,-3.8 9.3,-3.6Q7.8,-3.65 6.65,-4.55Q5.55,-5.45 5.5,-6.9Q5.55,-9.3 8,-9.95Q9.25,-10.1 10.15,-9.3Q11.1,-8.45 11.1,-7.2L10.95,-6.15L10.8,-5.75Q11.1,-5.1 11.8,-5.45Q13.15,-5.9 14.25,-7.25L16.45,-15.1Q14.45,-13.8 12.1,-13.6'
    }]
  }, {
    name: 'oneHundredTwentyEighthRest',
    bounds: {
      left: 0,
      right: 21.5,
      top: -30,
      bottom: 28.5
    },
    svgPaths: [{
      d: 'M21.5,-28.85L5.75,28.5L4.35,28.5L8.05,14.85Q6.1,16.15 3.8,16.35Q2.3,16.3 1.2,15.4Q0.1,14.5 0,13.05Q0.15,10.25 2.95,9.95Q5.45,10.3 5.6,12.8L5.3,14.35Q5.45,14.65 5.8,14.6Q6.5,14.6 7.35,13.95L8.65,12.75L10.7,4.85Q8.75,6.15 6.45,6.35Q5,6.3 3.85,5.4Q2.75,4.5 2.7,3.1Q2.8,0.35 5.65,0.05Q6.85,0.15 7.6,1.05Q8.3,1.95 8.25,3.05L7.95,4.35Q8.1,4.65 8.45,4.6Q9.2,4.65 10,3.95L11.3,2.6L13.6,-5.1Q11.55,-3.8 9.25,-3.6Q7.8,-3.65 6.65,-4.55Q5.55,-5.45 5.5,-6.9Q5.55,-9.3 7.95,-9.95Q9.2,-10.1 10.1,-9.3Q11.05,-8.45 11.05,-7.2L10.9,-6.15L10.75,-5.75Q11.05,-5.1 11.75,-5.45Q13.1,-5.9 14.2,-7.25L16.4,-15.1Q14.4,-13.8 12.05,-13.6Q10.6,-13.65 9.45,-14.55Q8.35,-15.45 8.3,-16.9Q8.35,-19.3 10.75,-19.95Q12.05,-20.1 12.95,-19.3Q13.85,-18.45 13.9,-17.2L13.7,-16.15L13.55,-15.75Q13.85,-15.1 14.55,-15.45Q16.05,-16 17,-17.25L19.05,-25.1Q17.05,-23.8 14.75,-23.6Q13.25,-23.65 12.15,-24.55Q11,-25.45 10.95,-26.9Q11,-29.3 13.4,-29.95Q14.7,-30.15 15.6,-29.3Q16.5,-28.5 16.55,-27.2L16.35,-26.2L16.25,-25.75Q16.5,-25.1 17.25,-25.45Q19.6,-26.55 20.8,-28.85L21.5,-28.85'
    }]
  }, {
    name: 'halfNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M4.2,-0.95Q1.5,1 1.4,2.75Q1.35,3.55 2.4,3.65Q3.45,3.7 4.95,3.1Q6.45,2.5 7.95,1.45L10.6,-0.85Q11.65,-2.1 11.65,-3.05Q11.5,-3.65 10.75,-3.75Q9.25,-3.9 7.25,-2.9Q5.3,-1.85 4.2,-0.95M11.45,-4.85Q13.2,-3.4 13,-1.1Q12.75,1.55 10.1,3.4Q7.45,5.25 4.6,5.35Q2.95,5.5 1.6,4.75Q-0.2,3.3 0.05,1Q0.3,-1.7 2.9,-3.5Q5.5,-5.35 8.4,-5.45Q10.1,-5.6 11.45,-4.85'
    }]
  }, {
    name: 'solidNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M13,-1.55Q12.8,1.2 10.15,3.15Q7.4,5.1 4.4,5.2Q2.5,5.15 1.3,4.2Q0.05,3.15 0,1.45Q0.2,-1.15 2.85,-3.1Q5.45,-5.1 8.25,-5.2Q10.45,-5.25 11.65,-4.3Q12.95,-3.45 13,-1.55'
    }]
  }, {
    name: 'wholeNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M5,-0.9Q5.2,1.5 6.4,3Q7.6,4.4 9.2,4.2Q11.6,4.1 11.4,0.9Q11.2,-1.6 10,-3Q8.8,-4.4 7.2,-4.2Q6,-4 5.4,-3.3Q4.9,-2.6 5,-0.9M13.2,-4Q16.1,-2.9 16.4,0Q16.2,2.9 13.4,4Q10.7,5.1 8.3,5Q5.9,5.1 3.1,4Q0.3,2.9 0,0Q0.2,-2.9 2.9,-4Q5.7,-5.1 8,-5Q10.4,-5.1 13.2,-4'
    }]
  }, {
    name: 'eighthFlagUp',
    bounds: {
      left: -1.25,
      right: 9.65,
      top: 0,
      bottom: 30
    },
    svgPaths: [{
      d: 'M9.65,19.45Q9.6,22.6 8.45,25.45L6.2,30L5.6,30L7.35,25.85Q8.3,23.35 8.3,20.5Q8.15,17.1 6.05,14.4Q4.9,12.9 3.2,11.9Q1.5,10.9 -0.2,10.7L-0.2,11.5L-1.25,11.5L-1.25,0L-0.2,0L0.35,3.3Q0.7,5.15 2.2,7.05L6.8,12.25Q9.45,15.45 9.65,19.45'
    }]
  }, {
    name: 'sixteenthFlagDown',
    bounds: {
      left: 0,
      right: 11.4,
      top: -30,
      bottom: 1.4
    },
    svgPaths: [{
      d: 'M9.1,-29.6L9.55,-30Q11.2,-27.55 11.4,-23.3Q11.45,-21.1 10.45,-19.25Q10.9,-18.1 10.9,-16.45Q10.95,-14.4 10.25,-11.95Q9.5,-9.5 7.8,-7.25Q6,-5.05 3.1,-2.6Q1.9,-1.4 1.5,-0.2L1.05,1.4L0,1.4L0,-14.35L1.05,-14.35L1.05,-13.55L5.25,-16.15Q7.6,-17.6 8.9,-19.05Q9.85,-20.25 10.15,-21.4L10.45,-24.1Q10.5,-25.65 10,-27.35L9.1,-29.6M8.7,-16.45L7,-14.55L4.7,-12.35Q3.4,-11.15 2.3,-9.2Q1.2,-7.2 1.05,-5Q3.75,-6.45 5.75,-8.05Q7.75,-9.7 9.05,-12.6L9.75,-14.7L10,-16.65L10,-18.5L8.7,-16.45'
    }]
  }, {
    name: 'sixteenthFlagUp',
    bounds: {
      left: -1.25,
      right: 10.15,
      top: 0,
      bottom: 32.6
    },
    svgPaths: [{
      d: 'M6.85,9.95Q9.5,13.15 9.65,17.15Q9.65,19.15 9.05,21.1Q10.1,23.15 10.15,25.55Q10,29.75 8.1,32.6L7.45,32.6L8.7,29.7Q9.25,27.9 9.2,26.35L8.9,23.7Q8.6,22.55 7.6,21.3Q6.3,19.85 3.95,18.45L-0.2,15.85L-0.2,16.65L-1.25,16.65L-1.25,0L-0.2,0L0.2,2.45Q0.6,3.75 1.85,4.95Q4.9,7.6 6.85,9.95M7.55,18.75L8.5,20.15L8.6,17.55Q8.3,14.5 6.1,12.1Q3.5,9.25 -0.2,7.3Q-0.05,9.5 1.05,11.5Q2.15,13.45 3.5,14.7L5.85,16.85L7.55,18.75'
    }]
  }, {
    name: 'thirtySecondFlagUp',
    bounds: {
      left: -1.25,
      right: 10.15,
      top: -8.5,
      bottom: 31.9
    },
    svgPaths: [{
      d: 'M1.85,-3.5Q4.9,-0.9 6.85,1.5Q9.5,4.65 9.65,8.7Q9.65,10.95 9.05,13.05Q9.6,14.65 9.65,16.45Q9.65,18.45 9.05,20.4Q10.1,22.45 10.15,24.85Q10,29.05 8.1,31.9L7.45,31.9L8.7,29Q9.25,27.2 9.2,25.65L8.9,23Q8.6,21.85 7.6,20.6Q6.3,19.15 3.95,17.75L-0.2,15.15L-0.2,15.95L-1.25,15.95L-1.25,-8.5L-0.2,-8.5L0.2,-6.05Q0.6,-4.7 1.85,-3.5M6.1,3.65Q3.5,0.75 -0.2,-1.15L-0.2,-0.7L0.2,1.75Q0.6,3.05 1.85,4.25Q4.9,6.9 6.85,9.25Q7.9,10.5 8.55,11.85L8.6,10.85L8.6,9.1Q8.3,6.05 6.1,3.65M8.6,16.85Q8.3,13.8 6.1,11.4Q3.5,8.55 -0.2,6.6Q-0.05,8.8 1.05,10.8Q2.15,12.75 3.5,14L5.85,16.15L7.55,18.05L8.5,19.45L8.6,16.85'
    }]
  }, {
    name: 'sixtyFourthFlagUp',
    bounds: {
      left: -1.25,
      right: 10.15,
      top: -16,
      bottom: 32.2
    },
    svgPaths: [{
      d: 'M1.85,-11Q4.9,-8.4 6.85,-6Q9.5,-2.85 9.65,1.2Q9.65,3.45 9,5.6Q9.6,7.2 9.65,9.05Q9.65,11.3 9.05,13.4Q9.6,15 9.65,16.8Q9.65,18.8 9.05,20.75Q10.1,22.8 10.15,25.15Q10,29.35 8.1,32.2L7.45,32.2L8.7,29.3Q9.25,27.5 9.2,25.95L8.9,23.35Q8.6,22.2 7.6,20.95Q6.3,19.5 3.95,18.1L-0.2,15.5L-0.2,16.3L-1.25,16.3L-1.25,-16L-0.2,-16L0.2,-13.55Q0.6,-12.2 1.85,-11M1.85,-3.15Q4.9,-0.55 6.85,1.85L8.55,4.45L8.6,3.35L8.6,1.6Q8.3,-1.45 6.1,-3.85Q3.5,-6.75 -0.2,-8.65L-0.2,-8.15L0.2,-5.7Q0.6,-4.35 1.85,-3.15M1.85,4.6Q4.9,7.25 6.85,9.6Q7.9,10.85 8.55,12.2L8.6,11.2L8.6,9.45Q8.3,6.4 6.1,4Q3.5,1.1 -0.2,-0.8L-0.2,-0.35L0.2,2.1Q0.6,3.4 1.85,4.6M8.6,17.2Q8.3,14.15 6.1,11.75Q3.5,8.9 -0.2,6.95Q-0.05,9.15 1.05,11.15Q2.15,13.1 3.5,14.35L5.85,16.5L7.55,18.4L8.5,19.8L8.6,17.2'
    }]
  }, {
    name: 'oneHundredTwentyEighthFlagUp',
    bounds: {
      left: -1.25,
      right: 10.15,
      top: -23.5,
      bottom: 32.1
    },
    svgPaths: [{
      d: 'M1.85,-18.5Q4.9,-15.9 6.85,-13.5Q9.5,-10.35 9.65,-6.3Q9.65,-4.15 9.1,-2.15Q9.6,-0.6 9.65,1.1Q9.65,3.35 9,5.5Q9.6,7.1 9.65,8.95Q9.65,11.2 9.05,13.3Q9.6,14.9 9.65,16.7Q9.65,18.7 9.05,20.65Q10.1,22.7 10.15,25.1Q10,29.25 8.1,32.1L7.45,32.1L8.7,29.2Q9.25,27.45 9.2,25.9L8.9,23.25Q8.6,22.1 7.6,20.85Q6.3,19.4 3.95,18L-0.2,15.4L-0.2,16.2L-1.25,16.2L-1.25,-23.5L-0.2,-23.5L0.2,-21.05Q0.6,-19.7 1.85,-18.5M6.85,-6.1L8.55,-3.45L8.6,-4.15L8.6,-5.9Q8.3,-8.95 6.1,-11.35Q3.5,-14.25 -0.2,-16.15L-0.2,-16.1L0.2,-13.65Q0.6,-12.3 1.85,-11.1Q4.9,-8.5 6.85,-6.1M1.85,-3.25Q4.9,-0.65 6.85,1.75L8.55,4.35L8.6,3.25L8.6,1.5Q8.3,-1.55 6.1,-3.95Q3.5,-6.85 -0.2,-8.75L-0.2,-8.25L0.2,-5.8Q0.6,-4.45 1.85,-3.25M1.85,4.5Q4.9,7.15 6.85,9.5Q7.9,10.75 8.55,12.1L8.6,11.1L8.6,9.35Q8.3,6.3 6.1,3.9Q3.5,1 -0.2,-0.9L-0.2,-0.45L0.2,2Q0.6,3.3 1.85,4.5M8.6,17.1Q8.3,14.05 6.1,11.65Q3.5,8.8 -0.2,6.85Q-0.05,9.05 1.05,11.05Q2.15,13 3.5,14.25L5.85,16.4L7.55,18.3L8.5,19.7L8.6,17.1'
    }]
  }, {
    name: 'eighthFlagDown',
    bounds: {
      left: 0,
      right: 10.9,
      top: -28.25,
      bottom: 1.75
    },
    svgPaths: [{
      d: 'M7.5,-28.25Q8.6,-26.5 9.7,-23.7Q10.85,-20.85 10.9,-17.7Q10.7,-13.7 8.05,-10.5L3.45,-5.3Q1.95,-3.4 1.6,-1.55L1.05,1.75L0,1.75L0,-9.75L1.05,-9.75L1.05,-8.95Q2.75,-9.15 4.45,-10.15Q6.15,-11.15 7.3,-12.65Q9.4,-15.35 9.55,-18.75Q9.55,-21.65 8.65,-24.05L6.9,-28L7.5,-28.25'
    }]
  }, {
    name: 'oneHundredTwentyEighthFlagDown',
    bounds: {
      left: 0,
      right: 11.4,
      top: -30,
      bottom: 20.85
    },
    svgPaths: [{
      d: 'M9.1,-29.6L9.55,-30Q11.2,-27.55 11.4,-23.3Q11.45,-21.1 10.45,-19.25Q10.9,-18.1 10.9,-16.45Q10.95,-14.75 10.45,-12.7Q10.85,-11.5 10.9,-9.8Q10.95,-8.2 10.5,-6.25L10.9,-3.45Q10.95,-1.8 10.5,0.2L10.9,3.1Q10.95,5.1 10.25,7.55Q9.5,10 7.8,12.2Q6,14.4 3.1,16.85Q1.85,18.1 1.5,19.25L1.05,20.85L0,20.85L0,-14.35L1.05,-14.35L1.05,-13.55L5.25,-16.15Q7.6,-17.6 8.9,-19.05Q9.85,-20.25 10.15,-21.4L10.45,-24.1Q10.5,-25.65 10,-27.35L9.1,-29.6M9.75,-14.7L10,-16.65L10,-18.5L8.7,-16.45L7,-14.55L4.7,-12.35Q3.4,-11.15 2.3,-9.2Q1.2,-7.2 1.05,-5Q3.75,-6.45 5.75,-8.05Q7.75,-9.7 9.05,-12.6L9.75,-14.7M10.05,-11.35Q9.3,-9.2 7.8,-7.25Q6,-5.05 3.1,-2.6Q1.9,-1.4 1.5,-0.2L1.05,1.4L1.05,1.6Q3.75,0.15 5.75,-1.5Q7.75,-3.1 9.05,-5.95L9.75,-8.1L10,-10.05L10.05,-11.35M10,-3.7L10.05,-4.75Q9.3,-2.65 7.8,-0.7Q6,1.5 3.1,3.95Q1.85,5.2 1.5,6.35L1.05,7.95Q3.75,6.5 5.75,4.85Q7.75,3.25 9.05,0.4L9.75,-1.75L10,-3.7M10,2.85L10.05,1.6Q9.3,3.7 7.8,5.65Q6,7.85 3.1,10.3Q1.85,11.55 1.5,12.7L1.05,14.3L1.05,14.5Q3.75,13.05 5.75,11.4Q7.75,9.8 9.05,6.95L9.75,4.8L10,2.85'
    }]
  }, {
    name: 'rhythmDot',
    bounds: {
      left: 0,
      right: 3.8,
      top: -2,
      bottom: 1.8
    },
    svgPaths: [{
      d: 'M3.8,-0.15Q3.6,1.55 1.9,1.8Q0.15,1.55 0,-0.15Q0.15,-1.85 1.9,-2Q3.6,-1.85 3.8,-0.15'
    }]
  }, {
    name: 'staff',
    bounds: {
      left: 0,
      right: 40.9,
      top: -40,
      bottom: 0.6
    },
    svgPaths: [{
      d: 'M0,-30L40.9,-30L40.9,-29.25L0,-29.25L0,-30M0,-20L40.9,-20L40.9,-19.25L0,-19.25L0,-20M0,-10L40.9,-10L40.9,-9.25L0,-9.25L0,-10M0,-40L40.9,-40L40.9,-39.25L0,-39.25L0,-40M40.9,-0.15L40.9,0.6L0,0.6L0,-0.15L40.9,-0.15'
    }]
  }, {
    name: 'doubleFlat',
    bounds: {
      left: 0,
      right: 14.7,
      top: -20,
      bottom: 6.8
    },
    svgPaths: [{
      d: 'M7.95,-20L7.95,-4.3Q9.5,-5.65 11.5,-5.8Q12.75,-5.8 13.7,-4.8Q14.65,-3.85 14.7,-2.45Q14.55,-0.65 13.3,0.7Q12.05,2.05 10.7,3.05Q8.55,4.85 6.7,6.8L6.7,0.4L3.95,3.05L0,6.8L0,-20L1.25,-20L1.25,-4.3Q2.75,-5.65 4.75,-5.8Q5.85,-5.8 6.7,-5L6.7,-20L7.95,-20M3.4,-4.25Q2.7,-4.3 2,-3.65Q1.3,-2.95 1.25,-2.5L1.25,4.2L3.6,1.3Q4.85,-0.4 4.95,-2.1Q4.8,-4 3.4,-4.25M7.95,-2.5L7.95,4.2L10.35,1.3Q11.6,-0.4 11.7,-2.1Q11.6,-4 10.15,-4.25Q9.45,-4.3 8.75,-3.65L7.95,-2.5'
    }]
  }, {
    name: 'doubleSharp',
    bounds: {
      left: 0,
      right: 10.7,
      top: -5,
      bottom: 5.6
    },
    svgPaths: [{
      d: 'M3.9,-2.6Q3.9,-2.3 4.25,-1.7Q4.55,-1.15 5.35,-1.1Q6.7,-1.35 6.8,-2.65L7.1,-5L10.7,-5L10.7,-1.55L8.4,-1.1Q7.2,-0.95 7,0.35Q7.2,1.7 8.5,1.75L10.7,2.1L10.7,5.6L7.1,5.6L6.8,3.1Q6.6,1.8 5.35,1.7Q4.6,1.8 4.3,2.3L3.95,3.15L3.5,5.6L0,5.6L0,2.1L2.25,1.65Q3.6,1.5 3.7,0.2Q3.65,-0.55 3.1,-0.9L2.25,-1.25L0,-1.55L0,-5L3.5,-5L3.9,-2.6'
    }]
  }, {
    name: 'flat',
    bounds: {
      left: 0,
      right: 7.9,
      top: -20,
      bottom: 6.8
    },
    svgPaths: [{
      d: 'M1.2,-4.35Q2.75,-5.7 4.75,-5.85Q6,-5.85 6.95,-4.85Q7.9,-3.9 7.9,-2.5Q7.75,-0.7 6.5,0.65L3.9,3L0,6.8L0,-20L1.2,-20L1.2,-4.35M3.4,-4.3Q2.65,-4.35 1.95,-3.7Q1.25,-3 1.2,-2.55L1.2,4.2L3.55,1.25Q4.85,-0.45 4.95,-2.15Q4.8,-4.05 3.4,-4.3'
    }]
  }, {
    name: 'natural',
    bounds: {
      left: 0,
      right: 7,
      top: -14.2,
      bottom: 13.9
    },
    svgPaths: [{
      d: 'M7,-7.4L7,13.9L5.75,13.9L5.75,5.65L0,7.1L0,-14.2L1.25,-14.2L1.25,-5.95L7,-7.4M1.25,-2.1L1.25,3L5.75,1.8L5.75,-3.25L1.25,-2.1'
    }]
  }, {
    name: 'sharp',
    bounds: {
      left: 0,
      right: 9,
      top: -15,
      bottom: 15.1
    },
    svgPaths: [{
      d: 'M3.2,-14.05L3.2,-6.55L5.85,-7.25L5.85,-15L7.1,-15L7.1,-7.5L9,-8L9,-3.95L7.1,-3.5L7.1,2.25L9,1.75L9,5.9L7.1,6.4L7.1,13.8L5.85,13.8L5.85,6.7L3.2,7.35L3.2,15.1L1.95,15.1L1.95,7.65L0,8.1L0,4L1.95,3.5L1.95,-2.2L0,-1.7L0,-5.75L1.95,-6.25L1.95,-14.05L3.2,-14.05M3.2,-2.5L3.2,3.2L5.85,2.5L5.85,-3.2L3.2,-2.5'
    }]
  }, {
    name: 'timeSignature1',
    bounds: {
      left: 0,
      right: 10.1,
      top: -8,
      bottom: 8.9
    },
    svgPaths: [{
      d: 'M8.05,-8L8.05,5.1Q8.05,6.3 8.4,6.95Q8.75,7.6 10.1,7.65L10.1,8.9L1.65,8.9L1.65,7.65Q3,7.6 3.35,6.95Q3.7,6.3 3.7,5.1L3.7,-3.35L3.65,-3.35L1,1L0,0.6L3.65,-8L8.05,-8'
    }]
  }, {
    name: 'timeSignature2',
    bounds: {
      left: 0,
      right: 13.6,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M4.65,-4.65Q5.65,-4.25 5.8,-2.75Q5.75,-1.75 4.95,-1.1Q4.15,-0.4 3.15,-0.4Q0.7,-0.65 0.45,-3Q0.45,-4.95 2.05,-6.45Q3.65,-7.9 7.45,-8Q10.35,-7.9 11.8,-6.4Q13.3,-4.95 13.3,-3.05Q12.95,0.15 9.85,1.3Q6.8,2.4 4.55,3.95L4.55,4Q8.05,3.6 10.1,5.05L11.5,5.15Q12.25,4.85 12.35,3.15L13.6,3.15Q13.65,5.3 12.85,7.3Q12,9.35 9.45,9.5Q7.65,9.3 6.5,8.25Q5.35,7.1 3.8,6.8Q1.7,6.9 1.4,8.9L0.1,8.9Q-0.35,6.15 1.7,4.45Q3.75,2.75 5.85,1.65Q7.15,0.85 8.05,-0.4Q9,-1.7 9.05,-3.3Q8.95,-6.85 6.15,-6.6Q3.45,-6.55 3.55,-5.55Q3.7,-5 4.65,-4.65'
    }]
  }, {
    name: 'timeSignature3',
    bounds: {
      left: 0,
      right: 12.9,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M4.6,-5.2Q5.2,-4.9 5.3,-3.45Q5.1,-1.5 2.75,-1.35Q0.5,-1.5 0.35,-3.8Q0.5,-6.25 2.6,-7.1Q4.65,-8 6.4,-8Q8.45,-8.1 10.55,-6.95Q12.65,-5.8 12.75,-3.3Q12.7,-0.5 8.65,0.45L8.65,0.5Q10.2,0.65 11.55,1.6Q12.85,2.55 12.9,4.4Q12.8,7.25 10.65,8.4Q8.6,9.55 6.25,9.5Q4.25,9.55 2.25,8.7Q0.2,7.85 0,5.5Q0.25,3.1 2.65,2.85Q4.95,3.05 5.15,5.3Q4.95,6.4 4.3,7.2Q4.4,8.2 5.3,8.25Q6.8,8.35 7.7,7.35Q8.65,6.4 8.7,4.85Q8.6,2.65 7.2,1.85Q5.85,1.05 4,1.05L4,-0.2Q6.2,-0.2 7.25,-0.9Q8.4,-1.6 8.4,-3.55Q8.35,-6.6 5.6,-6.75L4.5,-6.6Q3.95,-6.5 3.85,-5.95Q4,-5.5 4.6,-5.2'
    }]
  }, {
    name: 'timeSignature4',
    bounds: {
      left: 0,
      right: 13.2,
      top: -8,
      bottom: 8.8
    },
    svgPaths: [{
      d: 'M6.35,-2.3Q3.7,0.95 1.55,2.75L1.55,2.85L6.9,2.85L6.9,-0.6L11.25,-4.7L11.25,2.85L13.2,2.85L13.2,4.25L11.25,4.25L11.25,5Q11.2,6.2 11.55,6.85Q11.9,7.5 13.15,7.55L13.15,8.8L4.9,8.8L4.9,7.55Q6.2,7.5 6.55,6.85Q6.9,6.2 6.9,5L6.9,4.25L0,4.25L0,2.85Q2.2,0.75 3.2,-2.15Q4.3,-5.1 4.6,-8L10.45,-8Q9.05,-5.55 6.35,-2.3'
    }]
  }, {
    name: 'timeSignature5',
    bounds: {
      left: 0,
      right: 12.1,
      top: -8,
      bottom: 8.9
    },
    svgPaths: [{
      d: 'M8.7,-5Q7.35,-4.15 5.3,-4.2L1.9,-4.65L1.8,-0.85Q3.8,-2.15 6.1,-2.15Q8.6,-2.1 10.3,-0.75Q12,0.5 12.1,3.1Q12.1,5 10.5,6.9Q8.8,8.75 4.95,8.9Q3.2,8.9 1.65,7.95Q0.15,7.05 0,5.2Q-0.1,4.05 0.6,3.15Q1.3,2.25 2.3,2.2Q4.9,2.2 4.9,4.8Q4.8,5.75 4,6.35Q3.7,6.5 3.65,6.9Q3.95,7.75 4.95,7.65Q5.9,7.75 7.1,6.65Q8.3,4.95 8,2.85Q7.9,1.2 7,0.15Q6.05,-0.85 4.85,-0.9Q3,-0.85 1.65,0.75L0.55,0.75L0.7,-8L5.7,-7.45L10.6,-8Q10.15,-5.8 8.7,-5'
    }]
  }, {
    name: 'timeSignature6',
    bounds: {
      left: 0,
      right: 13.4,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M7.6,-8Q9.3,-8 10.85,-7.05Q12.35,-6.1 12.6,-4.35Q12.35,-2.05 10,-1.8Q7.75,-2 7.5,-4.1Q7.65,-5.05 8.15,-5.95Q8.35,-6.85 7.15,-6.75Q6.2,-6.7 5.65,-5.85L4.9,-4.15Q4.4,-2.6 4.4,-1.55L4.4,0.95Q6.35,-0.25 8.65,-0.35Q10.65,-0.3 11.95,0.9Q13.35,2.1 13.4,4.15Q13.25,6.7 11.4,8.05Q9.5,9.5 7.1,9.5L7.05,9.5Q3.45,9.4 1.7,6.9Q0,4.4 0,0.9Q0,-2.8 2,-5.35Q3.95,-7.9 7.6,-8M8.8,2.3Q8.35,1.05 7,0.9Q5.65,1.05 5.15,2.3Q4.7,3.6 4.75,4.5Q4.7,5.7 5.15,6.95Q5.65,8.15 7,8.25Q8.35,8.15 8.8,6.95Q9.25,5.7 9.2,4.5Q9.25,3.6 8.8,2.3'
    }]
  }, {
    name: 'timeSignature7',
    bounds: {
      left: 0,
      right: 13.6,
      top: -8,
      bottom: 9.4
    },
    svgPaths: [{
      d: 'M8.9,-6.4Q9.7,-5.2 10.85,-5.45Q12.2,-6.05 12.35,-7.5L13.6,-7.5L12.75,-3.4L10.85,0.3Q8.4,4.45 8.55,9.4L2.65,9.4Q2.75,6.55 4.65,4.15Q6.5,1.85 8.7,0.25L10.3,-1.3Q10.95,-2.05 11.2,-3.3Q8.6,-1.3 7.45,-1.85Q6.3,-2.4 5.55,-3.45Q2.65,-6.1 1.4,-2.35L0,-2.35L0,-7.5L1.4,-7.5Q1.5,-6.55 2.3,-6.6Q2.95,-7 3.65,-7.55Q4.3,-8.1 5.9,-8Q8.05,-7.55 8.9,-6.4'
    }]
  }, {
    name: 'timeSignature8',
    bounds: {
      left: 0,
      right: 13.1,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M6.55,-8Q8.45,-8.05 10.4,-7.2Q12.45,-6.4 12.6,-4.15Q12.35,-1.5 10.05,-0.15Q13.15,1.65 13.1,4Q13.05,6.1 11.1,7.75Q9.2,9.4 6.05,9.5Q3.85,9.5 2,8.35Q0.15,7.15 0,4.8Q0.05,3.4 1,2.35Q1.95,1.3 3.2,0.75Q0.55,-0.5 0.35,-3.45Q0.45,-5.8 2.45,-6.9Q4.45,-8 6.55,-8M8.35,-1.05Q9.85,-2.15 10.15,-4.05Q10.15,-5.55 8.8,-6.15Q7.5,-6.8 6.25,-6.75Q4.1,-6.85 3.55,-4.85Q3.75,-3.5 5.7,-2.3Q7.75,-1.1 8.35,-1.05M7.6,3.15L4.7,1.55Q2.8,2.65 2.5,4.75Q2.55,6.1 3.65,7.1Q4.7,8.05 6,8.1Q7.25,8.3 8.35,7.6Q9.4,6.9 9.5,5.55Q9.3,4.05 7.6,3.15'
    }]
  }, {
    name: 'timeSignature9',
    bounds: {
      left: 0,
      right: 13.4,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M6.4,-8Q10.05,-7.9 11.75,-5.4Q13.45,-2.9 13.4,0.65Q13.4,3.95 11.5,6.65Q9.65,9.35 5.85,9.5Q4.15,9.5 2.6,8.55Q1.05,7.6 0.8,5.8Q1,3.5 3.35,3.25Q5.75,3.45 5.9,5.7L5.25,7.5Q5.15,8.45 6.2,8.25Q7.85,8.05 8.4,6.05Q8.95,4.3 9,2.55L9.1,0.6L7,1.45L4.8,1.85Q2.85,1.8 1.45,0.6Q0.1,-0.6 0,-2.65Q0.1,-5.2 2.05,-6.6Q3.95,-8 6.35,-8L6.4,-8M4.65,-0.8Q5.15,0.5 6.55,0.65Q7.8,0.5 8.3,-0.8Q8.75,-2.15 8.7,-3.35L8.15,-5.55Q7.7,-6.65 6.55,-6.75Q5.3,-6.65 4.8,-5.55Q4.3,-4.45 4.25,-3.35Q4.15,-2.15 4.65,-0.8'
    }]
  }, {
    name: 'timeSignature0',
    bounds: {
      left: 0,
      right: 14.4,
      top: -8,
      bottom: 9.5
    },
    svgPaths: [{
      d: 'M7.2,-8Q11,-7.75 12.7,-4.85Q14.4,-1.95 14.4,0.75Q14.4,3.5 12.7,6.4Q11,9.25 7.2,9.5Q3.4,9.25 1.7,6.4Q0,3.5 0,0.75Q0,-1.95 1.7,-4.85Q3.4,-7.8 7.2,-8M7.2,-6.75Q5.3,-6.5 4.75,-3.7Q4.15,-0.95 4.2,0.8Q4.15,2.55 4.65,5.25Q5.2,8 7.2,8.25Q9.15,8 9.7,5.25Q10.25,2.55 10.15,0.8Q10.2,-0.95 9.65,-3.7Q9.05,-6.5 7.2,-6.75'
    }]
  }, {
    name: 'sixtyFourthFlagDown',
    bounds: {
      left: 0,
      right: 11.4,
      top: -30,
      bottom: 14.3
    },
    svgPaths: [{
      d: 'M9.1,-29.6L9.55,-30Q11.2,-27.55 11.4,-23.3Q11.45,-21.1 10.45,-19.25Q10.9,-18.1 10.9,-16.45Q10.95,-14.75 10.45,-12.7Q10.85,-11.5 10.9,-9.8Q10.95,-8.2 10.5,-6.25L10.9,-3.45Q10.95,-1.45 10.25,1Q9.5,3.45 7.8,5.65Q6,7.85 3.1,10.3Q1.85,11.55 1.5,12.7L1.05,14.3L0,14.3L0,-14.35L1.05,-14.35L1.05,-13.55L5.25,-16.15Q7.6,-17.6 8.9,-19.05Q9.85,-20.25 10.15,-21.4L10.45,-24.1Q10.5,-25.65 10,-27.35L9.1,-29.6M9.75,-14.7L10,-16.65L10,-18.5L8.7,-16.45L7,-14.55L4.7,-12.35Q3.4,-11.15 2.3,-9.2Q1.2,-7.2 1.05,-5Q3.75,-6.45 5.75,-8.05Q7.75,-9.7 9.05,-12.6L9.75,-14.7M10.05,-11.35Q9.3,-9.2 7.8,-7.25Q6,-5.05 3.1,-2.6Q1.9,-1.4 1.5,-0.2L1.05,1.4L1.05,1.6Q3.75,0.15 5.75,-1.5Q7.75,-3.1 9.05,-5.95L9.75,-8.1L10,-10.05L10.05,-11.35M7.8,-0.7Q6,1.5 3.1,3.95Q1.85,5.2 1.5,6.35L1.05,7.95Q3.75,6.5 5.75,4.85Q7.75,3.25 9.05,0.4L9.75,-1.75L10,-3.7L10.05,-4.75Q9.3,-2.65 7.8,-0.7'
    }]
  }, {
    name: 'thirtySecondFlagDown',
    bounds: {
      left: 0,
      right: 11.4,
      top: -30,
      bottom: 7.95
    },
    svgPaths: [{
      d: 'M9.1,-29.6L9.55,-30Q11.2,-27.55 11.4,-23.3Q11.45,-21.1 10.45,-19.25Q10.9,-18.1 10.9,-16.45Q10.95,-14.75 10.45,-12.7Q10.85,-11.5 10.9,-9.8Q10.95,-7.8 10.25,-5.35Q9.5,-2.9 7.8,-0.7Q6,1.5 3.1,3.95Q1.85,5.2 1.5,6.35L1.05,7.95L0,7.95L0,-14.35L1.05,-14.35L1.05,-13.55L5.25,-16.15Q7.6,-17.6 8.9,-19.05Q9.85,-20.25 10.15,-21.4L10.45,-24.1Q10.5,-25.65 10,-27.35L9.1,-29.6M10,-16.65L10,-18.5L8.7,-16.45L7,-14.55L4.7,-12.35Q3.4,-11.15 2.3,-9.2Q1.2,-7.2 1.05,-5Q3.75,-6.45 5.75,-8.05Q7.75,-9.7 9.05,-12.6L9.75,-14.7L10,-16.65M10.05,-11.35Q9.3,-9.2 7.8,-7.25Q6,-5.05 3.1,-2.6Q1.9,-1.4 1.5,-0.2L1.05,1.4L1.05,1.6Q3.75,0.15 5.75,-1.5Q7.75,-3.1 9.05,-5.95L9.75,-8.1L10,-10.05L10.05,-11.35'
    }]
  }, {
    name: 'grandStaff',
    bounds: {
      left: -12.5,
      right: 0,
      top: -160,
      bottom: 0.15
    },
    svgPaths: [{
      d: 'M-0.45,-160L-0.45,-159.4Q-3.55,-153.95 -5.45,-148.8L-5.65,-148.25Q-7.6,-142.85 -7.35,-136.45Q-7,-130.65 -5.45,-124.5L-5.35,-124.15L-2.15,-112.05Q-0.6,-106.2 -0.45,-101.6Q-0.4,-93.45 -3.2,-88.65Q-4.15,-87.1 -5.45,-85.55Q-8.05,-82.6 -12.1,-79.9Q-8.05,-77 -5.45,-74Q-4.15,-72.45 -3.2,-70.85Q-0.4,-66 -0.45,-57.8Q-0.6,-53.25 -2.15,-47.4L-5.35,-35.3Q-7,-29 -7.35,-22.95Q-7.6,-16.55 -5.65,-11.2Q-3.7,-5.85 -0.45,-0.4L-0.45,0.15Q-6.45,-8.3 -8.95,-16.25Q-11.45,-24.2 -11.4,-30.8Q-11.25,-37.45 -9.8,-44.1L-6.85,-56.45Q-5.35,-62.2 -5.3,-66.2Q-5.35,-67.85 -5.65,-69.35Q-6.15,-71.75 -7.35,-73.8Q-9.3,-77.1 -12.5,-79.6L-12.5,-80.2Q-9.3,-82.45 -7.35,-85.7Q-5.85,-88.15 -5.45,-91.2L-5.3,-93.2L-5.45,-95.65Q-5.8,-98.9 -6.85,-102.95L-9.8,-115.35Q-11.25,-121.95 -11.4,-128.65Q-11.45,-135.25 -8.95,-143.25Q-7.65,-147.35 -5.45,-151.65Q-3.35,-155.75 -0.45,-160'
    }]
  }, {
    name: 'slashNoteHead',
    bounds: {
      left: 0,
      right: 19.6,
      top: -13.15,
      bottom: 13.75
    },
    svgPaths: [{
      'stroke-width': '1',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'miter',
      'stroke-miterlimit': '38.4',
      d: 'M19.1,-5.35L0.5,12.6L0.5,6.45L19.1,-12L19.1,-5.35'
    }]
  }, {
    name: 'hollowSlashNoteHead',
    bounds: {
      left: 0,
      right: 27.4,
      top: -13.75,
      bottom: 13.25
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,0)',
      'stroke-width': '3',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'miter',
      'stroke-miterlimit': '38.4',
      d: 'M25.3,-0.25L13.9,11.15L2.5,-0.25L13.85,-11.65L25.3,-0.25'
    }]
  }, {
    name: 'invisibleBarline',
    bounds: {
      left: 0,
      right: 1.506,
      top: -40.25,
      bottom: 0.35
    },
    svgPaths: [{
      fill: 'rgba(0,0,0,0)',
      d: 'M1.506,0.35L0.006,0.35L0.006,-40.25L1.506,-40.25L1.506,0.35'
    }]
  }, {
    name: 'repeatBarline',
    bounds: {
      left: 0,
      right: 14.7,
      top: -40.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M14.7,-40.6L14.7,0L13.1,0L13.1,-40.6L14.7,-40.6M1.6,-40.6L1.6,0L0,0L0,-40.6L1.6,-40.6M10.4,-40.6L10.4,0L4.4,0L4.4,-40.6L10.4,-40.6'
    }]
  }, {
    name: 'topStartWing',
    bounds: {
      left: 0,
      right: 16.4,
      top: -18,
      bottom: 0.1
    },
    svgPaths: [{
      d: 'M12.85,-13.05Q11.3,-11.5 9.8,-10.65L6.05,-8.65L6.05,0.1L0,0.1L0,-11.6L6.6,-12.7Q9.65,-13.4 11.05,-14.15Q12.7,-15.1 13.65,-16L15.55,-18L16.4,-17.7Q15.2,-15.2 12.85,-13.05'
    }]
  }, {
    name: 'bottomStartWing',
    bounds: {
      left: 0,
      right: 16.4,
      top: 0,
      bottom: 18.1
    },
    svgPaths: [{
      d: 'M6.05,8.75L9.8,10.75Q11.3,11.6 12.85,13.15Q15.2,15.3 16.4,17.8L15.55,18.1L13.65,16.1Q12.7,15.2 11.05,14.25Q9.65,13.5 6.6,12.8L0,11.7L0,0L6.05,0L6.05,8.75'
    }]
  }, {
    name: 'braceBody',
    bounds: {
      left: 0,
      right: 6.05,
      top: -40.5,
      bottom: 0.1
    },
    svgPaths: [{
      d: 'M6.05,0.1L0,0.1L0,-40.5L6.05,-40.5L6.05,0.1'
    }]
  }, {
    name: 'bottomEndWing',
    bounds: {
      left: -10.1,
      right: 6.3,
      top: 0,
      bottom: 18.1
    },
    svgPaths: [{
      d: 'M0.25,0L0.25,8.75L-3.5,10.75Q-5,11.6 -6.55,13.15Q-8.9,15.3 -10.1,17.8L-9.25,18.1L-7.35,16.1L-4.75,14.25Q-3.35,13.5 -0.3,12.8L6.3,11.7L6.3,0L0.25,0'
    }]
  }, {
    name: 'topEndWing',
    bounds: {
      left: -10.1,
      right: 6.3,
      top: -18,
      bottom: 0.1
    },
    svgPaths: [{
      d: 'M-10.1,-17.7Q-8.9,-15.2 -6.55,-13.05Q-5,-11.5 -3.5,-10.65L0.25,-8.65L0.25,0.1L6.3,0.1L6.3,-11.6L-0.3,-12.7Q-3.35,-13.4 -4.75,-14.15L-7.35,-16L-9.25,-18L-10.1,-17.7'
    }]
  }, {
    name: 'repeatEndingBracket',
    bounds: {
      left: -10.5,
      right: 80.2,
      top: -22.5,
      bottom: 0
    },
    svgPaths: [{
      fill: 'none',
      'stroke-width': '1',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M-10,-5.5L-10,-22M-9.7,-22L79.7,-22'
    }]
  }, {
    name: 'halfRestWithLine',
    bounds: {
      left: -3.469,
      right: 16.231,
      top: -11.25,
      bottom: 6.25
    },
    svgPaths: [{
      d: 'M16.231,0.8L-3.469,0.8L-3.469,-0.2L16.231,-0.2L16.231,0.8'
    }, {
      d: 'M12.627,0L-0.023,0L-0.023,-5L12.627,-5L12.627,0'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M15.072,6.25L-2.428,6.25L-2.428,-11.25L15.072,-11.25L15.072,6.25'
    }]
  }, {
    name: 'wholeRestWithLine',
    bounds: {
      left: -3.519,
      right: 16.181,
      top: -5.5,
      bottom: 12
    },
    svgPaths: [{
      d: 'M16.181,1.1L-3.519,1.1L-3.519,-0.1L16.181,-0.1L16.181,1.1'
    }, {
      d: 'M12.577,5L-0.073,5L-0.073,0L12.577,0L12.577,5'
    }, {
      fill: 'rgba(0,0,0,0)',
      d: 'M14.972,12L-2.528,12L-2.528,-5.5L14.972,-5.5L14.972,12'
    }]
  }, {
    name: 'percussionClef',
    bounds: {
      left: 0,
      right: 11.25,
      top: -17,
      bottom: 17.4
    },
    svgPaths: [{
      d: 'M11.25,-17L11.25,17.4L0,17.4L0,-17L11.25,-17M1.9,-13.4L1.9,13.8L9.4,13.8L9.4,-13.4L1.9,-13.4'
    }]
  }, {
    name: 'fermataAbove',
    bounds: {
      left: -14,
      right: 12.5,
      top: -0.8,
      bottom: 13.3
    },
    svgPaths: [{
      d: 'M12.5,13.3L11.1,13.3Q10.7,8.75 7.15,6Q3.55,3.3 -0.85,3.25Q-5.15,3.3 -8.7,6Q-12.25,8.8 -12.65,13.3L-14,13.3Q-13.5,7.75 -10.1,3.55Q-6.7,-0.6 -0.85,-0.8Q5.05,-0.6 8.5,3.5Q12,7.65 12.5,13.3M-3.1,11.2Q-3,9.45 -0.8,9.25Q1.25,9.45 1.4,11.2Q1.25,13.1 -0.8,13.3Q-3,13.1 -3.1,11.2'
    }]
  }, {
    name: 'fermataBelow',
    bounds: {
      left: -14,
      right: 12.35,
      top: 0,
      bottom: 14.1
    },
    svgPaths: [{
      d: 'M8.45,9.75Q5.05,13.9 -0.8,14.1Q-6.6,13.9 -10.05,9.8Q-13.5,5.65 -14,0L-12.6,0Q-12.2,4.55 -8.7,7.3Q-5.15,10 -0.8,10.05Q3.5,10 7.05,7.3Q10.6,4.5 11,0L12.35,0Q11.85,5.55 8.45,9.75M-0.85,0Q1.35,0.2 1.45,2.1Q1.35,3.85 -0.85,4.05Q-2.9,3.85 -3.05,2.1Q-2.9,0.2 -0.85,0'
    }]
  }, {
    name: 'hollowSquareNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -6,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M1.4,-4.6L1.4,4.8L10.65,4.8L10.65,-4.6L1.4,-4.6M12.05,-6L12.05,6.2L0,6.2L0,-6L12.05,-6'
    }]
  }, {
    name: 'squareNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 6.1
    },
    svgPaths: [{
      d: 'M12.1,6.1L0,6.1L0,-6L12.1,-6L12.1,6.1'
    }]
  }, {
    name: 'hollowTriangleNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M9.7,3.5L6.15,-3.25L2.35,3.5L9.7,3.5M0,4.9L6.05,-6L12.1,4.9L0,4.9'
    }]
  }, {
    name: 'triangleNoteHead',
    bounds: {
      left: -0.008,
      right: 12.092,
      top: -6,
      bottom: 4.9
    },
    svgPaths: [{
      d: 'M5.928,-6L-0.008,4.9L12.092,4.9L5.928,-6'
    }]
  }, {
    name: 'hollowDiamondNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M6,4.2L10.25,0L6,-4.2L1.8,0L6,4.2M0,0L6,-6L12.05,0L6,6L0,0'
    }]
  }, {
    name: 'diamondNoteHead',
    bounds: {
      left: 0,
      right: 12.1,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M6.05,6L0,0L6.05,-6L12.1,0L6.05,6'
    }]
  }, {
    name: 'filledBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M13-1.6c-0.1,1.8-1.1,3.4-2.9,4.7s-3.8,2-5.8,2C3,5.1,2,4.7,1.2,4.1C0.5,3.5,0,2.5,0,1.4 c0.1-1.7,1.1-3.2,2.8-4.6c1.7-1.3,3.5-2,5.4-2.1c1.5,0,2.6,0.3,3.4,0.9C12.5-3.8,13-2.9,13-1.6'
    }]
  }, {
    name: 'halfBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.3,0.2-0.8,0,1c-0.2,1.5,0.3,2.8,1.5,3.8 c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13.1-2.6,12.6-3.9,11.4-4.9z'
    }]
  }, {
    name: 'wholeBackgroundNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      fill: 'rgba(255,255,255,1)',
      d: 'M16.1-1.2c-0.5-1.3-1.4-2.2-2.9-2.8C11.3-4.7,9.6-5,8-5C6.5-5,4.8-4.7,2.9-4C1.5-3.4,0.6-2.5,0.2-1.1C0-0.4,0,0.4,0.2,1.2 C0.7,2.5,1.6,3.5,3.1,4C5,4.8,6.7,5.1,8.3,5c1.6,0.1,3.3-0.3,5.1-1c1.5-0.6,2.4-1.5,2.8-2.8C16.4,0.5,16.4-0.4,16.1-1.2z'
    }]
  }, {
    name: 'namedFilledANoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M6.9-0.7l0.4,1.2H5.6L6-0.7c0.2-0.6,0.4-1.7,0.4-1.7h0C6.5-2.4,6.6-1.6,6.9-0.7z M13-1.6c-0.1,1.8-1.1,3.4-2.9,4.7 C8.3,4.4,6.4,5,4.4,5.1c-1.3,0-2.3-0.4-3.1-1C0.5,3.4,0,2.5,0,1.4c0.1-1.7,1.1-3.2,2.8-4.6c1.7-1.3,3.5-2,5.4-2.1 c1.5,0,2.6,0.3,3.4,0.9C12.5-3.8,13-2.9,13-1.6z M9.5,2.7L7.2-3.6H5.7L3.4,2.7h1.5l0.4-1.2h2.3L8,2.7H9.5z'
    }]
  }, {
    name: 'namedFilledBNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M7.3-1H5.9v-1.4h1.4c0.5,0,0.8,0.3,0.8,0.7C8.1-1.2,7.7-1,7.3-1z M7.4,0.1H5.9v1.6h1.5c0.3,0,0.5-0.1,0.7-0.2 c0.1-0.1,0.2-0.3,0.2-0.6C8.3,0.3,7.9,0.1,7.4,0.1z M13-1.7c-0.1,1.8-1.1,3.4-2.9,4.7C8.3,4.3,6.4,5,4.4,5.1c-1.3,0-2.3-0.4-3.1-1 C0.4,3.4,0,2.5,0,1.3c0.1-1.7,1.1-3.2,2.8-4.6c1.7-1.3,3.5-2,5.4-2.1c1.5,0,2.6,0.3,3.4,0.9C12.5-3.9,12.9-2.9,13-1.7z M9.7,1 c0-0.8-0.5-1.3-1.3-1.5v0c0.7-0.2,1-0.6,1-1.3c0-0.5-0.2-0.9-0.5-1.2C8.6-3.3,8.1-3.5,7.5-3.5h-3v6.3h3.1c0.7,0,1.2-0.2,1.6-0.5 C9.5,2,9.7,1.6,9.7,1z'
    }]
  }, {
    name: 'namedFilledCNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M11.6-4.4C10.8-5,9.7-5.3,8.2-5.3C6.4-5.2,4.6-4.5,2.8-3.2C1.1-1.9,0.1-0.4,0,1.4c0,1.1,0.5,2,1.3,2.8c0.8,0.6,1.8,1,3.1,1 c2-0.1,3.9-0.8,5.8-2.1c1.8-1.3,2.7-2.9,2.8-4.7C12.9-2.9,12.5-3.8,11.6-4.4z M8.7,2.3C8.2,2.8,7.6,3,6.7,3C4.9,3,3.6,1.6,3.6-0.3 s1.2-3.3,3.1-3.3c0.7,0,1.3,0.2,1.7,0.5c0.6,0.4,0.9,1,1,1.8H8c-0.1-0.6-0.6-1-1.3-1c-1.1,0-1.6,0.9-1.6,2.1c0,1.2,0.6,2.1,1.6,2.1 C7.5,1.8,8,1.3,8,0.7h1.5C9.4,1.3,9.2,1.9,8.7,2.3z'
    }]
  }, {
    name: 'namedFilledDNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M8.2-0.1c0,1.2-0.5,1.9-1.6,1.9h-1v-3.9h1C7.7-2.1,8.2-1.3,8.2-0.1z M13-1.6c-0.1,1.8-1.1,3.4-2.9,4.7 C8.3,4.4,6.4,5,4.4,5.1c-1.3,0-2.3-0.4-3.1-1C0.4,3.4,0,2.5,0,1.4c0.1-1.7,1.1-3.2,2.8-4.6c1.7-1.3,3.5-2,5.4-2.1 c1.5,0,2.6,0.3,3.4,0.9C12.5-3.8,12.9-2.9,13-1.6z M9.7-0.1c0-1.9-1.1-3.2-2.9-3.2H4.2V3h2.5C8.7,3,9.7,1.7,9.7-0.1z'
    }]
  }, {
    name: 'namedFilledENoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M11.7-4.4C10.9-5,9.7-5.3,8.3-5.3C6.4-5.2,4.6-4.5,2.9-3.2C1.1-1.9,0.1-0.4,0,1.4c0,1.1,0.5,2,1.3,2.8c0.8,0.6,1.8,1,3.1,1 c2-0.1,3.9-0.8,5.8-2.1c1.8-1.3,2.7-2.9,2.8-4.7C13-2.9,12.5-3.8,11.7-4.4z M9.2,2.8H4.4v-6.3h4.7v1.2H5.9V-1h2.9v1.1H5.9v1.5h3.4 V2.8z'
    }]
  }, {
    name: 'namedFilledFNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M11.6-4.4C10.8-5,9.7-5.3,8.2-5.3C6.4-5.2,4.6-4.5,2.8-3.2C1.1-1.9,0.1-0.4,0,1.4c0,1.1,0.5,2,1.3,2.8c0.8,0.6,1.8,1,3.1,1 c2-0.1,3.9-0.8,5.8-2.1c1.8-1.3,2.7-2.9,2.9-4.7C13-2.9,12.5-3.8,11.6-4.4z M9.3-2H6.1v1.4h2.7v1.2H6.1v2.5H4.6v-6.3h4.6V-2z'
    }]
  }, {
    name: 'namedFilledGNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.2,
      bottom: 5.2
    },
    svgPaths: [{
      d: 'M11.7-4.4C10.9-5,9.7-5.3,8.3-5.3C6.4-5.2,4.6-4.5,2.9-3.2C1.1-1.9,0.1-0.4,0,1.4c0,1.1,0.5,2,1.3,2.8c0.8,0.6,1.8,1,3.1,1 c2-0.1,3.9-0.8,5.8-2.1c1.8-1.3,2.7-2.9,2.8-4.7C13-2.9,12.5-3.8,11.7-4.4z M9.5,2.9h-1L8.4,2.1h0c-0.4,0.7-1,1-1.8,1 c-0.9,0-1.6-0.3-2.1-0.9C3.9,1.6,3.6,0.7,3.6-0.2c0-1.1,0.4-2,1.1-2.6c0.5-0.4,1.2-0.7,2-0.7c1.6,0,2.5,0.9,2.8,2.1H8 C7.8-1.9,7.4-2.3,6.7-2.3C5.6-2.3,5-1.4,5-0.2C5,1,5.7,1.9,6.7,1.9c0.9,0,1.4-0.6,1.4-1.2v0H6.9v-1.1h2.6V2.9z'
    }]
  }, {
    name: 'namedHalfCNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M4-0.2c0-1.6,1-2.8,2.6-2.8c0.6,0,1.1,0.1,1.5,0.4C8.6-2.3,8.9-1.8,9-1.1H7.8C7.7-1.7,7.3-2,6.7-2C5.8-2,5.3-1.3,5.3-0.2 c0,1,0.5,1.8,1.4,1.8c0.7,0,1.1-0.4,1.1-1H9c0,0.5-0.3,1-0.7,1.4C8,2.3,7.4,2.6,6.7,2.6C5.1,2.6,4,1.4,4-0.2z M11.4-4.9 c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.4,0.2-0.9,0,0.9c-0.2,1.5,0.3,2.8,1.5,3.7c0.9,0.5,1.9,0.7,3,0.6 c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13.1-2.7,12.6-3.9,11.4-4.9z M8.5,2.5C5.9,4.3,2.9,4.6,1.8,3.6c0,0,0,0-0.1-0.1 c0,0-0.1-0.1-0.1-0.1C0.7,2,1.8-0.8,4.5-2.7C6.9-4.4,9.8-4.7,11-3.8c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.3-2.2,11.2,0.6,8.5,2.5 z'
    }]
  }, {
    name: 'namedHalfDNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M4.8-2.7H7c1.5,0,2.5,1.1,2.5,2.7c0,1.6-0.9,2.7-2.6,2.7H4.8V-2.7z M6.9,1.6C7.8,1.6,8.3,1,8.3,0c0-1-0.5-1.7-1.4-1.7H6v3.3 H6.9z M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.4,0.2-0.9,0,0.9c-0.2,1.5,0.3,2.8,1.5,3.7 c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13.1-2.7,12.6-3.9,11.4-4.9z M8.5,2.5C5.9,4.3,2.9,4.6,1.8,3.6 c0,0,0,0-0.1-0.1c0,0-0.1-0.1-0.1-0.1C0.7,2,1.8-0.8,4.5-2.7C6.9-4.4,9.8-4.7,11-3.8c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0 C12.3-2.2,11.2,0.6,8.5,2.5z'
    }]
  }, {
    name: 'namedHalfENoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.4,0.1-0.9,0,0.9c-0.2,1.5,0.3,2.8,1.5,3.7 c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13.1-2.7,12.5-3.9,11.4-4.9z M1.8,3.6C1.8,3.5,1.7,3.5,1.8,3.6 C1.7,3.4,1.6,3.4,1.6,3.4C0.6,2,1.8-0.8,4.5-2.7c0,0,0.1,0,0.1,0v5.2h4c0,0,0,0-0.1,0C5.9,4.3,2.9,4.6,1.8,3.6z M8.6,2.3v-1H5.8V0.1 h2.4v-1H5.8v-1.1h2.8v-1H4.9c2.3-1.5,5-1.7,6.1-0.9c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.2-2.3,11.2,0.4,8.6,2.3z'
    }]
  }, {
    name: 'namedHalfFNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M5-2.7h4v1.1H6.3v1.2h2.3v1H6.3v2.2H5V-2.7z M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2 C1.1-2.4,0.1-0.9,0,0.9c-0.2,1.5,0.3,2.8,1.5,3.8c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5 C13-2.7,12.5-4,11.4-4.9z M8.4,2.5C5.9,4.3,2.8,4.6,1.8,3.5c0,0,0,0-0.1-0.1c0,0-0.1-0.1-0.1-0.1C0.6,2,1.7-0.8,4.4-2.7 C6.9-4.4,9.8-4.8,11-3.9c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.2-2.2,11.1,0.6,8.4,2.5z'
    }]
  }, {
    name: 'namedHalfGNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.4,0.1-0.9,0,0.9c-0.2,1.5,0.3,2.8,1.5,3.8 c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13-2.7,12.5-4,11.4-4.9z M8.8,2.1v-2.6H6.6v0.9h1.1v0 c0,0.5-0.5,1.1-1.2,1.1C5.5,1.5,5,0.7,5-0.3c0-1,0.5-1.8,1.4-1.8c0.6,0,1,0.3,1.1,0.7h1.2c-0.2-1-1-1.8-2.4-1.8 c-0.7,0-1.3,0.2-1.7,0.6C4.1-2,3.7-1.2,3.7-0.3c0,0.8,0.2,1.5,0.7,2c0.4,0.5,1.1,0.8,1.8,0.8c0.7,0,1.2-0.3,1.6-0.8h0L8,2.4h0.6 c0,0-0.1,0.1-0.1,0.1C5.9,4.3,2.8,4.6,1.8,3.5c0,0,0,0-0.1-0.1c0,0-0.1-0.1-0.1-0.1C0.6,2,1.7-0.8,4.4-2.7C6.9-4.4,9.8-4.8,11-3.9 c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.2-2.3,11.2,0.3,8.8,2.1z'
    }]
  }, {
    name: 'namedHalfANoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.3,0.2-0.8,0,1c-0.2,1.5,0.3,2.8,1.5,3.8 c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2s2.7-2.7,2.9-4.5C13.1-2.7,12.6-3.9,11.4-4.9z M9.2,1.9L7.3-3.4H6L4,2.2h1.3l0.3-1.1h2 L8,2.2h0.9C8.7,2.3,8.6,2.4,8.5,2.5C6,4.3,2.9,4.6,1.8,3.6c0,0,0,0-0.1-0.1c0,0-0.1-0.1-0.1-0.1c-0.9-1.3,0.2-4.1,2.9-6 C6.9-4.4,9.9-4.7,11-3.8c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.2-2.3,11.4,0.1,9.2,1.9z M7.3,0.2H5.9l0.3-1 c0.2-0.5,0.4-1.5,0.4-1.5h0c0,0,0.1,0.7,0.4,1.5L7.3,0.2z'
    }]
  }, {
    name: 'namedHalfBNoteHead',
    bounds: {
      left: 0,
      right: 13,
      top: -5.5,
      bottom: 5.4
    },
    svgPaths: [{
      d: 'M4.7-2.7h2.6c0.6,0,1,0.1,1.3,0.4c0.3,0.3,0.5,0.6,0.5,1c0,0.5-0.3,0.9-0.9,1.1v0C8.8,0,9.1,0.4,9.1,1.1 c0,0.5-0.2,0.9-0.5,1.2C8.3,2.5,7.8,2.7,7.3,2.7H4.7V-2.7z M7-0.5c0.4,0,0.7-0.2,0.7-0.6c0-0.4-0.3-0.6-0.7-0.6H5.9v1.2H7z M7.1,1.7 c0.2,0,0.4-0.1,0.6-0.2C7.8,1.4,7.9,1.2,7.9,1c0-0.5-0.3-0.7-0.8-0.7H5.9v1.4H7.1z M11.4-4.9c-0.9-0.5-1.9-0.7-3-0.6 c-1.9,0.1-3.8,0.7-5.5,2C1.1-2.3,0.2-0.8,0,1c-0.2,1.5,0.3,2.8,1.5,3.8c0.9,0.5,1.9,0.7,3,0.6c1.9-0.1,3.7-0.7,5.5-2 s2.7-2.7,2.9-4.5C13.1-2.7,12.6-3.9,11.4-4.9z M8.5,2.5C6,4.3,2.9,4.6,1.8,3.6c0,0,0,0-0.1-0.1c0,0-0.1-0.1-0.1-0.1 c-0.9-1.3,0.2-4.1,2.9-6C6.9-4.4,9.9-4.7,11-3.8c0.1,0.1,0.2,0.2,0.3,0.3c0,0,0,0,0,0C12.3-2.2,11.2,0.6,8.5,2.5z'
    }]
  }, {
    name: 'namedWholeCNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M5.5,0c0-1.7,1.1-2.9,2.7-2.9c0.6,0,1.1,0.2,1.5,0.4c0.5,0.4,0.8,0.9,0.9,1.5H9.3C9.2-1.5,8.8-1.9,8.2-1.9 c-1,0-1.4,0.8-1.4,1.8c0,1.1,0.6,1.8,1.4,1.8c0.7,0,1.1-0.4,1.2-1h1.3c0,0.6-0.3,1.1-0.7,1.4C9.5,2.7,9,2.9,8.2,2.9 C6.6,2.9,5.5,1.6,5.5,0z M3.6-0.9c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3C12,4.5,13,3.3,12.8,1c-0.2-1.8-0.9-3.2-2-4.2 s-2.5-1.4-4-1.3C5.6-4.3,5-4,4.5-3.5C3.9-2.9,3.5-2.1,3.6-0.9 M13.2-4c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4 c-1.8,0.7-3.5,1.1-5.1,1C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4C4.8-4.7,6.5-5,8-5C9.6-5,11.3-4.7,13.2-4'
    }]
  }, {
    name: 'namedWholeDNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M6-2.8h2.3c1.6,0,2.6,1.1,2.6,2.8c0,1.7-0.9,2.8-2.7,2.8H6V-2.8z M8.2,1.7c1,0,1.4-0.6,1.4-1.7c0-1.1-0.5-1.7-1.4-1.7H7.3 v3.4H8.2z M3.7-0.9c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3C12,4.5,13.1,3.3,12.9,1c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3 C5.7-4.3,5-4,4.5-3.5C4-2.9,3.6-2.1,3.7-0.9 M13.2-4c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1 C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4C4.8-4.7,6.5-5,8-5C9.6-5,11.4-4.7,13.2-4'
    }]
  }, {
    name: 'namedWholeENoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M6.1-2.7h4.2v1.1H7.3v1.1h2.5v1H7.3v1.3h3v1.1H6.1V-2.7z M3.6-0.9c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3 C12,4.5,13,3.3,12.8,1c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3C5.6-4.3,5-4,4.5-3.5C3.9-2.9,3.5-2.1,3.6-0.9 M13.2-4 c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4 C4.8-4.7,6.5-5,8-5C9.6-5,11.3-4.7,13.2-4'
    }]
  }, {
    name: 'namedWholeFNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M6.2-2.8h4.1v1.1H7.5v1.2h2.4v1H7.5v2.2H6.2V-2.8z M3.6-0.9c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3 C12,4.5,13,3.3,12.8,1c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3C5.6-4.3,5-4,4.5-3.5C3.9-2.9,3.5-2.1,3.6-0.9 M13.2-4 c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4 C4.8-4.7,6.5-5,8-5C9.6-5,11.3-4.7,13.2-4'
    }]
  }, {
    name: 'namedWholeGNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M9.5,1.9L9.5,1.9C9.2,2.5,8.6,2.8,7.9,2.8C7.1,2.8,6.5,2.5,6,2C5.5,1.5,5.3,0.7,5.3-0.1c0-1,0.3-1.8,1-2.3 c0.5-0.4,1-0.6,1.8-0.6c1.4,0,2.2,0.8,2.4,1.8H9.1C9-1.6,8.7-2,8-2C7-2,6.6-1.2,6.6-0.1c0,1.1,0.6,1.9,1.5,1.9 c0.8,0,1.3-0.5,1.3-1.1v0H8.2v-1h2.3v3H9.6L9.5,1.9z M3.5-1c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3c2.3-0.1,3.4-1.2,3.2-3.5 c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3C5.5-4.4,4.9-4,4.3-3.5C3.8-3,3.4-2.2,3.5-1 M13.1-4c1.9,0.7,3,2.1,3.2,4 c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1C6.6,5.1,4.8,4.7,3,4S0.1,1.9-0.1,0C0-1.9,1-3.3,2.8-4c1.9-0.7,3.6-1.1,5.1-1 C9.5-5.1,11.2-4.7,13.1-4'
    }]
  }, {
    name: 'namedWholeANoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M7.7-3H9l2,5.6H9.7L9.4,1.5h-2L7,2.6H5.7L7.7-3z M7.6,0.6h1.4l-0.3-1C8.5-1.2,8.4-1.9,8.4-1.9h0c0,0-0.2,0.9-0.4,1.5 L7.6,0.6z M3.6-0.9c0.2,1.7,0.9,3.1,2,4.2c1.2,1,2.5,1.4,4,1.3C12,4.5,13,3.3,12.8,1c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3 C5.6-4.3,5-4,4.4-3.5C3.9-2.9,3.5-2.1,3.6-0.9 M13.2-4c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1 C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4C4.8-4.7,6.5-5,8-5C9.6-5,11.3-4.7,13.2-4'
    }]
  }, {
    name: 'namedWholeBNoteHead',
    bounds: {
      left: 0,
      right: 16.4,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M6.1-2.8h2.6c0.6,0,1,0.1,1.3,0.4c0.3,0.3,0.5,0.6,0.5,1.1c0,0.6-0.3,0.9-0.9,1.1v0c0.7,0.2,1.1,0.7,1.1,1.4 c0,0.5-0.2,0.9-0.5,1.2C9.9,2.6,9.4,2.8,8.9,2.8H6.1V-2.8z M8.6-0.6c0.4,0,0.7-0.2,0.7-0.6c0-0.4-0.3-0.6-0.7-0.6H7.4v1.3H8.6z M8.7,1.7c0.3,0,0.5-0.1,0.6-0.2C9.4,1.4,9.5,1.2,9.5,1c0-0.5-0.4-0.7-0.8-0.7H7.4v1.4H8.7z M3.6-0.9c0.2,1.7,0.9,3.1,2,4.2 c1.2,1,2.5,1.4,4,1.3C12,4.5,13,3.3,12.8,1c-0.2-1.8-0.9-3.2-2-4.2s-2.5-1.4-4-1.3C5.6-4.3,5-4,4.4-3.5C3.9-2.9,3.5-2.1,3.6-0.9 M13.2-4c1.9,0.7,3,2.1,3.2,4c-0.1,1.9-1.1,3.3-3,4c-1.8,0.7-3.5,1.1-5.1,1C6.7,5.1,5,4.8,3.1,4S0.2,2,0,0c0.1-1.9,1.1-3.3,2.9-4 C4.8-4.7,6.5-5,8-5C9.6-5,11.3-4.7,13.2-4'
    }]
  }, {
    name: 'marcato',
    bounds: {
      left: -8,
      right: 8.7,
      top: 0,
      bottom: 10.1
    },
    svgPaths: [{
      d: 'M4.4,5L-8,1.3L-8,0L8.7,5.05L-8,10.1L-8,8.75L4.4,5.05L4.4,5'
    }]
  }, {
    name: 'staccato',
    bounds: {
      left: -1.8,
      right: 2,
      top: 0,
      bottom: 3.8
    },
    svgPaths: [{
      d: 'M2,1.85Q1.8,3.55 0.1,3.8Q-1.65,3.55 -1.8,1.85Q-1.65,0.15 0.1,0Q1.8,0.15 2,1.85'
    }]
  }, {
    name: 'closed',
    bounds: {
      left: -6,
      right: 6,
      top: 0,
      bottom: 12
    },
    svgPaths: [{
      d: 'M0.65,12L-0.75,12L-0.75,6.7L-6,6.7L-6,5.25L-0.75,5.25L-0.75,0L0.65,0L0.65,5.25L6,5.25L6,6.7L0.65,6.7L0.65,12'
    }]
  }, {
    name: 'tenuto',
    bounds: {
      left: -6,
      right: 6.1,
      top: 0,
      bottom: 1.6
    },
    svgPaths: [{
      d: 'M6.1,1.6L-6,1.6L-6,0L6.1,0L6.1,1.6'
    }]
  }, {
    name: 'martellatoBelow',
    bounds: {
      left: -6,
      right: 4.6,
      top: 0,
      bottom: 16.7
    },
    svgPaths: [{
      d: 'M4.6,0L-0.05,16.7L-6,0L-3.2,0L0.6,10.8L0.65,10.8L3.6,0L4.6,0'
    }]
  }, {
    name: 'martellatoStaccatoBelow',
    bounds: {
      left: -6,
      right: 5.15,
      top: 0,
      bottom: 16.55
    },
    svgPaths: [{
      d: 'M0.45,3.6Q-1.2,3.45 -1.35,1.8Q-1.2,0.15 0.45,0Q2.05,0.15 2.25,1.8Q2.05,3.45 0.45,3.6M4.15,0L5.15,0L-0.05,16.55L-6,0L-3.4,0L0.6,11.25L0.65,11.25L4.15,0'
    }]
  }, {
    name: 'open',
    bounds: {
      left: -4.75,
      right: 4.8,
      top: 0,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M4.8,4.5Q4.7,9.05 0.05,9.55Q-4.35,9.25 -4.75,4.95Q-4.45,0.4 0.05,0Q4.2,0.3 4.8,4.5M4,4.4Q3.45,1.1 -0.05,1Q-3.65,1.2 -3.85,4.85Q-3.65,8.35 0.05,8.65Q4,8.35 4,4.4'
    }]
  }, {
    name: 'staccatissimoBelow',
    bounds: {
      left: -2.5,
      right: 2.8,
      top: 0,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M0.1,0L-2.5,6.5L2.8,6.5L0.1,0'
    }]
  }, {
    name: 'staccatissimoAbove',
    bounds: {
      left: -2.5,
      right: 2.8,
      top: 0,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M0.1,6.5L-2.5,0L2.8,0L0.1,6.5'
    }]
  }, {
    name: 'martellatoAbove',
    bounds: {
      left: -5,
      right: 5.6,
      top: 0,
      bottom: 16.7
    },
    svgPaths: [{
      d: 'M2.85,16.7L-0.95,5.95L-1.05,5.95L-4,16.7L-5,16.7L-0.3,0L5.6,16.7L2.85,16.7'
    }]
  }, {
    name: 'martellatoStaccatoAbove',
    bounds: {
      left: -5,
      right: 6.1,
      top: 0,
      bottom: 16.6
    },
    svgPaths: [{
      d: 'M3.55,16.6L-0.45,5.35L-0.5,5.35L-4,16.6L-5,16.6L0.2,0L6.1,16.6L3.55,16.6M-2.1,14.8Q-1.9,13.15 -0.3,13Q1.35,13.15 1.5,14.8Q1.35,16.45 -0.3,16.6Q-1.9,16.45 -2.1,14.8'
    }]
  }, {
    name: 'tuplet0',
    bounds: {
      left: 0,
      right: 9.4,
      top: -6,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M6.4,-6Q7.85,-5.95 8.6,-4.95Q9.3,-3.9 9.4,-2.55Q9.4,0.3 7.75,3.25Q6.1,6.25 3.05,6.5Q1.55,6.4 0.8,5.3Q0.05,4.25 0,2.9Q-0.05,0.1 1.6,-2.85Q3.3,-5.8 6.4,-6M3.95,-3.2Q2.95,-1.25 2.5,0.95Q2,3.2 2.05,4.25Q2.15,5.5 3.1,5.7Q4.5,5.55 5.45,3.6Q6.4,1.7 6.9,-0.55L7.35,-3.8Q7.1,-5.3 6.35,-5.25Q4.9,-5.15 3.95,-3.2'
    }]
  }, {
    name: 'tuplet1',
    bounds: {
      left: 0,
      right: 7.9,
      top: -6,
      bottom: 5.8
    },
    svgPaths: [{
      d: 'M7.9,-6L4.6,4.45Q4.55,4.9 5.2,5L6.3,5L6,5.8L0,5.8L0.25,5L0.7,5.05Q1.8,5 2.4,4.1L4.45,-2.55L4.4,-2.6L1.8,-0.45L1.35,-0.85L5.55,-6L7.9,-6'
    }]
  }, {
    name: 'tuplet2',
    bounds: {
      left: 0,
      right: 10,
      top: -6,
      bottom: 6.4
    },
    svgPaths: [{
      d: 'M4.55,-2.6Q4.6,-1.6 3.55,-1.5Q2.5,-1.7 2.5,-2.55Q2.6,-3.95 3.8,-4.95Q5,-6 6.45,-6Q7.7,-6.1 8.85,-5.5Q9.9,-4.85 10,-2.95Q9.9,-1.3 8.5,-0.6L5.8,0.6Q3.65,1.25 2.1,2.85L2.1,2.95L2.9,2.85Q4.1,2.9 5.05,3.45Q6,3.95 6.8,3.95Q7.95,3.65 8.55,2.5L9.15,2.85L7.75,5.2Q6.9,6.3 5.65,6.4Q4.65,6.3 3.85,5.6Q3.05,4.9 2,4.85Q1.25,5.05 0.95,5.8L0,5.8Q0.25,2.6 2.55,1.35L2.55,1.25Q4.2,0.25 5.55,-0.3Q7.5,-1.1 7.8,-3.15Q8.1,-5 6.35,-5.25Q4.55,-5.3 4.35,-3.65L4.55,-2.6'
    }]
  }, {
    name: 'tuplet3',
    bounds: {
      left: 0,
      right: 9.7,
      top: -6,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M4.1,-5.2Q5.1,-6 6.15,-6Q9.25,-6.2 9.7,-3.2Q9.75,-1.9 8.7,-1.05Q7.7,-0.2 6.55,0.25L6.55,0.35Q8.2,1.4 8.1,2.65Q7.9,4.3 6.55,5.35Q5.2,6.45 3.65,6.5L1.35,6Q0.1,5.5 0,4.3Q0,2.65 1.45,2.45Q2.6,2.55 2.8,3.6L2.35,4.4Q1.9,4.65 1.85,5.2Q2.3,5.65 2.95,5.7Q4.3,5.6 5,4.25Q5.7,2.95 5.65,1.65Q5.4,0.7 4.75,0.5L3.25,0.4L3.45,-0.55Q5.25,-0.5 6.35,-1.1Q7.45,-1.7 7.5,-3.75Q7.6,-4.9 6.05,-5.25Q5,-5.3 4.85,-4.5L5.2,-3.6Q5.45,-2.6 4.45,-2.2Q3.15,-2.2 2.95,-3.25Q3.1,-4.45 4.1,-5.2'
    }]
  }, {
    name: 'tuplet4',
    bounds: {
      left: 0,
      right: 10,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M9,-6Q7.85,-4.15 5.75,-2.2L1.35,1.7L1.35,1.8L5.5,1.8L6.3,-1L9.35,-4L9.6,-4L7.85,1.8L10,1.8L9.75,2.55L7.45,2.55L6.85,4.6Q6.8,5.1 7.5,5.2L8.55,5.2L8.3,6L2.3,6L2.55,5.2Q3.95,5.4 4.6,4.15L5.1,2.55L0,2.55L0.2,1.8Q1.8,0.4 3.05,-1.5Q4.9,-4.3 5.3,-6L9,-6'
    }]
  }, {
    name: 'tuplet5',
    bounds: {
      left: 0,
      right: 9.1,
      top: -6,
      bottom: 6.6
    },
    svgPaths: [{
      d: 'M2.15,-0.05L2.25,0Q3.35,-1.05 5.4,-1.15Q8.15,-0.95 8.3,1.9Q8.2,3.9 6.7,5.25Q5.2,6.6 3.2,6.6Q0.25,6.6 0,4Q0,2.75 1.35,2.4Q2.4,2.6 2.25,3.55L1.85,4.4L1.55,5Q1.85,5.95 3,5.8Q4.4,5.6 5.25,4.05Q6.05,2.5 6.1,1.3Q5.95,0.05 4.6,-0.1Q3.15,0 1.9,1.1L1.05,1.1L3.4,-6Q4.85,-5.5 6,-5.55L9.1,-6Q8.55,-5.15 7.6,-4.45Q6.7,-3.75 5.7,-3.7Q4.2,-3.75 3.55,-4.2L2.15,-0.05'
    }]
  }, {
    name: 'tuplet6',
    bounds: {
      left: 0,
      right: 8.2,
      top: -6,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M3.55,-5.25Q4.6,-6 5.85,-6Q8,-6 8.2,-4.15Q8.1,-2.8 6.75,-2.45Q5.5,-2.6 5.5,-3.55Q5.5,-3.95 5.8,-4.25L6.45,-4.9L5.75,-5.25Q4.1,-5.1 3.4,-3.35Q2.75,-1.55 2.55,0.1L2.6,0.1Q3.9,-1.4 5.65,-1.3Q7.55,-0.8 7.75,1.1Q7.8,3.1 6.55,4.7Q5.35,6.4 3.35,6.5Q1.4,6.4 0.65,5.2Q-0.05,4.05 0,2.3Q0.05,-0.9 1.8,-3.45Q2.45,-4.45 3.55,-5.25M5.05,3.85Q5.7,2.2 5.65,1.15Q5.5,0.1 4.55,-0.1Q3.65,-0.3 2.95,1.15Q2.25,2.65 2.2,4.2Q2.2,5.5 3.2,5.7Q4.45,5.5 5.05,3.85'
    }]
  }, {
    name: 'tuplet7',
    bounds: {
      left: 0,
      right: 9.4,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M2.9,-3.55Q1.25,-3.05 0.8,-1.15L0,-1.15L1.45,-5.85L2.25,-5.85Q1.55,-5.1 2.35,-4.45L3.25,-5.25Q3.8,-5.7 4.85,-5.85L6.15,-5.25Q6.65,-4.65 7.4,-4.6Q8.5,-4.7 8.65,-6L9.4,-6Q8.6,-2.35 6.5,0.65Q5.15,3.25 4.95,6L1.1,6Q1.3,5 2,3.95L3.4,2.05L5.9,-0.75Q7,-1.8 8.05,-4.1L7.95,-4.15Q5.9,-2.4 5.1,-2.65Q4.55,-2.85 4.05,-3.2L2.9,-3.55'
    }]
  }, {
    name: 'tuplet8',
    bounds: {
      left: 0,
      right: 10.4,
      top: -6,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M2.35,-2.95Q2.5,-4.5 3.75,-5.25Q5.05,-6 6.4,-6Q7.9,-6 9.2,-5.05Q10.45,-4.05 10.4,-2.5Q10.25,-1.45 9.5,-0.8Q8.7,-0.1 7.8,0.25Q9,1.65 9.15,3.05Q9.1,4.95 7.6,5.7Q6.1,6.5 4.45,6.5Q3,6.5 1.55,5.65Q0.1,4.8 0,3.1Q0.1,1.8 1.2,0.95Q2.3,0.15 3.45,-0.25Q2.4,-1.45 2.35,-2.95M7.25,-0.2Q8.55,-1.05 8.85,-2.65Q8.95,-3.6 8.3,-4.4Q7.7,-5.15 6.7,-5.25Q5.15,-5.25 4.75,-3.8Q4.85,-2.6 5.7,-1.75L7.25,-0.2M6.65,4.05Q6.4,2.9 5.5,1.95L3.85,0.25Q1.85,1.2 1.7,3.35Q1.75,4.45 2.6,5.05Q3.5,5.65 4.45,5.7Q5.35,5.7 6.05,5.3Q6.8,4.85 6.65,4.05'
    }]
  }, {
    name: 'tuplet9',
    bounds: {
      left: 0,
      right: 8.6,
      top: -6,
      bottom: 6.5
    },
    svgPaths: [{
      d: 'M2.5,-1.25Q2.3,0.25 3.65,0.55Q4.85,0.6 5.65,-0.95Q6.4,-2.4 6.4,-3.65L6.15,-4.65Q5.9,-5.2 5.35,-5.25Q4.05,-5.2 3.3,-3.8Q2.6,-2.4 2.5,-1.25M5,-6Q6.9,-5.95 7.75,-4.75Q8.65,-3.55 8.6,-1.8Q8.55,0.8 6.95,3.35Q5.35,5.95 2.7,6.5Q1.65,6.55 0.8,5.85Q-0.05,5.15 0,4.15Q0.1,3.15 1.05,3.1Q1.9,3.15 2.05,4.05L1.85,5.05Q1.65,5.6 2.3,5.7Q3.75,5.5 4.65,3.65L5.8,0.55L5.7,0.55Q4.4,1.65 2.95,1.75Q0.4,1.6 0.3,-1.05Q0.3,-2.9 1.5,-4.4Q2.7,-5.95 5,-6'
    }]
  }, {
    name: 'hollowMiscNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -5,
      bottom: 5.5
    },
    svgPaths: [{
      d: 'M2.75,-0.65L7.15,3.2L9.35,1.15L4.95,-2.7L2.75,-0.65M6,5.5Q3.35,1.9 0,0.25Q3.45,-2.15 6,-5Q8.65,-1.4 12.05,0.25Q8.75,2.4 6,5.5'
    }]
  }, {
    name: 'downBow',
    bounds: {
      left: -6,
      right: 7.6,
      top: 0,
      bottom: 14.05
    },
    svgPaths: [{
      d: 'M7.6,14.05L6.35,14.05L6.35,6.1L-4.75,6.1L-4.75,14.05L-6,14.05L-6,0L7.6,0L7.6,14.05'
    }]
  }, {
    name: 'upBow',
    bounds: {
      left: -4,
      right: 5.2,
      top: 0,
      bottom: 16.7
    },
    svgPaths: [{
      d: 'M0.65,16.7L-4,0L-2.8,0L0.65,13.2L0.7,13.2L4.1,0L5.2,0L0.65,16.7'
    }]
  }, {
    name: 'bendJazz',
    bounds: {
      left: -2.98,
      right: 21.42,
      top: 19,
      bottom: 30.68
    },
    svgPaths: [{
      d: 'M-8.47345,0.5940603Q-5.5878281075,4.99563715 -0.7834364699999998,7.0413986Q3.2883779674999993,8.4320562 6.9232906,6.110419Q10.320623625,3.7157501675 12.438914,0.11234973Q13.686661,0.08259433249999998 13.380126,1.9210999Q12.869485249999997,3.27721275 11.951734,4.436489Q8.1824022,10.098975274999999 1.6203971,11.543306Q-4.099513750000001,12.172615875 -8.5394899,8.4323575Q-9.8461565,7.3704509 -10.971531,6.1175742Q-10.605494250000001,4.418329175 -10.381323,3.0020634999999998Q-9.29091755,1.8372932024999997 -9.7419568,0.7247762899999999Q-8.739827950000002,0.4606732149999999 -8.47345,0.5940602999999999z'
    }]
  }, {
    name: 'twoHundredFiftySixthRest',
    bounds: {
      left: -2.55,
      right: 21.5,
      top: -30,
      bottom: 38
    },
    svgPaths: [{
      d: 'M21.5,-28.85L5.75,28.5L5.7,28.5L3.1,38L1.7,38L4.4,28.5L4.35,28.5L5.5,24.4Q3.45,25.65 1.2,25.85Q-0.3,25.8 -1.4,24.9Q-2.45,24 -2.55,22.55Q-2.5,20.15 -0.1,19.55Q1.15,19.35 2.05,20.15Q2.95,20.95 3,22.25L2.8,23.25L2.7,23.7Q3,24.35 3.7,24L6.05,22.35L8.05,14.85Q6.1,16.15 3.8,16.35Q2.3,16.3 1.2,15.4Q0.1,14.5 0,13.05Q0.15,10.25 2.95,9.95Q5.45,10.3 5.6,12.8L5.3,14.35Q5.45,14.65 5.8,14.6Q6.5,14.6 7.35,13.95L8.65,12.75L10.7,4.85Q8.75,6.15 6.45,6.35Q5,6.3 3.85,5.4Q2.75,4.5 2.7,3.1Q2.8,0.35 5.65,0.05Q6.85,0.15 7.6,1.05Q8.3,1.95 8.25,3.05L7.95,4.35Q8.1,4.65 8.45,4.6Q9.2,4.65 10,3.95L11.3,2.6L13.6,-5.1Q11.55,-3.8 9.25,-3.6Q7.8,-3.65 6.65,-4.55Q5.55,-5.45 5.5,-6.9Q5.55,-9.3 7.95,-9.95Q9.2,-10.1 10.1,-9.3Q11.05,-8.45 11.05,-7.2L10.9,-6.15L10.75,-5.75Q11.05,-5.1 11.75,-5.45Q13.1,-5.9 14.2,-7.25L16.4,-15.1Q14.4,-13.8 12.05,-13.6Q10.6,-13.65 9.45,-14.55Q8.35,-15.45 8.3,-16.9Q8.35,-19.3 10.75,-19.95Q12.05,-20.1 12.95,-19.3Q13.85,-18.45 13.9,-17.2L13.7,-16.15L13.55,-15.75Q13.85,-15.1 14.55,-15.45Q16.05,-16 17,-17.25L19.05,-25.1Q17.05,-23.8 14.75,-23.6Q13.25,-23.65 12.15,-24.55Q11,-25.45 10.95,-26.9Q11,-29.3 13.4,-29.95Q14.7,-30.15 15.6,-29.3Q16.5,-28.5 16.55,-27.2L16.35,-26.2L16.25,-25.75Q16.5,-25.1 17.25,-25.45Q19.6,-26.55 20.8,-28.85L21.5,-28.85'
    }]
  }, {
    name: 'twoHundredFiftySixthFlagDown',
    bounds: {
      left: 0,
      right: 11.4,
      top: -30,
      bottom: 27.1
    },
    svgPaths: [{
      d: 'M9.1,-29.6L9.55,-30Q11.2,-27.55 11.4,-23.3Q11.45,-21.1 10.45,-19.25Q10.9,-18.1 10.9,-16.45Q10.95,-14.75 10.45,-12.7Q10.85,-11.5 10.9,-9.8Q10.95,-8.2 10.5,-6.25L10.9,-3.45Q10.95,-1.8 10.5,0.2L10.9,3.1Q10.95,4.7 10.5,6.6L10.9,9.35Q10.95,11.35 10.25,13.8Q9.5,16.25 7.8,18.45Q6,20.65 3.1,23.1Q1.85,24.35 1.5,25.5L1.05,27.1L0,27.1L0,-14.35L1.05,-14.35L1.05,-13.55L5.25,-16.15Q7.6,-17.6 8.9,-19.05Q9.85,-20.25 10.15,-21.4L10.45,-24.1Q10.5,-25.65 10,-27.35L9.1,-29.6M10,-18.5L8.7,-16.45L7,-14.55L4.7,-12.35Q3.4,-11.15 2.3,-9.2Q1.2,-7.2 1.05,-5Q3.75,-6.45 5.75,-8.05Q7.75,-9.7 9.05,-12.6L9.75,-14.7L10,-16.65L10,-18.5M10.05,-11.35Q9.3,-9.2 7.8,-7.25Q6,-5.05 3.1,-2.6Q1.9,-1.4 1.5,-0.2L1.05,1.4L1.05,1.6Q3.75,0.15 5.75,-1.5Q7.75,-3.1 9.05,-5.95L9.75,-8.1L10,-10.05L10.05,-11.35M10,-3.7L10.05,-4.75Q9.3,-2.65 7.8,-0.7Q6,1.5 3.1,3.95Q1.85,5.2 1.5,6.35L1.05,7.95Q3.75,6.5 5.75,4.85Q7.75,3.25 9.05,0.4L9.75,-1.75L10,-3.7M10,2.85L10.05,1.6Q9.3,3.7 7.8,5.65Q6,7.85 3.1,10.3Q1.85,11.55 1.5,12.7L1.05,14.3L1.05,14.5Q3.75,13.05 5.75,11.4Q7.75,9.8 9.05,6.95L9.75,4.8L10,2.85M10,9.1L10.05,8.15Q9.3,10.25 7.8,12.2Q6,14.4 3.1,16.85Q1.85,18.1 1.5,19.25L1.1,20.75L5.75,17.65Q7.75,16.05 9.05,13.2L9.75,11.05L10,9.1'
    }]
  }, {
    name: 'twoHundredFiftySixthFlagUp',
    bounds: {
      left: -1.25,
      right: 10.15,
      top: -30.5,
      bottom: 32.1
    },
    svgPaths: [{
      d: 'M1.85,-25.5Q4.9,-22.9 6.85,-20.5Q9.5,-17.35 9.65,-13.3Q9.65,-11.3 9.15,-9.35Q9.6,-7.9 9.65,-6.3Q9.65,-4.15 9.1,-2.15Q9.6,-0.6 9.65,1.1Q9.65,3.35 9,5.5Q9.6,7.1 9.65,8.95Q9.65,11.2 9.05,13.3Q9.6,14.9 9.65,16.7Q9.65,18.7 9.05,20.65Q10.1,22.7 10.15,25.1Q10,29.25 8.1,32.1L7.45,32.1L8.7,29.2Q9.25,27.45 9.2,25.9L8.9,23.25Q8.6,22.1 7.6,20.85Q6.3,19.4 3.95,18L-0.2,15.4L-0.2,16.2L-1.25,16.2L-1.25,-30.5L-0.2,-30.5L0.2,-28.05Q0.6,-26.7 1.85,-25.5M6.1,-18.35Q3.5,-21.25 -0.15,-23.1L0.2,-21.05Q0.6,-19.7 1.85,-18.5Q4.9,-15.9 6.85,-13.5L8.6,-10.8L8.6,-11.15L8.6,-12.9Q8.3,-15.95 6.1,-18.35M1.85,-3.25Q4.9,-0.65 6.85,1.75L8.55,4.35L8.6,3.25L8.6,1.5Q8.3,-1.55 6.1,-3.95Q3.5,-6.85 -0.2,-8.75L-0.2,-8.25L0.2,-5.8Q0.6,-4.45 1.85,-3.25M8.6,-5.9Q8.3,-8.95 6.1,-11.35Q3.5,-14.25 -0.2,-16.15L-0.2,-16.1L0.2,-13.65Q0.6,-12.3 1.85,-11.1Q4.9,-8.5 6.85,-6.1L8.55,-3.45L8.6,-4.15L8.6,-5.9M1.85,4.5Q4.9,7.15 6.85,9.5Q7.9,10.75 8.55,12.1L8.6,11.1L8.6,9.35Q8.3,6.3 6.1,3.9Q3.5,1 -0.2,-0.9L-0.2,-0.45L0.2,2Q0.6,3.3 1.85,4.5M8.6,17.1Q8.3,14.05 6.1,11.65Q3.5,8.8 -0.2,6.85Q-0.05,9.05 1.05,11.05Q2.15,13 3.5,14.25L5.85,16.4L7.55,18.3L8.5,19.7L8.6,17.1'
    }]
  }, {
    name: 'wholeTempo',
    bounds: {
      left: 0,
      right: 8.2,
      top: 0,
      bottom: 15
    },
    svgPaths: [{
      d: 'M2.5,12.05Q2.6,13.25 3.2,14Q3.8,14.7 4.6,14.6Q5.8,14.55 5.7,12.95Q5.6,11.7 5,11Q4.4,10.3 3.6,10.4Q3,10.5 2.7,10.85Q2.45,11.2 2.5,12.05M6.6,10.5Q8.05,11.05 8.2,12.5Q8.1,13.95 6.7,14.5Q5.35,15.05 4.15,15Q2.95,15.05 1.55,14.5Q0.15,13.95 0,12.5Q0.1,11.05 1.45,10.5Q2.85,9.95 4,10Q5.2,9.95 6.6,10.5'
    }]
  }, {
    name: 'wholeDotTempo',
    bounds: {
      left: 0,
      right: 10.8,
      top: 0,
      bottom: 15
    },
    svgPaths: [{
      d: 'M2.7,10.85Q2.45,11.2 2.5,12.05Q2.6,13.25 3.2,14Q3.8,14.7 4.6,14.6Q5.75,14.55 5.65,12.95Q5.55,11.7 5,11Q4.4,10.3 3.6,10.4Q3,10.5 2.7,10.85M6.55,10.5Q8,11.05 8.15,12.5Q8.05,13.95 6.65,14.5L4.15,15Q2.95,15.05 1.55,14.5Q0.15,13.95 0,12.5Q0.1,11.05 1.45,10.5Q2.85,9.95 4,10Q5.2,9.95 6.55,10.5M9.85,12.9Q10.7,13 10.8,13.85Q10.7,14.7 9.85,14.8Q9,14.7 8.9,13.85Q9,13 9.85,12.9'
    }]
  }, {
    name: 'halfTempo',
    bounds: {
      left: 0,
      right: 6,
      top: 0,
      bottom: 20.3
    },
    svgPaths: [{
      d: 'M6,0L6,17Q5.9,18.35 4.65,19.3Q3.45,20.25 2.1,20.3L0.7,20Q-0.15,19.25 0,18.1Q0.15,16.7 1.3,15.8Q2.5,14.9 3.85,14.8Q4.6,14.7 5.5,15.25L5.5,0L6,0M3.35,16.15Q2.45,16.65 1.9,17.1Q0.65,18.05 0.65,19Q0.6,19.4 1.1,19.45L2.25,19.15L3.65,18.3L4.85,17.15Q5.35,16.55 5.35,16.05L4.95,15.7Q4.25,15.6 3.35,16.15'
    }]
  }, {
    name: 'halfDotTempo',
    bounds: {
      left: -0.05,
      right: 8.6,
      top: 0,
      bottom: 20.3
    },
    svgPaths: [{
      d: 'M5.5,0L6,0L6,17Q5.9,18.35 4.65,19.3Q3.45,20.25 2.1,20.3L0.7,20Q0.1,19.45 0,18.75L0,18.1Q0.15,16.7 1.3,15.8Q2.5,14.9 3.85,14.8Q4.6,14.7 5.5,15.25L5.5,0M4.95,15.7Q4.25,15.6 3.35,16.15Q2.45,16.65 1.9,17.1Q0.65,18.05 0.65,19Q0.6,19.4 1.1,19.45L2.25,19.15L3.65,18.3L4.85,17.15Q5.35,16.55 5.35,16.05L4.95,15.7M7.65,18.25Q8.5,18.35 8.6,19.2Q8.5,20.05 7.65,20.15Q6.8,20.05 6.7,19.2Q6.8,18.35 7.65,18.25'
    }]
  }, {
    name: 'quarterTempo',
    bounds: {
      left: 0,
      right: 6,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M6,0L6,16.7Q5.9,18.1 4.65,19.05Q3.45,19.95 2,20Q1.15,20 0.6,19.5Q0,19.05 0,18.25Q0.05,16.95 1.3,16Q2.55,15.05 3.8,15Q4.9,14.95 5.5,15.45L5.5,0L6,0'
    }]
  }, {
    name: 'quarterDotTempo',
    bounds: {
      left: 0,
      right: 8.6,
      top: 0,
      bottom: 20.1
    },
    svgPaths: [{
      d: 'M6,0L6,16.7Q5.9,18.1 4.65,19.05Q3.45,19.95 2,20Q1.15,20 0.6,19.5Q0,19.05 0,18.25Q0.05,16.95 1.3,16Q2.55,15.05 3.8,15Q4.9,14.95 5.5,15.45L5.5,0L6,0M7.65,20.1Q6.8,20 6.7,19.15Q6.8,18.3 7.65,18.2Q8.5,18.3 8.6,19.15Q8.5,20 7.65,20.1'
    }]
  }, {
    name: 'eighthTempo',
    bounds: {
      left: 0,
      right: 10.95,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M9.5,6.1Q10.8,7.7 10.95,9.75Q10.9,11.3 10.3,12.7L9.2,15L8.9,15L9.8,12.95Q10.25,11.7 10.25,10.25Q10.15,8.55 9.15,7.2L7.7,5.95Q6.85,5.45 6,5.35L6,16.7Q5.9,18.1 4.65,19.05Q3.45,19.95 2,20Q1.15,20 0.6,19.5Q0,19.05 0,18.25Q0.05,16.95 1.3,16Q2.55,15.05 3.8,15Q4.9,14.95 5.5,15.45L5.5,0L6,0L6.25,1.65Q6.45,2.55 7.2,3.55L9.5,6.1'
    }]
  }, {
    name: 'eighthDotTempo',
    bounds: {
      left: 0,
      right: 12.2,
      top: 0,
      bottom: 20.1
    },
    svgPaths: [{
      d: 'M12.2,9.75Q12.15,11.3 11.55,12.7L10.45,15L10.15,15L11.05,12.95Q11.5,11.7 11.5,10.25Q11.4,8.55 10.4,7.2L8.95,5.95Q8.1,5.45 7.25,5.35L7.25,16.7Q7.15,18.1 5.9,19.05Q4.7,19.95 3.25,20Q2.4,20 1.85,19.5Q1.25,19.05 1.25,18.25Q1.3,16.95 2.55,16Q3.8,15.05 5.05,15Q6.15,14.95 6.75,15.45L6.75,0L7.25,0L7.5,1.65Q7.7,2.55 8.45,3.55L10.75,6.1Q12.05,7.7 12.2,9.75M8.8,20.1Q7.95,20 7.85,19.15Q7.95,18.3 8.8,18.2Q9.65,18.3 9.75,19.15Q9.65,20 8.8,20.1'
    }]
  }, {
    name: 'sixteenthTempo',
    bounds: {
      left: 0,
      right: 11.1,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M10.4,8.8Q10.25,7.3 9.15,6.1Q7.85,4.65 6,3.7Q6.05,4.8 6.6,5.75Q7.15,6.75 7.85,7.35L9,8.45L9.9,9.4L10.35,10.1L10.4,8.8M11.1,12.05L11.1,13.55Q10.9,15.15 10.15,16.35L9.8,16.35L10.45,14.9L10.7,13.2L10.55,11.85Q10.4,11.3 9.9,10.7L8.1,9.25L6,7.95L6,16.7Q5.9,18.1 4.65,19.05Q3.45,19.95 2,20Q1.15,20 0.6,19.5Q0,19.05 0,18.25Q0.05,16.95 1.3,16Q2.55,15.05 3.8,15Q4.9,14.95 5.5,15.45L5.5,0L6,0L6.2,1.25L7,2.5L9.5,5Q10.85,6.6 10.95,8.6L10.65,10.6L11.1,12.05'
    }]
  }, {
    name: 'sixteenthDotTempo',
    bounds: {
      left: 0,
      right: 11.15,
      top: 0,
      bottom: 20.1
    },
    svgPaths: [{
      d: 'M10.65,10.6Q11.15,11.6 11.15,12.8Q11.1,14.9 10.15,16.35L9.8,16.35L10.45,14.9L10.7,13.2L10.55,11.85Q10.4,11.3 9.9,10.7L8.1,9.25L6,7.95L6,16.7Q5.9,18.1 4.65,19.05Q3.45,19.95 2,20Q1.15,20 0.6,19.5Q0,19.05 0,18.25Q0.05,16.95 1.3,16Q2.55,15.05 3.8,15Q4.9,14.95 5.5,15.45L5.5,0L6,0L6.2,1.25L7,2.5L9.5,5Q10.85,6.6 10.95,8.6L10.65,10.6M10.4,8.8Q10.25,7.3 9.15,6.1Q7.85,4.65 6,3.7Q6.05,4.8 6.6,5.75Q7.15,6.75 7.85,7.35L9,8.45L9.9,9.4L10.35,10.1L10.4,8.8M7.8,20.1Q6.95,20 6.85,19.15Q6.95,18.3 7.8,18.2Q8.65,18.3 8.75,19.15Q8.65,20 7.8,20.1'
    }]
  }, {
    name: 'thirtySecondTempo',
    bounds: {
      left: 0,
      right: 11.1,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M10.737408,14.447398Q11.33894475,12.5714935 10.737408,10.703476Q11.667194475000002,7.609805799999999 9.7790061,5.0210806Q8.330406125,3.3173394249999997 6.6507901,1.8380146Q6.2273792,0.5749264350000001 5.6745492,-0.05084746Q5.6745491999999995,9.311474115 5.6745492,18.673795Q3.2483170750000006,17.574436499999997 1.2258227000000002,19.452178999999997Q-0.3556710625,20.848880749999992 0.6804255800000002,22.534636999999996Q2.4800291549999995,23.731984999999995 4.4267317,22.510906999999996Q6.2630415500000005,21.545100749999996 6.3044148,19.541661999999995Q6.3044148,15.686615499999997 6.3044148,11.831568999999995Q7.946012250000001,12.846181999999994 9.4880391,13.998281999999994Q10.964619225000002,15.264941499999994 10.828659,17.224693999999992Q10.741799025000002,19.064761999999995 9.9223629,20.734717999999994Q10.668822775,20.42842174999999 10.853282,19.353127999999995Q11.77405075,16.86571474999999 10.737408,14.447401999999995zM6.0852214,3.5022238Q5.95743865,3.454594375 6.0852214,3.5022238zM10.457118,13.963661Q9.184240800000001,12.18775 7.5134322,10.753431Q6.327591900000001,9.381758824999999 6.3044148,7.617559Q7.033806375000001,7.7200001 7.9656849,8.5576035Q10.138206075000001,10.083960375 10.554117,12.639054Q10.549537,13.303911249999999 10.457117,13.963661zM10.713473,9.5816855Q10.4481886,10.2092544 9.6672666,8.7660103Q8.314000225000001,7.264985424999999 6.816131,5.9100028Q6.152503824999999,5.001708975 6.3044148,3.8691131Q6.625878425,3.4160171749999995 7.6203376,4.3050182Q9.829176675,5.705429425 10.65902,8.1186579Q10.7438375,8.8463515 10.71347,9.5816855z'
    }]
  }, {
    name: 'thirtySecondDotTempo',
    bounds: {
      left: 0,
      right: 11.15,
      top: 0,
      bottom: 20.1
    },
    svgPaths: [{
      d: 'M9.0313454,21.93066Q9.2479561,23.365562 7.8188169,23.114161Q6.763679550000001,22.1557015 7.9961724,21.439387Q9.0796368,21.412506 8.7929922,22.02917Q8.064667025000002,22.380692000000003 8.4975538,22.179149Q8.7644496,22.0549045 9.031345400000001,21.93066zM10.737408000000002,14.447398Q11.338944750000001,12.5714935 10.737408000000002,10.703476Q11.667194475000002,7.609805799999999 9.7790061,5.0210806Q8.330406125,3.3173394249999997 6.6507901,1.8380146Q6.22735535,0.5749555199999999 5.6745492,-0.05084746Q5.6745491999999995,9.311474115 5.6745492,18.673795Q3.2483170750000006,17.574436499999997 1.2258227000000002,19.452178999999997Q-0.3556710625,20.848880749999992 0.6804255800000002,22.534636999999996Q2.4800291549999995,23.731984999999995 4.4267317,22.510906999999996Q6.26349185,21.54482075 6.3044148,19.540819999999997Q6.3044148,15.686194499999997 6.3044148,11.831568999999996Q7.946012250000001,12.846181999999997 9.4880391,13.998281999999996Q10.964619225000002,15.264941499999992 10.828659,17.224693999999996Q10.741799025000002,19.064761999999995 9.9223629,20.734717999999997Q10.668870024999999,20.4284975 10.853282,19.353127999999998Q11.77405075,16.86571475 10.737408,14.447401999999999zM6.0852214,3.5022238Q5.957445399999999,3.4545982000000004 6.0852214,3.5022238zM10.457118,13.963661Q9.184240800000001,12.18775 7.5134322,10.753431Q6.32719965,9.381300175 6.3044148,7.6164758Q7.034896275000001,7.721414500000002 7.9656849,8.5576035Q10.138206075000001,10.083960375 10.554117,12.639054Q10.549537,13.303911249999999 10.457117,13.963661zM10.713473,9.5816855Q10.4481886,10.2092544 9.6672666,8.7660103Q8.314000225000001,7.264985424999999 6.816131,5.9100028Q6.152264574999999,5.00108925 6.3044148,3.8677892Q6.626864525,3.4170622999999996 7.6203376,4.3050182Q9.829176675,5.705429425 10.65902,8.1186579Q10.7438375,8.846350675000002 10.71347,9.5816855z'
    }]
  }, {
    name: 'sixtyFourthTempo',
    bounds: {
      left: 0,
      right: 11.1,
      top: 0,
      bottom: 20
    },
    svgPaths: [{
      d: 'M10.671511,18.652939Q11.273793249999999,16.776019749999996 10.671511,14.906698Q11.290338500000002,12.905721500000002 10.645671,10.931082Q11.65740575,7.673025550000001 9.548584,5.0183846Q8.14792275,3.4360997 6.5828939,2.0178356Q6.161701399999998,0.7008513800000001 5.606366,0.03389831Q5.6063659999999995,10.976137797499998 5.606366,21.918377000000003Q2.4653569725000004,20.6839955 0.3961284100000002,23.477840000000004Q-0.5514641974999999,25.191187500000005 1.0635643000000004,26.196109000000003Q3.052847225,26.710229000000005 4.7525127000000005,25.455408000000002Q5.777729375000001,24.378242750000002 6.236515900000001,22.974754Q6.236515900000001,19.47572225 6.236515900000001,15.976692Q7.953778425,17.058348499999997 9.5533118,18.295204Q11.39790605,20.281248999999995 10.53641,22.956861999999997Q9.80682745,24.176866249999996 10.186926,24.609747Q11.9220605,21.7124165 10.671510999999999,18.652939zM6.2365159,3.6673431Q8.837907899999998,4.9516331000000005 10.309805,7.420279900000001Q10.836073249999998,8.705538750000002 10.583291000000001,10.077386Q10.273226375,10.1049818 9.6008864,9.0198368Q8.258605275,7.50808505 6.7552276,6.160364Q6.064646499999999,5.016014274999999 6.2365159,3.6673431ZM6.2365159,7.6687952Q8.837851725,8.953082375 10.309805,11.421653Q10.79537175,12.621932000000003 10.62748,13.922108Q10.3127199,14.216878999999999 9.6008864,12.968987Q8.247122175000001,11.4700575 6.7552276,10.11232Q6.065303275,8.994268725 6.2365159,7.6687952ZM10.391094,18.168984Q8.388427299999996,15.949579750000002 6.5255324,13.632458Q5.9083552500000005,12.477224499999998 6.0734104,11.681745Q8.7254686,12.993699249999999 10.122925,15.547139Q10.607762,16.817173750000002 10.391094,18.168984z'
    }]
  }, {
    name: 'sixtyFourthDotTempo',
    bounds: {
      left: 0,
      right: 11.15,
      top: 0,
      bottom: 20.1
    },
    svgPaths: [{
      d: 'M8.0690023,24.755751Q9.432573624999996,24.623136499999998 9.060277899999999,25.941517Q8.01257315,26.788135999999998 7.583902499999999,25.511127000000002Q7.787410549999999,24.48537725 8.223064599999999,25.125886Q8.496470024999997,25.734892250000005 8.1389666,24.91713Q8.1039841,24.83644275 8.0690016,24.755751zM10.6715103,18.652939Q11.273792549999998,16.776019749999996 10.6715103,14.906698Q11.290337800000001,12.905721500000002 10.645670299999999,10.931082Q11.657405925,7.673025550000001 9.548584,5.0183846Q8.14792275,3.4360997 6.5828939,2.0178356Q6.161701399999998,0.7008513800000001 5.606366,0.03389831Q5.6063659999999995,10.976137797499998 5.606366,21.918377000000003Q2.4653569725000004,20.6839955 0.3961284100000002,23.477840000000004Q-0.5514641974999999,25.191187500000005 1.0635643000000004,26.196109000000003Q3.052847225,26.710229000000005 4.7525127000000005,25.455408000000002Q5.777729375000001,24.378242750000002 6.236515900000001,22.974754Q6.236515900000001,19.47572225 6.236515900000001,15.976692Q7.953778425,17.058348499999997 9.5533118,18.295204Q11.39790605,20.281248999999995 10.53641,22.956861999999997Q9.80682745,24.176866249999996 10.186926,24.609747Q11.9220605,21.7124165 10.671510999999999,18.652939zM6.2365159,3.6673431Q8.837907899999998,4.9516331000000005 10.309805,7.420279900000001Q10.836073249999998,8.705538750000002 10.583291000000001,10.077386Q10.273226375,10.1049818 9.6008864,9.0198368Q8.258605275,7.50808505 6.7552276,6.160364Q6.064646499999999,5.016014274999999 6.2365159,3.6673431ZM6.2365159,7.6687952Q8.837851725,8.953082375 10.309805,11.421653Q10.79537175,12.621932000000003 10.62748,13.922108Q10.3127199,14.216878999999999 9.6008864,12.968987Q8.247122175000001,11.4700575 6.7552276,10.11232Q6.065303275,8.994268725 6.2365159,7.6687952ZM10.391094,18.168984Q8.388427299999996,15.949579750000002 6.5255324,13.632458Q5.9083552500000005,12.477224499999998 6.0734104,11.681745Q8.7254686,12.993699249999999 10.122925,15.547139Q10.607762,16.817173750000002 10.391094,18.168984z'
    }]
  }, {
    name: 'tempoEquals',
    bounds: {
      left: 0,
      right: 8,
      top: 0,
      bottom: 16.5
    },
    svgPaths: [{
      d: 'M8,13.05L0,13.05L0,12L8,12L8,13.05M8,16.5L0,16.5L0,15.4L8,15.4L8,16.5'
    }]
  }, {
    name: 'pDynamics',
    bounds: {
      left: -6.1,
      right: 11.8,
      top: -14,
      bottom: 3.4
    },
    svgPaths: [{
      d: 'M2.85,-4.2L0.75,1.45Q0.7,2 1.25,2.05L3.2,2.05L3.2,3.4L-6.1,3.4L-6.1,2.05L-4,2.05Q-3.3,2 -3,1.25L1.75,-11.8Q1.9,-12.6 1.4,-12.65Q0.25,-12.4 -0.8,-10.7L-2.2,-8.05L-3.2,-8.05L-0.95,-11.9Q0.45,-13.85 2.75,-14Q3.75,-13.95 4.05,-12.3Q6.2,-13.75 8.3,-14Q10.15,-13.95 10.95,-12.8Q11.8,-11.6 11.8,-9.95Q11.75,-7.5 9.95,-5.2Q8.15,-2.95 5.5,-2.75Q3.85,-2.95 2.85,-4.2M8.4,-11.4Q8.45,-12.55 7.5,-12.65Q6.35,-12.7 5.65,-11.65L4.65,-9.7Q3.8,-7.75 3.7,-5.65Q3.65,-4.35 4.65,-4.2Q6.2,-4.5 7.3,-7.25Q8.35,-9.95 8.4,-11.4'
    }]
  }, {
    name: 'fDynamics',
    bounds: {
      left: -6,
      right: 14.7,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M14,-19.35L14.65,-18.15Q14.8,-17.55 14.45,-16.45Q14.15,-15.35 12.4,-14.95Q11.05,-15.05 11.05,-16.4Q11.3,-17.45 12.05,-17.8L12.9,-18.45Q12.65,-19.05 11.95,-19.05Q11.05,-19.1 10.4,-18.45L9.35,-17.1Q8.35,-15.45 7.8,-13.55L11.25,-13.55L11.25,-12.15L7.4,-12.15L6.05,-7.65L4.45,-3.75L3.15,-1.3L1.6,0.9Q-0.1,3 -2.75,3.3Q-4.05,3.35 -5,2.55Q-5.95,1.75 -6,0.35L-5.65,-1.05Q-5.2,-1.85 -4.05,-2.05Q-2.2,-2 -2.2,-0.2Q-2.5,0.85 -3.45,1.5Q-4,2 -3.3,2.2Q-1.55,2.05 -0.4,-0.55Q0.8,-3.15 1.6,-6.5Q2.45,-9.85 3.25,-12.15L0.6,-12.15L0.6,-13.55L3.8,-13.55Q4.75,-16.05 6.9,-17.95Q9.05,-19.95 11.95,-20.1Q13.45,-20.05 14,-19.35'
    }]
  }, {
    name: 'sfDynamics',
    bounds: {
      left: -6,
      right: 17.9,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M17.2,-19.35L17.85,-18.15Q18.05,-17.55 17.7,-16.45Q17.35,-15.35 15.65,-14.95Q14.3,-15.05 14.25,-16.4Q14.55,-17.45 15.3,-17.8L16.15,-18.45Q15.85,-19.05 15.2,-19.05Q14.3,-19.1 13.65,-18.45L12.6,-17.1Q11.6,-15.45 11.05,-13.55L14.5,-13.55L14.5,-12.15L10.7,-12.15L9.3,-7.75Q8.35,-4.65 6.25,-0.95Q4.15,2.7 0.6,3.3Q-0.75,3.35 -1.7,2.55Q-2.65,1.75 -2.7,0.35L-2.35,-1.1Q-1.9,-1.9 -0.7,-2.1Q1.15,-2.05 1.15,-0.2Q1,0.6 0.35,1.05L-0.35,1.85L0.05,2.2Q1.8,2.05 2.95,-0.55L4.9,-6.55Q5.75,-9.85 6.55,-12.15L3.95,-12.15L3.95,-13.55L7.05,-13.55Q8.05,-16.05 10.15,-18Q12.3,-20 15.2,-20.1Q16.7,-20.05 17.2,-19.35M0.75,-12.25L0.25,-12.8L-0.45,-12.9Q-1.75,-12.75 -1.95,-11.5Q-1.65,-10.35 0.3,-9.5Q2.35,-8.5 2.4,-6.1Q2.25,-4.65 0.95,-3.85Q-0.3,-3.05 -1.85,-2.95Q-3.35,-2.9 -4.65,-3.7Q-5.9,-4.45 -6,-5.85Q-6.05,-7.25 -4.6,-7.5Q-3.6,-7.45 -3.4,-6.65Q-3.4,-5.9 -3.65,-5.65L-3.85,-5.05Q-3.7,-4.6 -3.15,-4.5L-2.2,-4.4Q-1.6,-4.4 -1,-4.75Q-0.4,-5.15 -0.35,-5.85Q-0.6,-7.1 -2.35,-7.9L-2.35,-7.95Q-4.25,-8.8 -4.55,-10.75Q-4.55,-12.3 -3.4,-13.25Q-2.2,-14.15 -0.45,-14.15Q0.9,-14.1 1.9,-13.5Q2.95,-12.95 3.05,-11.7Q2.95,-10.7 1.95,-10.5Q0.8,-10.55 0.6,-11.5L0.75,-12.25'
    }]
  }, {
    name: 'ppDynamics',
    bounds: {
      left: -6.1,
      right: 26.7,
      top: -14,
      bottom: 3.4
    },
    svgPaths: [{
      d: 'M2.8,-4.2L0.75,1.45Q0.7,2 1.2,2.05L3.15,2.05L3.15,3.4L-6.1,3.4L-6.1,2.05L-4,2.05Q-3.3,2 -3,1.25L1.7,-11.8Q1.85,-12.6 1.35,-12.65Q0.25,-12.4 -0.8,-10.7L-2.2,-8.05L-3.2,-8.05L-0.95,-11.9Q0.45,-13.85 2.7,-14Q3.7,-13.95 4,-12.3Q6.15,-13.75 8.25,-14Q10.05,-13.95 10.85,-12.8Q11.7,-11.6 11.7,-9.95Q11.65,-7.5 9.85,-5.2Q8.1,-2.95 5.45,-2.75Q3.8,-2.95 2.8,-4.2M4.6,-4.2Q6.15,-4.5 7.25,-7.25Q8.3,-9.95 8.3,-11.4Q8.35,-12.55 7.45,-12.65Q6.3,-12.7 5.6,-11.65L4.6,-9.7Q3.75,-7.75 3.65,-5.65Q3.6,-4.35 4.6,-4.2M14.05,-11.9Q15.5,-13.85 17.7,-14Q18.65,-13.95 19,-12.3Q21.15,-13.75 23.2,-14Q25.05,-13.95 25.85,-12.8Q26.7,-11.6 26.7,-9.95Q26.65,-7.5 24.85,-5.2Q23.05,-2.95 20.4,-2.75Q18.8,-2.95 17.75,-4.2L15.8,1.45Q15.7,2 16.2,2.05L18.2,2.05L18.2,3.4L8.9,3.4L8.9,2.05L11,2.05Q11.75,2 12.05,1.25L16.75,-11.8Q16.85,-12.6 16.35,-12.65Q15.3,-12.4 14.25,-10.7L12.85,-8.05L11.85,-8.05Q12.65,-9.9 14.05,-11.9M18.65,-5.65Q18.6,-4.35 19.6,-4.2Q21.15,-4.5 22.2,-7.25Q23.25,-9.95 23.3,-11.4Q23.35,-12.55 22.4,-12.65Q21.25,-12.7 20.6,-11.65Q19.9,-10.65 19.55,-9.7Q18.75,-7.75 18.65,-5.65'
    }]
  }, {
    name: 'pppDynamics',
    bounds: {
      left: -6.1,
      right: 41.9,
      top: -14,
      bottom: 3.4
    },
    svgPaths: [{
      d: 'M2.8,-4.2L0.75,1.45Q0.7,2 1.2,2.05L3.15,2.05L3.15,3.4L-6.1,3.4L-6.1,2.05L-4,2.05Q-3.3,2 -3,1.25L1.7,-11.8Q1.85,-12.6 1.35,-12.65Q0.25,-12.4 -0.8,-10.7L-2.2,-8.05L-3.2,-8.05L-0.95,-11.9Q0.45,-13.85 2.7,-14Q3.7,-13.95 4,-12.3Q6.15,-13.75 8.25,-14Q10.1,-13.95 10.9,-12.8Q11.75,-11.6 11.75,-9.95Q11.7,-7.5 9.9,-5.2Q8.1,-2.95 5.45,-2.75Q3.8,-2.95 2.8,-4.2M4.6,-4.2Q6.15,-4.5 7.25,-7.25Q8.3,-9.95 8.35,-11.4Q8.4,-12.55 7.45,-12.65Q6.3,-12.7 5.6,-11.65L4.6,-9.7Q3.75,-7.75 3.65,-5.65Q3.6,-4.35 4.6,-4.2M14.1,-11.9Q15.55,-13.85 17.75,-14Q18.7,-13.95 19.05,-12.3Q21.2,-13.75 23.25,-14Q25.1,-13.95 25.9,-12.8Q26.75,-11.6 26.75,-9.95Q26.7,-7.5 24.9,-5.2Q23.1,-2.95 20.45,-2.75Q18.85,-2.95 17.8,-4.2L15.85,1.45Q15.75,2 16.25,2.05L18.25,2.05L18.25,3.4L8.95,3.4L8.95,2.05L11.05,2.05Q11.8,2 12.1,1.25L16.8,-11.8Q16.9,-12.6 16.4,-12.65Q15.35,-12.4 14.3,-10.7L12.9,-8.05L11.9,-8.05L14.1,-11.9M18.7,-5.65Q18.65,-4.35 19.65,-4.2Q21.2,-4.5 22.25,-7.25Q23.3,-9.95 23.35,-11.4Q23.4,-12.55 22.45,-12.65Q21.3,-12.7 20.65,-11.65Q19.95,-10.65 19.6,-9.7Q18.8,-7.75 18.7,-5.65M26.9,-8.05Q27.7,-9.9 29.15,-11.9Q30.55,-13.85 32.8,-14Q33.8,-13.95 34.15,-12.3Q36.3,-13.75 38.4,-14Q40.25,-13.95 41.1,-12.8Q41.9,-11.6 41.9,-9.95Q41.85,-7.5 40.05,-5.2Q38.25,-2.95 35.6,-2.75Q33.95,-2.95 32.9,-4.2L30.9,1.45Q30.8,2 31.35,2.05L33.3,2.05L33.3,3.4L23.95,3.4L23.95,2.05L26.05,2.05Q26.8,2 27.1,1.25L31.85,-11.8Q31.95,-12.6 31.45,-12.65Q30.4,-12.4 29.3,-10.7L27.9,-8.05L26.9,-8.05M38.5,-11.4Q38.55,-12.55 37.6,-12.65Q36.45,-12.7 35.75,-11.65Q35.05,-10.65 34.7,-9.7Q33.9,-7.75 33.8,-5.65Q33.75,-4.35 34.75,-4.2Q36.3,-4.5 37.4,-7.25Q38.45,-9.95 38.5,-11.4'
    }]
  }, {
    name: 'mpDynamics',
    bounds: {
      left: -6.1,
      right: 26,
      top: -14,
      bottom: 3.4
    },
    svgPaths: [{
      d: 'M16.95,-14Q17.9,-13.95 18.25,-12.3Q20.4,-13.75 22.5,-14Q24.3,-13.95 25.15,-12.8Q26.05,-11.6 26,-9.95Q25.95,-7.5 24.15,-5.2Q22.35,-2.95 19.7,-2.75Q18.05,-2.95 17,-4.2L15,1.45Q14.9,2 15.45,2.05L17.4,2.05L17.4,3.4L8.1,3.4L8.1,2.05L10.2,2.05Q10.9,2 11.2,1.25L15.95,-11.8Q16.05,-12.6 15.55,-12.65Q14.9,-12.6 14.25,-11.8L13,-9.95L12.1,-9.95Q12.9,-11.5 14.1,-12.75Q15.3,-13.95 16.95,-14M4.55,-14Q5.6,-14 5.95,-12.4Q8,-14.1 9.45,-14Q11.5,-13.85 11.2,-12.3L8.65,-4.95Q8.65,-4.2 9.1,-4.2L10.25,-4.9L11.3,-6.25L12.1,-6.25Q10.8,-3.95 9.95,-3.3Q9.1,-2.7 8.5,-2.75Q6.9,-2.8 6.2,-3.55Q5.5,-4.3 5.8,-5.25L8.3,-12.05Q8.25,-12.65 7.6,-12.6Q6.3,-12.2 5.9,-10.75L3.3,-3.4L0.45,-3.4L3.55,-12.05Q3.5,-12.6 2.9,-12.6Q1.6,-12.2 1.15,-10.75L-1.45,-3.4L-4.3,-3.4L-1.15,-11.8Q-1.1,-12.6 -1.6,-12.65Q-2.65,-12.4 -3.7,-10.65L-5.1,-8L-6.1,-8Q-5.25,-9.85 -3.8,-11.85Q-2.4,-13.85 -0.15,-14Q0.85,-13.95 1.15,-12.4Q3,-14.1 4.55,-14M18.1,-5.65Q18,-4.35 19.05,-4.2Q20.6,-4.5 21.7,-7.25Q22.75,-9.95 22.75,-11.35Q22.85,-12.55 21.9,-12.65Q20.7,-12.7 20.05,-11.65Q19.35,-10.65 19,-9.7Q18.2,-7.75 18.1,-5.65'
    }]
  }, {
    name: 'mfDynamics',
    bounds: {
      left: -6,
      right: 27.3,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M16.45,-13.55Q17.45,-16.05 19.55,-17.95Q21.7,-19.95 24.55,-20.1Q26.1,-20.05 26.6,-19.35L27.25,-18.15L27.1,-16.45Q26.75,-15.35 25,-14.95Q23.7,-15.05 23.65,-16.4Q23.9,-17.45 24.65,-17.8L25.5,-18.45Q25.25,-19.05 24.55,-19.05Q23.7,-19.1 23.05,-18.45L22,-17.1Q21,-15.45 20.45,-13.55L23.9,-13.55L23.9,-12.15L20.1,-12.15L18.75,-7.7Q17.75,-4.6 15.65,-0.95Q13.6,2.75 10,3.3Q8.7,3.35 7.75,2.55Q6.8,1.75 6.8,0.35Q6.75,-0.3 7.15,-1.1Q7.55,-1.85 8.75,-2.1Q10.55,-2.05 10.55,-0.2Q10.25,0.85 9.3,1.5Q8.75,2 9.45,2.2Q11.2,2.05 12.35,-0.55Q13.5,-3.15 14.3,-6.5Q15.15,-9.85 15.95,-12.15L13.35,-12.15L13.35,-13.55L16.45,-13.55M4.65,-14.15Q5.7,-14.15 6.05,-12.55Q8.05,-14.25 9.55,-14.15Q11.55,-14 11.25,-12.45L8.75,-5.15Q8.75,-4.4 9.15,-4.4L10.2,-4.95L11,-5.9L12.35,-7.9L13.15,-7.9L11.3,-4.9Q10.15,-3.15 8.6,-2.95Q7,-3 6.3,-3.75Q5.55,-4.5 5.9,-5.45L8.4,-12.2Q8.35,-12.8 7.7,-12.75Q6.4,-12.35 6,-10.9L3.4,-3.6L0.55,-3.6L3.65,-12.2Q3.6,-12.75 2.95,-12.75Q1.65,-12.35 1.25,-10.9L-1.4,-3.6L-4.2,-3.6L-1.05,-11.95Q-1,-12.75 -1.5,-12.8Q-2.55,-12.55 -3.6,-10.8L-5.05,-8.2L-6,-8.2L-3.75,-12Q-2.3,-14 -0.05,-14.15Q0.95,-14.1 1.2,-12.55Q3.1,-14.25 4.65,-14.15'
    }]
  }, {
    name: 'fzDynamics',
    bounds: {
      left: -6,
      right: 20,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M14,-19.35L14.65,-18.15Q14.8,-17.55 14.45,-16.45Q14.1,-15.35 12.4,-14.95Q11.05,-15.05 11.05,-16.4Q11.3,-17.45 12.05,-17.8L12.9,-18.45Q12.65,-19.05 11.95,-19.05Q11.05,-19.1 10.4,-18.45L9.35,-17.1L7.7,-13.55L11.25,-13.55L11.25,-12.15L7.4,-12.15L6.05,-7.7L4.45,-3.75L3.15,-1.3L1.6,0.9Q-0.1,3 -2.75,3.3Q-4.05,3.35 -5,2.55Q-5.95,1.75 -6,0.35L-5.65,-1.1Q-5.2,-1.85 -4.05,-2.1Q-2.2,-2.05 -2.2,-0.2Q-2.5,0.85 -3.45,1.5Q-4,2 -3.3,2.2Q-1.55,2.05 -0.4,-0.55Q0.8,-3.15 1.6,-6.5Q2.45,-9.85 3.25,-12.15L0.6,-12.15L0.6,-13.55L3.8,-13.55Q4.75,-16.05 6.9,-17.95Q9.05,-19.95 11.95,-20.1Q13.45,-20.05 14,-19.35M20,-13.55L20,-12.35L11.6,-5.55L11.65,-5.5Q12.4,-6.1 13.55,-6.1L15.7,-5.35Q16.5,-5.4 16.35,-6.2Q15.65,-6.55 15.55,-7.3Q15.6,-8.1 16.8,-8.3Q18.1,-8.05 18.05,-6.7Q18,-5.15 17.05,-4.1Q16.05,-3 14.6,-2.95Q13.1,-3.05 12.2,-3.65Q11.5,-4.15 10.75,-4.15Q9.95,-4.05 9.5,-3.6L8.35,-3.6Q8.45,-4.2 9.05,-4.8L17,-11.4L14,-11.4Q12.9,-11.15 12.4,-10.05L11.55,-10.05L12.65,-13.55L20,-13.55'
    }]
  }, {
    name: 'ffDynamics',
    bounds: {
      left: -6,
      right: 25.3,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M14,-19.35L14.65,-18.15Q14.8,-17.55 14.45,-16.45Q14.15,-15.35 12.4,-14.95Q11.05,-15.05 11,-16.4Q11.3,-17.45 12.05,-17.8L12.9,-18.45Q12.65,-19.05 11.95,-19.05Q11.05,-19.1 10.4,-18.45L9.35,-17.1Q8.35,-15.45 7.75,-13.55L14.45,-13.55Q15.45,-16.05 17.55,-17.95Q19.7,-19.95 22.55,-20.1Q24.1,-20.05 24.6,-19.35L25.25,-18.15Q25.45,-17.55 25.1,-16.45Q24.75,-15.35 23,-14.95Q21.7,-15.05 21.65,-16.4Q21.95,-17.45 22.65,-17.8Q23.45,-18.2 23.55,-18.45Q23.25,-19.05 22.55,-19.05Q21.7,-19.1 21.05,-18.45L20,-17.1Q19,-15.45 18.45,-13.55L21.9,-13.55L21.9,-12.15L18.1,-12.15L16.75,-7.65Q15.8,-4.55 13.65,-0.9Q11.5,2.75 7.9,3.3Q6.6,3.35 5.6,2.55Q4.7,1.75 4.65,0.35Q4.6,-0.25 5,-1.05Q5.4,-1.85 6.6,-2.05Q8.4,-2 8.45,-0.2Q8.15,0.85 7.15,1.5Q6.65,2 7.3,2.2Q9.1,2.05 10.25,-0.55Q11.4,-3.15 12.25,-6.5Q13.1,-9.85 13.9,-12.15L7.4,-12.15L6.05,-7.65Q5.05,-4.55 2.95,-0.9Q0.85,2.75 -2.75,3.3Q-4.05,3.35 -5,2.55Q-5.95,1.75 -6,0.35L-5.65,-1.05Q-5.2,-1.85 -4.05,-2.05Q-2.2,-2 -2.2,-0.2Q-2.5,0.85 -3.45,1.5Q-4,2 -3.3,2.2Q-1.55,2.05 -0.4,-0.55Q0.75,-3.15 1.6,-6.5Q2.45,-9.85 3.25,-12.15L0.6,-12.15L0.6,-13.55L3.75,-13.55Q4.75,-16.05 6.85,-17.95Q9,-19.95 11.95,-20.1Q13.45,-20.05 14,-19.35'
    }]
  }, {
    name: 'fffDynamics',
    bounds: {
      left: -6,
      right: 36,
      top: -20.1,
      bottom: 3.3
    },
    svgPaths: [{
      d: 'M14.05,-19.35L14.7,-18.15Q14.85,-17.55 14.5,-16.45Q14.15,-15.35 12.4,-14.95Q11.05,-15.05 11,-16.4Q11.3,-17.45 12.05,-17.8L12.9,-18.45Q12.65,-19.05 11.95,-19.05Q11.05,-19.1 10.4,-18.45L9.35,-17.1Q8.35,-15.45 7.75,-13.55L14.5,-13.55Q15.4,-16.05 17.55,-17.95Q19.7,-19.95 22.6,-20.1Q24.15,-20.05 24.65,-19.35L25.3,-18.15Q25.5,-17.55 25.15,-16.45Q24.8,-15.35 23.05,-14.95Q21.7,-15.05 21.7,-16.4Q21.95,-17.45 22.7,-17.8L23.6,-18.45Q23.3,-19.05 22.6,-19.05Q21.7,-19.1 21.05,-18.45L20,-17.1Q19,-15.45 18.45,-13.55L25.15,-13.55Q26.1,-16.05 28.25,-17.95Q30.35,-19.95 33.25,-20.1Q34.75,-20.05 35.3,-19.35L35.95,-18.15Q36.1,-17.55 35.75,-16.45Q35.45,-15.35 33.7,-14.95Q32.35,-15.05 32.35,-16.4Q32.6,-17.45 33.35,-17.8L34.2,-18.45Q33.95,-19.05 33.25,-19.05Q32.35,-19.1 31.75,-18.45L30.65,-17.1Q29.7,-15.45 29.1,-13.55L32.6,-13.55L32.6,-12.15L28.75,-12.15L27.4,-7.65Q26.45,-4.55 24.3,-0.9Q22.2,2.75 18.55,3.3Q17.25,3.35 16.3,2.55Q15.35,1.75 15.3,0.35Q15.3,-0.25 15.65,-1.05Q16.1,-1.85 17.25,-2.05Q19.1,-2 19.15,-0.2Q18.8,0.85 17.85,1.5Q17.3,2 18,2.2Q19.75,2.05 20.95,-0.55Q22.1,-3.15 22.95,-6.5Q23.8,-9.85 24.6,-12.15L18.05,-12.15L16.7,-7.65Q15.75,-4.55 13.65,-0.9Q11.5,2.75 7.9,3.3Q6.6,3.35 5.6,2.55Q4.7,1.75 4.65,0.35Q4.6,-0.25 5,-1.05Q5.4,-1.85 6.6,-2.05Q8.4,-2 8.45,-0.2Q8.15,0.85 7.15,1.5Q6.65,2 7.3,2.2Q9.1,2.05 10.25,-0.55Q11.4,-3.15 12.25,-6.5L13.95,-12.15L7.4,-12.15L6.05,-7.65Q5.05,-4.55 2.95,-0.9Q0.85,2.75 -2.75,3.3Q-4.05,3.35 -5,2.55Q-5.95,1.75 -6,0.35L-5.65,-1.05Q-5.2,-1.85 -4.05,-2.05Q-2.2,-2 -2.2,-0.2Q-2.5,0.85 -3.45,1.5Q-4,2 -3.3,2.2Q-1.55,2.05 -0.4,-0.55Q0.75,-3.15 1.6,-6.5Q2.45,-9.85 3.25,-12.15L0.6,-12.15L0.6,-13.55L3.75,-13.55Q4.75,-16.05 6.85,-17.95Q9,-19.95 11.95,-20.1Q13.5,-20.05 14.05,-19.35'
    }]
  }, {
    name: 'sfzDynamics',
    bounds: {
      left: -5,
      right: 23.95,
      top: -19,
      bottom: 4.4
    },
    svgPaths: [{
      d: 'M12.05,-12.45L15.5,-12.45L15.5,-11.05L11.7,-11.05L10.3,-6.65Q9.35,-3.55 7.25,0.15Q5.15,3.8 1.6,4.4Q0.25,4.45 -0.7,3.65Q-1.65,2.85 -1.7,1.45L-1.35,0Q-0.9,-0.8 0.3,-1Q2.15,-0.95 2.15,0.9Q2,1.7 1.35,2.15Q0.75,2.6 0.65,2.95L1.05,3.3Q2.8,3.15 3.95,0.55Q5.05,-2.05 5.9,-5.45Q6.75,-8.75 7.55,-11.05L4.95,-11.05L4.95,-12.45L8.05,-12.45Q9.05,-14.95 11.15,-16.9Q13.3,-18.9 16.2,-19Q17.7,-18.95 18.2,-18.25L18.85,-17.05Q19.05,-16.45 18.7,-15.35Q18.35,-14.25 16.65,-13.85Q15.3,-13.95 15.25,-15.3Q15.55,-16.35 16.3,-16.7Q17.05,-17.1 17.15,-17.35Q16.85,-17.95 16.2,-17.95Q15.3,-18 14.65,-17.35Q14,-16.75 13.6,-16Q12.6,-14.35 12.05,-12.45M2.9,-12.4Q3.95,-11.85 4.05,-10.6Q3.95,-9.6 2.95,-9.4Q1.8,-9.45 1.6,-10.4L1.75,-11.15L1.25,-11.7L0.55,-11.8Q-0.75,-11.65 -0.95,-10.4Q-0.65,-9.25 1.3,-8.4Q3.35,-7.4 3.4,-5Q3.25,-3.55 1.95,-2.75Q0.7,-1.95 -0.85,-1.85Q-2.35,-1.8 -3.65,-2.6Q-4.9,-3.35 -5,-4.75Q-5.05,-6.15 -3.6,-6.4Q-2.6,-6.35 -2.4,-5.55Q-2.4,-4.8 -2.65,-4.55L-2.85,-3.95Q-2.7,-3.5 -2.15,-3.4L-1.2,-3.3Q-0.6,-3.3 0,-3.65Q0.6,-4.05 0.65,-4.75Q0.4,-6 -1.35,-6.8L-1.35,-6.85Q-3.25,-7.7 -3.55,-9.65Q-3.55,-11.2 -2.4,-12.15Q-1.2,-13.05 0.55,-13.05Q1.9,-13 2.9,-12.4M15.5,-8.95L16.6,-12.45L23.95,-12.45L23.95,-11.25L15.55,-4.45L15.6,-4.4Q16.35,-5 17.5,-5L19.65,-4.25Q20.45,-4.3 20.3,-5.1Q19.6,-5.45 19.5,-6.2Q19.55,-7 20.75,-7.2Q22.05,-6.95 22,-5.6Q21.95,-4.05 21,-3Q20,-1.9 18.55,-1.85Q17.05,-1.95 16.15,-2.55Q15.45,-3.05 14.7,-3.05Q13.9,-2.95 13.45,-2.5L12.3,-2.5Q12.4,-3.1 13,-3.7L20.95,-10.3L17.95,-10.3Q16.85,-10.05 16.35,-8.95L15.5,-8.95'
    }]
  }, {
    name: 'sfpDynamics',
    bounds: {
      left: -5,
      right: 28.4,
      top: -19.5,
      bottom: 3.9
    },
    svgPaths: [{
      d: 'M18.2,-18.75L18.85,-17.55Q19.05,-16.95 18.7,-15.85Q18.35,-14.75 16.65,-14.35Q15.3,-14.45 15.25,-15.8Q15.55,-16.85 16.3,-17.2Q17.05,-17.6 17.15,-17.85Q16.85,-18.45 16.2,-18.45Q15.3,-18.5 14.65,-17.85Q14,-17.25 13.6,-16.5Q12.6,-14.85 12.05,-12.95L15.5,-12.95L15.5,-11.55L11.7,-11.55L10.3,-7.15Q9.35,-4.05 7.25,-0.35Q5.15,3.3 1.6,3.9Q0.25,3.95 -0.7,3.15Q-1.65,2.35 -1.7,0.95L-1.35,-0.5Q-0.9,-1.3 0.3,-1.5Q2.15,-1.45 2.15,0.4Q2,1.2 1.35,1.65Q0.75,2.1 0.65,2.45L1.05,2.8Q2.8,2.65 3.95,0.05Q5.05,-2.55 5.9,-5.95Q6.75,-9.25 7.55,-11.55L4.95,-11.55L4.95,-12.95L8.05,-12.95Q9.05,-15.45 11.15,-17.4Q13.3,-19.4 16.2,-19.5Q17.7,-19.45 18.2,-18.75M2.9,-12.9Q3.95,-12.35 4.05,-11.1Q3.95,-10.1 2.95,-9.9Q1.8,-9.95 1.6,-10.9L1.75,-11.65L1.25,-12.2L0.55,-12.3Q-0.75,-12.15 -0.95,-10.9Q-0.65,-9.75 1.3,-8.9Q3.35,-7.9 3.4,-5.5Q3.25,-4.05 1.95,-3.25Q0.7,-2.45 -0.85,-2.35Q-2.35,-2.3 -3.65,-3.1Q-4.9,-3.85 -5,-5.25Q-5.05,-6.65 -3.6,-6.9Q-2.6,-6.85 -2.4,-6.05Q-2.4,-5.3 -2.65,-5.05L-2.85,-4.45Q-2.7,-4 -2.15,-3.9L-1.2,-3.8Q-0.6,-3.8 0,-4.15Q0.6,-4.55 0.65,-5.25Q0.4,-6.5 -1.35,-7.3L-1.35,-7.35Q-3.25,-8.2 -3.55,-10.15Q-3.55,-11.7 -2.4,-12.65Q-1.2,-13.55 0.55,-13.55Q1.9,-13.5 2.9,-12.9M17.95,-12.2Q17.3,-12.15 16.65,-11.35Q15.95,-10.5 15.4,-9.5L14.5,-9.5Q15.3,-11.05 16.5,-12.3Q17.7,-13.5 19.35,-13.55Q20.3,-13.5 20.65,-11.85Q22.8,-13.3 24.9,-13.55Q26.7,-13.5 27.55,-12.35Q28.45,-11.15 28.4,-9.5Q28.35,-7.05 26.55,-4.75Q24.75,-2.5 22.1,-2.3Q20.45,-2.5 19.4,-3.75L17.4,1.9Q17.3,2.45 17.85,2.5L19.8,2.5L19.8,3.85L10.5,3.85L10.5,2.5L12.6,2.5Q13.3,2.45 13.6,1.7L18.35,-11.35Q18.45,-12.15 17.95,-12.2M25.15,-10.9Q25.25,-12.1 24.3,-12.2Q23.1,-12.25 22.45,-11.2Q21.75,-10.2 21.4,-9.25Q20.6,-7.3 20.5,-5.2Q20.4,-3.9 21.45,-3.75Q23,-4.05 24.1,-6.8Q25.15,-9.5 25.15,-10.9'
    }]
  }, {
    name: 'fpDynamics',
    bounds: {
      left: -6.2,
      right: 23.9,
      top: -19.5,
      bottom: 3.9
    },
    svgPaths: [{
      d: 'M13.7,-18.75L14.35,-17.55Q14.55,-16.95 14.2,-15.85Q13.85,-14.75 12.15,-14.35Q10.8,-14.45 10.75,-15.8Q11.05,-16.85 11.8,-17.2L12.65,-17.85Q12.35,-18.45 11.7,-18.45Q10.8,-18.5 10.15,-17.85L9.1,-16.5Q8.1,-14.85 7.55,-12.95L11,-12.95L11,-11.55L7.2,-11.55L5.8,-7.15Q4.85,-4.05 2.75,-0.35Q0.65,3.3 -2.9,3.9Q-4.25,3.95 -5.2,3.15Q-6.15,2.35 -6.2,0.95L-5.85,-0.5Q-5.4,-1.3 -4.2,-1.5Q-2.35,-1.45 -2.35,0.4Q-2.5,1.2 -3.15,1.65L-3.85,2.45L-3.45,2.8Q-1.7,2.65 -0.55,0.05Q0.55,-2.55 1.4,-5.95Q2.25,-9.25 3.05,-11.55L0.45,-11.55L0.45,-12.95L3.55,-12.95Q4.55,-15.45 6.65,-17.4Q8.8,-19.4 11.7,-19.5Q13.2,-19.45 13.7,-18.75M16.9,-9.25Q16.1,-7.3 16,-5.2Q15.9,-3.9 16.95,-3.75Q18.5,-4.05 19.6,-6.8Q20.65,-9.5 20.65,-10.9Q20.75,-12.1 19.8,-12.2Q18.6,-12.25 17.95,-11.2Q17.25,-10.2 16.9,-9.25M10.9,-9.5L10,-9.5Q10.8,-11.05 12,-12.3Q13.2,-13.5 14.85,-13.55Q15.8,-13.5 16.15,-11.85Q18.3,-13.3 20.4,-13.55Q22.2,-13.5 23.05,-12.35Q23.95,-11.15 23.9,-9.5Q23.85,-7.05 22.05,-4.75Q20.25,-2.5 17.6,-2.3Q15.95,-2.5 14.9,-3.75L12.9,1.9Q12.8,2.45 13.35,2.5L15.3,2.5L15.3,3.85L6,3.85L6,2.5L8.1,2.5Q8.8,2.45 9.1,1.7L13.85,-11.35Q13.95,-12.15 13.45,-12.2Q12.8,-12.15 12.15,-11.35Q11.45,-10.5 10.9,-9.5'
    }]
  }, {
    name: 'rfzDynamics',
    bounds: {
      left: -7,
      right: 23.95,
      top: -19,
      bottom: 4.4
    },
    svgPaths: [{
      d: 'M12.05,-12.45L15.5,-12.45L15.5,-11.05L11.7,-11.05L10.3,-6.65Q9.35,-3.55 7.25,0.15Q5.15,3.8 1.6,4.4Q0.25,4.45 -0.7,3.65Q-1.65,2.85 -1.7,1.45L-1.35,0Q-0.9,-0.8 0.3,-1Q2.15,-0.95 2.15,0.9Q2,1.7 1.35,2.15Q0.75,2.6 0.65,2.95L1.05,3.3Q2.8,3.15 3.95,0.55Q5.05,-2.05 5.9,-5.45Q6.75,-8.75 7.55,-11.05L4.95,-11.05L4.95,-12.45L8.05,-12.45Q9.05,-14.95 11.15,-16.9Q13.3,-18.9 16.2,-19Q17.7,-18.95 18.2,-18.25L18.85,-17.05Q19.05,-16.45 18.7,-15.35Q18.35,-14.25 16.65,-13.85Q15.3,-13.95 15.25,-15.3Q15.55,-16.35 16.3,-16.7Q17.05,-17.1 17.15,-17.35Q16.85,-17.95 16.2,-17.95Q15.3,-18 14.65,-17.35Q14,-16.75 13.6,-16Q12.6,-14.35 12.05,-12.45M2.9,-9.4Q1.95,-9.45 2,-10.65Q2,-10.9 2.35,-11.55Q2.45,-11.9 2.05,-11.9Q0.9,-11.7 -0.25,-10.1L-1.8,-7.55L-4.4,-2.35L-7,-2.35L-3.35,-10.4Q-3,-11.05 -3.55,-11.25Q-4.25,-11.2 -5.1,-10.3L-6.4,-8.9L-7,-9.15L-4.45,-11.5Q-2.8,-12.65 -1.3,-12.65Q0.25,-12.45 -0.7,-10.7L-0.6,-10.7Q0.85,-12.65 3,-12.95Q4.6,-12.85 4.55,-11.2Q4.35,-9.5 2.9,-9.4M15.5,-8.95L16.6,-12.45L23.95,-12.45L23.95,-11.25L15.55,-4.45L15.6,-4.4Q16.35,-5 17.5,-5L19.65,-4.25Q20.45,-4.3 20.3,-5.1Q19.6,-5.45 19.5,-6.2Q19.55,-7 20.75,-7.2Q22.05,-6.95 22,-5.6Q21.95,-4.05 21,-3Q20,-1.9 18.55,-1.85Q17.05,-1.95 16.15,-2.55Q15.45,-3.05 14.7,-3.05Q13.9,-2.95 13.45,-2.5L12.3,-2.5Q12.4,-3.1 13,-3.7L20.95,-10.3L17.95,-10.3Q16.85,-10.05 16.35,-8.95L15.5,-8.95'
    }]
  }, {
    name: 'tabClef',
    bounds: {
      left: 0,
      right: 17.75,
      top: 0,
      bottom: 68
    },
    svgPaths: [{
      d: 'M2.45,8.85L2.45,6.2L14.9,6.2L14.9,8.85L10.25,8.85L10.25,22L7.05,22L7.05,8.85L2.45,8.85M5.4,45L2,45L8.1,29.2L11.55,29.2L17.75,45L14.3,45L12.95,41.4L6.7,41.4L5.4,45M7.65,38.75L11.95,38.75L9.8,32.9L7.65,38.75M14.3,53L15.5,54.3Q16,55.15 16,56.15Q16,57.3 15.4,58.2Q14.85,59.15 13.8,59.6Q15.25,60 16,61.05Q16.8,62.05 16.8,63.4Q16.8,64.5 16.3,65.5Q15.8,66.55 14.9,67.15Q14.05,67.75 12.8,67.9L8.95,68L3.65,68L3.65,52.2L9.9,52.2L12.7,52.35Q13.6,52.5 14.3,53M11.3,54.9L8.65,54.85L6.8,54.85L6.8,58.45L8.9,58.45L11.15,58.4Q12,58.3 12.45,57.85Q12.9,57.4 12.9,56.65Q12.9,55.9 12.5,55.45Q12.1,55 11.3,54.9M6.8,61.15L6.8,65.35L9.75,65.35L11.95,65.25Q12.6,65.1 13.1,64.6Q13.5,64.1 13.5,63.25Q13.5,62.55 13.15,62.05L12.2,61.35L9.35,61.15L6.8,61.15'
    }]
  }, {
    name: 'tab0',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M1.3,-5.7Q2.3,-7 4.15,-7Q6.05,-7 7.15,-5.65Q8.4,-4.05 8.4,-0.4Q8.4,3.3 7.1,4.9Q6.05,6.2 4.15,6.2Q2.25,6.2 1.15,4.75Q0,3.3 0,-0.4Q0,-4.05 1.3,-5.7M2.8,-3.65Q2.55,-2.7 2.55,-0.4Q2.55,1.9 2.8,2.75Q3,3.6 3.35,3.9L4.15,4.15L5,3.9L5.55,2.85L5.8,-0.4L5.55,-3.55L4.95,-4.7L4.15,-4.95L3.35,-4.7Q3,-4.4 2.8,-3.65'
    }]
  }, {
    name: 'tab1',
    bounds: {
      left: 0,
      right: 5.7,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M0,-1.5L0,-3.75Q0.95,-4.1 2.15,-4.95Q3.25,-5.85 3.7,-7L5.7,-7L5.7,6L3.2,6L3.2,-3.4Q1.9,-2.15 0,-1.5'
    }]
  }, {
    name: 'tab2',
    bounds: {
      left: 0,
      right: 8.8,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M2.75,-3L0.3,-3.25Q0.5,-5.25 1.7,-6.15Q2.85,-7 4.6,-7Q6.55,-7 7.65,-5.95Q8.8,-4.95 8.8,-3.4L8.45,-1.75L7.4,-0.1L5.75,1.55L4.25,3L3.75,3.7L8.8,3.7L8.8,6L0,6Q0.15,4.7 0.85,3.5Q1.6,2.35 3.7,0.4L5.75,-1.7Q6.3,-2.5 6.3,-3.25Q6.3,-4.05 5.8,-4.5L4.55,-4.95Q3.75,-4.95 3.3,-4.5Q2.85,-4.05 2.75,-3'
    }]
  }, {
    name: 'tab3',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M4.15,-7Q5.95,-7 6.95,-5.85Q7.85,-4.9 7.85,-3.7Q7.85,-2 6.05,-1Q7.1,-0.75 7.75,0.1Q8.4,0.9 8.4,2.1Q8.4,3.8 7.15,5Q6,6.2 4.2,6.2Q2.45,6.2 1.3,5.2Q0.2,4.15 0,2.5L2.4,2.2Q2.5,3.15 2.95,3.65Q3.45,4.15 4.15,4.15Q4.85,4.15 5.35,3.6Q5.85,3 5.85,2Q5.85,1.05 5.4,0.5Q4.95,-0.05 4.25,-0.05L3.25,0.15L3.5,-1.85Q4.45,-1.85 4.95,-2.3Q5.4,-2.75 5.4,-3.55Q5.4,-4.2 5.05,-4.6Q4.7,-4.95 4.05,-4.95Q3.45,-4.95 3.05,-4.5Q2.6,-4.05 2.55,-3.2L0.3,-3.6Q0.5,-4.8 1,-5.5Q1.45,-6.2 2.3,-6.6L4.15,-7'
    }]
  }, {
    name: 'tab4',
    bounds: {
      left: 0,
      right: 9.2,
      top: -7,
      bottom: 5.9
    },
    svgPaths: [{
      d: 'M7.6,-7L7.6,1.15L9.2,1.15L9.2,3.35L7.6,3.35L7.6,5.9L5.15,5.9L5.15,3.35L0,3.35L0,1.2L5.45,-7L7.6,-7M5.15,1.15L5.15,-3.1L2.3,1.15L5.15,1.15'
    }]
  }, {
    name: 'tab5',
    bounds: {
      left: 0,
      right: 8.7,
      top: -7,
      bottom: 6
    },
    svgPaths: [{
      d: 'M3.05,-2.5L4.75,-2.9Q6.4,-2.9 7.55,-1.7Q8.7,-0.5 8.7,1.4Q8.7,3.05 7.8,4.3Q6.55,6 4.3,6Q2.5,6 1.35,5.05Q0.2,4.05 0,2.4L2.45,2.15Q2.55,3 3.1,3.5Q3.6,3.95 4.3,3.95Q5.05,3.95 5.6,3.35Q6.1,2.7 6.1,1.5Q6.1,0.3 5.6,-0.3Q5.05,-0.9 4.2,-0.9Q3.1,-0.9 2.3,0.05L0.3,-0.25L1.55,-7L8.15,-7L8.15,-4.7L3.4,-4.7L3.05,-2.5'
    }]
  }, {
    name: 'tab6',
    bounds: {
      left: 0,
      right: 8.6,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M3.25,-0.05Q2.75,0.5 2.75,1.6Q2.75,2.85 3.3,3.5Q3.9,4.15 4.6,4.15Q5.3,4.15 5.8,3.65Q6.25,3.1 6.25,1.85Q6.25,0.6 5.75,0Q5.25,-0.6 4.5,-0.6Q3.75,-0.6 3.25,-0.05M2.55,-1.35Q3.45,-2.45 4.85,-2.45Q6.4,-2.45 7.5,-1.25Q8.6,-0.05 8.6,1.8Q8.6,3.8 7.45,5Q6.3,6.2 4.5,6.2Q2.55,6.2 1.25,4.7Q0,3.15 0,-0.3Q0,-3.85 1.3,-5.45Q2.6,-7 4.7,-7Q6.2,-7 7.15,-6.2Q8.05,-5.35 8.3,-3.8L6,-3.55L5.5,-4.65L4.55,-4.95Q3.75,-4.95 3.2,-4.25Q2.7,-3.55 2.55,-1.35'
    }]
  }, {
    name: 'tab7',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 5.8
    },
    svgPaths: [{
      d: 'M8.4,-7L8.4,-5.15Q7.35,-4.15 6.25,-2.2Q5.2,-0.25 4.65,1.9Q4.05,4.1 4.1,5.8L1.7,5.8Q1.75,3.1 2.8,0.3Q3.85,-2.45 5.6,-4.7L0,-4.7L0,-7L8.4,-7'
    }]
  }, {
    name: 'tab8',
    bounds: {
      left: 0,
      right: 8.4,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M2.6,-3.5Q2.6,-2.75 3.05,-2.35Q3.45,-1.95 4.15,-1.95Q4.85,-1.95 5.3,-2.35Q5.7,-2.8 5.7,-3.5Q5.7,-4.2 5.3,-4.65Q4.85,-5.05 4.15,-5.05Q3.45,-5.05 3.05,-4.6Q2.6,-4.2 2.6,-3.5M0.75,-2.15Q0.3,-2.85 0.3,-3.7Q0.3,-5.15 1.3,-6.05Q2.3,-7 4.15,-7Q6,-7 7,-6.05Q7.95,-5.15 7.95,-3.7Q7.95,-2.8 7.55,-2.1Q7.1,-1.4 6.25,-1Q7.3,-0.6 7.9,0.25Q8.4,1.1 8.4,2.15Q8.4,3.95 7.3,5.1Q6.15,6.2 4.3,6.2Q2.55,6.2 1.35,5.3Q0,4.2 0,2.25Q0,1.2 0.5,0.35Q1.05,-0.55 2.15,-1Q1.2,-1.45 0.75,-2.15M6,2.05Q6,1.15 5.5,0.6Q5,0 4.2,0Q3.35,0 2.9,0.65Q2.45,1.3 2.45,2.05Q2.45,3.1 2.95,3.65Q3.5,4.25 4.25,4.25Q5,4.25 5.5,3.7Q6,3.15 6,2.05'
    }]
  }, {
    name: 'tab9',
    bounds: {
      left: 0,
      right: 8.6,
      top: -7,
      bottom: 6.2
    },
    svgPaths: [{
      d: 'M1.15,-5.8Q2.35,-7 4.15,-7Q6.1,-7 7.35,-5.5Q8.6,-3.95 8.6,-0.5Q8.6,3.05 7.3,4.65Q6,6.2 3.9,6.2Q2.4,6.2 1.5,5.4Q0.55,4.6 0.3,3L2.7,2.75Q2.75,3.5 3.15,3.85Q3.5,4.15 4.1,4.15Q4.85,4.15 5.4,3.45Q5.9,2.75 6.05,0.55Q5.15,1.65 3.75,1.65Q2.2,1.65 1.1,0.45Q0,-0.7 0,-2.6Q0,-4.6 1.15,-5.8M4.2,-0.2Q4.9,-0.2 5.35,-0.75Q5.85,-1.3 5.85,-2.45Q5.85,-3.65 5.3,-4.3Q4.75,-4.95 4.05,-4.95Q3.35,-4.95 2.9,-4.4Q2.45,-3.9 2.45,-2.65Q2.45,-1.35 2.95,-0.8Q3.45,-0.2 4.2,-0.2'
    }]
  }, {
    name: 'halfBendAlteration',
    bounds: {
      left: 0,
      right: 17.15,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M2.7,-4.95L4.25,-4.95L4.25,4.85L2.4,4.85L2.4,-2.25Q1.35,-1.25 0,-0.8L0,-2.5L1.6,-3.4Q2.45,-4.1 2.7,-4.95M10.75,-2.1Q10.9,-3.65 11.8,-4.35Q12.65,-4.95 14,-4.95Q15.5,-4.95 16.3,-4.2Q17.15,-3.4 17.15,-2.25L16.9,-1L16.1,0.25L14.85,1.5L13.75,2.55L13.35,3.1L17.15,3.1L17.15,4.85L10.55,4.85Q10.7,3.85 11.2,2.95Q11.7,2.05 13.3,0.6L14.85,-1Q15.25,-1.55 15.25,-2.1L14.95,-3.1L13.95,-3.4L13,-3.1Q12.65,-2.75 12.6,-1.95L10.75,-2.1M10.2,-5L7.85,5L6.4,5L8.7,-5L10.2,-5'
    }]
  }, {
    name: 'fullBendAlteration',
    bounds: {
      left: 0,
      right: 19.25,
      top: -5,
      bottom: 5.05
    },
    svgPaths: [{
      d: 'M4.65,-4.8L4.4,-3.5L3.55,-3.6L3,-3.45Q2.75,-3.2 2.75,-2.7L2.75,-2.25L4.2,-2.25L4.2,-0.75L2.75,-0.75L2.75,4.9L0.95,4.9L0.95,-0.75L0,-0.75L0,-2.25L0.95,-2.25L0.95,-2.75L1.15,-4.05Q1.3,-4.5 1.8,-4.8L3.1,-5L4.65,-4.8M7.15,-2.25L7.15,1.05L7.2,2.9L7.6,3.4L8.25,3.65L9.1,3.35L9.6,2.7Q9.8,2.3 9.8,0.75L9.8,-2.25L11.6,-2.25L11.6,4.9L9.85,4.9L9.85,3.8L8.9,4.75L7.6,5.05L6.35,4.75Q5.75,4.45 5.5,3.9Q5.25,3.3 5.25,2.3L5.25,-2.25L7.15,-2.25M15.45,-4.85L15.45,4.9L13.6,4.9L13.6,-4.85L15.45,-4.85M19.25,-4.85L19.25,4.9L17.4,4.9L17.4,-4.85L19.25,-4.85'
    }]
  }, {
    name: 'pullOff',
    bounds: {
      left: -4.5,
      right: 5.4,
      top: -6,
      bottom: 6.95
    },
    svgPaths: [{
      d: 'M5.4,-2Q5.4,-0.8 4.95,0Q4.55,0.85 3.85,1.3L2.5,1.9L-0.2,2.1L-1.9,2.1L-1.9,6.95L-4.5,6.95L-4.5,-6L-0.3,-6L2.8,-5.8Q3.9,-5.5 4.65,-4.5Q5.4,-3.55 5.4,-2M2.75,-1.95L2.3,-3.15Q1.9,-3.6 1.25,-3.7L-0.65,-3.8L-1.9,-3.8L-1.9,-0.1L-0.45,-0.1L1.6,-0.3Q2.15,-0.5 2.45,-0.95L2.75,-1.95'
    }]
  }, {
    name: 'hammerOn',
    bounds: {
      left: -5,
      right: 5.3,
      top: -6,
      bottom: 6.95
    },
    svgPaths: [{
      d: 'M2.7,-6L5.3,-6L5.3,6.95L2.7,6.95L2.7,1.25L-2.4,1.25L-2.4,6.95L-5,6.95L-5,-6L-2.4,-6L-2.4,-0.9L2.7,-0.9L2.7,-6'
    }]
  }, {
    name: 'octaveUp',
    bounds: {
      left: 0,
      right: 25.25,
      top: 0,
      bottom: 14.35
    },
    svgPaths: [{
      d: 'M23.3,5.65L21.5,8.05Q20.25,9.4 18.9,9.5Q17.7,9.25 17.7,8.05Q17.8,6.35 19.4,4.9Q20.95,3.4 22.85,3.3Q23.55,3.25 23.95,3.75L24,3.7Q24,3 24.6,3.1L25.1,3.3L23.55,8.2Q23.45,8.55 23.65,8.55L24.4,8.15Q24.85,7.45 25.2,7.3L25.25,7.4L24.3,8.65Q23.45,9.45 22.7,9.5Q22.3,9.45 22.3,9L22.5,8.35L23.35,5.7L23.3,5.65M22.85,3.55Q21.35,3.7 20.2,5.2Q18.95,6.7 18.9,7.95Q18.85,8.6 19.55,8.75Q20.2,8.65 21,7.95L22.2,6.8L23.1,5.55L23.75,4.25Q23.65,3.55 22.85,3.55M16.85,4.45L16.6,3.8Q16.65,3.25 17.05,3.15Q17.75,3.45 17.7,4.2Q17.6,5.85 16.15,7.65Q14.7,9.5 12.8,9.65Q11.4,9.7 11.35,8.45L11.45,7.95L13.1,4.45Q13.3,4.1 12.95,4.05Q12.65,4.1 12.15,4.5L11.5,5.15L11.25,5.15Q11.3,4.7 12.2,4Q13.1,3.35 13.75,3.25Q14.3,3.3 14.25,3.8L14.1,4.45L12.65,7.8L12.55,8.7Q12.6,9.15 13.25,9.2Q14.6,9.1 15.8,7.65Q16.95,6.25 17.05,5.05L16.85,4.45M8.75,0.8Q10.2,1.6 10.3,3.3Q9.95,5.35 7.5,6L6.7,6.3L6.7,6.35Q8.2,6.65 9.4,7.6Q10.6,8.5 10.65,10.05Q10.55,12.15 8.9,13.25Q7.25,14.35 5.1,14.35Q3.25,14.35 1.7,13.35Q0.1,12.35 0,10.6Q0.05,9.2 1.05,8.5Q2,7.8 3.2,7.4L3.95,7.1Q0.85,6.35 0.55,3.65Q0.65,1.9 2.2,0.95Q3.75,0 5.6,0Q7.3,0 8.75,0.8M5.35,0.4Q4,0.45 3.05,1.15Q2.1,1.8 2.05,3Q2.15,4.35 3.4,5.2Q4.65,6.05 6.05,6.05Q6.9,6.05 7.8,5.25Q8.7,4.5 8.75,3.3Q8.5,0.55 5.35,0.4M2.95,8.2Q1.85,9.1 1.7,10.8Q1.95,13.8 5.25,13.9Q8.65,13.8 8.95,10.75Q8.8,9.05 7.3,8.2Q5.8,7.3 4.7,7.3Q4.05,7.3 2.95,8.2'
    }]
  }, {
    name: 'octaveDown',
    bounds: {
      left: 0,
      right: 24.75,
      top: -14.6,
      bottom: 0
    },
    svgPaths: [{
      d: 'M22.9,-10.6Q21.6,-10.45 20.2,-8.75Q18.85,-7.05 18.75,-5.9Q18.85,-5.05 19.8,-5.05Q21.4,-5.15 22.55,-6.6Q23.65,-8.05 23.75,-9.4Q23.8,-10.4 22.9,-10.6M24.75,-9.5Q24.65,-7.7 23.2,-6.3Q21.7,-4.9 19.7,-4.85Q17.85,-4.85 17.7,-6.45Q17.75,-7.3 18.1,-8.05L19.7,-12.8L19.9,-13.5Q19.9,-13.8 19.45,-13.75Q19.1,-13.7 18.95,-13.95Q19.05,-14.25 19.45,-14.2Q20.25,-14.15 20.9,-14.55L21.1,-14.6L21.25,-14.45L19.15,-8.25L19.2,-8.15L20.9,-10.2Q22,-11.3 23.15,-11.4Q24,-11.35 24.35,-10.75Q24.75,-10.2 24.75,-9.5M16.85,-10.05Q16.6,-10.25 16.6,-10.7Q16.65,-11.25 17.05,-11.35Q17.75,-11.05 17.7,-10.3Q17.6,-8.65 16.15,-6.85Q14.7,-5 12.8,-4.85Q11.4,-4.8 11.35,-6.05L11.45,-6.55L13.1,-10.05Q13.3,-10.4 12.95,-10.45Q12.65,-10.45 12.15,-10L11.5,-9.35L11.25,-9.35Q11.3,-9.8 12.2,-10.5Q13.1,-11.15 13.75,-11.25Q14.3,-11.2 14.25,-10.7L14.1,-10.1L12.65,-6.7L12.55,-5.8Q12.6,-5.35 13.25,-5.3Q14.6,-5.45 15.8,-6.85Q16.95,-8.3 17.05,-9.45L16.85,-10.05M8.75,-11.15Q8.5,-13.95 5.35,-14.1Q4.05,-14.05 3.1,-13.4Q2.1,-12.7 2.05,-11.5Q2.15,-10.05 3.4,-9.2Q4.65,-8.3 6.05,-8.3Q6.9,-8.3 7.8,-9.1Q8.7,-9.85 8.75,-11.15M8.75,-13.7Q10.2,-12.9 10.3,-11.15Q10.25,-10 9.4,-9.35L7.45,-8.35L6.8,-7.95Q8.35,-7.65 9.55,-6.7Q10.75,-5.8 10.8,-4.2Q10.7,-2.15 9,-1.05Q7.35,0 5.2,0Q3.35,0 1.7,-1Q0.1,-1.95 0,-3.75Q0.05,-5.15 1.05,-5.85L3.35,-7L4,-7.15L4,-7.2Q2.6,-7.6 1.6,-8.45Q0.55,-9.3 0.5,-10.75Q0.65,-12.55 2.2,-13.55Q3.8,-14.5 5.65,-14.5Q7.3,-14.55 8.75,-13.7M1.7,-3.55Q2.05,-0.55 5.35,-0.45Q8.8,-0.55 9.1,-3.55Q8.95,-5.3 7.45,-6.15Q5.9,-7.05 4.8,-7.05L3,-6.1Q1.85,-5.2 1.7,-3.55'
    }]
  }, {
    name: 'trill',
    bounds: {
      left: 0,
      right: 20.7,
      top: -6,
      bottom: 9.4
    },
    svgPaths: [{
      d: 'M9.1,-6L9.95,-6L8.2,-1.25L11.1,-1.5L14.25,-1.85Q15.25,-1.8 15.2,-1L14.9,0.45L15,0.45Q16.3,-1.5 18.7,-1.8Q20.5,-1.7 20.7,-0.05Q20.75,1.6 19.2,1.7Q18.1,1.65 18,0.5L18.15,-0.2L18.2,-0.4L17.8,-0.75Q16.5,-0.55 15.5,1.05Q14.5,2.65 14.2,3.6L12.25,8.75L9.4,8.75L9.9,7.4L9.8,7.4Q6.9,9.3 5.75,9.4Q4.25,9.45 3.15,8.8Q2,8.1 2.15,6.6L4.7,0.05L0,0.05L0.55,-1.35L5.2,-1.35L6.2,-4.15L9.1,-6M12,-0.65L7.75,0.05L5.4,6.6Q5.2,7.6 6.1,7.65Q7.1,7.75 10.05,5.9L12.3,-0.05Q12.5,-0.65 12,-0.65'
    }]
  }, {
    name: 'graceUp',
    bounds: {
      left: -4.45,
      right: 9.6,
      top: 0,
      bottom: 20.85
    },
    svgPaths: [{
      d: 'M9.6,11.7L-4.45,20.85L-4.45,18.4L9.6,9.2L9.6,11.7'
    }]
  }, {
    name: 'graceDown',
    bounds: {
      left: -2.75,
      right: 10.7,
      top: -18.45,
      bottom: 0
    },
    svgPaths: [{
      d: 'M10.7,-9.85L-2.75,-18.45L-2.75,-16.55L10.7,-8L10.7,-9.85'
    }]
  }, {
    name: 'tap',
    bounds: {
      left: -5,
      right: 5.2,
      top: 0,
      bottom: 12.95
    },
    svgPaths: [{
      d: 'M5.2,2.2L1.4,2.2L1.4,12.95L-1.2,12.95L-1.2,2.2L-5,2.2L-5,0L5.2,0L5.2,2.2'
    }]
  }, {
    name: 'tremolo3',
    bounds: {
      left: -6,
      right: 6.05,
      top: -9.5,
      bottom: 9.65
    },
    svgPaths: [{
      d: 'M6.05,-6.4L-6,-0.35L-6,-3.45L6.05,-9.5L6.05,-6.4M6.05,-1.4L-6,4.65L-6,1.55L6.05,-4.5L6.05,-1.4M-6,6.55L6.05,0.5L6.05,3.6L-6,9.65L-6,6.55'
    }]
  }, {
    name: 'tremolo1',
    bounds: {
      left: -6,
      right: 6.05,
      top: -4.5,
      bottom: 4.65
    },
    svgPaths: [{
      d: 'M6.05,-1.4L-6,4.65L-6,1.55L6.05,-4.5L6.05,-1.4'
    }]
  }, {
    name: 'tremolo2',
    bounds: {
      left: -6,
      right: 6.05,
      top: -7.05,
      bottom: 7.1
    },
    svgPaths: [{
      d: 'M6.05,-3.95L-6,2.1L-6,-1L6.05,-7.05L6.05,-3.95M-6,4L6.05,-2.05L6.05,1.05L-6,7.1L-6,4'
    }]
  }, {
    name: 'quarterBendAlteration',
    bounds: {
      left: 0,
      right: 17.2,
      top: -5,
      bottom: 5
    },
    svgPaths: [{
      d: 'M0,-0.85L0,-2.5Q0.75,-2.75 1.55,-3.4Q2.45,-4.1 2.75,-4.95L4.25,-4.95L4.25,4.85L2.4,4.85L2.4,-2.25Q1.4,-1.25 0,-0.85M10.2,-5L7.95,5L6.45,5L8.7,-5L10.2,-5M16,-4.9L16,1.25L17.2,1.25L17.2,2.9L16,2.9L16,4.85L14.1,4.85L14.1,2.9L10.2,2.9L10.2,1.25L14.35,-4.9L16,-4.9M14.1,1.25L14.1,-2L11.95,1.25L14.1,1.25'
    }]
  }, {
    name: 'repeatMeasure',
    bounds: {
      left: 0,
      right: 26.8,
      top: -20.45,
      bottom: 0
    },
    svgPaths: [{
      d: 'M26.8,-20.45L7.8,0L0,0L19,-20.45L26.8,-20.45M2.75,-15.45Q3,-17.6 5.35,-17.8Q7.65,-17.6 7.9,-15.45Q7.65,-13.35 5.35,-13.15Q3,-13.35 2.75,-15.45M21.5,-2.5Q19.15,-2.75 18.95,-4.85Q19.15,-6.95 21.5,-7.15Q23.8,-6.95 24.05,-4.85Q23.8,-2.75 21.5,-2.5'
    }]
  }, {
    name: 'breath',
    bounds: {
      left: -4,
      right: 4.1,
      top: 0,
      bottom: 11.95
    },
    svgPaths: [{
      d: 'M1.95,9.35Q0.1,11.35 -2.5,11.95L-2.6,11.3Q-0.9,10.75 0.1,9.35Q1.05,8 0.7,6.35Q0.55,5.45 -0.45,5.45L-1.4,5.45Q-2.6,5.2 -3.3,4.45Q-3.95,3.65 -4,2.8Q-3.9,1.3 -2.65,0.65Q-1.4,0 0,0Q2,0.05 3.05,1.4Q4.05,2.75 4.1,4.5Q3.75,7.35 1.95,9.35'
    }]
  }, {
    name: 'caesura',
    bounds: {
      left: -11.25,
      right: 11.25,
      top: 0,
      bottom: 20.35
    },
    svgPaths: [{
      d: 'M3.5,0L-9.05,20.35L-11.25,20.35L1.3,0L3.5,0M-3.5,20.35L9.05,0L11.25,0L-1.3,20.35L-3.5,20.35'
    }]
  }, {
    name: 'commonTime',
    bounds: {
      left: 0,
      right: 18.55,
      top: -10,
      bottom: 10.45
    },
    svgPaths: [{
      d: 'M5.65,-0.4L5.7,2.85Q5.75,4.7 6.45,6.3Q7.25,8.6 10.65,9.05Q13.7,9.05 15.35,7Q17.05,4.85 17.4,2.35L18.55,2.35Q18.25,5.9 16,8.15Q13.7,10.4 9.8,10.45Q7.65,10.4 5.6,9.4Q3.55,8.35 2.3,6.8Q-0.15,3.75 0,-0.1Q0,-4.35 3.55,-7.35Q4.85,-8.5 6.65,-9.25L10.3,-10Q13,-10 15.45,-8.65Q17.9,-7.3 18.4,-4.7Q18.65,-3.3 17.75,-1.9Q16.85,-0.5 14.8,-0.4Q13.4,-0.4 12.3,-1.15Q11.25,-1.9 11.15,-3.3Q11.45,-5.65 14,-6.4Q14.75,-6.45 15.2,-6.85Q15.2,-7.35 14.8,-7.65Q13.55,-8.55 11.95,-8.65Q10.25,-8.75 9,-8.15Q7.75,-7.55 7.1,-6.75Q5.35,-3.95 5.65,-0.4'
    }]
  }, {
    name: 'cutTime',
    bounds: {
      left: 0,
      right: 18.55,
      top: -17,
      bottom: 17.05
    },
    svgPaths: [{
      d: 'M9.65,-17L9.65,-10.2Q12.8,-10.2 15.35,-8.85Q17.95,-7.5 18.4,-4.9Q18.65,-3.55 17.75,-2.15Q16.85,-0.75 14.8,-0.65Q13.4,-0.65 12.3,-1.4Q11.25,-2.15 11.15,-3.55Q11.45,-5.85 14,-6.65Q14.75,-6.65 15.2,-7.05Q15.25,-7.85 13.95,-8.3L11.95,-8.85L9.65,-8.6L9.65,8.6Q12.2,9.5 14.4,7.55Q16.6,5.6 17.4,2.1L18.55,2.1Q18.25,5.6 15.95,7.9Q13.65,10.15 9.65,10.25L9.65,17.05L8.25,17.05L8.25,10.05Q4.15,9.25 2.05,6.25Q0,3.3 0,-0.35Q0.1,-3.85 2.35,-6.45Q4.6,-9.1 8.25,-9.9L8.25,-17L9.65,-17M5.65,-2.5L5.65,2.8Q5.65,4 6.15,5.6Q6.7,7.15 8.25,8.15L8.25,-8Q5.65,-6.4 5.65,-2.5'
    }]
  }, {
    name: 'turn',
    bounds: {
      left: -13,
      right: 14.3,
      top: 0,
      bottom: 10.6
    },
    svgPaths: [{
      d: 'M14.3,5.4Q14.35,7.6 12.55,9.05Q10.75,10.55 8.35,10.6Q4.05,10.35 0.75,7.7L-4.15,4.4Q-6.05,2.95 -8.3,2.8Q-9.95,3.05 -10.65,3.95Q-11.35,4.85 -11.3,5.85Q-11.3,6.8 -10.75,7.45Q-10.2,8.15 -9.1,8.15Q-8.35,8.05 -7.75,7.55Q-7.15,7.05 -6.05,7Q-4.6,7 -4.05,8.15Q-3.95,9.5 -5.15,10.05L-7.5,10.6Q-10.15,10.4 -11.55,8.75Q-13,7.05 -13,4.75Q-12.75,2.6 -11.1,1.4Q-9.5,0.25 -7.1,0Q-2.75,0.2 0.65,2.9L5.45,6.3L7.35,7.35L9.55,7.8Q11.5,7.55 12.2,6.4Q12.9,5.25 12.65,4.15Q12.3,2.5 10.55,2.45Q9.8,2.55 9.15,3.05L7.35,3.6Q5.65,3.5 5.45,2Q5.55,0.9 6.7,0.45L8.85,0Q11.35,0.1 12.75,1.65Q14.15,3.25 14.3,5.4'
    }]
  }, {
    name: 'mordent',
    bounds: {
      left: -13,
      right: 13.8,
      top: -1.975,
      bottom: 7.874
    },
    svgPaths: [{
      d: 'M4.85,-1.774L9.45,2.045Q10.05,2.698 10.75,2.196L13.8,-1.021L13.8,1.291L8.05,7.523Q7.45,8.176 6.75,7.673L2.15,3.854Q1.55,3.201 0.85,3.703L-2.75,7.523Q-3.35,8.176 -4,7.673L-8.65,3.854Q-9.25,3.151 -9.95,3.703L-13,6.92L-13,4.558L-7.25,-1.573Q-6.65,-2.277 -5.95,-1.774L-1.3,2.045Q-0.75,2.698 -0.05,2.196L3.55,-1.573Q4.15,-2.277 4.85,-1.774'
    }]
  }, {
    name: 'invertedMordent',
    bounds: {
      left: -13,
      right: 12.8,
      top: 0,
      bottom: 16.4
    },
    svgPaths: [{
      d: 'M12.8,7.1L8,12.5Q7.45,13.15 6.7,12.65L2.1,8.85Q1.5,8.15 0.8,8.7L0.5,9L0.5,16.4L-0.85,16.4L-0.85,10.4L-2.8,12.5Q-3.35,13.15 -4.05,12.65L-8.7,8.85Q-9.3,8.15 -9.95,8.7L-13,11.9L-13,9.55L-7.25,3.4Q-6.55,2.9 -5.95,3.55L-0.85,7.75L-0.85,0.25L0.5,0.25L0.5,6.7L3.55,3.4Q4.2,2.9 4.8,3.55L9.5,7.3Q10.25,7.85 10.75,7.2L12.8,4.95L12.8,7.1'
    }]
  }, {
    name: 'pedalDown',
    bounds: {
      left: 0,
      right: 34.9,
      top: 0,
      bottom: 18.4
    },
    svgPaths: [{
      d: 'M22.95,4.75Q20.65,3.65 18.15,3.15L18.25,2.4Q23,3 27.2,5.6Q31.35,8.2 31.45,13Q31.4,14.8 30.1,16.45Q28.8,18.1 26.65,18.25Q23.95,17.95 23.2,15.4L19.25,18.2Q18.35,18.7 17.6,17.95L16.6,16.65L16.05,15.4L12.3,18.25Q11.55,18 11.4,16.9Q10.7,15.15 9.05,14.25L7.05,16.5Q5.55,18.05 4.4,18.25Q3.8,18.35 3.65,17.65Q3.75,16.4 5.25,15.35Q6.75,14.3 7.85,13.75Q9.55,12.8 9.65,11.1L9.2,9.85L7,7.05Q6.6,6.6 6.6,6L7.65,4.05Q8.6,2.65 9.1,0.75Q6.8,0.85 4.45,2Q2.05,3.2 1.9,5.55Q1.9,7.25 3.65,7Q4.95,6.3 5,4.75L5.85,4.8Q6.1,6.7 5.2,8.05Q4.35,9.45 2.85,9.5Q1.35,9.45 0.6,8.5Q-0.15,7.55 0,6.2Q0.2,3.6 3.05,1.8Q5.85,0 9.65,0Q12.25,0.05 14.45,1.45Q16.65,2.8 16.85,5.25Q16.8,7.1 14.75,7.45Q13.25,7.4 12.3,6.4Q11.35,5.35 10.9,4.15L11.7,3.85Q12,4.5 12.65,5L14.1,5.15Q14.95,4.7 14.8,3.9Q14.45,2.45 13.1,1.7Q11.7,0.95 10.2,0.7L8.75,3.8Q8.55,4.8 9.15,5.5L11.35,8.35Q11.8,8.75 11.85,9.5Q11.75,10.45 10.95,11.55L9.5,13.55Q11.3,13.8 12.25,14.35L14.35,15.4L15.8,14.5Q15.55,12.55 16.45,10.5Q17.35,8.45 19.7,8.1Q21.5,8.3 21.65,10Q21.35,11.4 20.2,12.35Q19.1,13.35 17.85,14.05L18.55,15.45Q19.05,16.1 19.9,16.25Q21.75,15.95 22.95,14.6Q22.4,10.1 26.8,8.1Q25.25,5.85 22.95,4.75M25.3,11.2Q24.95,12.55 24.95,13.45Q24.85,14.8 25.55,16Q26.25,17.2 27.25,17.05Q28.75,16.65 28.7,13.75Q28.6,10.7 27.25,8.9Q25.65,9.85 25.3,11.2M34.9,16.75Q34.75,18.1 33.25,18.25Q31.8,18.1 31.65,16.75Q31.8,15.4 33.25,15.3Q34.75,15.4 34.9,16.75M17.6,11Q17.4,12.35 17.75,13.3Q20.35,11.55 20.1,10.5Q19.9,9.5 19.15,9.5Q17.8,9.65 17.6,11'
    }]
  }, {
    name: 'pedalUp',
    bounds: {
      left: 0,
      right: 16,
      top: 0,
      bottom: 18.4
    },
    svgPaths: [{
      d: 'M10.65,7.65Q10.85,6.15 12.5,6.05Q14.1,6.25 14.25,7.75Q14.15,8.95 12.95,9.3L11.4,9.35Q10.25,9.65 10.45,10.7Q10.95,11.15 11.7,11.1Q12.4,10.9 12.95,10.3Q13.45,9.7 14.4,9.75Q15.95,10 16,11.4Q15.95,12.95 14.4,13.15Q13.45,13.2 12.95,12.6Q12.4,12 11.7,11.8Q10.95,11.8 10.45,12.15Q10.25,13.2 11.4,13.55L12.95,13.55Q14.15,13.95 14.25,15.15Q14.1,16.6 12.5,16.85Q10.85,16.7 10.65,15.3L10.55,14.1Q10.35,13.45 9.55,13.4Q8.1,13.4 8.3,14.6Q8.45,15.2 8.95,15.55Q9.45,15.9 9.6,16.65Q9.85,18.4 7.75,18.4Q5.9,18.4 6.15,16.65Q6.35,15.9 6.85,15.55Q7.4,15.15 7.55,14.55Q7.7,13.75 6.85,13.3Q5.65,13.2 5.45,14.05Q5.25,14.9 5.35,15.25Q5.2,16.7 3.55,16.85Q1.85,16.6 1.7,15.15Q1.8,13.95 3.15,13.55L4.6,13.5Q5.75,13.2 5.55,12.25Q5.1,11.8 4.3,11.8Q3.6,12 3.05,12.6Q2.55,13.2 1.65,13.1Q0.1,12.95 0,11.4Q0.1,10 1.65,9.75Q2.55,9.7 3.05,10.3Q3.6,10.9 4.3,11.1Q5.1,11.15 5.55,10.7Q5.75,9.65 4.6,9.35L3.15,9.25Q1.8,8.95 1.7,7.75Q1.85,6.25 3.55,6.05Q5.2,6.15 5.35,7.65Q5.25,7.95 5.45,8.8Q5.65,9.7 6.8,9.5Q7.7,9.1 7.55,8.3L6.8,7.4Q6.25,7.05 6.05,6.3Q5.85,4.5 7.9,4.4Q9.95,4.5 9.75,6.3Q9.55,7.05 9,7.4Q8.45,7.75 8.25,8.3Q8.15,9.1 9,9.5Q10.35,9.7 10.55,8.85L10.65,7.65M7.85,10.25Q6.8,10.35 6.7,11.4Q6.7,12.5 7.85,12.6Q9.1,12.6 9.3,11.4Q9.15,10.35 7.85,10.25'
    }]
  }, {
    name: 'tenorVoiceClef',
    bounds: {
      left: 0,
      right: 24.5,
      top: -43,
      bottom: 37.9
    },
    svgPaths: [{
      d: 'M16.8,-41.3Q17.85,-39.35 18.65,-36.5Q19.45,-33.75 19.55,-31.35Q19.3,-22.85 12.95,-16.4L14.25,-9.7L15.8,-9.85Q19.7,-9.75 22.1,-6.9Q24.45,-4.05 24.5,-0.1Q24.45,3.15 22.7,5.45Q20.95,7.8 18.05,9.2L19.7,17.3L19.8,19.15Q19.65,23.4 16.6,25.2L15.55,25.7L15.35,25.8L16.15,26.2L16.35,26.35Q17.6,27.35 17.55,28.9Q17.4,29.95 16.65,30.6L14.95,31.65Q16.15,33.05 16.3,34.45Q16.25,36.35 14.75,37.1Q13.25,37.9 11.6,37.9Q10.15,37.9 8.7,37.05Q7.25,36.2 7.15,34.5Q7.25,33.2 8.35,32.35Q9.45,31.55 10.6,31.15Q9.55,29.95 9.5,28.45Q9.65,27 10.8,26.25L9.25,25.7L8.1,25.05Q5.85,23.5 5.45,20.8Q5.35,18.9 6.35,17.4Q7.4,15.95 9.2,15.65Q10.8,15.5 12,16.65Q13.2,17.75 13.3,19.45Q13.25,21.75 11.75,22.6Q10.25,23.5 9.2,23.25Q9.4,24.25 10.65,24.7L12.85,25Q18.35,24.15 18.45,19.05Q18.5,17.7 18.15,16.15L16.75,9.75L13.15,10.3Q7.85,10.15 4.2,6.4Q0.55,2.65 0,-3.15Q-0.2,-8.95 3.25,-13.5Q6.7,-18 10.6,-21.7Q9.45,-26.05 9.4,-30.55Q9.4,-33.6 10.75,-37.6Q12.1,-41.65 14.9,-43Q15.75,-43.2 16.8,-41.3M17.25,-36.3Q16.7,-37.05 15.65,-37.1Q13.2,-36.35 12.15,-33.25Q11.1,-30.2 11.05,-27.75Q11.1,-25.2 11.75,-22.8Q14.2,-24.85 16.05,-27.95Q17.85,-31.1 17.8,-34.55Q17.8,-35.55 17.25,-36.3M2.95,-0.95Q3.1,3.8 6.25,6.4Q9.45,9.05 13.95,8.9L16.55,8.4L13.95,-4.9Q12.2,-4.35 11.05,-2.85Q9.85,-1.35 9.85,0.55Q10.1,3.7 12.95,4.9L13.25,5.3L12.7,5.7Q10.4,4.85 8.95,2.9Q7.5,0.9 7.5,-1.65Q7.6,-4.2 9.2,-6.35Q10.8,-8.45 13.1,-9.35L11.9,-15.4Q8.55,-12.6 5.85,-9.05Q3.15,-5.55 2.95,-0.95M15.15,-5.05L17.8,8Q21.7,5.85 21.75,1.3Q21.5,-1.55 19.7,-3.25Q17.9,-5 15.15,-5.05M15.45,27Q14.95,26.35 14.15,26.2L14,26.2L13.9,26.2L12.95,26.35L12.85,26.35Q12.15,26.7 11.9,27.6Q12,28.8 12.85,29.65L14.4,31.2Q15.7,30.35 16,28.75Q16.1,27.8 15.45,27M11,31.65Q9,32.6 8.85,34.75Q8.9,35.85 9.75,36.45Q10.65,37.05 11.6,37.1Q12.5,37.1 13.2,36.7Q13.95,36.25 13.8,35.45Q13.55,34.3 12.65,33.35L11,31.65'
    }]
  }, {
    name: 'coda',
    bounds: {
      left: 0,
      right: 26.8,
      top: 0,
      bottom: 28.5
    },
    svgPaths: [{
      d: 'M14.2,4.95L14.2,13.6L18.3,13.6Q18.45,11.65 17.8,8.4Q17.4,7.1 16.5,6.05Q15.6,4.95 14.2,4.95M22.5,10.35Q23.2,12.15 23.3,13.6L26.8,13.6L26.8,15.35L23.3,15.35Q23.2,16.65 22.5,18.45Q21.85,20.25 20.95,21.45Q19.15,24.15 14.2,25.3L14.2,28.5L12.15,28.5L12.15,25.3Q7.5,24.15 5.7,21.45Q4.7,20.25 4.1,18.45Q3.4,16.65 3.35,15.35L0,15.35L0,13.6L3.35,13.6Q3.4,12.15 4.1,10.35Q4.7,8.45 5.7,7.3Q7.5,4.5 12.15,3.3L12.15,0.15L14.2,0.15L14.2,3.3Q19.15,4.5 20.95,7.3Q21.85,8.45 22.5,10.35M8.8,8.4Q8.2,11.65 8.25,13.6L12.15,13.6L12.15,4.95Q10.8,4.95 10,6.05Q9.1,7.1 8.8,8.4M8.25,15.35Q8.2,17.15 8.8,20.3Q9.1,21.65 10,22.7Q10.8,23.7 12.15,23.7L12.15,15.35L8.25,15.35M14.2,15.35L14.2,23.7Q15.6,23.7 16.5,22.7Q17.4,21.65 17.8,20.3Q18.45,17.15 18.3,15.35L14.2,15.35'
    }]
  }, {
    name: 'segno',
    bounds: {
      left: 0,
      right: 22.7,
      top: 0,
      bottom: 27.2
    },
    svgPaths: [{
      d: 'M22.7,10.1Q22.5,11.9 20.45,12Q18.4,11.9 18.25,10.1Q18.4,8.3 20.45,8.15Q22.5,8.3 22.7,10.1M18.9,0.3L21.4,0.3L12.85,12Q15.7,13.4 18.25,15.4Q20.8,17.45 20.95,20.65Q20.9,23.1 19.1,25.1Q17.35,27.1 14.65,27.2Q12.8,27.2 11.25,26.35Q9.75,25.45 9.35,23.75Q9.3,22.75 10,21.95Q10.7,21.2 11.8,21.25Q13.6,21.1 14.15,23.3Q14.4,24.45 14.9,24.75L16,25Q17.95,24.8 18.25,22.25Q18,19.85 15.2,18.4Q12.45,16.95 10.15,15.95L2.45,26.9L0,26.9L8.3,15.2Q5.45,13.8 2.9,11.75Q0.35,9.75 0.2,6.5Q0.25,4.1 2.05,2.1Q3.85,0.15 6.55,0Q8.35,0 9.9,0.85Q11.45,1.75 11.8,3.45Q11.9,4.5 11.15,5.25Q10.45,6 9.35,5.95Q7.5,6.15 6.95,3.9Q6.75,2.75 6.25,2.45L5.2,2.2Q3.2,2.4 2.9,4.95Q3.15,7.4 5.9,8.8L11,11.25L18.9,0.3M2.4,15.2Q4.45,15.35 4.65,17.1Q4.45,18.9 2.4,19.05Q0.35,18.9 0.2,17.1Q0.35,15.35 2.4,15.2'
    }]
  }, {
    name: 'arpeggio',
    bounds: {
      left: 0,
      right: 5.25,
      top: -10.05,
      bottom: 0
    },
    svgPaths: [{
      d: 'M2.95,-10L4.35,-8.5Q5.05,-7.65 5.25,-6.7Q5.05,-5.25 3.6,-4.15Q2.3,-3.2 2.05,-1.85Q2.15,-1.05 2.95,0L2.25,0L0.9,-1.5Q0.2,-2.35 0,-3.3Q0.2,-4.8 1.65,-5.8Q2.95,-6.8 3.2,-8.1Q3,-9.25 2.25,-10L2.95,-10'
    }]
  }, {
    name: 'arpeggioUp',
    bounds: {
      left: -2.65,
      right: 7.95,
      top: -16.55,
      bottom: 0
    },
    svgPaths: [{
      d: 'M1.6,-5.75L-2.65,-3.6L2.55,-16.55L7.95,-3.6L4.7,-5.25L3.6,-4.15Q2.3,-3.2 2.05,-1.85Q2.15,-1.05 2.95,0L2.25,0L0.9,-1.5Q0.2,-2.35 0,-3.3Q0.2,-4.75 1.6,-5.75'
    }]
  }, {
    name: 'arpeggioDown',
    bounds: {
      left: -2.65,
      right: 7.95,
      top: -10.05,
      bottom: 6.65
    },
    svgPaths: [{
      d: 'M2.25,-10L2.95,-10L4.35,-8.5Q5.05,-7.65 5.25,-6.7Q5.05,-5.25 3.6,-4.15L3.35,-3.95L7.95,-6.3L2.55,6.65L-2.65,-6.3L0.55,-4.65L1.65,-5.8Q2.95,-6.8 3.2,-8.1Q3,-9.25 2.25,-10'
    }]
  }, {
    name: 'twoOctavesUp',
    bounds: {
      left: 0,
      right: 32.2,
      top: -14.1,
      bottom: 0.05
    },
    svgPaths: [{
      d: 'M16.25,-13.95L16.3,-13.85L16.25,-12.9L16.25,-12.2L16.15,-12.15L12.15,-12.3L10.3,-12.25L10.25,-8.25L11.6,-9.05L12.95,-9.25L14.95,-8.75Q15.9,-8.3 16.35,-7.35Q16.85,-6.45 16.85,-5.35Q16.85,-3.65 15.7,-2.2Q14,0.05 11.05,0.05L9.95,-0.05Q9.5,-0.2 8.95,-0.45L8.6,-1.45L7.95,-3.05L8.45,-3.3L9.55,-1.55Q9.75,-1.35 10.45,-1.1L11.95,-0.8Q12.9,-0.8 13.65,-1.25Q14.4,-1.65 14.8,-2.5Q15.25,-3.3 15.25,-4.5Q15.25,-6.2 14.3,-7.05Q13.35,-7.85 12.1,-7.85L10.7,-7.55L9.6,-6.65L9.2,-6.75L9.35,-9.15L9.35,-10.05L9.35,-11.8L9.3,-13.35L9.3,-13.85L9.4,-13.95L12.75,-13.8L16.25,-13.95M2.95,-12.45L2.5,-12.3L0.25,-11.3L0.1,-11.35L0,-12.15L0.1,-12.25L2.3,-13.05L4.6,-14.1L4.85,-14L4.75,-8.85L4.75,-5.25L4.85,-1.95Q4.85,-1.3 5,-1.15Q5.15,-0.95 5.4,-0.85L7.1,-0.75L7.1,-0.2L4.05,-0.3L0.8,-0.2L0.8,-0.75L2.4,-0.9L2.75,-1.05L2.9,-1.35L3.05,-3.1L3.15,-5.3L3.15,-9.15L3.1,-12.1L3.05,-12.45L2.95,-12.45M19.8,-11.6L19.75,-11.2L19.4,-9.4L20.4,-10.6Q21.05,-11.3 21.8,-11.65L22.6,-11.9L22.85,-11.85L22.9,-11.6L22.85,-11L22.45,-9.4L23.75,-10.8Q24.4,-11.35 25.1,-11.7L25.9,-11.9L26.15,-11.85L26.2,-11.6L26.1,-11.05L25.6,-8.95L25.15,-6.9L25.2,-6.7L25.3,-6.65L25.5,-6.7L25.85,-6.85L26.35,-7.2L26.45,-6.95L25.65,-6.35L24.8,-5.85L24.5,-5.8L24.25,-5.95L24.15,-6.25L24.15,-6.6L24.3,-7.2L24.75,-8.9L25.1,-10.35L25.25,-10.85L25.2,-11L25.05,-11.05L24.5,-10.85L23.6,-10.25L22.8,-9.3L22.25,-8.15L21.65,-6L20.95,-5.8L20.9,-5.9L21.4,-8.15L21.85,-10.1L21.9,-10.8L21.85,-11L21.75,-11.05L21.35,-10.95L20.5,-10.3L19.7,-9.3Q19.35,-8.75 19.15,-8L18.7,-6L17.95,-5.85L17.85,-5.95L18.2,-7.2L18.5,-8.7L18.85,-10.25L18.9,-10.75L18.85,-11L18.7,-11.05L18.45,-11L17.75,-10.6L17.65,-10.85L18.45,-11.35Q18.9,-11.7 19.25,-11.85L19.55,-11.9L19.75,-11.85L19.8,-11.6M29.8,-11.85L30.55,-12L31.05,-11.95L31.7,-11.8L32.05,-12L32.2,-11.9L31.5,-9.3L31.2,-8.2L30.95,-7.1L30.95,-6.95L31,-6.75L31.1,-6.7L31.35,-6.8L32.05,-7.25L32.1,-7L31.25,-6.25L30.6,-5.85L30.4,-5.8L30.25,-5.95L30.15,-6.2L30.55,-8.4L30.5,-8.45L29.75,-7.45L28.75,-6.45L27.8,-5.85L27.6,-5.8Q27.4,-5.8 27.3,-5.95Q27.15,-6.25 27.15,-6.85Q27.15,-7.65 27.45,-8.75Q27.7,-9.75 28.1,-10.6L28.7,-11.25L29.8,-11.85M29.25,-11.2L28.95,-10.75L28.4,-9.3Q28.05,-8.05 28.05,-7.05L28.05,-6.8L28.15,-6.7L28.25,-6.65L28.65,-6.8L29.65,-7.75L30.55,-9.15L31.15,-11.15L30.65,-11.3L30.05,-11.35L29.25,-11.2'
    }]
  }, {
    name: 'invertedTurn',
    bounds: {
      left: -13,
      right: 14.3,
      top: -0.2,
      bottom: 15.05
    },
    svgPaths: [{
      d: 'M12.55,11.45Q10.75,12.95 8.35,13Q5.6,12.85 1.15,9.85L1.15,15.05L-0.15,15.05L-0.15,9.2L-4.15,6.8Q-6.05,5.35 -8.3,5.2Q-9.95,5.45 -10.65,6.35Q-11.35,7.25 -11.3,8.25Q-11.3,9.2 -10.75,9.85Q-10.2,10.55 -9.1,10.55Q-8.35,10.45 -7.75,9.95Q-7.15,9.45 -6.05,9.4Q-4.6,9.4 -4.05,10.55Q-3.95,11.9 -5.15,12.45L-7.5,13Q-10.15,12.8 -11.55,11.15Q-13,9.45 -13,7.15Q-12.75,5 -11.1,3.8Q-9.5,2.65 -7.1,2.4Q-3.95,2.6 -0.15,4.95L-0.15,-0.2L1.15,-0.2L1.15,5.6L5.45,8.7L7.35,9.75L9.55,10.2Q11.5,9.95 12.2,8.8Q12.9,7.65 12.65,6.55Q12.3,4.9 10.55,4.85Q9.8,4.95 9.15,5.45L7.35,6Q5.65,5.9 5.45,4.4Q5.55,3.3 6.7,2.85L8.85,2.4Q11.35,2.5 12.75,4.05Q14.15,5.65 14.3,7.8Q14.35,10 12.55,11.45'
    }]
  }, {
    name: 'percussion2Clef',
    bounds: {
      left: 0,
      right: 14,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M5,-10L5,10L0,10L0,-10L5,-10M14,-10L14,10L9,10L9,-10L14,-10'
    }]
  }, {
    name: 'buzz',
    bounds: {
      left: -6.15,
      right: 6.8,
      top: -6.5,
      bottom: 6.45
    },
    svgPaths: [{
      d: 'M6.8,-4.35L-1.85,4.2L6.8,4.2L6.8,6.45L-6.15,6.45L-6.15,4.2L2.4,-4.25L-5.9,-4.25L-5.9,-6.5L6.8,-6.5L6.8,-4.35'
    }]
  }, {
    name: 'crossCircleNoteHead',
    bounds: {
      left: -0.15,
      right: 18.15,
      top: -8.75,
      bottom: 8.85
    },
    svgPaths: [{
      d: 'M4.05,-5.95L9,-1.05L13.95,-6L15.05,-4.9L10.1,0L14.95,4.9L13.85,6L9,1.1L4.05,5.95L3.05,4.85L7.9,0L3,-4.85L4.05,-5.95'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '1.75',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M9,-7.9Q12.45,-7.9 14.85,-5.6Q17.3,-3.25 17.3,0.05Q17.3,3.35 14.85,5.65Q12.45,8 9,8Q5.55,8 3.1,5.65Q0.7,3.35 0.7,0.05Q0.7,-3.25 3.1,-5.6Q5.55,-7.9 9,-7.9'
    }]
  }, {
    name: 'namedCNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedDNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedENoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedFNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedGNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedANoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'namedBNoteHead',
    bounds: {
      left: -1.25,
      right: 16.25,
      top: -8.8,
      bottom: 9.55
    },
    svgPaths: [{
      d: 'M6.35,-6.3Q5.7,-6.3 5.35,-5.45Q5,-4.65 5,-3L5.45,0.45L3,2.1L1.3,3.4L0.95,3.8Q0.8,4.25 0.8,5.15Q0.8,6.5 1.7,6.5L4.1,5.05Q6.15,3.65 6.4,3.65L7.65,5.8Q8.6,7.35 9.25,7.45L9.75,7.3Q10.45,6.65 10.45,5.7Q10.45,5 9.75,3.9L8.6,2.2L11.2,0.3L11.9,-0.1L13.9,-1.5Q14.3,-1.75 14.6,-2.55Q15,-3.3 15,-3.8Q15,-4.8 14.2,-4.8Q13.85,-4.8 10.8,-2.95L7.2,-0.6Q6.8,-1.6 6.8,-4.9L6.8,-5.75Q6.8,-6.3 6.35,-6.3'
    }, {
      fill: 'none',
      'stroke-width': '0.5',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '0',
      d: 'M0,0'
    }, {
      fill: 'none',
      'stroke-width': '2',
      'stroke-linecap': 'round',
      'stroke-linejoin': 'round',
      'stroke-miterlimit': '20',
      d: 'M15.2,-2.05Q14.85,1.25 13.2,3.75L12.75,4.4L12.15,5.15Q9.6,8.15 6.75,8.5Q3.9,8.85 1.55,7.05Q-0.8,5.25 -0.05,1.55Q0.7,-2.15 2.9,-4.65Q5.15,-7.15 8.2,-7.65Q11.2,-8.15 13.4,-6.75Q15.55,-5.35 15.2,-2.05'
    }]
  }, {
    name: 'leftParenthesis',
    bounds: {
      left: 0,
      right: 4.75,
      top: -9.35,
      bottom: 9.4
    },
    svgPaths: [{
      d: 'M2.25,-3.65Q1.8,-1.8 1.8,0.05Q1.8,4.75 4.75,9.4L3.5,9.4Q2.05,7.6 1,5.15Q0,2.65 0,0.05Q0,-2.3 0.75,-4.4Q1.65,-6.9 3.5,-9.35L4.75,-9.35L3.15,-6.45Q2.55,-5.1 2.25,-3.65'
    }]
  }, {
    name: 'rightParenthesis',
    bounds: {
      left: 0,
      right: 4.8,
      top: -9.35,
      bottom: 9.4
    },
    svgPaths: [{
      d: 'M0,-9.35L1.25,-9.35Q3.15,-6.9 4.05,-4.4Q4.8,-2.3 4.8,0.05Q4.8,2.65 3.75,5.15Q2.75,7.6 1.25,9.4L0,9.4Q3,4.75 3,0.05L2.55,-3.6L1.6,-6.4L0,-9.35'
    }]
  }, {
    name: 'f8Clef',
    bounds: {
      left: 0,
      right: 27.8,
      top: -10,
      bottom: 35.1
    },
    svgPaths: [{
      d: 'M6.8,-8.15L4.75,-7Q4,-6.2 3.55,-5.2Q3.1,-4.2 4.5,-3.9L6.1,-4.25Q7.75,-4.35 8.8,-3.4Q9.9,-2.4 9.95,-1Q9.9,0.4 8.85,1.5Q7.8,2.6 5.9,2.65Q3.9,2.65 2.5,1.45Q1.15,0.3 1.05,-1.55Q1,-3.6 2.15,-5.45Q3.3,-7.25 5.25,-8.35Q6.35,-9 8,-9.5L10.9,-10Q14.7,-10.25 18.25,-7.5Q20.05,-6.05 20.85,-4.5Q21.6,-2.95 21.85,-0.5Q22.1,3.2 19.8,7.2Q17.55,11.15 14.5,13.65L7.85,18.05L0.25,22L0,21.15L7.85,15.65Q11.1,13.05 13.65,8.75Q14.8,6.75 15.5,4.25Q16.25,1.8 16.25,-0.35Q16.4,-3.55 15.3,-5.75Q14.55,-7.15 13.1,-8Q11.55,-8.9 9.55,-8.75L6.8,-8.15M25.65,-6.85Q27.7,-6.6 27.8,-4.7Q27.7,-2.75 25.65,-2.5Q23.5,-2.75 23.45,-4.7Q23.5,-6.6 25.65,-6.85M27.8,4.05Q27.7,6 25.65,6.25Q23.5,6 23.45,4.05Q23.5,2.15 25.65,1.9Q27.7,2.15 27.8,4.05M9.25,22.6L10.25,22.4Q11.15,22.2 12.55,22.75Q13.95,23.3 14.35,24.8L14.55,26.1Q14.4,27.15 13.65,27.8L11.95,28.85Q13.15,30.25 13.3,31.65Q13.25,33.55 11.75,34.3L9.6,35.05L8.6,35.1Q7.15,35.1 5.7,34.25Q4.3,33.45 4.15,31.85L4.15,31.7Q4.25,30.4 5.35,29.55Q6.45,28.75 7.6,28.35Q6.55,27.15 6.5,25.65Q6.65,24.2 7.8,23.45L7.75,23.45L8.6,22.85L9.25,22.6M11.15,23.4L11,23.4L10.7,23.4L10.2,23.4L9.55,23.65Q9.15,23.9 8.9,24.8Q9,26 9.85,26.85L11.4,28.4Q12.7,27.55 13,25.95L13.05,25.45L12.9,24.8Q12.75,24.2 12.05,23.85L11.15,23.4M10.8,32.65Q10.55,31.5 9.65,30.55L8,28.85Q6.05,29.8 5.85,31.85L5.85,31.95Q5.9,33.05 6.75,33.65Q7.65,34.25 8.6,34.3L9.6,34.15L10.2,33.9Q10.95,33.45 10.8,32.65'
    }]
  }, {
    name: 'shortFlagDown',
    bounds: {
      left: 0,
      right: 10.9,
      top: 0,
      bottom: 21.35
    },
    svgPaths: [{
      d: 'M9.05,7.45L9.75,5.3L10,3.35Q10.15,1.65 9.85,0.45L10.2,0Q10.85,1.45 10.9,3.6Q10.95,5.6 10.25,8.05Q9.5,10.5 7.8,12.7Q6,14.9 3.1,17.35Q1.85,18.6 1.5,19.75L1.05,21.35L0,21.35L0,14.2L1.05,14.2L1.05,15Q3.75,13.55 5.75,11.9Q7.75,10.3 9.05,7.45'
    }]
  }, {
    name: 'shortFlagUp',
    bounds: {
      left: 0,
      right: 10.9,
      top: 0,
      bottom: 21.75
    },
    svgPaths: [{
      d: 'M1.05,0Q1.1,1.1 1.45,2.45Q1.85,3.8 3.1,5Q6.15,7.6 8.1,10Q10.75,13.15 10.9,17.2Q10.9,19.55 10.2,21.75L9.7,21.1L9.85,19.35L9.85,17.6Q9.55,14.55 7.35,12.15Q4.75,9.25 1.05,7.35L1.05,8.15L0,8.15L0,0L1.05,0'
    }]
  }, {
    name: 'crossNoteHead',
    bounds: {
      left: 0,
      right: 12.05,
      top: -6,
      bottom: 6
    },
    svgPaths: [{
      d: 'M6,-1.05L10.95,-6L12.05,-4.9L7.1,0L11.95,4.9L10.85,6L6,1.1L1.05,5.95L0.05,4.85L4.9,0L0,-4.85L1.05,-5.95L6,-1.05'
    }]
  }, {
    name: 'shake',
    bounds: {
      left: 0,
      right: 26.8,
      top: -5,
      bottom: 4.8
    },
    svgPaths: [{
      d: 'M17.85,-4.8L22.45,-1Q23.05,-0.35 23.75,-0.85L26.8,-4.05L26.8,-1.75L21.05,4.45Q20.45,5.1 19.75,4.6L15.15,0.8Q14.55,0.15 13.85,0.65L10.25,4.45Q9.65,5.1 9,4.6L4.35,0.8Q3.75,0.1 3.05,0.65L0,3.85L0,1.5L5.75,-4.6Q6.35,-5.3 7.05,-4.8L11.7,-1Q12.25,-0.35 12.95,-0.85L16.55,-4.6Q17.15,-5.3 17.85,-4.8'
    }]
  }, {
    name: 'measureRepeat',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0,10L17.14,-10L23.35,-10L6.2,10L0,10M3.67,-4.69Q3.67,-6.98 5.96,-6.98Q8.24,-6.98 8.24,-4.69Q8.24,-2.41 5.96,-2.41Q3.67,-2.41 3.67,-4.69M15.76,4.69Q15.76,2.41 18.04,2.41Q20.33,2.41 20.33,4.69Q20.33,6.98 18.04,6.98Q15.76,6.98 15.76,4.69'
    }]
  }, {
    name: 'scoop',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,5.0775169Q7.707703275,4.809784475000001 13.416165,1.1625042Q19.983455999999997,-3.6921621250000007 22.15731,-11.625713Q24.272540999999997,-11.799181275 23.723043,-9.4144189Q19.264120400000003,3.2424174249999993 6.7027564,7.9250343Q3.9189615825000006,8.8722898 0.99414587,9.0346622Q-0.45279885249999996,7.993417775000001 0.18496889,6.0314828Q0.2840982475,5.318978625000001 0.8946198,5.0775169Z'
    }]
  }, {
    name: 'plop',
    bounds: {
      left: 0.055,
      right: 23.95,
      top: -16.86,
      bottom: 4.05
    },
    svgPaths: [{
      d: 'M0.8946198,-5.0775169Q7.707703274999998,-4.809784475000001 13.416165,-1.1625041999999999Q19.983455999999997,3.6921621250000003 22.15731,11.625713000000001Q24.272540999999997,11.799181275000002 23.723043,9.414418900000001Q19.264120400000003,-3.242417425 6.7027564,-7.9250343Q3.9189615825000006,-8.8722898 0.99414587,-9.0346622Q-0.45279885249999996,-7.993417774999999 0.18496888999999994,-6.031482799999999Q0.2840982474999998,-5.318978625 0.8946198,-5.077516899999999z'
    }]
  }, {
    name: 'quickFall',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,-5.0775169Q7.707703274999998,-4.809784475000001 13.416165,-1.1625041999999999Q19.983455999999997,3.6921621250000003 22.15731,11.625713000000001Q24.272540999999997,11.799181275000002 23.723043,9.414418900000001Q19.264120400000003,-3.242417425 6.7027564,-7.9250343Q3.9189615825000006,-8.8722898 0.99414587,-9.0346622Q-0.45279885249999996,-7.993417774999999 0.18496888999999994,-6.031482799999999Q0.2840982474999998,-5.318978625 0.8946198,-5.077516899999999z'
    }]
  }, {
    name: 'doit',
    bounds: {
      left: 0,
      right: 23.35,
      top: -10,
      bottom: 10
    },
    svgPaths: [{
      d: 'M0.8946198,5.0775169Q7.707703275,4.809784475000001 13.416165,1.1625042Q19.983455999999997,-3.6921621250000007 22.15731,-11.625713Q24.272540999999997,-11.799181275 23.723043,-9.4144189Q19.264120400000003,3.2424174249999993 6.7027564,7.9250343Q3.9189615825000006,8.8722898 0.99414587,9.0346622Q-0.45279885249999996,7.993417775000001 0.18496889,6.0314828Q0.2840982475,5.318978625000001 0.8946198,5.0775169Z'
    }]
  }, {
    name: 'fall1',
    bounds: {
      left: 0,
      right: 26.8,
      top: -5,
      bottom: 4.8
    },
    svgPaths: [{
      d: 'M17.85,-4.8L22.45,-1Q23.05,-0.35 23.75,-0.85L26.8,-4.05L26.8,-1.75L21.05,4.45Q20.45,5.1 19.75,4.6L15.15,0.8Q14.55,0.15 13.85,0.65L10.25,4.45Q9.65,5.1 9,4.6L4.35,0.8Q3.75,0.1 3.05,0.65L0,3.85L0,1.5L5.75,-4.6Q6.35,-5.3 7.05,-4.8L11.7,-1Q12.25,-0.35 12.95,-0.85L16.55,-4.6Q17.15,-5.3 17.85,-4.8'
    }]
  }, {
    name: 'rip1',
    bounds: {
      left: 0,
      right: 26.8,
      top: -5,
      bottom: 4.8
    },
    svgPaths: [{
      d: 'M17.85,-4.8L22.45,-1Q23.05,-0.35 23.75,-0.85L26.8,-4.05L26.8,-1.75L21.05,4.45Q20.45,5.1 19.75,4.6L15.15,0.8Q14.55,0.15 13.85,0.65L10.25,4.45Q9.65,5.1 9,4.6L4.35,0.8Q3.75,0.1 3.05,0.65L0,3.85L0,1.5L5.75,-4.6Q6.35,-5.3 7.05,-4.8L11.7,-1Q12.25,-0.35 12.95,-0.85L16.55,-4.6Q17.15,-5.3 17.85,-4.8'
    }]
  }]
};

/***/ }),

/***/ 3765:
/*!******************************************************!*\
  !*** ./src/app/note-editor/glyph/foundry-metrics.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FoundryMetrics)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);

class FoundryMetrics {
  constructor() {
    this.sizeUnit = NaN;
    this.lineSpacing = NaN;
    this.stemThickness = NaN;
    this.graceSlashFlags = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.35, 1.25, 1, 1);
    this.graceSlashBeams = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.35, 1, 1.2, 1.2);
  }
  scale(scale) {
    const metrics = new FoundryMetrics();
    metrics.sizeUnit = this.sizeUnit * scale;
    metrics.lineSpacing = this.lineSpacing;
    metrics.stemThickness = this.stemThickness;
    return metrics;
  }
}

/***/ }),

/***/ 22161:
/*!************************************************************************!*\
  !*** ./src/app/note-editor/glyph/glyph-js-sprite-factory-generator.ts ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphJSSpriteFactoryGenerator)
/* harmony export */ });
/* harmony import */ var _glyph_js_sprite_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./glyph-js-sprite-factory */ 76802);

class GlyphJSSpriteFactoryGenerator {
  constructor(glyphDefs, noteEditorService) {
    this._glyphDefs = glyphDefs;
    this._glyphDefByName = {};
    this.noteEditorService = noteEditorService;
    for (let i = 0; i < this._glyphDefs.length; i++) {
      const glyphDef = this._glyphDefs[i];
      this._glyphDefByName[glyphDef.name] = glyphDef;
    }
  }
  createGlyphSpriteFactory(glyphName) {
    return new _glyph_js_sprite_factory__WEBPACK_IMPORTED_MODULE_0__["default"](this._glyphDefByName[glyphName], this.noteEditorService);
  }
}

/***/ }),

/***/ 76802:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/glyph/glyph-js-sprite-factory.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphJSSpriteFactory)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _js_glyph_sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./js-glyph-sprite */ 68561);




class GlyphJSSpriteFactory {
  static get CAPS_TABLE() {
    return [_display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.ROUND, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.SQUARE];
  }
  static get JOINT_TABLE() {
    return [_display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.ROUND, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.BEVEL, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER];
  }
  constructor(glyphDef, noteEditorService) {
    this._glyphDef = null;
    this._glyphDefBounds = null;
    this._definitionName = null;
    this._definition = null;
    this._glyphDef = glyphDef;
    const bounds = this._glyphDef.bounds;
    this.noteEditorService = noteEditorService;
    this._glyphDefBounds = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_2__["default"](bounds.left, bounds.top, bounds.right - bounds.left, bounds.bottom - bounds.top);
  }
  createGlyphSprite() {
    if (!this._definitionName) {
      this._definition = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
      this.drawGlyph(this._definition.graphics);
      this._definitionName = '_nf_glyph_' + this._glyphDef.name;
      this._definition.defineAs(this._definitionName);
    }
    const jSGlyphSprite = new _js_glyph_sprite__WEBPACK_IMPORTED_MODULE_3__["default"](this.noteEditorService);
    jSGlyphSprite.useDefinition(this._definition);
    jSGlyphSprite.definedBounds = this._glyphDefBounds;
    return jSGlyphSprite;
  }
  drawGlyph(svgGraphics) {
    if (this._glyphDef.svgPaths) {
      for (let i = 0; i < this._glyphDef.svgPaths.length; i++) {
        const svgPath = this._glyphDef.svgPaths[i];
        if (svgPath.fill) {
          svgGraphics.beginSvgFill(svgPath.fill);
        } else {
          svgGraphics.beginFill(0, 1);
        }
        if (svgPath.transform) {
          svgGraphics.svgTransform(svgPath.transform);
        }
        if (svgPath['stroke-width']) {
          svgGraphics.svgStroke('rgba(0,0,0,1)', svgPath['stroke-width'], svgPath['stroke-linecap'], svgPath['stroke-linejoin'], svgPath['stroke-miterlimit']);
        }
        svgGraphics.svgPath(svgPath.d);
      }
    } else {
      let isStart = false;
      const commands = this._glyphDef.commands;
      for (let cmdIdx = 0; cmdIdx < commands.length;) {
        switch (parseInt(commands[cmdIdx++])) {
          case 1:
            if (isStart) {
              svgGraphics.endFill();
              isStart = false;
            }
            const strokeWidth = parseFloat(commands[cmdIdx++]);
            const cap = parseInt(commands[cmdIdx++]);
            commands[cmdIdx++];
            const joint = parseInt(commands[cmdIdx++]);
            const miterLimit = parseFloat(commands[cmdIdx++]);
            svgGraphics.lineStyle(strokeWidth, 0, 1, GlyphJSSpriteFactory.CAPS_TABLE[cap], GlyphJSSpriteFactory.JOINT_TABLE[joint], miterLimit);
            break;
          case 2:
            if (isStart) {
              svgGraphics.endFill();
            }
            svgGraphics.beginFill(commands[cmdIdx++] << 16 | commands[cmdIdx++] << 8 | commands[cmdIdx++], commands[cmdIdx++] / 255);
            break;
          case 3:
            svgGraphics.moveTo(commands[cmdIdx++], commands[cmdIdx++]);
            break;
          case 4:
            svgGraphics.lineTo(commands[cmdIdx++], commands[cmdIdx++]);
            break;
          case 5:
            svgGraphics.curveTo(commands[cmdIdx++], commands[cmdIdx++], commands[cmdIdx++], commands[cmdIdx++]);
            break;
          case 6:
            svgGraphics.pushAlpha(commands[cmdIdx++]);
            break;
          case 7:
            svgGraphics.popAlpha();
            break;
          case 8:
            svgGraphics.endFill();
            break;
          case 9:
            svgGraphics.lineStyle(0, 0, 1, GlyphJSSpriteFactory.CAPS_TABLE[0], GlyphJSSpriteFactory.JOINT_TABLE[0], 0);
            break;
        }
      }
    }
  }
}

/***/ }),

/***/ 56494:
/*!***************************************************!*\
  !*** ./src/app/note-editor/glyph/glyph-series.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphSeries)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class GlyphSeries {
  get originX() {
    return 0;
  }
  get originY() {
    return 0;
  }
  get width() {
    this.calculateMetrics();
    return this._width;
  }
  get height() {
    this.calculateMetrics();
    return this._height;
  }
  constructor(glyphs, horizontalGap, noteEditorService) {
    this._metricsDone = false;
    this._width = NaN;
    this._height = NaN;
    this._horizontalGap = 0;
    this._glyphs = null;
    this._glyphs = glyphs;
    this._horizontalGap = horizontalGap;
    this.noteEditorService = noteEditorService;
  }
  addRepeatingGlyph(lineNotationSegment, contentWidth) {
    let totalWidth = 0;
    const width = lineNotationSegment.width + this._horizontalGap;
    while (true) {
      totalWidth += width;
      if (totalWidth >= contentWidth) {
        return;
      }
      this._glyphs.push(lineNotationSegment);
      if (totalWidth <= 0) {
        return;
      }
    }
  }
  createDisplayObject(contextInfo) {
    this.calculateMetrics();
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    let x = 0;
    for (let i = 0; i < this._glyphs.length; i++) {
      const glyph = this._glyphs[i];
      const displayObj = glyph.createDisplayObject(contextInfo);
      displayObj.x = x;
      sprite.addChild(displayObj);
      x += glyph.width + this._horizontalGap;
    }
    return sprite;
  }
  calculateMetrics() {
    if (!this._metricsDone) {
      this._width = this._height = 0;
      for (let i = 0; i < this._glyphs.length; i++) {
        const glyph = this._glyphs[i];
        this._width += glyph.width + this._horizontalGap;
        this._height = Math.max(this._height, glyph.height);
      }
      this._metricsDone = true;
    }
  }
}

/***/ }),

/***/ 17842:
/*!***************************************************!*\
  !*** ./src/app/note-editor/glyph/h-line-glyph.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HLineGlyph)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class HLineGlyph {
  get originX() {
    return 0;
  }
  get originY() {
    return 0;
  }
  get width() {
    return this._length;
  }
  get height() {
    return this._lineWidth;
  }
  constructor(length, noteEditorService, lineWidth = 1) {
    this._lineWidth = NaN;
    this._length = NaN;
    this._lineWidth = lineWidth;
    this._length = length;
    this.noteEditorService = noteEditorService;
  }
  createDisplayObject() {
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const graphics = sprite.graphics;
    graphics.lineStyle(this._lineWidth, 0);
    graphics.moveTo(0, 0);
    graphics.lineTo(this._length, 0);
    return sprite;
  }
}

/***/ }),

/***/ 14044:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/glyph/js-glyph-font-loader.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JSGlyphFontLoader)
/* harmony export */ });
/* harmony import */ var _foundry_factory_common_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./foundry-factory/common-js-glyph-foundry-factory */ 69260);
/* harmony import */ var _foundry_factory_ash_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./foundry-factory/ash-js-glyph-foundry-factory */ 59402);
/* harmony import */ var _foundry_factory_sonata_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./foundry-factory/sonata-js-glyph-foundry-factory */ 95284);



class JSGlyphFontLoader {
  constructor(noteEditorService) {
    this._factoryMap = {};
    this._supportAshFont = false;
    this.noteEditorService = noteEditorService;
  }
  getFoundryFactory(type) {
    if (!this._factoryMap[type]) {
      this._factoryMap[type] = this.createFactory(type);
    }
    return this._factoryMap[type];
  }
  createFactory(type) {
    const commonFactory = new _foundry_factory_common_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    if (type === 'Ash' && !this._supportAshFont) {
      type = 'default';
    }
    switch (type) {
      case 'Ash':
        return new _foundry_factory_ash_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService, commonFactory);
      default:
        return new _foundry_factory_sonata_js_glyph_foundry_factory__WEBPACK_IMPORTED_MODULE_2__["default"](this.noteEditorService, commonFactory);
    }
  }
}

/***/ }),

/***/ 68561:
/*!******************************************************!*\
  !*** ./src/app/note-editor/glyph/js-glyph-sprite.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JSGlyphSprite)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class JSGlyphSprite extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService) {
    super(noteEditorService);
    this.definedBounds = null;
  }
  getBounds(sprite) {
    if (sprite === this && this.definedBounds) {
      return this.definedBounds;
    } else {
      return super.getBounds(sprite);
    }
  }
}

/***/ }),

/***/ 77112:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/glyph/leger-line-glyph.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LegerLineGlyph)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);


class LegerLineGlyph {
  static get LINE_X_DISPLACEMENT() {
    return 0.35;
  }
  get originX() {
    return this._startX;
  }
  get originY() {
    return 0;
  }
  get width() {
    return this._length;
  }
  get height() {
    return this._lineWidth;
  }
  constructor(length, lineWidth, startX, noteEditorService) {
    this._length = NaN;
    this._lineWidth = NaN;
    this._startX = NaN;
    this._length = length;
    this._lineWidth = lineWidth;
    this._startX = startX;
    this.noteEditorService = noteEditorService;
  }
  createDisplayObject(viewInfo) {
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const graphics = sprite.graphics;
    if (viewInfo.printView) {
      graphics.beginFill(0);
      graphics.drawRect(this._startX - LegerLineGlyph.LINE_X_DISPLACEMENT, -this._lineWidth / 2, this._length + 1, this._lineWidth);
      graphics.endFill();
    } else {
      graphics.lineStyle(this._lineWidth, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE);
      graphics.moveTo(this._startX - LegerLineGlyph.LINE_X_DISPLACEMENT, 0);
      graphics.lineTo(this._startX + this._length + 1 - LegerLineGlyph.LINE_X_DISPLACEMENT, 0);
    }
    return sprite;
  }
}

/***/ }),

/***/ 21965:
/*!********************************************************!*\
  !*** ./src/app/note-editor/glyph/note-head-metrics.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteHeadMetrics)
/* harmony export */ });
class NoteHeadMetrics {
  constructor() {
    this.hasStem = true;
    this.downX = 0;
    this.downY = 0.2;
    this.upX = -0.2;
    this.upY = -0.2;
  }
}

/***/ }),

/***/ 16768:
/*!******************************************************!*\
  !*** ./src/app/note-editor/glyph/rectangle-glyph.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RectangleGlyph)
/* harmony export */ });
/* harmony import */ var _display_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/shape */ 15165);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _empty_glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty-glyph */ 36705);



class RectangleGlyph extends _empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(startX, startY, width, height, noteEditorService, color = 0) {
    super(width, height, noteEditorService);
    this._startX = NaN;
    this._startY = NaN;
    this._width = NaN;
    this._height = NaN;
    this._color = 0;
    this._startX = startX;
    this._startY = startY;
    this._width = width;
    this._height = height;
    this._color = color;
  }
  createDisplayObject() {
    const shape = new _display_shape__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const graphics = shape.graphics;
    graphics.lineStyle(1, this._color, 1, null, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    graphics.drawRect(this._startX, this._startY, this._width, this._height);
    return shape;
  }
}

/***/ }),

/***/ 5162:
/*!*************************************************!*\
  !*** ./src/app/note-editor/glyph/stem-glyph.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StemGlyph)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class StemGlyph {
  static get STEM_HIT_VPAD() {
    return 5;
  }
  get originX() {
    return this._startX;
  }
  get originY() {
    return this._startY;
  }
  get startX() {
    return this._startX;
  }
  get startY() {
    return this._startY;
  }
  get width() {
    return this._lineWidth;
  }
  get height() {
    return this._length;
  }
  set height(v) {
    this._length = v;
  }
  set text(t) {}
  static get STEM_HIT_WIDTH() {
    return StemGlyph._stemHitWidthCalculated || (StemGlyph._stemHitWidth =  false ? 0 : 5,
    // ApplicationUtil.isFingerTouchScreenType
    StemGlyph._stemHitWidthCalculated = true), StemGlyph._stemHitWidth;
  }
  constructor(length, lineWidth, startX, startY, down, noteEditorService) {
    this._down = false;
    this._slashWidth = 0;
    this._slashDx = 0;
    this._slashDy = 0;
    this._length = length;
    this._lineWidth = lineWidth;
    this._down = down;
    this._startX = startX;
    this._startY = startY;
    this.noteEditorService = noteEditorService;
  }
  setSlash(slashDx, slashDy, slashWidth) {
    this._slashWidth = slashWidth;
    this._slashDx = slashDx;
    this._slashDy = slashDy;
  }
  createDisplayObject() {
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const graphics = sprite.graphics;
    graphics.beginFill(0);
    if (this._down) {
      graphics.drawRect(this._startX, this._startY, this.width, this.height - this._startY);
    } else {
      graphics.drawRect(this._startX - this.width, -this.height, this.width, this.height + this.startY);
    }
    graphics.endFill();
    if (this._slashWidth !== 0) {
      graphics.beginFill(0);
      if (this._down) {
        graphics.moveTo(this._startX + this._slashDx, this._startY + this.height - this._slashDy);
        graphics.lineTo(this._startX + this._slashDx + this._slashWidth, this._startY + this.height - this._slashDy + this._slashWidth);
        graphics.lineTo(this._startX + this._slashDx + this._slashWidth, this._startY + this.height - this._slashDy + this._slashWidth + 2 * this.width);
        graphics.lineTo(this._startX + this._slashDx, this._startY + this.height - this._slashDy + 2 * this.width);
        graphics.lineTo(this._startX + this._slashDx, this._startY + this.height - this._slashDy);
      } else {
        graphics.moveTo(this._startX + this._slashDx, -this.height + this._slashDy);
        graphics.lineTo(this._startX + this._slashDx + this._slashWidth, -this.height + this._slashDy - this._slashWidth);
        graphics.lineTo(this._startX + this._slashDx + this._slashWidth, -this.height + this._slashDy - this._slashWidth - 2 * this.width);
        graphics.lineTo(this._startX + this._slashDx, -this.height + this._slashDy - 2 * this.width);
        graphics.lineTo(this._startX + this._slashDx, -this.height + this._slashDy);
      }
      graphics.endFill();
    }
    graphics.beginFill(0, 0);
    if (this._down) {
      graphics.drawRect(this._startX - StemGlyph.STEM_HIT_WIDTH / 2, this._startY - StemGlyph.STEM_HIT_VPAD, this.width + StemGlyph.STEM_HIT_WIDTH, this.height - this._startY + StemGlyph.STEM_HIT_VPAD);
    } else {
      graphics.drawRect(this._startX - this.width - StemGlyph.STEM_HIT_WIDTH / 2, -this.height, this.width + StemGlyph.STEM_HIT_WIDTH, this.height + this._startY + StemGlyph.STEM_HIT_VPAD);
    }
    graphics.endFill();
    return sprite;
  }
}
StemGlyph._stemHitWidth = 0;
StemGlyph._stemHitWidthCalculated = false;

/***/ }),

/***/ 37857:
/*!*************************************************!*\
  !*** ./src/app/note-editor/glyph/text-glyph.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextGlyph)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/anti-alias-type */ 52348);
/* harmony import */ var _text_grid_fit_type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/grid-fit-type */ 65007);
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);





class TextGlyph {
  static get GUTTER() {
    return 2;
  }
  get originX() {
    return this._deltaX;
  }
  get originY() {
    this.calculateMetrics();
    return this._deltaY - this._ascent + this.height;
  }
  get width() {
    this.calculateMetrics();
    return this._width;
  }
  get height() {
    this.calculateMetrics();
    return this._height;
  }
  get text() {
    return this._text;
  }
  set text(t) {
    this._text = t;
  }
  constructor(format, text, editorFonts, deltaX = 0, deltaY = 0, width = -1, height = -1, rootDiv, noteEditorService) {
    this._metricsDone = false;
    this._width = NaN;
    this._height = NaN;
    this._ascent = NaN;
    this._format = null;
    this._text = null;
    this._deltaX = 0;
    this._deltaY = 0;
    this._colorBounds = null;
    this._textField = null;
    this._text = text;
    this._format = format;
    this.editorFonts = editorFonts;
    this._deltaX = deltaX;
    this._deltaY = deltaY;
    this._width = width;
    this._height = height;
    this.rootDiv = rootDiv;
    this.noteEditorService = noteEditorService;
  }
  createDisplayObject() {
    this.calculateMetrics();
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const textField = this.createTextField();
    // textField.mouseEnabled = false;
    textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_1__.AntiAliasType.ADVANCED;
    textField.gridFitType = _text_grid_fit_type__WEBPACK_IMPORTED_MODULE_2__.GridFitType.NONE;
    textField.autoSize = _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_4__.TextFieldAutoSize.LEFT;
    textField.sharpness = 0;
    textField.getLineMetrics(0);
    textField.x = this._deltaX - TextGlyph.GUTTER;
    textField.y = this._deltaY - this._ascent - TextGlyph.GUTTER;
    sprite.addChild(textField);
    return sprite;
  }
  createTextField() {
    const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_3__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
    textField.embedFonts = true;
    textField.selectable = false;
    textField.defaultTextFormat = this._format;
    textField.text = this.text;
    return textField;
  }
  calculateMetrics() {
    if (!this._metricsDone) {
      this._textField = this.createTextField();
      const lineMetrics = this._textField.getLineMetrics(0);
      if (this._width == null || this._width < 0) {
        this._width = lineMetrics.width;
      }
      if (this._height == null || this._height < 0) {
        this._height = lineMetrics.height + TextGlyph.GUTTER;
      }
      this._ascent = lineMetrics.ascent;
      this._metricsDone = true;
    }
  }
  offset(offsetX, offsetY) {
    this.calculateMetrics();
    const textGlyph = new TextGlyph(this._format, this._text, this.editorFonts, this._deltaX + offsetX, this._deltaY + offsetY, this._width, this._height, this.rootDiv, this.noteEditorService);
    textGlyph._metricsDone = this._metricsDone;
    textGlyph._ascent = this._ascent;
    textGlyph._colorBounds = this._colorBounds;
    textGlyph._textField = this._textField;
    return textGlyph;
  }
}

/***/ }),

/***/ 44072:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/glyph/vector-glyph-foundry.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VectorGlyphFoundry)
/* harmony export */ });
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _described_glyph_foundry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./described-glyph-foundry */ 83446);
/* harmony import */ var _empty_glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty-glyph */ 36705);
/* harmony import */ var _glyph_series__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph-series */ 56494);
/* harmony import */ var _vector_glyph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./vector-glyph */ 2241);





class VectorGlyphFoundry extends _described_glyph_foundry__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(metrics, descriptor, glyphSpriteFactoryGenerator, basePoints, noteEditorService, fallbackFoundry = null) {
    super(metrics, descriptor, glyphSpriteFactoryGenerator, noteEditorService, fallbackFoundry);
    this._basePoints = NaN;
    this._glyphScale = NaN;
    this._basePoints = basePoints;
    this._glyphScale = 4 * metrics.sizeUnit / basePoints;
    this.initializeGlyphs();
  }
  getScaledFoundry(scale) {
    let scaledFoundry = null;
    if (this.fallbackFoundry) {
      scaledFoundry = this.fallbackFoundry.getScaledFoundry(scale);
    }
    return new VectorGlyphFoundry(this.metrics.scale(scale), this.descriptor, this.glyphSpriteFactoryGenerator, this._basePoints, this.noteEditorService, scaledFoundry);
  }
  createGlyph(glyphSpriteFactory, x = 0, y = 0, width = -1, height = -1, scale = 1, spacingX = 0) {
    return new _vector_glyph__WEBPACK_IMPORTED_MODULE_4__["default"](this._glyphScale * scale, glyphSpriteFactory, this.noteEditorService, x + this.deltaX, y + this.deltaY, width, height, spacingX);
  }
  createUnScaledGlyph(glyphSpriteFactory) {
    return this.createGlyph(glyphSpriteFactory, 0, 0, -1, -1, 1 / this._glyphScale);
  }
  getTimeSignature(beats) {
    const digitGlyphs = this.getDigitGlyphs(beats, 'timeSignature', this.timeSignatureGlyphs);
    return new _glyph_series__WEBPACK_IMPORTED_MODULE_3__["default"](digitGlyphs, 1, this.noteEditorService);
  }
  getTupletNumber(rhythmUnits) {
    const digitGlyphs = this.getDigitGlyphs(rhythmUnits, 'tuplet', this.tupletNumberGlyphs);
    return new _glyph_series__WEBPACK_IMPORTED_MODULE_3__["default"](digitGlyphs, 1, this.noteEditorService);
  }
  getTabFret(fret) {
    const digitGlyphs = this.getDigitGlyphs(fret, 'tab', this.tabGlyphs);
    return new _glyph_series__WEBPACK_IMPORTED_MODULE_3__["default"](digitGlyphs, 1, this.noteEditorService);
  }
  getBendAlteration(cumulativeBend) {
    if (cumulativeBend === 0) {
      return new _empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService);
    }
    if (cumulativeBend === 0.5) {
      return this.otherGlyphs['quaterBendAlteration'];
    }
    if (cumulativeBend === 1) {
      return this.otherGlyphs['halfBendAlteration'];
    }
    const digitGlyphs = this.getDigitGlyphs(Math.floor(cumulativeBend / 2), 'tab', this.tabGlyphs);
    if (cumulativeBend % 2 === 1) {
      digitGlyphs.push(this.otherGlyphs['halfBendAlteration']);
    }
    return new _glyph_series__WEBPACK_IMPORTED_MODULE_3__["default"](digitGlyphs, 2, this.noteEditorService);
  }
  getTempo(notationValue, hasDots, tempoEquals) {
    const glyphs = [];
    if (notationValue >= _models_notation_value__WEBPACK_IMPORTED_MODULE_0__.NotationValue.ONE_HUNDERD_TWENTY_EIGHTH && notationValue <= _models_notation_value__WEBPACK_IMPORTED_MODULE_0__.NotationValue.WHOLE) {
      const glyphType = 'tempo' + notationValue + (hasDots ? 'dot' : '');
      glyphs.push(this.otherGlyphs[glyphType]);
    }
    if (tempoEquals) {
      glyphs.push(this.otherGlyphs['tempoEquals']);
    }
    return new _glyph_series__WEBPACK_IMPORTED_MODULE_3__["default"](glyphs, 2, this.noteEditorService);
  }
  getDigitGlyphs(digit, type, glyphs) {
    if (digit === 0) {
      return [this.getDigit(0, type, glyphs)];
    }
    const gs = [];
    while (digit > 0) {
      gs.unshift(this.getDigit(digit % 10, type, glyphs));
      digit = Math.floor(digit / 10);
    }
    return gs;
  }
  getDigit(digit, type, glyphs) {
    let digitGlyph = glyphs[digit];
    if (digitGlyph == null) {
      digitGlyph = this.createGlyph(this.getGlyphSpriteFactory(type + digit.toString()));
      glyphs[digit] = digitGlyph;
    }
    return digitGlyph;
  }
}

/***/ }),

/***/ 2241:
/*!***************************************************!*\
  !*** ./src/app/note-editor/glyph/vector-glyph.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ VectorGlyph)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class VectorGlyph {
  static get MIN_HIT_EXTENT() {
    return 4;
  }
  static get HIT_INFLATION_THRESHOLD() {
    return 20;
  }
  get originX() {
    return this._deltaX;
  }
  get originY() {
    this.calculateMetrics();
    return this._originY;
  }
  get width() {
    this.calculateMetrics();
    return this._width;
  }
  get height() {
    this.calculateMetrics();
    return this._height;
  }
  get spacingX() {
    this.calculateMetrics();
    return this._spacingX;
  }
  get dy() {
    this.calculateMetrics();
    return this._deltaY;
  }
  constructor(scale, glyphSpriteFactory, noteEditorService, deltaX = 0, deltaY = 0, width = -1, height = -1, spacingX = 0) {
    this._metricsDone = false;
    this._width = NaN;
    this._height = NaN;
    this._scale = NaN;
    this._deltaX = 0;
    this._deltaY = 0;
    this._originY = 0;
    this._glyphSpriteFactory = null;
    this._spacingX = 0;
    this._bounds = null;
    this._scale = scale;
    this._glyphSpriteFactory = glyphSpriteFactory;
    this._deltaX = deltaX;
    this._deltaY = deltaY;
    this._width = width;
    this._height = height;
    this._spacingX = spacingX;
    this.noteEditorService = noteEditorService;
  }
  createDisplayObject() {
    this.calculateMetrics();
    const glyph = this.createGlyphSprite();
    glyph.scaleX = this._scale;
    glyph.scaleY = this._scale;
    glyph.x = this._deltaX;
    glyph.y = this._deltaY;
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    sprite.addChild(glyph);
    this.addHitArea(glyph, sprite);
    return sprite;
  }
  addHitArea(glyph, sprite) {
    const bounds = this._bounds.clone();
    if (bounds.width < VectorGlyph.HIT_INFLATION_THRESHOLD) {
      bounds.inflate(VectorGlyph.MIN_HIT_EXTENT, 0);
    }
    if (bounds.height < VectorGlyph.HIT_INFLATION_THRESHOLD) {
      bounds.inflate(0, VectorGlyph.MIN_HIT_EXTENT);
    }
    sprite.graphics.beginFill(0, 0);
    sprite.graphics.drawRect(glyph.x + bounds.x * this._scale, glyph.y + bounds.y * this._scale, bounds.width * this._scale, bounds.height * this._scale);
    sprite.graphics.endFill();
  }
  createGlyphSprite() {
    return this._glyphSpriteFactory.createGlyphSprite();
  }
  calculateMetrics() {
    if (!this._metricsDone) {
      const glyphSprite = this.createGlyphSprite();
      this._bounds = glyphSprite.getBounds(glyphSprite);
      if (this._width < 0) {
        this._width = (this._bounds.x + this._bounds.width) * this._scale;
      }
      if (this._height < 0) {
        this._height = this._bounds.height * this._scale;
      }
      this._metricsDone = true;
      this._originY = this._deltaY + (this._bounds.y + this._bounds.height) * this._scale;
    }
  }
  offset(offsetX, offsetY) {
    this.calculateMetrics();
    return new VectorGlyph(this._scale, this._glyphSpriteFactory, this.noteEditorService, this._deltaX + offsetX, this._deltaY + offsetY, this.width, this.height);
  }
}

/***/ }),

/***/ 51729:
/*!*****************************************************************!*\
  !*** ./src/app/note-editor/layouts/abstract-beamable-layout.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbstractBeamableLayout)
/* harmony export */ });
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation-layout */ 18810);

class AbstractBeamableLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get noteLayouts() {
    return this._noteLayouts;
  }
  get down() {
    return this._down;
  }
  set down(v) {
    this._down = v;
  }
  get tupletLayout() {
    return this._tupletLayout;
  }
  set tupletLayout(v) {
    this._tupletLayout = v;
  }
  set beamY(t) {}
  get multiVoice() {
    return this._multiVoice;
  }
  set multiVoice(v) {
    this._multiVoice = v;
  }
  get beam() {
    return this._beam;
  }
  set beam(v) {
    this._beam = v;
  }
  get stemLength() {
    return this._stemLength;
  }
  set stemLength(v) {
    this._stemLength = v;
  }
  get noteSet() {
    return this.notation;
  }
  get clearTop() {
    return this._clearTop;
  }
  get clearBottom() {
    return this._clearBottom;
  }
  get clearInStaffTop() {
    if (isNaN(this._clearInStaffTop)) {
      return this._clearTop;
    } else {
      return this._clearInStaffTop;
    }
  }
  get clearInStaffBottom() {
    if (isNaN(this._clearInStaffBottom)) {
      return this.clearBottom;
    } else {
      return this._clearInStaffBottom;
    }
  }
  get spanTop() {
    return this.clearInStaffTop;
  }
  get spanBottom() {
    return this.clearInStaffBottom;
  }
  get lyricExclusionBottom() {
    return this.bounds.top;
  }
  get lyricExclusionTop() {
    return this.bounds.top + this.bounds.height;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this._noteLayouts = [];
    this._down = false;
    this._tupletLayout = null;
    this._multiVoice = false;
    this._beam = false;
    this._stemLength = 0;
    this._clearTop = NaN;
    this._clearBottom = NaN;
    this._clearInStaffTop = NaN;
    this._clearInStaffBottom = NaN;
    this._extrasBottom = NaN;
    this._extrasTop = NaN;
    this.alternateVoiceLayout = null;
  }
  clearExtrasTop(extrasHeight) {
    if (isNaN(this._extrasTop)) {
      this._extrasTop = this.clearAboveStaff(0);
    }
    const extrasTop = this._extrasTop;
    this._extrasTop += extrasHeight;
    return extrasTop;
  }
  clearExtrasBottom(extrasHeight) {
    if (isNaN(this._extrasBottom)) {
      this._extrasBottom = this.clearBelowStaff(0);
    }
    const extrasBottom = this._extrasBottom;
    this._extrasBottom -= extrasHeight;
    return extrasBottom;
  }
  clearAboveStaff(offsetY) {
    if (isNaN(this._clearInStaffTop)) {
      this._clearInStaffTop = this._clearTop;
    }
    this._clearTop = Math.max(this._clearTop, this.clef.displayLineEndIndex - 1 + this.context.staffMetrics.articulationPadding) + offsetY;
    return this._clearTop;
  }
  clearBelowStaff(offsetY) {
    if (isNaN(this._clearInStaffBottom)) {
      this._clearInStaffBottom = this._clearBottom;
    }
    this._clearBottom = Math.min(this._clearBottom, this.clef.displayLineStartIndex - this.context.staffMetrics.articulationPadding) - offsetY;
    return this._clearBottom;
  }
}

/***/ }),

/***/ 45009:
/*!********************************************************!*\
  !*** ./src/app/note-editor/layouts/abstract-layout.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbstractLayout)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);

class AbstractLayout {
  static get EMPTY_RECT() {
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, 0, 0);
  }
  get valid() {
    return this._valid;
  }
  get globalValid() {
    return this._globalValid;
  }
  get width() {
    this.validateLayout();
    return this._width;
  }
  get constraint() {
    return this._constraint;
  }
  set constraint(t) {
    // if (this.constructor.name === 'ClefLayout') {
    //   debugger;
    // }
    // if (isNaN(t.length)) {
    //   debugger;
    // }
    this._constraint = t;
  }
  get height() {
    return this._height;
  }
  set height(v) {
    this._height = v;
  }
  get originX() {
    this.validateLayout();
    return this._originX;
  }
  get originY() {
    this.validateLayout();
    return this._originY;
  }
  get x() {
    return this.constraint ? this.constraint.layoutVector.length : 0;
  }
  get bounds() {
    return AbstractLayout.EMPTY_RECT;
  }
  get context() {
    return this._context;
  }
  constructor(context, noteEditorService, rootDiv) {
    this.centered = false;
    this._valid = false;
    this._validating = false;
    this._globalValid = false;
    this._parent = null;
    this._constraint = null;
    this._width = 0;
    this._height = 0;
    this._originX = 0;
    this._originY = 0;
    this.leftConstraint = null;
    this._context = context;
    this.noteEditorService = noteEditorService;
    this.rootDiv = rootDiv;
  }
  invalidate() {
    this._valid = false;
    this.invalidateGlobal();
    if (this._parent) {
      this._parent.invalidate();
    }
  }
  invalidateGlobal() {
    this._globalValid = false;
  }
  validateLayout(options) {
    if (!this._valid && !this._validating) {
      this._validating = true;
      this.doValidateLayout(options);
      this._validating = false;
      this._valid = true;
    }
  }
  doValidateLayout(options) {
    throw new Error('doValidateLayout() not overridden');
  }
  validateGlobalLayout() {
    if (!this.globalValid) {
      this.doValidateGlobalLayout();
      this._globalValid = true;
    }
  }
  doValidateGlobalLayout() {}
  destroy() {
    this.removeListeners();
    this.destroyChildren();
  }
  removeListeners() {}
  destroyChildren() {}
  createDisplayObject(t) {
    throw new Error('createDisplayObject() not overridden');
  }
  getXPosition(t, e) {
    return 0;
  }
}

/***/ }),

/***/ 98954:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/barline-layout.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BarlineLayout)
/* harmony export */ });
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _views_barline_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/barline-view */ 50457);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-layout */ 18810);




class BarlineLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get barlineType() {
    return this._barlineType;
  }
  get barlineGlyphLayout() {
    return this._barlineGlyphLayout;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this._barlineType = null;
    this._barlineGlyphLayout = null;
    this._measureStartRepeat = false;
    this._startRepeat = false;
    this._endRepeat = false;
    let glyphLayout,
      dotsDistanceY,
      distanceY,
      nextMeasure = notation.measure.staff.getMeasureAt(notation.measure.index + 1);
    if (notation.position === measureLayout.measure.duration) {
      this._endRepeat = notation.measure.endRepeat;
      this._measureStartRepeat = nextMeasure && notation.measure.index < notation.measure.staff.numChildren - 1 && nextMeasure.startRepeat && !notation.measure.systemGap;
      this._startRepeat = this._measureStartRepeat && !measureLayout.lastLayoutOrSystem;
    } else {
      if (measureLayout.needsStaffStartLayout) {
        this._startRepeat = notation.measure.startRepeat;
      }
    }
    this._barlineType = notation.type;
    if (this._endRepeat) {
      this._barlineType = this._startRepeat ? _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].REPEAT : _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].FINAL;
    } else if (this._measureStartRepeat && !this._startRepeat && this.barlineType === _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].SINGLE) {
      this._barlineType = _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].DOUBLE;
    } else if (this._measureStartRepeat && this._startRepeat) {
      this._barlineType = _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].INITIAL;
    }
    this._barlineGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(this._barlineType));
    this._barlineGlyphLayout.distanceY = -context.staffMetrics.lineThickness;
    this.addGlyphLayout(this._barlineGlyphLayout);
    if (this._endRepeat || this._startRepeat) {
      dotsDistanceY = clef.numLines % 2 === 1 ? [(clef.staffHeight - clef.lineSpacing) / 2, (clef.staffHeight + clef.lineSpacing) / 2] : [clef.staffHeight / 2 - clef.lineSpacing, clef.staffHeight / 2 + clef.lineSpacing];
      if (this._endRepeat) {
        for (let i = 0; i < dotsDistanceY.length; i++) {
          const dotDistanceY = dotsDistanceY[i];
          distanceY = dotDistanceY;
          glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(_models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].END_REPEAT));
          glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_RIGHT;
          glyphLayout.distanceY = distanceY;
          this.addGlyphLayout(glyphLayout);
        }
        if (context.staffMetrics.repeatWings) {
          if (measureLayout.topStaffInBarlineGroup) {
            glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(_models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].TOP_END_WING));
            glyphLayout.distanceY = measureLayout.measure.effectiveClef.staffHeight;
            glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_BOTTOM;
            this.addGlyphLayout(glyphLayout);
          }
          if (measureLayout.bottomStaffInBarlineGroup) {
            glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(_models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].BOTTOM_END_WING));
            glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_BOTTOM;
            this.addGlyphLayout(glyphLayout);
          }
        }
      }
    }
    if (this._startRepeat) {
      for (let i = 0; i < dotsDistanceY.length; i++) {
        const dotDistanceY = dotsDistanceY[i];
        distanceY = dotDistanceY;
        glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(_models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].START_REPEAT));
        glyphLayout.distanceX = this._barlineGlyphLayout.width;
        glyphLayout.distanceY = distanceY;
        this.addGlyphLayout(glyphLayout);
      }
      if (context.staffMetrics.repeatWings) {
        if (measureLayout.topStaffInBarlineGroup) {
          glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(this._barlineType === _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].INITIAL ? _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].TOP_INITIAL_WING : _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].TOP_START_WING));
          glyphLayout.distanceY = measureLayout.measure.effectiveClef.staffHeight;
          glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_BOTTOM;
          this.addGlyphLayout(glyphLayout);
        }
        if (measureLayout.bottomStaffInBarlineGroup) {
          glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, this.foundry.getBarline(this._barlineType == _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].INITIAL ? _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].BOTTOM_INITIAL_WING : _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"].BOTTOM_START_WING));
          glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_BOTTOM;
          this.addGlyphLayout(glyphLayout);
        }
      }
    }
    this.padding = notation.position > 0 ? context.staffMetrics.barlinePadding : context.staffMetrics.initialBarlinePadding;
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_barline_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
  static getBarlineGlyphView(barlineView) {
    return barlineView.getChildAt(0);
  }
  sameType(layout) {
    return super.sameType(layout) && this._barlineType === layout.barlineType;
  }
}

/***/ }),

/***/ 78903:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/beam-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BeamLayout)
/* harmony export */ });
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _views_beam_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/beam-view */ 8689);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _level_beam__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./level-beam */ 99069);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rest-layout */ 41910);





class BeamLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  static get CONCAVITY_CONTOUR_THRESHOLD() {
    return 0.6;
  }
  get numBeamableLayouts() {
    return this._beamableLayouts.length;
  }
  get concave() {
    if (this._beamableLayouts.length <= 2) {
      return false;
    }
    let ascCount,
      descCount,
      stemingLine,
      prevStemingLine,
      startStemingLine = this.getBeamableLayoutAt(0).stemingLine,
      endStemingLine = this.getBeamableLayoutAt(this._beamableLayouts.length - 1).stemingLine,
      a = 0;
    for (let i = 0; i < this._beamableLayouts.length; i++) {
      const offsetY = startStemingLine + (endStemingLine - startStemingLine) * i / (this._beamableLayouts.length - 1);
      a += this.getBeamableLayoutAt(i).stemingLine - offsetY;
    }
    const stemingLineDiffs = [];
    for (let i = 0; i < this._beamableLayouts.length; i++) {
      stemingLine = this.getBeamableLayoutAt(i).stemingLine;
      if (i > 0) {
        if (stemingLine < prevStemingLine) {
          descCount++;
        } else if (stemingLine > prevStemingLine) {
          ascCount++;
        }
        stemingLineDiffs[i - 1] = Math.abs(stemingLine - prevStemingLine);
      }
      prevStemingLine = stemingLine;
    }
    const concative_contour = Math.abs((ascCount - descCount) / this._beamableLayouts.length) + Math.abs((startStemingLine - endStemingLine) / this._beamableLayouts.length);
    if (this.down) {
      return a < -0.01 && concative_contour < BeamLayout.CONCAVITY_CONTOUR_THRESHOLD;
    } else {
      return a > 0.01 && concative_contour < BeamLayout.CONCAVITY_CONTOUR_THRESHOLD;
    }
  }
  get effectiveBeamThickness() {
    return this.context.staffMetrics.beamThickness * Math.sqrt(1 + this.slop * this.slop) * this.getBeamableLayoutAt(0).glyphScale;
  }
  get effectiveBeamInterval() {
    return (this.context.staffMetrics.beamThickness + this.context.staffMetrics.beamSpacing * Math.sqrt(1 + this.slop * this.slop)) * this.getBeamableLayoutAt(0).glyphScale;
  }
  get slop() {
    return this.rise / (this.endX - this.startX);
  }
  constructor(context, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this.startX = NaN;
    this.endX = NaN;
    this.startY = NaN;
    this.rise = NaN;
    this.maxLevel = 0;
    this.down = false;
    this.beams = [];
    this._beamableLayouts = [];
  }
  addBeamableLayout(layout) {
    this._beamableLayouts.push(layout);
  }
  getBeamableLayoutAt(idx) {
    return this._beamableLayouts[idx];
  }
  setUpBeam() {
    let multiVoice = false;
    let beamablelayout;
    for (let i = 0; i < this._beamableLayouts.length; i++) {
      beamablelayout = this._beamableLayouts[i];
      beamablelayout.beam = true;
      multiVoice = multiVoice || beamablelayout.multiVoice;
    }
    const firstBeamableLayout = this.getBeamableLayoutAt(0);
    const measure = firstBeamableLayout.noteSet.measure;
    if (firstBeamableLayout.direction != null) {
      this.down = firstBeamableLayout.down;
    } else if (multiVoice) {
      this.down = parseFloat(firstBeamableLayout.noteSet.voiceNumber) > 0;
    } else if (beamablelayout && beamablelayout.clef.defaultStemUp) {
      this.down = false;
    } else {
      let lineDiffSum = 0,
        notesCount = 0,
        scoreInterval = measure.scoreInterval;
      for (let i = 0; i < this._beamableLayouts.length; i++) {
        beamablelayout = this._beamableLayouts[i];
        const notes = beamablelayout.noteSet.notes;
        for (let j = 0; j < notes.length; j++) {
          const note = notes[j];
          lineDiffSum += beamablelayout.clef.getPitchLine(measure.getScoreNote(note, scoreInterval)) - beamablelayout.clef.centerLine;
          notesCount++;
        }
        this.down = lineDiffSum / notesCount >= 0;
      }
      for (let i = 0; i < this._beamableLayouts.length; i++) {
        beamablelayout = this._beamableLayouts[i];
        beamablelayout.down = this.down;
        beamablelayout.multiVoice = multiVoice;
      }
    }
  }
  doValidateLayout() {}
  determineBeamLevels() {
    const beamLevels = [];
    this.beams = [];
    for (let idx = 0; idx < this._beamableLayouts.length; idx++) {
      const beamLevel = this.getBeamableLayoutAt(idx).noteSet.beamLevel;
      if (beamLevel >= 0) {
        this.maxLevel = Math.max(this.maxLevel, beamLevel);
        if (beamLevel < beamLevels.length) {
          for (let j = 0; j <= beamLevel; j++) {
            beamLevels[j].end = idx;
          }
          beamLevels.splice(beamLevel + 1, beamLevels.length - (beamLevel + 1));
        } else {
          for (let j = 0; j <= beamLevel; j++) {
            if (j >= beamLevels.length) {
              beamLevels[j] = new _level_beam__WEBPACK_IMPORTED_MODULE_3__["default"](j, idx, idx);
              this.beams.push(beamLevels[j]);
            } else {
              beamLevels[j].end = idx;
            }
          }
        }
      }
    }
    for (let i = 0; i < this.beams.length; i++) {
      const beam = this.beams[i];
      if (beam.start > 0) {
        while (beam.start < beam.end && this.getBeamableLayoutAt(beam.start).noteSet.notes.length === 0) {
          beam.start++;
        }
      }
      if (beam.end < this._beamableLayouts.length - 1) {
        while (beam.end > beam.start && this.getBeamableLayoutAt(beam.end).noteSet.notes.length === 0) {
          beam.end--;
        }
      }
    }
  }
  doValidateGlobalLayout() {
    this.determineBeamLevels();
    const firstBeamableLayout = this.getBeamableLayoutAt(0);
    firstBeamableLayout.stemLength = firstBeamableLayout.standardStemLength;
    if (firstBeamableLayout.multiVoice) {
      firstBeamableLayout.stemLength = Math.max(0, firstBeamableLayout.stemLength - this.context.staffMetrics.beamMultiVoiceCutback);
    }
    const stemEnd = firstBeamableLayout.stemEnd;
    this.startX = firstBeamableLayout.leftX + stemEnd.x;
    this.startY = stemEnd.y;
    let beamingStemLength;
    const lastbeamableLayout = this.getBeamableLayoutAt(this._beamableLayouts.length - 1);
    this.endX = lastbeamableLayout.leftX + lastbeamableLayout.stemEnd.x;
    if (firstBeamableLayout.noteSet.value < _models_notation_value__WEBPACK_IMPORTED_MODULE_0__.NotationValue.WHOLE) {
      if (this.concave) {
        this.rise = 0;
      } else {
        this.rise = this.getRiseForSteps(2 * (lastbeamableLayout.nearestStemLine - firstBeamableLayout.nearestStemLine));
      }
      let minStemLength = 1000;
      for (let i = 0; i < this._beamableLayouts.length; i++) {
        if (this.getBeamableLayoutAt(i).standardStemLength > 0) {
          minStemLength = Math.min(minStemLength, this.getStemLengthAt(i, false));
        }
      }
      if (firstBeamableLayout.multiVoice) {
        beamingStemLength = this.context.staffMetrics.multiVoiceBeamingStemLength;
      } else {
        beamingStemLength = this.context.staffMetrics.beamingStemLength;
      }
      beamingStemLength *= firstBeamableLayout.glyphScale;
      if (this.maxLevel > 1) {
        beamingStemLength += (this.maxLevel - 1) * this.effectiveBeamInterval;
      }
      if (minStemLength < beamingStemLength) {
        if (this.down) {
          this.startY += minStemLength - beamingStemLength;
        } else {
          this.startY += beamingStemLength - minStemLength;
        }
      }
    } else {
      this.rise = lastbeamableLayout.stemEnd.y - this.startY;
      beamingStemLength = 0;
    }
    for (let i = 0; i < this._beamableLayouts.length; i++) {
      const beamableLayout = this.getBeamableLayoutAt(i);
      if (beamableLayout.hasStem) {
        beamableLayout.stemLength = this.getStemLengthAt(i, true);
      } else if (beamableLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_4__["default"]) {
        beamableLayout.beamY = this.startY + this.rise * (beamableLayout.leftX - this.startX) / (this.endX - this.startX) + (this.effectiveBeamThickness + this.maxLevel * this.effectiveBeamInterval) * (this.down ? 1 : -1);
      } else {
        beamableLayout.beamY = this.startY + this.rise * (beamableLayout.leftX - this.startX) / (this.endX - this.startX);
      }
    }
  }
  getStemLengthAt(idx, hasStem) {
    const beamableLayout = this.getBeamableLayoutAt(idx);
    const stemEnd = beamableLayout.stemEnd;
    const endx = beamableLayout.leftX + stemEnd.x;
    const y = this.startY + this.rise * (endx - this.startX) / (this.endX - this.startX);
    const stemLine = hasStem ? beamableLayout.stemStartLine : beamableLayout.nearestStemLine;
    if (this.down) {
      return stemLine - y;
    } else {
      return y - stemLine;
    }
  }
  isBeamStart(idx) {
    for (let i = 0; i < this.beams.length; i++) {
      const beam = this.beams[i];
      if (beam.start === idx && beam.end > idx) {
        return true;
      }
    }
    return false;
  }
  isBeamEnd(idx) {
    for (let i = 0; i < this.beams.length; i++) {
      const beam = this.beams[i];
      if (beam.start < idx && beam.end === idx) {
        return true;
      }
    }
    return false;
  }
  createDisplayObject(context) {
    return new _views_beam_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
  getRiseForSteps(steps) {
    return steps <= -3 ? -1 : steps >= 3 ? 1 : steps <= -2 ? -0.5 : steps >= 2 ? 0.5 : steps <= -1 ? -0.25 : steps >= 1 ? 0.25 : 0;
  }
}

/***/ }),

/***/ 96707:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/bend-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BendLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _views_angle_bracket_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/angle-bracket-view */ 29782);
/* harmony import */ var _views_bend_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/bend-view */ 59754);
/* harmony import */ var _views_dashed_line_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/dashed-line-view */ 85926);
/* harmony import */ var _views_release_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../views/release-view */ 13561);
/* harmony import */ var _liaison_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./liaison-layout */ 89280);







class BendLayout extends _liaison_layout__WEBPACK_IMPORTED_MODULE_6__["default"] {
  get leftSpacing() {
    return this._leftNsl.clef.showKey ? super.leftSpacing : new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
  }
  get rightSpacing() {
    if (this._rightNsl.clef.showKey) {
      return super.rightSpacing;
    } else if (this._rightNl.note.cumulativeBend !== 0 && this._rightNl.note.relativeBend <= 0) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0);
    } else {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](-this._rightNsl.noteWidth / 2, this._rightNsl.noteHeight / 4 + this.staffMetrics.tieSingleNoteBelowSpacing);
    }
  }
  constructor(bendType, noteEditorService) {
    super(noteEditorService);
    this._bendType = null;
    this._bendType = bendType;
  }
  doCreateView(nsl, nl, spacingX, spacingY, contentWidth) {
    this.calculateAscent();
    if (this._rightNl && this._rightNl.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.PRE_BEND_LIAISON && this._pitchDelta <= 0) {
      this._ascent = 0;
    }
    const lineSpacing = this.staffMetrics.lineSpacing;
    const liaisonHorizontalPadding = this.staffMetrics.liaisonHorizontalPadding;
    const liaisonVerticalPadding = this.staffMetrics.liaisonVerticalPadding;
    const bendIncreasePadding = this.staffMetrics.bendIncreasePadding;
    if (nsl.clef.showKey) {
      return new _views_angle_bracket_view__WEBPACK_IMPORTED_MODULE_2__["default"](spacingX * lineSpacing + 1, -(spacingY + this._dy) * lineSpacing, contentWidth * lineSpacing - 2, 2 * -this.tieHeight(contentWidth) * lineSpacing, -this._ascent * lineSpacing, this.staffMetrics, this.noteEditorService);
    }
    if (this._ascent === 0) {
      if (this._pitchDelta > 0) {
        spacingX += nsl.noteWidth;
        contentWidth -= nsl.noteWidth;
        return new _views_bend_view__WEBPACK_IMPORTED_MODULE_3__["default"]((spacingX + this.horizontalPadding) * lineSpacing, -(spacingY + this._dy + liaisonVerticalPadding - bendIncreasePadding) * lineSpacing, (contentWidth - 2 * liaisonHorizontalPadding) * lineSpacing, -(this._ascent - nsl.clef.lineSpacing - liaisonVerticalPadding + bendIncreasePadding) * lineSpacing, this.staffMetrics, this._bendType, this.noteEditorService);
      }
      spacingX += nsl.noteWidth / 2;
      if (!nl.note.tied) {
        contentWidth -= nsl.noteWidth / 2;
      }
      if (this._rightNl && (this._rightNl.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.BEND_LIAISON || this._rightNl.note.tied)) {
        contentWidth += this._rightNsl.noteWidth;
      }
      const spacing = nl.pitchLine <= (nsl.clef.numLines - 1) * nsl.clef.lineSpacing ? liaisonVerticalPadding : -nsl.clef.lineSpacing;
      return new _views_dashed_line_view__WEBPACK_IMPORTED_MODULE_4__["default"](spacingX * lineSpacing, -(spacingY + this._dy + spacing) * lineSpacing, contentWidth * lineSpacing, -this._ascent * lineSpacing, [0.5 * lineSpacing, 0.5 * lineSpacing], this.staffMetrics, this.noteEditorService);
    }
    if (this._pitchDelta > 0) {
      spacingX += nsl.noteWidth;
      contentWidth -= nsl.noteWidth;
      return new _views_bend_view__WEBPACK_IMPORTED_MODULE_3__["default"]((spacingX + liaisonHorizontalPadding) * lineSpacing, -(spacingY + this._dy + liaisonVerticalPadding) * lineSpacing, (contentWidth - 2 * liaisonHorizontalPadding) * lineSpacing, -(this._ascent - nsl.clef.lineSpacing - liaisonVerticalPadding) * lineSpacing, this.staffMetrics, this._bendType, this.noteEditorService);
    } else {
      spacingX += nsl.noteWidth / 2;
      contentWidth -= nsl.noteWidth / 2;
      return new _views_release_view__WEBPACK_IMPORTED_MODULE_5__["default"]((spacingX + liaisonHorizontalPadding) * lineSpacing, -(spacingY + this._dy - nsl.clef.lineSpacing) * lineSpacing, (contentWidth - 2 * liaisonHorizontalPadding) * lineSpacing, -(this._ascent + nsl.clef.lineSpacing + 1.25) * lineSpacing, this.staffMetrics, this.noteEditorService);
    }
  }
}

/***/ }),

/***/ 78811:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/block-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BlockLayout)
/* harmony export */ });
/* harmony import */ var _models_block__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/block */ 45577);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _views_block_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/block-view */ 38854);
/* harmony import */ var _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/score-text-field */ 61474);
/* harmony import */ var _views_view_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/view-context */ 65532);
/* harmony import */ var _chunk_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-layout */ 45111);






class BlockLayout extends _chunk_layout__WEBPACK_IMPORTED_MODULE_5__["default"] {
  get block() {
    return this._block;
  }
  get isFirstBeforeBlockOfMeasure() {
    return this.block && this.block.hasColumnPositionedBeforeSystem && this.block.uuid === this.systemMeasure.blocksPositionedBeforeSystem[0].uuid;
  }
  get isFirstAfterBlockOfMeasure() {
    return this.block && this.block.hasColumnPositionedAfterSystem && this.block.uuid === this.systemMeasure.blocksPositionedAfterSystem[0].uuid;
  }
  get height() {
    if (this._height === -1) {
      const viewContext = new _views_view_context__WEBPACK_IMPORTED_MODULE_4__["default"](null, this.context, null, null, null, null, this.noteEditorService, null, 'false', {
        fakeView: true
      });
      const viewElements = this.getViewElements(viewContext);
      let height = 0;
      for (let i = 0; i < viewElements.length; i++) {
        height = Math.max(height, viewElements[i].height);
      }
      this.height = viewContext.toLayoutUnits(height);
    }
    return this._height;
  }
  set height(v) {
    this._height = v;
  }
  get unpaddedHeight() {
    return 0;
  }
  get bottomY() {
    return this.distanceY + this.height + this.bottomPadding;
  }
  get topPadding() {
    return this._topPadding;
  }
  get bottomPadding() {
    return this._bottomPadding;
  }
  get leftPadding() {
    return 0;
  }
  get score() {
    return this.context.score;
  }
  get startMeasureIndex() {
    return this.getMeasureIndex();
  }
  get endMeasureIndex() {
    return this.getMeasureIndex() + 1;
  }
  get systemMeasure() {
    return this._measure;
  }
  set blockHeight(v) {
    this._height = v;
  }
  constructor(context, measure, editorFonts, rootDiv, noteEditorService) {
    super(context, 'paginated', noteEditorService, rootDiv);
    this._block = null;
    this._measure = null;
    this._topPadding = 5;
    this._bottomPadding = 5;
    this._height = -1;
    this._measure = measure;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  getViewElements(viewContext) {
    const viewElements = [];
    const columnViews = this.getColumnViews(viewContext);
    for (let i = 0; i < columnViews.length; i++) {
      const columnView = columnViews[i];
      viewElements.push(columnView);
    }
    return viewElements;
  }
  getColumnViews(viewContext) {
    const columnViews = [];
    if (this.block) {
      for (let i = 0; i < this.block.totalColumns; i++) {
        const options = {
          model: this.block.getColumnAt(i),
          property: 'text',
          editGroupName: 'Text',
          updateTextCallback: this.textUpdated.bind(this)
        };
        const scoreTextField = new _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"](viewContext, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_1__.TextFieldAutoSize.LEFT, this.staffMetrics.staffTextFont, this.staffMetrics.partNameSize, this.editorFonts, options, this.rootDiv, this.noteEditorService);
        scoreTextField.multiline = true;
        scoreTextField.wordWrap = true;
        const textWidth = (this.pageMetrics.contentWidth - this.staffMetrics.blockSidesPadding) * this._block.getColumnRatio(i) - this.staffMetrics.blockColumnPadding;
        scoreTextField.setTextWidth(textWidth);
        scoreTextField.x = this.staffMetrics.blockLeftMargin + (this.pageMetrics.contentWidth - this.staffMetrics.blockSidesPadding) * this._block.accumulatedRatio(i);
        scoreTextField.y = this.staffMetrics.blockVerticalPadding;
        columnViews.push(scoreTextField);
      }
    }
    return columnViews;
  }
  setBlock(blockIdx, activeBlockType = _models_block__WEBPACK_IMPORTED_MODULE_0__["default"].AFTER_SYSTEM) {
    this._block = activeBlockType === _models_block__WEBPACK_IMPORTED_MODULE_0__["default"].AFTER_SYSTEM ? this._measure.blocksPositionedAfterSystem[blockIdx] : this._measure.blocksPositionedBeforeSystem[blockIdx];
  }
  textUpdated() {
    if (this._block && this._block.text.length === 0) {
      this._measure.removeBlock(this._block);
    }
  }
  getMeasureIndex() {
    return this._measure ? this._measure.index : -1;
  }
  invalidateGlobal() {
    super.invalidateGlobal();
  }
  invalidateSystemStart() {
    this.invalidate();
  }
  prepareLayout() {}
  doValidateLayout() {}
  doValidateGlobalLayout() {
    super.doValidateGlobalLayout();
  }
  createDisplayObject(context) {
    return new _views_block_view__WEBPACK_IMPORTED_MODULE_2__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 49606:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/layouts/cautionary-layout.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CautionaryLayout)
/* harmony export */ });
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measure-layout */ 7536);

class CautionaryLayout extends _measure_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, measure, sysEndMeasure, sysNextMeasure, topStaff, editorFonts, rootDiv, noteEditorService) {
    super(context, measure, editorFonts, rootDiv, noteEditorService);
    this.needTime = false;
    this._topStaff = false;
    this._topStaff = topStaff;
    this._sysEndMeasure = sysEndMeasure;
    this._sysNextMeasure = sysNextMeasure;
  }
  get needed() {
    return CautionaryLayout.isNeeded(this.measure, this._sysEndMeasure, this._sysNextMeasure);
  }
  static isNeeded(measure, sysEndMeasure, sysNextMeasure) {
    return sysNextMeasure && sysNextMeasure.timeSignatureNotation && measure.systemMeasure.timeSignatureNotation && !sysNextMeasure.baseTimeSignature.sameTimeProperties(sysEndMeasure.baseTimeSignature);
  }
  buildChildLayouts() {
    this.initializeNotationLayouts();
    if (this.needed) {
      const timeSignatureNotation = this.measure.systemMeasure.timeSignatureNotation;
      this.addNotationLayout(this.createNotationLayout(timeSignatureNotation, this.measure.effectiveClef));
    }
  }
  doValidateGlobalLayout() {
    super.doValidateGlobalLayout();
  }
  buildGlobalLayouts() {
    this._globalLayouts = [];
  }
  createMeasureView(context, staffView) {
    const measureView = super.createMeasureView(context, staffView);
    measureView.highlightEnabled = false;
    return measureView;
  }
}

/***/ }),

/***/ 44466:
/*!************************************************************!*\
  !*** ./src/app/note-editor/layouts/chord-symbol-layout.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChordSymbolLayout)
/* harmony export */ });
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_fretboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/fretboard */ 24217);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_chord_symbol_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/chord-symbol-view */ 68680);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _text_notation_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text-notation-layout */ 88175);







class ChordSymbolLayout extends _text_notation_layout__WEBPACK_IMPORTED_MODULE_6__["default"] {
  static get SUPERSCRIPT_SIZE() {
    return 0.75;
  }
  static get SUPERSCRIPT_Y() {
    return 0.75;
  }
  static get SMALL_SIZE() {
    return 0.75;
  }
  static get FIGURED_BASS_SPACING() {
    return 2;
  }
  static get FIGURED_BASS_SIZE() {
    return 0.75;
  }
  static get SCALE_DEGREE_SPACING() {
    return 1.5;
  }
  static get SCALE_DEGREE_SIZE() {
    return 0.75;
  }
  get chordSymbol() {
    return this.notation;
  }
  get fretboard() {
    return this.chordSymbol.fretboard || this._fretboard;
  }
  set fretboard(v) {
    this._fretboard = v;
  }
  get justifyOffset() {
    if (this.context.staffMetrics.centerChordSymbols) {
      return -this.glyphWidths / 2 + 0.5;
    } else {
      return 0;
    }
  }
  constructor(context, measureLayout, notation, scoreChordSymbol, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, context.staffMetrics.chordSymbolPadding, editorFonts, rootDiv, noteEditorService);
    this._scoreChordSymbol = null;
    this._superscript = false;
    this._small = false;
    this._fretboard = null;
    this._scoreChordSymbol = scoreChordSymbol;
    this.editorFonts = editorFonts;
  }
  doValidateLayout() {
    this.initializeLayout();
    super.createBoxOutsideText();
    super.doValidateLayout();
  }
  initializeLayout() {
    const staffMetrics = this.context.staffMetrics;
    const notFretboardShowDiagrams = staffMetrics.showChordDiagrams && !this.fretboard && !this.chordSymbol.hideFretboards;
    if (notFretboardShowDiagrams) {
      this.padding.y -= staffMetrics.chordFramePadding.y;
    }
    if (!this.chordSymbol.hideChordSymbols) {
      let renderText = this._scoreChordSymbol.renderText;
      const matchArr = /^[^:]+: */.exec(renderText);
      if (matchArr) {
        let text = matchArr[0];
        this.addChordText(text.replace(/[\^\!]/g, ''));
        renderText = renderText.substring(text.length);
        for (let i = 0; i < this._glyphLayouts.length; i++) {
          this._glyphLayouts[i].distanceX -= this._x;
        }
        this._x = 0;
      }
      if (_models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"].isFiguredBass(renderText)) {
        this.addFiguredBass(renderText, false, false);
        return;
      }
      let h = false;
      const segments = renderText.split(/([\^\(][0-9@#%*\$\-\+\\_]+[ \/\r\n]+[0-9 \/\r\n@#%*\$\-\+\\_]+[\^\)])/);
      for (let i = 0; i < segments.length; i++) {
        const segment = segments[i];
        if (segment) {
          if (h) {
            if (segment.charAt(0) === '(' && ')' === segment.charAt(segment.length - 1)) {
              this.addChordText('(');
              this.addFiguredBass(segment.substring(1, segment.length - 1), true, true);
              this.addChordText(')');
            } else {
              this.addFiguredBass(segment.substring(1, segment.length - 1), true, true);
            }
          } else {
            this.addChordText(segment);
          }
        }
        h = !h;
      }
      const justifyOffset = this.justifyOffset;
      if (justifyOffset !== 0) {
        for (let i = 0; i < this._glyphLayouts.length; i++) {
          const glyphLayout = this._glyphLayouts[i];
          glyphLayout.distanceX += justifyOffset;
        }
      }
    }
    if (notFretboardShowDiagrams) {
      this._fretboard = _models_fretboard__WEBPACK_IMPORTED_MODULE_2__["default"].fromChordSymbol(this.chordSymbol, this.chordSymbol.measure.part.fretboardMap);
    }
    if (this.fretboard) {
      const p = (this.fretboard.strings - 1) * staffMetrics.chordFrameStringSpacing;
      let m = p;
      //   if (this.chordSymbol.effectiveFirstFretText) {
      //     m += 2;
      //   }
      const enptyGlyph = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](m * staffMetrics.lineSpacing, 0, this.noteEditorService);
      const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"]);
      if (staffMetrics.chordFrameFretSpacing * this.fretboard.frets) {
        glyphLayout.distanceX -= p / 2;
      }
      if (this.chordSymbol.hideFretboards) {
        const v = staffMetrics.chordFrameFretSpacing * this.fretboard.frets;
        for (let i = 0; i < this._glyphLayouts.length; i++) {
          this._glyphLayouts[i].distanceY -= v;
        }
      } else {
        this.addGlyphLayout(glyphLayout);
      }
    }
  }
  addChordText(text) {
    let e = '';
    for (let i = 0; i < text.length; i++) {
      const s = text.charAt(i);
      if ('!@#$%*^[&'.indexOf(s) >= 0 && e.length > 0) {
        this.addGlyph(this.createTextGlyph(e));
        e = '';
      }
      if ('@#$%*['.indexOf(s) >= 0) {
        this.addGlyph(this.foundry.getChordSymbol(s));
      } else if ('^' === s) {
        this._superscript = !this._superscript;
        this._scale = this._superscript ? ChordSymbolLayout.SUPERSCRIPT_SIZE : 1;
        this._y = this._superscript ? ChordSymbolLayout.SUPERSCRIPT_Y : 0;
      } else if ('!' === s) {
        this._small = !this._small;
        this._scale = this._small ? ChordSymbolLayout.SMALL_SIZE : 1;
      } else if ('&' === s) {
        const x = this._x;
        const y = this._y;
        const scale = this._scale;
        this._y += ChordSymbolLayout.SCALE_DEGREE_SPACING;
        this._scale *= ChordSymbolLayout.SCALE_DEGREE_SIZE;
        this.addGlyph(this.createTextGlyph('^'));
        this._x = x;
        this._y = y;
        this._scale = scale;
      } else {
        e += s;
      }
    }
    if (e.length > 0) {
      this.addGlyph(this.createTextGlyph(e), e.match(/^_+$/) ? 0 : this.glyphGap);
    }
  }
  addFiguredBass(renderText, horizontalSpacing, verticalSpacing) {
    const staffMetrics = this.context.staffMetrics;
    if (!horizontalSpacing && '(' === renderText.charAt(0) && ')' === renderText.charAt(renderText.length - 1)) {
      this.addChordText('(');
      this.addFiguredBass(renderText.substring(1, renderText.length - 1), true, false);
      this.addChordText(')');
      return;
    }
    this._scale *= ChordSymbolLayout.FIGURED_BASS_SIZE;
    let lineStr,
      line,
      x = this._x,
      o = this._x,
      y = this._y;
    const lines = renderText.split(/[ \/\r\n]+/);
    if (horizontalSpacing) {
      let f = 0;
      for (let i = 0; i < lines.length; i++) {
        line = lines[i];
        if (line.length > 1 && !line.charAt(0).match(/[0-9\\]/)) {
          f = Math.max(f, this.createChordGlyph(line.charAt(0)).width);
        }
      }
      o += f * this._scale / staffMetrics.lineSpacing + this.glyphGap;
    }
    if (verticalSpacing) {
      this._y += (line.length - 1) * this._scale * ChordSymbolLayout.FIGURED_BASS_SPACING;
    }
    for (let i = 0; i < lines.length; i++) {
      line = lines[i];
      this._x = o;
      for (let idx = 0; idx < line.length; idx++) {
        const char = line.charAt(idx);
        const chordGlyph = this.createChordGlyph(char);
        if (!char.match(/[0-9\\]/) && idx === 0 && line.length > 1) {
          this._x -= chordGlyph.width * this._scale / staffMetrics.lineSpacing + this.glyphGap;
        }
        this.addGlyph(chordGlyph, '_' === char ? 0 : this.glyphGap);
        if ('\\' === char) {
          this._x = o;
        }
        x = Math.max(x, this._x);
      }
      this._y -= this._scale * ChordSymbolLayout.FIGURED_BASS_SPACING;
    }
    this._scale /= ChordSymbolLayout.FIGURED_BASS_SIZE;
    this._x = x;
    this._y = y;
  }
  createChordGlyph(char) {
    if ('@#$*%'.indexOf(char) >= 0) {
      return this.foundry.getChordSymbol(char);
    } else {
      return this.createTextGlyph(char);
    }
  }
  createTextFormat() {
    const staffMetrics = this.context.staffMetrics;
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_3__["default"](staffMetrics.chordSymbolFont, staffMetrics.baseFontSize * staffMetrics.chordSymbolSize);
  }
  createDisplayObject() {
    this.doValidateGlobalLayout();
    return new _views_chord_symbol_view__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, this, this.editorFonts, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 45111:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/chunk-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChunkLayout)
/* harmony export */ });
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/uuid */ 1275);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./abstract-layout */ 45009);


class ChunkLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get leftMargin() {
    return this._leftMargin;
  }
  set leftMargin(v) {
    this._leftMargin = v;
  }
  get rightMargin() {
    return this._rightMargin;
  }
  set rightMargin(v) {
    this._rightMargin = v;
  }
  get distanceY() {
    return this._distanceY;
  }
  set distanceY(v) {
    this._distanceY = v;
  }
  get pageBreakY() {
    return this._pageBreakY;
  }
  set pageBreakY(v) {
    this._pageBreakY = v;
  }
  get forceReflow() {
    return this._forceReflow;
  }
  set forceReflow(v) {
    this._forceReflow = v;
  }
  constructor(context, displayMode, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._forceReflow = false;
    this._displayMode = displayMode;
    this.leftMargin = 0;
    this.rightMargin = 0;
    this.distanceY = 0;
    this.pageBreakY = 0;
    this._uuid = (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_0__.generateUUID)();
  }
  get uuid() {
    return this._uuid;
  }
  get displayMode() {
    return this._displayMode;
  }
  get staffMetrics() {
    return this.context.staffMetrics;
  }
  get pageMetrics() {
    return this.context.pageMetrics;
  }
  get systemMeasure() {
    throw new Error('systemMeasure not overriden');
  }
  get unpaddedHeight() {
    throw new Error('unpaddedHeight not overriden');
  }
  get bottomY() {
    throw new Error('bottomY not overriden');
  }
  get topPadding() {
    throw new Error('topPadding not overriden');
  }
  get bottomPadding() {
    throw new Error('bottomPadding not overriden');
  }
  get leftPadding() {
    throw new Error('leftPadding not overriden');
  }
  get startMeasureIndex() {
    throw new Error('startMeasureIndex not overriden');
  }
  get endMeasureIndex() {
    throw new Error('endMeasureIndex not overriden');
  }
  get score() {
    throw new Error('score not overriden');
  }
  invalidateSystemStart() {
    throw new Error('invalidateSystemStart not overriden');
  }
  prepareLayout() {
    throw new Error('prepareLayout not overriden');
  }
  createDisplayObject(t) {
    throw new Error('createDisplayObject not overridden');
  }
}

/***/ }),

/***/ 29567:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/clef-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ClefLayout)
/* harmony export */ });
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-layout */ 18810);




class ClefLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get floating() {
    return this._clefChange;
  }
  get clefChange() {
    return this._clefChange;
  }
  constructor(context, measureLayout, notation, clefChange, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, notation, noteEditorService, rootDiv);
    this._clefChange = false;
    this._clefChange = clefChange;
    let clefGlyph;
    if (this.foundry) {
      if (notation.showSign) {
        clefGlyph = this.foundry.getClef(notation.sign);
      } else {
        clefGlyph = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, this.noteEditorService);
      }
    }
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, clefGlyph);
    const staffMetrics = this.context.staffMetrics;
    if (clefChange) {
      glyphLayout.scale = staffMetrics.smallClefScale;
      this.padding = staffMetrics.clefChangePadding;
    } else {
      this.padding = staffMetrics.clefPadding;
    }
    if (notation instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      glyphLayout.scale = notation.clefScale;
    }
    glyphLayout.distanceY = notation.line * notation.lineSpacing;
    this.addGlyphLayout(glyphLayout);
  }
}

/***/ }),

/***/ 41967:
/*!***********************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/compound-constraint.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CompoundConstraint)
/* harmony export */ });
/* harmony import */ var _layout_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout-constraint */ 73848);
/* harmony import */ var _layout_weights__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout-weights */ 8370);


class CompoundConstraint extends _layout_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get isCompound() {
    return true;
  }
  get constraints() {
    return this._constraints;
  }
  set constraints(val) {
    this._constraints = val;
    this.invalidateLayoutVector();
    this._constraintsList = null;
  }
  get constraintsList() {
    if (this._constraintsList == null) {
      this._constraintsList = this.computeConstraintsList();
    }
    return this._constraintsList;
  }
  constructor(constraints) {
    super();
    this._constraints = null;
    this._scaleDependents = [];
    this._constraintsList = null;
    this._constraints = constraints;
  }
  addConstraint(constraint) {
    this._constraints.push(constraint);
    this.invalidateLayoutVector();
  }
  addScaleDependent(scaleDependent) {
    this._scaleDependents.push(scaleDependent);
  }
  checkTargetConstraints(dict1, dict2) {
    for (let i = 0; i < this._constraints.length; i++) {
      const constraint = this._constraints[i];
      const layoutConstraint = constraint;
      layoutConstraint.doCheckConstraintCycles(dict1, dict2);
    }
  }
  generateLayoutVector(layoutWeight) {
    if (layoutWeight && layoutWeight !== this.lastWeights || !this.layoutVectorValid) {
      if (!layoutWeight) {
        for (let i = 0; i < this.constraintsList.length; i++) {
          const constraints = this.constraintsList[i];
          if (constraints.lastWeights && constraints.layoutVectorValid) {
            layoutWeight = constraints.lastWeights;
            break;
          }
        }
      }
      if (!layoutWeight) {
        layoutWeight = _layout_weights__WEBPACK_IMPORTED_MODULE_1__["default"].STANDARD_WEIGHTS;
      }
      for (let i = 0; i < this.constraintsList.length; i++) {
        const constraints = this.constraintsList[i];
        if (!constraints.layoutVectorValid || layoutWeight && layoutWeight != constraints.lastWeights) {
          constraints.lastWeights = layoutWeight;
          constraints.computeLayoutVector(layoutWeight);
        }
      }
    }
  }
  computeConstraintsList() {
    const constraintsList = [];
    const compoundConstraints = [];
    compoundConstraints.push(this);
    while (compoundConstraints.length > 0) {
      const lastConstraint = compoundConstraints[compoundConstraints.length - 1];
      switch (lastConstraint.phaseAddingToConstraintsList) {
        case 0:
          for (let i = 0; i < lastConstraint._constraints.length; i++) {
            const constraint = lastConstraint._constraints[i];
            const layoutConstraint = constraint;
            if (!layoutConstraint.doneAddingToConstraintsList) {
              if (layoutConstraint instanceof CompoundConstraint) {
                compoundConstraints.push(layoutConstraint);
              } else {
                constraintsList.push(layoutConstraint);
                layoutConstraint.doneAddingToConstraintsList = true;
              }
            }
          }
          for (let i = 0; i < lastConstraint._scaleDependents.length; i++) {
            const scaleDependent = lastConstraint._scaleDependents[i];
            const layoutConstraint = scaleDependent;
            if (!layoutConstraint.doneAddingToConstraintsList) {
              if (layoutConstraint instanceof CompoundConstraint) {
                compoundConstraints.push(layoutConstraint);
              } else {
                constraintsList.push(layoutConstraint);
                layoutConstraint.doneAddingToConstraintsList = true;
              }
            }
          }
          lastConstraint.phaseAddingToConstraintsList = 1;
          break;
        case 1:
          constraintsList.push(lastConstraint);
          lastConstraint.doneAddingToConstraintsList = true;
          compoundConstraints.pop();
          break;
      }
    }
    for (let i = 0; i < constraintsList.length; i++) {
      const constraint = constraintsList[i];
      constraint.doneAddingToConstraintsList = false;
      constraint.phaseAddingToConstraintsList = 0;
    }
    return constraintsList;
  }
}

/***/ }),

/***/ 75567:
/*!**************************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/layout-constraint-pari.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutConstraintPair)
/* harmony export */ });
class LayoutConstraintPair {
  constructor(layout, constraint) {
    this.constraint = null;
    this.layout = null;
    this.layout = layout;
    this.constraint = constraint;
  }
}

/***/ }),

/***/ 73848:
/*!*********************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/layout-constraint.ts ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutConstraint)
/* harmony export */ });
/* harmony import */ var _utils_dictionary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/dictionary */ 97837);
/* harmony import */ var _layout_weights__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./layout-weights */ 8370);


class LayoutConstraint {
  constructor() {
    this._layoutVectorValid = false;
    this._length = NaN;
    this._timeScaleDerivative = NaN;
    this._sizeScaleDerivative = NaN;
    this.lastWeights = null;
    this.doneAddingToConstraintsList = false;
    this.phaseAddingToConstraintsList = 0;
  }
  static get MAX_ITERATIONS() {
    return 100;
  }
  get layoutVectorValid() {
    return this._layoutVectorValid;
  }
  get length() {
    return this._length;
  }
  get timeScaleDerivative() {
    return this._timeScaleDerivative;
  }
  get sizeScaleDerivative() {
    return this._sizeScaleDerivative;
  }
  get layoutVector() {
    try {
      this.layoutVectorValid || this.generateLayoutVector(null);
    } catch (err) {
      if (!(err instanceof RangeError)) throw err;
      console.warn('caught', err);
    }
    return this;
  }
  setLayoutVector(length, timeScaleDerivative, sizeScaleDerivative) {
    this._length = length;
    this._timeScaleDerivative = timeScaleDerivative;
    this._sizeScaleDerivative = sizeScaleDerivative;
    this._layoutVectorValid = true;
  }
  setFromLayoutVector(layoutVector) {
    if (layoutVector) {
      this.setLayoutVector(layoutVector.length, layoutVector.timeScaleDerivative, layoutVector.sizeScaleDerivative);
    } else {
      this.invalidateLayoutVector();
    }
  }
  invalidateLayoutVector() {
    this._layoutVectorValid = false;
  }
  generateLayoutVector(layoutWeights) {
    if (layoutWeights && layoutWeights != this.lastWeights || !this.layoutVectorValid) {
      this.lastWeights = layoutWeights || this.lastWeights || _layout_weights__WEBPACK_IMPORTED_MODULE_1__["default"].STANDARD_WEIGHTS;
      this.computeLayoutVector(this.lastWeights);
    }
  }
  computeLayoutVector(layoutWeights) {
    throw new Error('computeLayoutVector() not overridden');
  }
  solveForLength(contentWidth, inaccurate) {
    this.generateLayoutVector(new _layout_weights__WEBPACK_IMPORTED_MODULE_1__["default"](0, 1));
    if (contentWidth < this.layoutVector.length) {
      this.solveSizeScaleForLength(contentWidth, inaccurate);
    } else {
      this.solveTimeScaleForLength(contentWidth, inaccurate);
    }
  }
  solveSizeScaleForLength(contentWidth, inaccurate) {
    let sizeScale = 1;
    for (let i = 0; i < LayoutConstraint.MAX_ITERATIONS; i++) {
      this.generateLayoutVector(new _layout_weights__WEBPACK_IMPORTED_MODULE_1__["default"](0, sizeScale));
      if (Math.abs(this.layoutVector.length - contentWidth) < inaccurate) {
        return;
      }
      sizeScale -= (this.layoutVector.length - contentWidth) / this.layoutVector.sizeScaleDerivative;
    }
    throw new Error('solveSizeScaleForLength failed to converge!');
  }
  solveTimeScaleForLength(contentWidth, inaccurate) {
    let timeScale = 1;
    for (let i = 0; i < LayoutConstraint.MAX_ITERATIONS; i++) {
      this.generateLayoutVector(new _layout_weights__WEBPACK_IMPORTED_MODULE_1__["default"](timeScale, 1));
      if (Math.abs(this.layoutVector.length - contentWidth) < inaccurate) {
        return;
      }
      if (this.layoutVector.timeScaleDerivative === 0) {
        timeScale += 0.1;
      } else {
        timeScale -= (this.layoutVector.length - contentWidth) / this.layoutVector.timeScaleDerivative;
      }
    }
    // throw new Error('solveTimeScaleForLength failed to converge!');
  }

  checkConstraintCycles() {
    const dict1 = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_0__["default"]();
    const dict2 = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.doCheckConstraintCycles(dict1, dict2);
  }
  doCheckConstraintCycles(dict1, dict2) {
    if (!dict1.map.has(this)) {
      if (dict2.map.has(this)) {
        throw new Error('constraint cycle found');
      }
      dict2.put(this, true);
      this.checkTargetConstraints(dict1, dict2);
      dict1.put(this, true);
    }
  }
  checkTargetConstraints(dict1, dict2) {}
}

/***/ }),

/***/ 8370:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/layout-weights.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutWeights)
/* harmony export */ });
class LayoutWeights {
  static get STANDARD_WEIGHTS() {
    return LayoutWeights.standard_weights;
  }
  static get FLOW_WEIGHTS() {
    return LayoutWeights.flow_weights;
  }
  constructor(timeScale, sizeScale) {
    this.timeScale = NaN;
    this.sizeScale = NaN;
    this.timeScale = timeScale;
    this.sizeScale = sizeScale;
  }
}
LayoutWeights.standard_weights = new LayoutWeights(1, 1);
LayoutWeights.flow_weights = new LayoutWeights(0.9, 1);

/***/ }),

/***/ 24056:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/max-constraint.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MaxConstraint)
/* harmony export */ });
/* harmony import */ var _compound_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compound-constraint */ 41967);

class MaxConstraint extends _compound_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(constraints) {
    super(constraints);
  }
  computeLayoutVector(layoutWeights) {
    let maxLayoutVector = null;
    for (let i = 0; i < this.constraints.length; i++) {
      const constraint = this.constraints[i];
      const layoutVector = constraint.layoutVector;
      // if (isNaN(layoutVector.length)) {
      //   debugger;
      //   layoutVector.computeLayoutVector(layoutWeights);
      // }
      if (maxLayoutVector == null || layoutVector.length > maxLayoutVector.length) {
        maxLayoutVector = layoutVector;
      }
    }
    this.setFromLayoutVector(maxLayoutVector);
  }
}

/***/ }),

/***/ 10181:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/min-constraint.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MinConstraint)
/* harmony export */ });
/* harmony import */ var _compound_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compound-constraint */ 41967);

class MinConstraint extends _compound_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(constraints) {
    super(constraints);
  }
  computeLayoutVector(layoutWeights) {
    let minLayoutVector = null;
    for (let i = 0; i < this.constraints.length; i++) {
      const constraint = this.constraints[i];
      const layoutVector = constraint.layoutVector;
      // if (isNaN(layoutVector.length)) {
      //   debugger;
      //   layoutVector.computeLayoutVector(layoutWeights);
      // }
      if (minLayoutVector == null || layoutVector.length < minLayoutVector.length) {
        minLayoutVector = layoutVector;
      }
    }
    this.setFromLayoutVector(minLayoutVector);
  }
}

/***/ }),

/***/ 46321:
/*!********************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/space-constraint.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpaceConstraint)
/* harmony export */ });
/* harmony import */ var _layout_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout-constraint */ 73848);

class SpaceConstraint extends _layout_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(sizeLength) {
    super();
    this.sizeLength = NaN;
    this.sizeLength = sizeLength;
  }
  computeLayoutVector(layoutWeights) {
    this.setLayoutVector(this.sizeLength * layoutWeights.sizeScale, 0, this.sizeLength);
  }
}

/***/ }),

/***/ 57962:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/sum-constraint.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SumConstraint)
/* harmony export */ });
/* harmony import */ var _compound_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./compound-constraint */ 41967);

class SumConstraint extends _compound_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(constraints) {
    super(constraints);
  }
  computeLayoutVector(layoutWeights) {
    let length = 0,
      timeScaleDerivative = 0,
      sizeScaleDerivative = 0;
    for (let i = 0; i < this.constraints.length; i++) {
      const constraint = this.constraints[i];
      const layoutVector = constraint.layoutVector;
      // if (isNaN(layoutVector.length)) {
      //   debugger;
      //   layoutVector.computeLayoutVector(layoutWeights);
      // }
      length += layoutVector.length;
      timeScaleDerivative += layoutVector.timeScaleDerivative;
      sizeScaleDerivative += layoutVector.sizeScaleDerivative;
    }
    this.setLayoutVector(length, timeScaleDerivative, sizeScaleDerivative);
  }
}

/***/ }),

/***/ 30815:
/*!*******************************************************************!*\
  !*** ./src/app/note-editor/layouts/constraint/time-constraint.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TimeConstraint)
/* harmony export */ });
/* harmony import */ var _layout_constraint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./layout-constraint */ 73848);

class TimeConstraint extends _layout_constraint__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(timeLength, scale = 1) {
    super();
    this.timeLength = NaN;
    this.scale = NaN;
    this.timeLength = timeLength;
    this.scale = scale;
  }
  computeLayoutVector(layoutWeights) {
    this.setLayoutVector(this.timeLength * layoutWeights.timeScale * this.scale, this.timeLength * this.scale, 0);
  }
}

/***/ }),

/***/ 44670:
/*!******************************************************!*\
  !*** ./src/app/note-editor/layouts/effect-layout.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EffectLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notation-layout */ 18810);



class EffectLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.affectsWidth = true;
    this.affectsHeight = false;
    this.spacingX = 0;
    this.spacingY = 0;
    this._ascent = notation.ascent;
    this._shift = notation.shift;
    this._length = notation.length;
  }
  get bottomLeft() {
    const left = Math.min(this.spacingX + this._shift, this.spacingX);
    const bottom = Math.max(this.spacingY + this._ascent, this.spacingY);
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](left, bottom);
  }
  get width() {
    return Math.abs(this._shift);
  }
  get ascent() {
    return this._ascent;
  }
  get shift() {
    return this._shift;
  }
  get horizontalSpacing() {
    throw new Error('Not implemented');
  }
  get verticalSpacing() {
    return 0; //this.staffMetrics.effectVerticalSpacing;  TODO
  }

  get offLinePadding() {
    throw new Error('Not implemented');
  }
  get bounds() {
    const bottomLeft = this.bottomLeft;
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](bottomLeft.x, bottomLeft.y, this._length, this._ascent);
  }
  get staffMetrics() {
    return this._context.staffMetrics;
  }
  createDisplayObject(t) {
    throw new Error('Not implemented');
  }
}

/***/ }),

/***/ 65754:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/effect-view.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EffectView)
/* harmony export */ });
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _views_selectable_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/selectable-view */ 35707);
/* harmony import */ var _views_selection_handle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/selection-handle */ 31448);



class EffectView extends _views_selectable_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  static get WAVY_SPACING_ADJUSTMENT() {
    return -1.6;
  }
  get layout() {
    return this._layout;
  }
  get notation() {
    return this._notation;
  }
  get selected() {
    return this.context.document && this.context.document.selection && this.context.document.selection.includes(this._notation) && this.context.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"];
  }
  get spacingXAdjustment() {
    return this.toViewUnits(EffectView.WAVY_SPACING_ADJUSTMENT) / 6;
  }
  constructor(context, layout, startX, startY, noteEditorService, rootDiv) {
    super(context, layout.notation, noteEditorService, rootDiv);
    this._layout = layout;
    this._notation = layout.notation;
    this.startX = startX;
    this.startY = startY;
    this._effectMediator = context.registerEffectView(this);
    this.initializeView();
  }
  addHandle(x, y, dragMediator) {
    const selectionHandle = new _views_selection_handle__WEBPACK_IMPORTED_MODULE_2__["default"](this.context, this.noteEditorService);
    if (this._notation.wavyType) {
      selectionHandle.rotation = -this._notation.rotation * (180 / Math.PI);
      selectionHandle.y = 0;
      // todo;
      // if (dragMediator instanceof EffectEndDragMediator) {
      //   selectionHandle.x =
      //     Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)) + this.toViewUnits(1);
      // } else {
      //   selectionHandle.x = x;
      // }
    } else {
      selectionHandle.y = y;
      selectionHandle.x = x;
    }
    this._handles.push(selectionHandle);
    this._children[0].addChild(selectionHandle);
    // selectionHandle.addEventListener(
    //     FlashMouseEvent.MOUSE_DOWN,
    //     RumtimeHelper.bindMethod(
    //       dragMediator,
    //       dragMediator.handleMouseDown
    //     )
    //   );
  }

  destroyChildren() {
    this.removeHandles();
  }
  updateSelectionFeedback() {
    if (this.context.document && this.context.document.isModelEditable(this._notation) && this.selected && this._handles.length === 0) {
      // todo
      // this.addHandle(
      //   this.toViewUnits(this._layout.shift),
      //   this.toViewUnits(this._layout.ascent),
      //   new EffectEndDragMediator(this.context, this._notation, this)
      // );
      // this.addHandle(
      //   this.toViewUnits(0),
      //   this.toViewUnits(0),
      //   new EffectStartDragMediator(this.context, this._notation, this)
      // );
    } else {
      if (!this.selected) {
        this.removeHandles();
      }
    }
  }
  removeHandles() {
    for (let i = 0; i < this._handles.length; i++) {
      const handle = this._handles[i];
      this._children[0].removeChild(handle);
      handle.destroy();
    }
    this._handles = [];
  }
  destroy() {
    this._effectMediator.destroy();
    super.destroy();
  }
}

/***/ }),

/***/ 80477:
/*!***************************************************************!*\
  !*** ./src/app/note-editor/layouts/exoression-text-layout.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExpressionTextLayout)
/* harmony export */ });
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_expression_text_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/expression-text-view */ 2319);
/* harmony import */ var _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-notation-layout */ 88175);



class ExpressionTextLayout extends _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, context.staffMetrics.ExpressionTextPadding, editorFonts, rootDiv, noteEditorService);
  }
  doValidateLayout() {
    const dynamics = this.foundry.getDynamics(this.textNotation.text);
    if (dynamics) {
      this.addGlyph(dynamics);
    } else {
      let text = '';
      const words = this.textNotation.text.split(' ');
      for (let i = 0; i < words.length; i++) {
        const word = words[i];
        const dynamics = this.foundry.getDynamics(word);
        if (dynamics) {
          if (text !== '') {
            this.addGlyph(this.createTextGlyph(text));
            text = '';
            this._x += 0.5;
          }
          this._y -= 0.25;
          this.addGlyph(dynamics, 0.5);
          this._y += 0.25;
        } else {
          text += word + ' ';
        }
      }
      if ('' !== (text = text.replace(/ $/, ''))) {
        this.addGlyph(this.createTextGlyph(text));
      }
    }
    super.createBoxOutsideText();
    super.doValidateLayout();
  }
  createTextFormat() {
    const staffMetrics = this.context.staffMetrics;
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_0__["default"](staffMetrics.staffTextFont, staffMetrics.baseFontSize * staffMetrics.expressionTextSize, null, null, true);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_expression_text_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 28891:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/fall-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FallLayout)
/* harmony export */ });
/* harmony import */ var _effect_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effect-layout */ 44670);
/* harmony import */ var _fall_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fall-view */ 83245);


class FallLayout extends _effect_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
  }
  get horizontalSpacing() {
    return this.staffMetrics.fallHorizontalSpacing;
  }
  get verticalSpacing() {
    return this.staffMetrics.postEffectVerticalSpacing;
  }
  get offLinePadding() {
    return this.notation.wavyType ? 0 : this.staffMetrics.postEffectVerticalPaddingOffLine;
  }
  createDisplayObject(context) {
    return new _fall_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.spacingX, this.spacingY, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 83245:
/*!**************************************************!*\
  !*** ./src/app/note-editor/layouts/fall-view.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FallView)
/* harmony export */ });
/* harmony import */ var _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/glyph-series */ 56494);
/* harmony import */ var _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/effect-notation */ 4123);
/* harmony import */ var _views_line_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/line-view */ 36764);
/* harmony import */ var _effect_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./effect-view */ 65754);




class FallView extends _effect_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(context, layout, startX, startY, noteEditorService, rootDiv) {
    super(context, layout, startX, startY, noteEditorService, rootDiv);
  }
  updateView() {
    switch (this._notation.type) {
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.FALL1:
        const lineNotationSegment = this.layout._context.foundry.getLineNotationSegment(_models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.FALL1);
        const glyphSeries = new _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__["default"]([], this.spacingXAdjustment + lineNotationSegment.spacingX, this.noteEditorService);
        const r = Math.max(this.toViewUnits(Math.sqrt(Math.pow(this.layout.shift, 2) + Math.pow(this.layout.ascent, 2))), lineNotationSegment.width + lineNotationSegment.spacingX);
        glyphSeries.addRepeatingGlyph(lineNotationSegment, r);
        const displayObj = glyphSeries.createDisplayObject(this.context.info);
        displayObj.x = this.toViewUnits(this.startX);
        displayObj.y = this.toViewUnits(this.startY);
        displayObj.rotation = this._notation.rotation * (180 / Math.PI);
        this.addChild(displayObj);
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.FALL2:
        this.addChild(new _views_line_view__WEBPACK_IMPORTED_MODULE_2__["default"](this.toViewUnits(this.startX), this.toViewUnits(this.startY), this.toViewUnits(this.layout.width), this.toViewUnits(this.layout.ascent), this.toViewUnits(this.layout.staffMetrics.slideThickness), this.layout.staffMetrics, this.noteEditorService));
        break;
    }
  }
}

/***/ }),

/***/ 29532:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/glyph-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);


class GlyphLayout {
  static get ANCHOR_LEFT() {
    return -1;
  }
  static get ANCHOR_CENTER() {
    return 0;
  }
  static get ANCHOR_RIGHT() {
    return 1;
  }
  static get ANCHOR_BOTTOM() {
    return -1;
  }
  static get ANCHOR_TOP() {
    return 1;
  }
  get glyph() {
    return this._glyph;
  }
  get origin() {
    let originX, originY;
    switch (this.horizontalAnchor) {
      case GlyphLayout.ANCHOR_LEFT:
        originX = this.distanceX;
        break;
      case GlyphLayout.ANCHOR_CENTER:
        originX = this.distanceX - this.width / 2;
        break;
      case GlyphLayout.ANCHOR_RIGHT:
        originX = -(this.width + this.distanceX);
        break;
    }
    switch (this.verticalAnchor) {
      case GlyphLayout.ANCHOR_BOTTOM:
        originY = this.distanceY;
        break;
      case GlyphLayout.ANCHOR_TOP:
        originY = -(this.height + this.distanceY);
        break;
    }
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](originX, originY);
  }
  get bounds() {
    const scale = this.scale / this._context.staffMetrics.lineSpacing;
    const origin = this.origin;
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__["default"](this._glyph.originX * scale + origin.x, -this._glyph.originY * scale + origin.y, this._glyph.width * scale, this._glyph.height * scale);
  }
  get width() {
    return this._glyph.width * this.scale / this._context.staffMetrics.lineSpacing;
  }
  get height() {
    return this._glyph.height * this.scale / this._context.staffMetrics.lineSpacing;
  }
  get scale() {
    return this._scale;
  }
  set scale(v) {
    this._scale = v;
  }
  constructor(context, glyph) {
    this.horizontalAnchor = GlyphLayout.ANCHOR_LEFT;
    this.verticalAnchor = GlyphLayout.ANCHOR_BOTTOM;
    this.affectsWidth = true;
    this.affectsHeight = true;
    this.distanceX = 0;
    this.distanceY = 0;
    this._context = null;
    this._glyph = null;
    this._scale = 1;
    this._context = context;
    this._glyph = glyph;
    if (this._glyph == null) {
      debugger;
    }
  }
  createDisplayObject(viewInfo) {
    const displayObj = this._glyph.createDisplayObject(viewInfo.info);
    if (this.scale !== 1) {
      displayObj.scaleX *= this.scale;
      displayObj.scaleY *= this.scale;
    }
    const origin = this.origin;
    const lineSpacing = this._context.staffMetrics.lineSpacing;
    displayObj.x = origin.x * lineSpacing;
    displayObj.y = origin.y * -lineSpacing;
    return displayObj;
  }
}

/***/ }),

/***/ 41335:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/layouts/glyph-set-layout.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GlyphSetLayout)
/* harmony export */ });
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-layout */ 45009);

class GlyphSetLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get numGlyphLayouts() {
    return this._glyphLayouts.length;
  }
  constructor(context, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._glyphLayouts = [];
  }
  addGlyphLayout(layout) {
    this._glyphLayouts.push(layout);
  }
  getGlyphLayoutAt(idx) {
    return this._glyphLayouts[idx];
  }
  calculateBounds(bounds) {
    for (let i = 0; i < this._glyphLayouts.length; i++) {
      const glyphLayout = this._glyphLayouts[i];
      this.addGlyphToBounds(bounds, glyphLayout);
    }
  }
  addGlyphToBounds(parentBounds, glyphLayout) {
    const bounds = glyphLayout.bounds;
    if (glyphLayout.affectsWidth) {
      if (parentBounds.width === 0) {
        parentBounds.left = bounds.left;
        parentBounds.right = bounds.right;
      } else {
        parentBounds.left = Math.min(parentBounds.left, bounds.left);
        parentBounds.right = Math.max(parentBounds.right, bounds.right);
      }
    }
    if (glyphLayout.affectsHeight) {
      if (parentBounds.height === 0) {
        parentBounds.top = bounds.top;
        parentBounds.bottom = bounds.bottom;
      } else {
        parentBounds.top = Math.min(parentBounds.top, bounds.top);
        parentBounds.bottom = Math.max(parentBounds.bottom, bounds.bottom);
      }
    }
  }
}

/***/ }),

/***/ 53466:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/hairpin-span.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HairpinSpan)
/* harmony export */ });
/* harmony import */ var _views_hairpin_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/hairpin-view */ 50406);
/* harmony import */ var _system_span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./system-span */ 32047);


class HairpinSpan extends _system_span__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(staffLayout, sn, editorFonts, rootDiv, noteEditorService) {
    super(staffLayout, sn, editorFonts, rootDiv, noteEditorService);
  }
  get endBreakPadding() {
    return -this.staffMetrics.hairpinPadding.width;
  }
  createSystemSpanView(context, start, pEnd) {
    pEnd.x = Math.max(pEnd.x, start.x + this.staffMetrics.hairpinMinimumWidth * this.staffMetrics.lineSpacing);
    return new _views_hairpin_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, start, pEnd, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 52204:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/hyphen-element.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HyphenElement)
/* harmony export */ });
class HyphenElement {
  constructor(lyricLayout) {
    this.lyricLayout = null;
    this.lyricLayout = lyricLayout;
  }
}

/***/ }),

/***/ 62240:
/*!******************************************************!*\
  !*** ./src/app/note-editor/layouts/hyphen-layout.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HyphenLayout)
/* harmony export */ });
/* harmony import */ var _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/text-glyph */ 37857);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_hyphen_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/hyphen-view */ 95787);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glyph-layout */ 29532);





class HyphenLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get startLyricLayout() {
    return this._startLyricLayout;
  }
  get endLyricLayout() {
    return this._endLyricLayout;
  }
  get startMeasureExists() {
    return !!this.startLyricLayout.lyric.measure;
  }
  get beginningOfStaff() {
    return this._startMeasure;
  }
  get endOfMeasure() {
    return this._endMeasure;
  }
  get betweenLyrics() {
    return this.startLyricLayout && this.endLyricLayout;
  }
  get startHyphenMeasureIndex() {
    if (this._startMeasure) {
      return this._startMeasure.index;
    } else {
      return this.startLyricLayout.lyric.measure.index;
    }
  }
  get startHyphenMeasurePosition() {
    if (this._startMeasure) {
      return 0;
    } else {
      return this.startLyricLayout.lyric.position;
    }
  }
  get endHyphenMeasureIndex() {
    if (this.endLyricLayout) {
      return this.endLyricLayout.lyric.measure.index;
    } else {
      return this._endMeasure.index;
    }
  }
  get endHyphenMeasurePosition() {
    if (this.endLyricLayout) {
      return this.endLyricLayout.lyric.position;
    } else {
      return this._endMeasure.duration - 1;
    }
  }
  get lyricRightBound() {
    if (this._startMeasure) {
      return 0;
    } else {
      return this.startLyricLayout.bounds.right;
    }
  }
  get lyricLeftBound() {
    if (this.endLyricLayout) {
      return this.endLyricLayout.bounds.left;
    } else {
      return 0;
    }
  }
  constructor(context, startLyricLayout, startMeasure, endLyricLayout, endMeasure, editorFonts, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this.decorationLayout = null;
    this._endLyricLayout = null;
    this._startLyricLayout = null;
    this._startMeasure = null;
    this._endMeasure = null;
    this._startLyricLayout = startLyricLayout;
    this._endLyricLayout = endLyricLayout;
    this._startMeasure = startMeasure;
    this._endMeasure = endMeasure;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this.createLayout();
  }
  createLayout() {
    const staffMetrics = this.context.staffMetrics;
    const textFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_1__["default"](staffMetrics.lyricsFont, staffMetrics.baseFontSize * staffMetrics.lyricsSize, null, staffMetrics.lyricsBold, staffMetrics.lyricsItalic);
    const textGlyph = new _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](textFormat, '-', this.editorFonts, null, null, null, null, this.rootDiv, this.noteEditorService);
    this.decorationLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, textGlyph);
    this.decorationLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_LEFT;
  }
  createDisplayObject(context) {
    return new _views_hyphen_view__WEBPACK_IMPORTED_MODULE_2__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 14955:
/*!************************************************************!*\
  !*** ./src/app/note-editor/layouts/keysignature-layout.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeySignatureLayout)
/* harmony export */ });
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _models_accidental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/accidental */ 18659);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-layout */ 18810);




class KeySignatureLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get keySignature() {
    return this.notation;
  }
  constructor(context, measureLayout, notation, keySignature, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    let distanceX = 0;
    if (clef.showKey) {
      if (keySignature.cancel !== 0 && keySignature.fifths === 0) {
        distanceX = this.addKeyAccidentals(keySignature.cancel, clef, distanceX, _models_accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.NATURAL);
      }
      if (keySignature.fifths !== 0) {
        distanceX = this.addKeyAccidentals(keySignature.fifths, clef, distanceX, keySignature.fifths > 0 ? _models_accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.SHARP : _models_accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.FLAT);
      }
    }
    this.padding = context.staffMetrics.keySignaturePadding;
  }
  addKeyAccidentals(cancel, clef, distanceX, accidental) {
    let accidentalGlyph = this.foundry.getAccidental(accidental);
    if (clef.unpitched) {
      accidentalGlyph = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](accidentalGlyph.width, accidentalGlyph.height, this.noteEditorService);
    }
    const keySignatureLines = clef.getKeySignatureLines(cancel);
    for (let i = 0; i < keySignatureLines.length; i++) {
      const keySignatureLine = keySignatureLines[i];
      const distanceY = keySignatureLine;
      const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](this.context, accidentalGlyph);
      glyphLayout.distanceX = distanceX;
      glyphLayout.distanceY = distanceY;
      glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_LEFT;
      this.addGlyphLayout(glyphLayout);
      distanceX += this.context.staffMetrics.accidentalKeySignatureSpacing;
    }
    return distanceX;
  }
}

/***/ }),

/***/ 3131:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/label-notation-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LabelNotationLayout)
/* harmony export */ });
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_label_notation_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/label-notation-view */ 25059);
/* harmony import */ var _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-notation-layout */ 88175);



class LabelNotationLayout extends _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, context.staffMetrics.performanceTextPadding, editorFonts, rootDiv, noteEditorService);
    this._labelNotationGlyph = null;
  }
  doValidateLayout() {
    super.doValidateLayout();
    this._labelNotationGlyph = this.createTextGlyph(this.textNotation.text);
    this.addGlyph(this._labelNotationGlyph);
    this.createBoxOutsideText();
  }
  createTextFormat() {
    const staffMetrics = this.context.staffMetrics;
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_0__["default"](staffMetrics.staffTextFont, staffMetrics.baseFontSize * staffMetrics.labelTextSize);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_label_notation_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
  updateLabelNotationText(text) {
    if (this._labelNotationGlyph) {
      this._labelNotationGlyph.text = text;
    }
  }
}

/***/ }),

/***/ 73294:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/layout-context.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutContext)
/* harmony export */ });
class LayoutContext {
  constructor() {
    this.score = null;
    this.preview = false;
    this.scoreLayout = null;
    this._pageMetrics = null;
    this.stripMetrics = null;
    this._foundry = null;
    this._scaledFoundries = [];
    // lyricsContext = new LyricsContext(this);
    this.showingSvgPreview = false;
  }
  get pageMetrics() {
    return this.score.effectivePageMetrics;
  }
  set pageMetrics(v) {
    this._pageMetrics = v;
  }
  get foundry() {
    return this._foundry;
  }
  set foundry(v) {
    this._foundry = v;
    this._scaledFoundries = [];
  }
  get staffMetrics() {
    return this.score.effectiveStaffMetrics;
  }
  get partToPrint() {
    if (this.score) {
      return this.score.useIndividualPartInfo;
    } else {
      return null;
    }
  }
  getScaledFoundry(scale) {
    const scaleIdx = Math.floor(100 * scale);
    let scaleFoundry = this._scaledFoundries[scaleIdx];
    if (null == scaleFoundry) {
      scaleFoundry = this.foundry.getScaledFoundry(scale);
      this._scaledFoundries[scaleIdx] = scaleFoundry;
    }
    return scaleFoundry;
  }
}

/***/ }),

/***/ 99069:
/*!***************************************************!*\
  !*** ./src/app/note-editor/layouts/level-beam.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LevelBeam)
/* harmony export */ });
class LevelBeam {
  constructor(level, start, end) {
    this.level = 0;
    this.start = 0;
    this.end = 0;
    this.level = level;
    this.start = start;
    this.end = end;
  }
}

/***/ }),

/***/ 89280:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/liaison-layout.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LiaisonLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/liaison */ 31253);


class LiaisonLayout {
  get staffMetrics() {
    return this._context.staffMetrics;
  }
  get horizontalPadding() {
    return this.staffMetrics.tieHorizontalPadding;
  }
  get lineDither() {
    return this.staffMetrics.tieStaffLineDither;
  }
  get leftSpacing() {
    if (this.singleNote && (this._leftNl.note.stemless || !this.adjustForLiaisonCrossingStem)) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](this._leftNsl.noteWidth / 2 + this.staffMetrics.tieSingleNoteCenterPadding, (this._leftNsl.noteHeight / 4 + this.staffMetrics.tieSingleNoteBelowSpacing) * (this._leftNsl.down || this._rightNsl != null && this._rightNsl.down ? 1 : -1));
    }
    let x = this._leftNsl.leftX - this._leftNsl.x + this._leftNsl.noteWidth;
    if (this._leftNsl.noteSet.dots > 0) {
      x += this.staffMetrics.dotSpacing + (this._leftNsl.noteSet.dots - 1) * this.staffMetrics.multipleDotGap + (this.horizontalPadding + this.staffMetrics.dotSpacing);
    } else {
      x += this.horizontalPadding;
    }
    if (this._leftNsl.hasAlternate && !this._leftNsl.down) {
      x += this._leftNsl.noteWidth;
    }
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](x, this._spacingY);
  }
  get adjustForLiaisonCrossingStem() {
    return this._leftNsl != null && this._rightNsl != null && !this._leftNsl.down && this._leftNsl.hasStem && this._rightNsl.down;
  }
  get rightSpacing() {
    if (this.singleNote && (null != this._leftNl && this._leftNl.note.stemless || !this.adjustForLiaisonCrossingStem)) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](-this._rightNsl.noteWidth / 2 + this.staffMetrics.tieSingleNoteCenterPadding, (this._rightNsl.noteHeight / 4 + this.staffMetrics.tieSingleNoteBelowSpacing) * (this._rightNsl.down ? 1 : -1));
    }
    let x = this.horizontalPadding + this._rightNsl.x - this._rightNsl.leftX;
    if (this._rightNsl.hasAlternate && this._rightNsl.down) {
      x += this._rightNsl.noteWidth;
    }
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](x, this._spacingY);
  }
  get singleNote() {
    return this._singleNote;
  }
  constructor(noteEditorService) {
    this._context = null;
    this._leftNsl = null;
    this._leftNl = null;
    this._rightNsl = null;
    this._rightNl = null;
    this._singleNote = false;
    this._liaisonCount = 0;
    this._width = NaN;
    this._spacingLine = NaN;
    this._spacingY = NaN;
    this._startLine = NaN;
    this._endLine = NaN;
    this._pitchDelta = NaN;
    this._ascent = NaN;
    this._dy = NaN;
    this._down = false;
    this.noteEditorService = noteEditorService;
  }
  setLiaisonInfo(leftNsl, leftNl, rightNsl, rightNl, singleNote, width, index, liaisonCount) {
    let nsl, nl; //nsl NoteSetLayout nl NotationLayout
    this._leftNsl = leftNsl;
    this._leftNl = leftNl;
    this._rightNsl = rightNsl;
    this._rightNl = rightNl;
    this._singleNote = singleNote;
    this._width = width;
    this._liaisonCount = liaisonCount;
    if (leftNsl) {
      nsl = leftNsl;
      nl = leftNl;
    } else {
      nsl = rightNsl;
      nl = rightNl;
    }
    if (!nsl) {
      throw new Error('nsl is expected to be non-null at this point');
    }
    this._context = nsl.context;
    if (nsl.multiVoice) {
      this._down = nsl.down;
    } else {
      const down = !nsl.down && this._rightNsl != null && this._rightNsl.down && this._rightNl != null;
      this._down = !(nsl.down || down);
      if (down) {
        index = this._liaisonCount - 1 - index;
      }
      if (index > Math.floor((this._liaisonCount - 1) / 2) || this._liaisonCount === 1 && !singleNote && (down ? this._rightNsl.noteLayouts.indexOf(this._rightNl) > Math.floor((this._rightNsl.numNoteLayouts - 1) / 2) : nsl.noteLayouts.indexOf(nl) > Math.floor((nsl.numNoteLayouts - 1) / 2))) {
        this._down = !this._down;
      }
    }
    if (nl != null) {
      this._spacingLine = nl.pitchLine;
      this._spacingY = nl.onStaffLine ? this._down ? -this.lineDither : this.lineDither : 0;
    } else {
      this._spacingLine = this._spacingY = 0;
    }
  }
  createLiaisonView() {
    let leftSpacingX, leftSpacingY, contentWidth;
    if (this._leftNsl != null) {
      leftSpacingX = this.leftSpacing.x;
      leftSpacingY = this.leftSpacing.y;
      contentWidth = this._rightNsl != null ? this._width - (leftSpacingX + this.rightSpacing.x) : this._width - (leftSpacingX + this.horizontalPadding);
      return this.doCreateView(this._leftNsl, this._leftNl, leftSpacingX, leftSpacingY, contentWidth);
    }
    leftSpacingX = this.horizontalPadding - this._width;
    leftSpacingY = this.rightSpacing.y;
    contentWidth = this._width - (this.horizontalPadding + this.rightSpacing.x);
    return this.doCreateView(this._rightNsl, this._rightNl, leftSpacingX, leftSpacingY, contentWidth);
  }
  doCreateView(nsl, nl, spacingX, spacingY, contentWidth) {
    throw new Error('doCreateView() not overridden');
  }
  calculateAscent() {
    if (this._leftNsl) {
      this._startLine = this._leftNl.pitchLine;
      if (this._rightNl) {
        this._endLine = this._rightNl.pitchLine;
        this._pitchDelta = this._rightNl.note.tunedOrdinal - this._leftNl.note.tunedOrdinal;
      } else {
        const liaisonEndNote = this._leftNl.note.liaisonEndNote;
        if (liaisonEndNote) {
          this._endLine = this._leftNsl.clef.getPitchLine(this._leftNsl.measureLayout.getScoreNote(liaisonEndNote)) * this._leftNsl.clef.lineSpacing;
          this._pitchDelta = liaisonEndNote.tunedOrdinal - this._leftNl.note.tunedOrdinal;
        } else {
          this._endLine = this._startLine;
          this._pitchDelta = 0;
        }
      }
      this._ascent = this._endLine - this._startLine;
      this._dy = this._startLine;
    } else {
      this._endLine = this._rightNl.pitchLine;
      const liaisonStartNote = this._rightNl.note.liaisonStartNote;
      if (liaisonStartNote) {
        this._startLine = this._rightNl.clef.getPitchLine(this._rightNl.measureLayout.getScoreNote(liaisonStartNote)) * this._rightNl.clef.lineSpacing;
        this._pitchDelta = this._rightNl.note.tunedOrdinal - liaisonStartNote.tunedOrdinal;
      } else {
        this._startLine = this._endLine;
        this._pitchDelta = 0;
      }
      this._ascent = this._endLine - this._startLine;
      this._dy = this._endLine - this._ascent;
    }
  }
  tieHeight(contentWidth) {
    return this.staffMetrics.tieStandardHeight(contentWidth) * (this._down ? -1 : 1);
  }
  static requireSingleNotePadding(type) {
    return type === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.SLIDE_LIAISON || type === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.BEND_LIAISON || type === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.GLISSANDO_LIAISON || type === _models_liaison__WEBPACK_IMPORTED_MODULE_1__.Liaison.PRE_BEND_LIAISON;
  }
  static adjustLiaisonSpacing(layouts) {
    if (layouts.length >= 2) {
      let idx, spacing, layout;
      if (layouts[0]._spacingLine > layouts[1]._spacingLine) {
        layouts = layouts.slice().reverse();
      }
      const tieMinimumVerticalSpacing = layouts[0].staffMetrics.tieMinimumVerticalSpacing;
      spacing = -999;
      for (idx = 0; idx < layouts.length; idx++) {
        layout = layouts[idx];
        if (!layout._down) {
          if (layout._spacingLine + layout._spacingY < spacing + tieMinimumVerticalSpacing) {
            layout._spacingY = spacing + 1 - layout._spacingLine;
          }
          spacing = layout._spacingLine + layout._spacingY;
        }
      }
      spacing = 999;
      for (idx = 0; idx < layouts.length; idx++) {
        layout = layouts[idx];
        if (layout._down) {
          if (layout._spacingLine + layout._spacingY > spacing - tieMinimumVerticalSpacing) {
            layout._spacingY = spacing - 1 - layout._spacingLine;
          }
          spacing = layout._spacingLine + layout.spacingY;
        }
      }
    }
  }
}

/***/ }),

/***/ 92527:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/layouts/line-notation-span.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineNotationSpan)
/* harmony export */ });
/* harmony import */ var _views_line_notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/line-notation-view */ 78479);
/* harmony import */ var _system_span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./system-span */ 32047);


class LineNotationSpan extends _system_span__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(staffLayout, sn, editorFonts, rootDiv, noteEditorService) {
    super(staffLayout, sn, editorFonts, rootDiv, noteEditorService);
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  get endBreakPadding() {
    return -this.staffMetrics.lineNotationPadding.width;
  }
  createSystemSpanView(context, start, pEnd) {
    return new _views_line_notation_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, start, pEnd, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
}

/***/ }),

/***/ 93300:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/lyric-extender-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LyricExtenderLayout)
/* harmony export */ });
/* harmony import */ var _glyph_h_line_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/h-line-glyph */ 17842);
/* harmony import */ var _views_lyric_extender_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/lyric-extender-view */ 63919);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph-layout */ 29532);




class LyricExtenderLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get startLyric() {
    return this._startLyric;
  }
  constructor(context, startLyric, endLyric, noteEditorService, rootDiv, goesToEndOfMeasures) {
    super(context, noteEditorService, rootDiv);
    this._startLyric = null;
    this._endLyric = null;
    this.decorationLayout = null;
    this._goesToEndOfMeasure = false;
    this._startLyric = startLyric;
    this._endLyric = endLyric;
    this._goesToEndOfMeasure = goesToEndOfMeasures;
  }
  doValidateLayout() {}
  doValidateGlobalLayout() {
    const staffMetrics = this.context.staffMetrics;
    if (this._startLyric.lyric.extend) {
      let startLyricX = this._startLyric.x;
      let right = startLyricX + staffMetrics.lyricExtensionLength;
      const startLyricNoteSet = this._startLyric.lyric.noteSet;
      const previousGraceHasLyric = startLyricNoteSet.previousGraceNote && startLyricNoteSet.previousGraceNote.hasLyricWithText(this._startLyric.lyric.line);
      if (this._startLyric.lyric.text) {
        startLyricX += this._startLyric.bounds.right + staffMetrics.lyricExtensionPadding;
        right = startLyricX + staffMetrics.lyricExtensionLength;
      } else if (startLyricNoteSet.position === 0 && !previousGraceHasLyric) {
        startLyricX = 0;
        right = this._startLyric.x + this._startLyric.bounds.right + staffMetrics.lyricExtensionPadding;
      }
      const nextNoteSet = this._startLyric.lyric.noteSet.nextNoteSet(true);
      if (nextNoteSet && (nextNoteSet.measure === this._startLyric.lyric.noteSet.measure || nextNoteSet.measure.index === this._startLyric.lyric.noteSet.measure.index + 1)) {
        const lyric = nextNoteSet.getLyricAtLine(this._startLyric.lyric.line, this._startLyric.lyric.direction);
        if (lyric && lyric.text === '' && lyric.extend) {
          if (this._goesToEndOfMeasure) {
            right = this._startLyric.measureLayout.x;
          } else {
            right = this._endLyric.x + this._endLyric.bounds.left;
            if (this._endLyric.lyric.text) {
              right -= staffMetrics.lyricExtensionPadding;
            }
          }
        }
      }
      const hLineGlyph = new _glyph_h_line_glyph__WEBPACK_IMPORTED_MODULE_0__["default"]((right - startLyricX) * staffMetrics.lineSpacing, this.noteEditorService, staffMetrics.lyricExtensionThickness);
      this.decorationLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, hLineGlyph);
      this.decorationLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_3__["default"].ANCHOR_LEFT;
      this.decorationLayout.distanceX = startLyricX;
      this.decorationLayout.distanceY = 0;
    }
  }
  createDisplayObject(context) {
    return new _views_lyric_extender_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService);
  }
}

/***/ }),

/***/ 43541:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/lyric-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LyricLayout)
/* harmony export */ });
/* harmony import */ var _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/text-glyph */ 37857);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_lyric_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/lyric-view */ 48997);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notation-layout */ 18810);






class LyricLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_5__["default"] {
  get lyric() {
    return this.notation;
  }
  get baseY() {
    return this._baseY;
  }
  set baseY(val) {
    this._baseY = val;
  }
  get lyricGlyphHeight() {
    return this._lyricGlyphLayout.height;
  }
  get direction() {
    return LyricLayout.lyricDirection(this.context, this.lyric);
  }
  get aboveStaff() {
    return this.direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_1__.Notation_Direction.DIRECTION_UP;
  }
  get measureIndex() {
    return this.measureLayout.measure.index;
  }
  constructor(layout, notation, editorFonts, rootDiv, noteEditorService) {
    super(layout.context, layout.measureLayout, notation, layout.clef, noteEditorService, rootDiv);
    this._beamableLayout = null;
    this._baseY = 0;
    this._lyricGlyphLayout = null;
    this._defaultingSpan = false;
    this._beamableLayout = layout;
    this.padding = this.context.staffMetrics.lyricsPadding;
    this.editorFonts = editorFonts;
  }
  static lyricDirection(context, lyric) {
    if (lyric.direction) {
      return lyric.direction;
    } else if (lyric.measure && lyric.measure.numVoice >= 2 && context.staffMetrics.useLyricDefaultDirection && lyric.noteSet.voice.index === 1) {
      return _models_notation_direction__WEBPACK_IMPORTED_MODULE_1__.Notation_Direction.DIRECTION_UP;
    } else {
      return _models_notation_direction__WEBPACK_IMPORTED_MODULE_1__.Notation_Direction.DIRECTION_DOWN;
    }
  }
  doValidateLayout() {
    this.initializeLayout();
    super.doValidateLayout();
  }
  doValidateGlobalLayout() {
    super.doValidateGlobalLayout();
    this.positionLyricGlyph();
    this.reviseBoundsAndGeometry();
  }
  initializeLayout() {
    const staffMetrics = this.context.staffMetrics;
    if (this.aboveStaff) {
      this.baseY = staffMetrics.lyricsAboveStaffBottom + staffMetrics.lyricsDescent * this.height;
    } else {
      this.baseY = staffMetrics.lyricsBelowStaffTop - staffMetrics.lyricsAscent * this.height;
    }
    const textFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_2__["default"](staffMetrics.lyricsFont, staffMetrics.baseFontSize * staffMetrics.lyricsSize, null, staffMetrics.lyricsBold, staffMetrics.lyricsItalic);
    let text = this.lyric.text;
    if (this.measureLayout.firstLayoutOnSystem && this.lyric.noteSet.position === 0 && this.lyric.noninitial && text !== '') {
      text = '-' + text;
    }
    const textGlyph = new _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](textFormat, text, this.editorFonts, null, null, null, null, this.rootDiv, this.noteEditorService);
    this._lyricGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, textGlyph);
    this.addGlyphLayout(this._lyricGlyphLayout);
    this.positionLyricGlyph();
  }
  positionLyricGlyph() {
    const nextNoteSet = this.lyric.noteSet.nextNoteSet(true);
    if (this.lyric.extend || this.lyric.continued && nextNoteSet && !nextNoteSet.hasLyricWithText(this.lyric.line)) {
      this._lyricGlyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_LEFT;
      this._lyricGlyphLayout.distanceX = 0;
    } else {
      this._lyricGlyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_CENTER;
      this._lyricGlyphLayout.distanceX = this._beamableLayout.notationWidth / 2;
    }
    this._lyricGlyphLayout.distanceY = LyricLayout.lyricY(this.context, this, null, this.lyric);
  }
  static lyricY(layoutContext, lyricLayout, staffLayout, lyric, isUpdate) {
    let baseY = 0,
      distanceY = 0,
      height = 0;
    const staffMetrics = layoutContext.staffMetrics;
    if (LyricLayout.lyricDirection(layoutContext, lyric) === _models_notation_direction__WEBPACK_IMPORTED_MODULE_1__.Notation_Direction.DIRECTION_DOWN) {
      if (lyricLayout) {
        height = lyricLayout.height;
        baseY = staffLayout ? staffLayout.minLyricBelowBaseY : lyricLayout.baseY;
        if (isUpdate) {
          distanceY = lyricLayout._lyricGlyphLayout.distanceY;
        }
        return lyric.line * -staffMetrics.lyricsLineSpacing + Math.min(staffMetrics.lyricsBelowStaffTop - staffMetrics.lyricsAscent * height, baseY) - distanceY;
      }
    }
    let extraLineHeight = 0;
    if (lyricLayout) {
      height = lyricLayout.height;
      baseY = lyricLayout.baseY - lyricLayout.lyricGlyphHeight;
      if (staffLayout) {
        baseY = staffLayout.maxLyricAboveBaseY;
        extraLineHeight = staffLayout.maxLyricExtraLinesAboveStaff * staffMetrics.lyricsLineSpacing;
      }
      if (isUpdate) {
        distanceY = lyricLayout._lyricGlyphLayout.distanceY;
      }
    }
    let y = Math.max(staffMetrics.lyricsAboveStaffBottom + staffMetrics.lyricsDescent * height, baseY) - distanceY;
    if (staffLayout) {
      y = y + extraLineHeight - lyric.line * staffMetrics.lyricsLineSpacing;
    }
    return y;
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_lyric_view__WEBPACK_IMPORTED_MODULE_3__["default"](context, this, this.editorFonts, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 83135:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-gap-layout.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureGapLayout)
/* harmony export */ });
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constraint/max-constraint */ 24056);
/* harmony import */ var _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constraint/space-constraint */ 46321);
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./measure-layout */ 7536);




class MeasureGapLayout extends _measure_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(context, measure, editorFonts, rootDiv, noteEditorService) {
    super(context, measure.clone(), editorFonts, rootDiv, noteEditorService);
    this.measure.clef = new _models_clef__WEBPACK_IMPORTED_MODULE_0__["default"](0, null, 0, null, 0, -1, 1);
    this.showAnnotations = false;
  }
  get leftPaddingConstraint() {
    return new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_2__["default"](this.context.staffMetrics.splitSystemGap);
  }
  buildChildLayouts() {
    this._constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_1__["default"]([this.context.staffMetrics.splitSystemGap]);
  }
  createNotationLayout(t, e) {
    return null;
  }
  createMeasureView(context, staffView) {
    var measureView = super.createMeasureView(context, staffView);
    measureView.highlightEnabled = false;
    return measureView;
  }
  handleMeasureChange(t) {}
  buildGlobalLayouts() {
    this._globalLayouts = [];
  }
}

/***/ }),

/***/ 34876:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-layout-state.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureLayoutState)
/* harmony export */ });
class MeasureLayoutState {
  constructor(measureLayout) {
    this.voiceConstraints = {};
    this.lastLyrics = {};
    this.lastChordSymbol = null;
    this.rootConstraints = [];
    this.lastBarline = null;
    this.floatingLayouts = {};
    this.floatingCombinedLayout = null;
    for (let numVoice = 0; numVoice < measureLayout.measure.numVoices; numVoice++) {
      this.voiceConstraints[numVoice.toString()] = measureLayout.leftPaddingConstraint;
      this.floatingLayouts[numVoice.toString()] = null;
    }
    this.voiceConstraints[-1] = measureLayout.leftPaddingConstraint;
  }
}

/***/ }),

/***/ 7536:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-layout.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureLayout)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_coda__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/coda */ 32229);
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _models_label_notation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/label-notation */ 9213);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/measure-number-notation */ 36987);
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_segno__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/segno */ 66000);
/* harmony import */ var _models_span_notation__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/span-notation */ 43586);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_tempo__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/tempo */ 72620);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _models_tuplet__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../models/tuplet */ 69519);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _models_voice__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../models/voice */ 38445);
/* harmony import */ var _utils_dictionary__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../utils/dictionary */ 97837);
/* harmony import */ var _utils_ststem_span__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../utils/ststem-span */ 8227);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _views_measure_view__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../views/measure-view */ 35035);
/* harmony import */ var _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./abstract-beamable-layout */ 51729);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _barline_layout__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./barline-layout */ 98954);
/* harmony import */ var _beam_layout__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./beam-layout */ 78903);
/* harmony import */ var _chord_symbol_layout__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./chord-symbol-layout */ 44466);
/* harmony import */ var _clef_layout__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./clef-layout */ 29567);
/* harmony import */ var _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./constraint/layout-constraint-pari */ 75567);
/* harmony import */ var _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./constraint/max-constraint */ 24056);
/* harmony import */ var _constraint_min_constraint__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./constraint/min-constraint */ 10181);
/* harmony import */ var _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./constraint/space-constraint */ 46321);
/* harmony import */ var _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./constraint/sum-constraint */ 57962);
/* harmony import */ var _exoression_text_layout__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./exoression-text-layout */ 80477);
/* harmony import */ var _keysignature_layout__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./keysignature-layout */ 14955);
/* harmony import */ var _label_notation_layout__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./label-notation-layout */ 3131);
/* harmony import */ var _lyric_extender_layout__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./lyric-extender-layout */ 93300);
/* harmony import */ var _lyric_layout__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./lyric-layout */ 43541);
/* harmony import */ var _measure_layout_state__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./measure-layout-state */ 34876);
/* harmony import */ var _measure_number_notation_layout__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./measure-number-notation-layout */ 4825);
/* harmony import */ var _measure_repeat_layout__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./measure-repeat-layout */ 2248);
/* harmony import */ var _note_set_layout__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./note-set-layout */ 83944);
/* harmony import */ var _performance_text_layout__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./performance-text-layout */ 28213);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./rest-layout */ 41910);
/* harmony import */ var _system_symbol_layout__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./system-symbol-layout */ 33720);
/* harmony import */ var _tacet_layout__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./tacet-layout */ 82970);
/* harmony import */ var _tempo_layout__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ./tempo-layout */ 81413);
/* harmony import */ var _time_signature_layout__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ./time-signature-layout */ 49468);
/* harmony import */ var _tuplet_layout__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./tuplet-layout */ 60773);

























































class MeasureLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_31__["default"] {
  static get MAX_SPACE_DISPLACEMENT() {
    return 9999;
  }
  static get NO_LYRICS_BELOW_STAFF() {
    return 100;
  }
  static get NO_LYRICS_ABOVE_STAFF() {
    return -100;
  }
  get topPadding() {
    return this.dynamicVerticalPad ? Math.max(0, this._maxY - this.measure.effectiveClef.staffHeight) : 0;
  }
  get bottomPadding() {
    return this.dynamicVerticalPad ? Math.max(0, -this._minY) : 0;
  }
  get minLyricBelowBaseY() {
    return this._minLyricBelowBaseY;
  }
  get maxLyricAboveBaseY() {
    return this._maxLyricAboveBaseY;
  }
  get bottomLyricY() {
    return this.dynamicVerticalPad ? this._minLyricBelowY : MeasureLayout.NO_LYRICS_BELOW_STAFF;
  }
  get topLyricY() {
    return this.dynamicVerticalPad ? this._maxLyricAboveY : MeasureLayout.NO_LYRICS_ABOVE_STAFF;
  }
  get lyricLayoutList() {
    return this._lyricLayoutsList;
  }
  get measure() {
    return this._measure;
  }
  set measure(val) {
    this.destroy();
    this._measure = val;
    // todo add event listener
  }

  get temporarySpans() {
    return this._temporarySpans;
  }
  get notationLayouts() {
    return this._notationLayouts;
  }
  get globalLayouts() {
    return this._globalLayouts;
  }
  get systemMeasureLayout() {
    return this._systemMeasureLayout;
  }
  set systemMeasureLayout(val) {
    this._systemMeasureLayout = val;
  }
  get firstLayoutOnSystem() {
    return this._firstLayoutOnSystem;
  }
  set firstLayoutOnSystem(val) {
    if (val !== this._firstLayoutOnSystem) {
      this._firstLayoutOnSystem = val;
      this.invalidate();
    }
  }
  get lastLayoutOnSystem() {
    return this._lastLayoutOnSystem;
  }
  set lastLayoutOnSystem(val) {
    if (val !== this._lastLayoutOnSystem) {
      this._lastLayoutOnSystem = val;
      this.invalidate();
    }
  }
  get showBarNumber() {
    return this._showBarNumber;
  }
  set showBarNumber(val) {
    this._showBarNumber = val;
  }
  get topStaffOnSystem() {
    return this._topStaffOnSystem;
  }
  set topStaffOnSystem(val) {
    if (val !== this._topStaffOnSystem) {
      this._topStaffOnSystem = val;
      this.invalidate();
    }
  }
  get bottomStaffOnSystem() {
    return this._bottomStaffOnSystem;
  }
  set bottomStaffOnSystem(val) {
    if (val !== this._bottomStaffOnSystem) {
      this._bottomStaffOnSystem = val;
      this.invalidate();
    }
  }
  get topStaffInBarlineGroup() {
    return this._topStaffInBarlineGroup;
  }
  set topStaffInBarlineGroup(val) {
    if (val !== this._topStaffInBarlineGroup) {
      this._topStaffInBarlineGroup = val;
      this.invalidate();
    }
  }
  get bottomStaffInBarlineGroup() {
    return this._bottomStaffInBarlineGroup;
  }
  set bottomStaffInBarlineGroup(val) {
    if (val !== this._bottomStaffInBarlineGroup) {
      this._bottomStaffInBarlineGroup = val;
      this.invalidate();
    }
  }
  get needStaffStartLayout() {
    return this.firstLayoutOnSystem || this.measure.previousMeasure && this.measure.previousMeasure.effectiveSystemMeasure.systemGap;
  }
  get showHandle() {
    return !this.isMultiRest || this.isFirstMeasureOfMultiRest;
  }
  get requiresMeasureNumber() {
    return !this.firstLayoutOnSystem && this.topStaffOnSystem && this.showBarNumber;
  }
  get multiRestsEnabled() {
    return this.customMultiRestsEnabled && this.measure.multiRest !== _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE || this.autoMultiRestsEnabled && this.measure.autoMultiRest(false) !== _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE;
  }
  get customMultiRestsEnabled() {
    return this.systemMeasureLayout && this.systemMeasureLayout.singlePart;
  }
  get autoMultiRestsEnabled() {
    return this.systemMeasureLayout && this.systemMeasureLayout.autoMultiMeasureRestCreation;
  }
  get isMultiRest() {
    return !(!this.customMultiRestsEnabled || this.measure.multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE) || this.autoMultiRestsEnabled && (this.isFirstMeasureOfMultiRest || this.isLastMeasureOfMultiRest || this.isBodyOfMultiRestButNotLastOne);
  }
  get isFirstMeasureOfMultiRest() {
    if (this.customMultiRestsEnabled && this.measure.multiRest > 0) {
      return true;
    }
    if (!this.autoMultiRestsEnabled || this.systemMeasureLayout.measureLayout == null) {
      return false;
    }
    let type = 0;
    for (let i = 0; i < this.systemMeasureLayout.measureLayouts.length; i++) {
      const multiRestType = this.systemMeasureLayout.measureLayouts[i].measure.autoMultiRest(false);
      if (multiRestType === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE || multiRestType === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_END) {
        return false;
      }
      type = Math.max(multiRestType, type);
    }
    return type > 1;
  }
  get isLastMeasureOfMultiRest() {
    if (this.systemMeasureLayout.measureLayouts == null) {
      return false;
    }
    if (this.customMultiRestsEnabled && this.measure.multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_END) {
      return true;
    }
    let isLastMeasureOfMultiRest = false;
    for (let i = 0; i < this.systemMeasureLayout.measureLayouts.length; i++) {
      const measure = this.systemMeasureLayout.measureLayouts[i].measure;
      if (measure.autoMultiRestLastMeasure) {
        isLastMeasureOfMultiRest = true;
      } else if (measure.autoMultiRest(false) > 0) {
        return false;
      }
    }
    return isLastMeasureOfMultiRest;
  }
  get isBodyOfMultiRestButNotLastOne() {
    if (this.systemMeasureLayout.measureLayouts == null) {
      return false;
    }
    if (this.customMultiRestsEnabled && this.measure.multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_BODY) {
      return true;
    }
    for (let i = 0; i < this.systemMeasureLayout.measureLayouts.length; i++) {
      const measure = this.systemMeasureLayout.measureLayouts[i].measure;
      if (!measure.autoMultiRestNotFirstMeasure || measure.autoMultiRestLastMeasure) {
        return false;
      }
    }
    return true;
  }
  get autoMultiRestNumberMeasures() {
    let maxAutoMultiRestNumber = 99999999999;
    for (let i = 0; i < this.systemMeasureLayout.measureLayouts.length; i++) {
      const measureLayout = this.systemMeasureLayout.measureLayouts[i];
      maxAutoMultiRestNumber = Math.min(maxAutoMultiRestNumber, measureLayout.measure.numberAutoMultiMeasureRests());
    }
    return maxAutoMultiRestNumber;
  }
  get autoMultiRestTotalDuration() {
    let totalDuration = 99999999999;
    for (let i = 0; i < this.systemMeasureLayout.measureLayouts.length; i++) {
      const measureLayout = this.systemMeasureLayout.measureLayouts[i];
      totalDuration = Math.min(totalDuration, measureLayout.measure.durationAutoMultiMeasureRests);
    }
    return totalDuration;
  }
  get leftPaddingConstraint() {
    return new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](this.context.staffMetrics.barStartPaddingLeft);
  }
  get valueBounds() {
    let valueX = 0;
    let notationLayout;
    for (let i = 0; i < this.notationLayouts.length && (notationLayout = this.getNotationLayoutAt(i), !(notationLayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_24__["default"] || notationLayout.notation.position > 0)); i++) {
      if (!notationLayout.notation.hasValueConstraint) {
        valueX = notationLayout.x - notationLayout.originX + notationLayout.width;
      }
    }
    let x = this.x;
    for (let i = this.notationLayouts.length - 1; i >= 0 && (notationLayout = this.getNotationLayoutAt(i), !(notationLayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_24__["default"] || notationLayout.notation.position < this.measure.duration)); i--) {
      if (!notationLayout.notation.hasValueConstraint) {
        x = notationLayout.x;
      }
    }
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](valueX, 0, x - valueX, 0);
  }
  get phantomStartBarline() {
    let phantomStartBarline = this._phantomStartBarline;
    if (phantomStartBarline == null) {
      phantomStartBarline = new _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"](0, _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"].INITIAL);
      this._phantomStartBarline = phantomStartBarline;
      phantomStartBarline.parent = this.measure.systemMeasure.getVoiceAt(0);
    }
    return this._phantomStartBarline;
  }
  get dynamicVerticalPad() {
    return this.context.score.effectiveStaffMetrics.verticalAutoSpace;
  }
  constructor(context, measure, editorFonts, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this.nextLayout = null;
    this.showAnnotations = true;
    this.scoreInterval = null;
    this._measure = null;
    this._notationLayouts = [];
    this._notationLayoutMap = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_26__["default"]();
    this._globalLayouts = [];
    this._firstLayoutOnSystem = false;
    this._showBarNumber = false;
    this._measureNumberNotation = null;
    this._lastLayoutOnSystem = false;
    this._systemMeasureLayout = null;
    this._topStaffOnSystem = false;
    this._bottomStaffOnSystem = false;
    this._topStaffInBarlineGroup = false;
    this._bottomStaffInBarlineGroup = false;
    this._phantomStartBarline = null;
    this._minY = NaN;
    this._maxY = NaN;
    this._minLyricBelowBaseY = NaN;
    this._maxLyricAboveBaseY = NaN;
    this._maxLyricAboveY = NaN;
    this._minLyricBelowY = NaN;
    this._lyricLayoutsList = [];
    this._omitNotationsBeforeEnd = false;
    this._omitNotationsAtEnd = false;
    this._temporarySpans = [];
    this.measure = measure;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  getLyricLayoutsListAboveStaff() {
    const lyricLayouts = [];
    for (let i = 0; i < this._lyricLayoutsList.length; i++) {
      const lyricLayout = this._lyricLayoutsList[i];
      if (lyricLayout.aboveStaff) {
        lyricLayout.push(lyricLayout);
      }
    }
    return lyricLayouts;
  }
  destroyChildren() {
    for (let i = 0; i < this._notationLayouts.length; i++) {
      const notationLayout = this._notationLayouts[i];
      notationLayout.destroy();
    }
  }
  destroy() {
    super.destroy();
  }
  addNotationLayout(notationLayout) {
    if (notationLayout) {
      const notation = notationLayout.notation;
      this._notationLayouts.push(notationLayout);
      this._notationLayoutMap.put(notation, notationLayout);
    }
  }
  getNotationLayoutAt(idx) {
    return this._notationLayouts[idx];
  }
  getLayoutForNotation(notation) {
    return this._notationLayoutMap.get(notation);
  }
  invalidate() {
    super.invalidate();
    if (this.systemMeasureLayout) {
      this.systemMeasureLayout.invalidate();
    }
  }
  handleMeasureSequenceChange() {
    this.updateMeasureIndex();
  }
  updateMeasureIndex() {
    // todo dispatch UPDATE_MEASURE_INDEX
  }
  buildMeasureNumberLayout() {
    const measureNumberNotation = new _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_11__["default"](0, this.measure, {
      invisible: !this.requiresMeasureNumber
    });
    measureNumberNotation.parent = this.measure.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_28__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    measureNumberNotation.textbox = this.context.staffMetrics.barNumberBoxed;
    measureNumberNotation.alignToLeftEdge = true;
    this._measureNumberNotation = this.createNotationLayout(measureNumberNotation, this.measure.effectiveClef);
    this.addNotationLayout(this._measureNumberNotation);
  }
  buildChildLayouts() {
    let numberNotation;
    this.initializeNotationLayouts();
    this._measureNumberNotation = null;
    if (this.topStaffOnSystem && this.showBarNumber) {
      this.buildMeasureNumberLayout();
    }
    let effectiveClef = this.measure.effectiveClef;
    let numberNotationIdx = 0;
    let measureNotations = this.measure.measureNotations;
    const hairpins = measureNotations.filter(t => t instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_6__["default"]).map(n => n);
    const hairpinPositions = [];
    hairpins.forEach(hairpin => {
      hairpinPositions.push(hairpin.position);
      hairpinPositions.push(hairpin.endPosition.position + 1);
    });
    const is_percussion_clef = effectiveClef.sign === _models_clef__WEBPACK_IMPORTED_MODULE_3__["default"].PERCUSSION_CLEF_SIGN;
    if (this.needStaffStartLayout && this.measure.systemMeasure.startRepeat) {
      (measureNotations = measureNotations.slice()).unshift(this.phantomStartBarline);
    }
    const voiceNumberStates = {};
    let visibleCount = 0;
    for (let i = 0; i < measureNotations.length; i++) {
      const notation = measureNotations[i];
      if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_3__["default"]) {
        if (this.measure.overrideClef) {
          continue;
        }
        effectiveClef = notation;
      }
      if (notation instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_5__["default"] && hairpinPositions.includes(notation.position)) {
        for (let j = 0; j < hairpinPositions.length; j++) {
          const hairpinPosition = hairpinPositions[j];
          if (hairpinPosition === notation.position) {
            hairpins[Math.floor(j / 2)].requiresDefaultInfo = true;
          }
        }
      }
      while (numberNotationIdx < this.measure.systemMeasure.numNotations && this.measure.systemMeasure.getNotationAt(numberNotationIdx).position <= notation.position && (numberNotation = this.measure.systemMeasure.getNotationAt(numberNotationIdx)).position != this.measure.duration) {
        if (!numberNotation.showOnlyOnSystemStaff || this.topStaffOnSystem) {
          this.addNotationLayout(this.createNotationLayout(numberNotation, effectiveClef));
        }
        numberNotationIdx++;
      }
      const notationLayout = this.createNotationLayout(notation, effectiveClef);
      this.addNotationLayout(notationLayout);
      if (notationLayout instanceof _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_30__["default"]) {
        const abstractBeamableLayout = notationLayout;
        const noteSet = notation;
        if (noteSet.invisible && voiceNumberStates[noteSet.voiceNumber]) {
          visibleCount--;
          voiceNumberStates[noteSet.voiceNumber] = false;
        } else if (!noteSet.invisible && !voiceNumberStates[noteSet.voiceNumber]) {
          visibleCount++;
          voiceNumberStates[noteSet.voiceNumber] = true;
        }
        abstractBeamableLayout.multiVoice = visibleCount > 1 || is_percussion_clef && abstractBeamableLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"] || noteSet.invisible && this.measure.numVoices > 1;
        if (parseFloat(noteSet.voiceNumber) >= 1 && i > 0) {
          for (let hairpinPositionIdx = i; --hairpinPositionIdx >= 0;) {
            const abstractbeamablelayout = this._notationLayoutMap.get(measureNotations[hairpinPositionIdx]);
            if (abstractbeamablelayout) {
              if (abstractbeamablelayout.noteSet.position < notation.position) {
                break;
              }
              if (parseFloat(abstractbeamablelayout.noteSet.voiceNumber) === 0 && abstractbeamablelayout.noteSet.position === notation.position) {
                abstractbeamablelayout.multiVoice = !noteSet.invisible;
                abstractbeamablelayout.alternateVoiceLayout = abstractBeamableLayout;
                abstractBeamableLayout.alternateVoiceLayout = abstractbeamablelayout;
                break;
              }
            }
          }
        }
        for (let k = 0; k < noteSet.lyrics.length; k++) {
          const lyric = noteSet.lyrics[k];
          if (abstractBeamableLayout instanceof _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_30__["default"]) {
            // todo Convert.is(abstractBeamableLayout, IBeamableLayout)
            this.addNotationLayout(new _lyric_layout__WEBPACK_IMPORTED_MODULE_45__["default"](abstractBeamableLayout, lyric, this.editorFonts, this.rootDiv, this.noteEditorService));
          }
        }
      }
    }
    while (numberNotationIdx < this.measure.systemMeasure.numNotations) {
      numberNotation = this.measure.systemMeasure.getNotationAt(numberNotationIdx++);
      if (!numberNotation.showOnlyOnSystemStaff || this.topStaffOnSystem) {
        this.addNotationLayout(this.createNotationLayout(numberNotation, effectiveClef));
      }
    }
    if (this._omitNotationsAtEnd) {
      const barline = new _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"](this.measure.duration, _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"].INVISIBLE);
      barline.parent = this.measure.getVoiceNumber(0);
      this.addNotationLayout(new _barline_layout__WEBPACK_IMPORTED_MODULE_32__["default"](this.context, this, barline, effectiveClef, this.noteEditorService, this.rootDiv));
    }
  }
  buildGlobalLayouts() {
    this._globalLayouts = [];
    // console.trace();
    if (this.measure.effectiveClef.showRhythm(this.context.score)) {
      this.determineBeamsAndStems();
      this.determineTuplets();
    } else if (this.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_19__["default"]) {
      this.determineTabStems();
    }
  }
  initializeNotationLayouts() {
    let multiRest;
    this.destroyChildren();
    this._notationLayouts = [];
    this._notationLayoutMap = new _utils_dictionary__WEBPACK_IMPORTED_MODULE_26__["default"]();
    this.scoreInterval = this.measure.scoreInterval;
    this._omitNotationsBeforeEnd = this._omitNotationsAtEnd = false;
    if (this.customMultiRestsEnabled && (multiRest = this.measure.multiRest) !== _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE) {
      this._omitNotationsAtEnd = multiRest > 0;
      this._omitNotationsBeforeEnd = multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_END;
    } else if (this.autoMultiRestsEnabled) {
      if (this.isFirstMeasureOfMultiRest) {
        this._omitNotationsAtEnd = true;
      } else if (this.isLastMeasureOfMultiRest) {
        this._omitNotationsBeforeEnd = true;
      }
    }
  }
  determineBeamsAndStems() {
    for (let numVoice = 0; numVoice < this.measure.numVoices; numVoice++) {
      this.determineVoiceBeamsAndStems(numVoice, false);
      this.determineVoiceBeamsAndStems(numVoice, true);
    }
  }
  determineVoiceBeamsAndStems(numVoice, grace) {
    let beamLayout = null;
    for (let i = 0; i < this.notationLayouts.length; i++) {
      const notationLayout = this.notationLayouts[i];
      // IBeamableLayout
      if ((notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"] || notationLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_51__["default"]) && parseFloat(notationLayout.notation.voiceNumber) === numVoice) {
        const noteSet = notationLayout.noteSet;
        if (noteSet.grace != grace) {
          continue;
        }
        const direction = notationLayout.direction;
        if (direction) {
          notationLayout.down = direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_14__.Notation_Direction.DIRECTION_DOWN;
          if (beamLayout && beamLayout.getBeamableLayoutAt(0).down !== notationLayout.down) {
            if (beamLayout.numBeamableLayouts > 1) {
              beamLayout.setUpBeam();
              this._globalLayouts.push(beamLayout);
            }
            beamLayout = null;
          }
        } else if (notationLayout.multiVoice) {
          notationLayout.down = parseFloat(notationLayout.notation.voiceNumber) > 0;
        } else if (notationLayout.clef.defaultStemsUp) {
          notationLayout.down = false;
        } else {
          notationLayout.down = notationLayout.stemmingLine >= notationLayout.clef.centerLine;
        }
        notationLayout.stemLength = notationLayout.standardStemLength;
        if ((noteSet.beam || noteSet.tremoloDyad && noteSet.rhythmPosition === 0) && noteSet.canShowBeam && (notationLayout.hasStem || notationLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_51__["default"] || noteSet.tremoloDyad) && Math.round(noteSet.position + noteSet.duration) < this.measure.duration && (!grace || noteSet.nextGraceNote)) {
          if (!beamLayout) {
            beamLayout = new _beam_layout__WEBPACK_IMPORTED_MODULE_33__["default"](this.context, this.noteEditorService, this.rootDiv);
          }
          beamLayout.addBeamableLayout(notationLayout);
        } else {
          if (beamLayout) {
            if (noteSet.canShowBeam) {
              beamLayout.addBeamableLayout(notationLayout);
            }
            if (beamLayout.numBeamableLayouts > 1) {
              beamLayout.setUpBeam();
              this._globalLayouts.push(beamLayout);
            }
            beamLayout = null;
          }
        }
      }
    }
  }
  determineTabStems() {
    for (let i = 0; i < this._notationLayouts.length; i++) {
      const notationLayout = this._notationLayouts[i];
      if (notationLayout.direction != null) {
        notationLayout.down = notationLayout.direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_14__.Notation_Direction.DIRECTION_DOWN;
      }
    }
  }
  determineTuplets() {
    for (let numVoice = 0; numVoice < this.measure.numVoices; numVoice++) {
      this.determineRhythmContextTuplets(this.measure.getVoiceNumber(numVoice));
    }
  }
  determineRhythmContextTuplets(voiceNumber) {
    for (let i = 0; i < voiceNumber.elements.length; i++) {
      const element = voiceNumber.elements[i];
      // interface IRhythmContext
      if (element instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_23__["default"] || element instanceof _models_voice__WEBPACK_IMPORTED_MODULE_25__["default"]) {
        this.determineRhythmContextTuplets(element);
        if (element instanceof _models_tuplet__WEBPACK_IMPORTED_MODULE_23__["default"]) {
          this.createTupletLayout(element);
        }
      }
    }
  }
  createTupletLayout(tuplet) {
    const tupletLayout = new _tuplet_layout__WEBPACK_IMPORTED_MODULE_56__["default"](this.context, tuplet, this.noteEditorService, this.rootDiv);
    let tupletEmpty = true;
    for (let i = 0; i < this._notationLayouts.length; i++) {
      const notationLayout = this._notationLayouts[i];
      if (!(tupletEmpty && notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"] && notationLayout.noteSet.grace) && (notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"] || notationLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_51__["default"]) && notationLayout.notation.isRhythmContext(tuplet)) {
        tupletLayout.addBeamableLayout(notationLayout);
        notationLayout.tupletLayout = tupletLayout;
        tupletEmpty = false;
      }
    }
    if (tupletLayout.numBeamableLayouts !== 0) {
      tupletLayout.setUpTuplet();
      this._globalLayouts.push(tupletLayout);
    }
  }
  createNotationLayout(notation, clef) {
    if (this._omitNotationsBeforeEnd && notation.position < this.measure.duration || this._omitNotationsAtEnd && notation.position === this.measure.duration) {
      return null;
    }
    if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      if (notation.position === this.measure.duration && this.lastLayoutOnSystem && this.measure.systemMeasure.disableCautionaries) {
        return null;
      } else {
        return new _clef_layout__WEBPACK_IMPORTED_MODULE_35__["default"](this.context, this, notation, true, this.noteEditorService, this.rootDiv);
      }
    } else if (notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      return new _barline_layout__WEBPACK_IMPORTED_MODULE_32__["default"](this.context, this, notation, clef, this.noteEditorService, this.rootDiv);
    } else if (notation instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_20__["default"]) {
      return new _tacet_layout__WEBPACK_IMPORTED_MODULE_53__["default"](this.context, this, notation, clef, this.noteEditorService, this.rootDiv);
    } else if (notation instanceof _models_measure_repeat__WEBPACK_IMPORTED_MODULE_12__["default"]) {
      return new _measure_repeat_layout__WEBPACK_IMPORTED_MODULE_48__["default"](this.context, this, notation, clef, this.noteEditorService, this.rootDiv);
    } else if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_15__.NoteSet) {
      const noteSet = notation;
      if (noteSet.notes.length > 0) {
        return new _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"](this.context, this, noteSet, clef, this.noteEditorService, this.rootDiv);
      } else {
        return new _rest_layout__WEBPACK_IMPORTED_MODULE_51__["default"](this.context, this, noteSet, clef, this.noteEditorService, this.rootDiv);
      }
    } else if (notation instanceof _models_timesignature__WEBPACK_IMPORTED_MODULE_22__["default"]) {
      if (clef.isTab() && !this.context.score.effectiveStaffMetrics.showTabRhythm && this.systemMeasureLayout && !this.systemMeasureLayout.hasNonTabClefs()) {
        return null;
      } else {
        return new _time_signature_layout__WEBPACK_IMPORTED_MODULE_55__["default"](this.context, this, notation, clef, this.noteEditorService, this.rootDiv);
      }
    } else if (notation instanceof _models_keysignature__WEBPACK_IMPORTED_MODULE_7__["default"]) {
      if (notation.position === this.measure.duration && this.lastLayoutOnSystem && this.measure.systemMeasure.disableCautionaries) {
        return null;
      }
      let keySignature = notation;
      let scoreInterval;
      if (!this.scoreInterval.octaveMultiple) {
        if (notation.position === this.measure.duration && this.measure.index + 1 < this.measure.staff.numChildren) {
          scoreInterval = this.measure.staff.getMeasureAt(this.measure.index + 1).scoreInterval;
        } else {
          scoreInterval = this.scoreInterval;
        }
        keySignature = keySignature.transposeFifths(scoreInterval.fifths);
      }
      return new _keysignature_layout__WEBPACK_IMPORTED_MODULE_42__["default"](this.context, this, notation, keySignature, clef, this.noteEditorService, this.rootDiv);
    } else if (notation instanceof _models_tempo__WEBPACK_IMPORTED_MODULE_21__["default"]) {
      return new _tempo_layout__WEBPACK_IMPORTED_MODULE_54__["default"](this.context, this, notation, clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      const chordSymbol = notation;
      return new _chord_symbol_layout__WEBPACK_IMPORTED_MODULE_34__["default"](this.context, this, chordSymbol, chordSymbol.transposeInterval(this.scoreInterval), clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_expression_text__WEBPACK_IMPORTED_MODULE_5__["default"]) {
      return new _exoression_text_layout__WEBPACK_IMPORTED_MODULE_41__["default"](this.context, this, notation, clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_performance_text__WEBPACK_IMPORTED_MODULE_16__["default"]) {
      return new _performance_text_layout__WEBPACK_IMPORTED_MODULE_50__["default"](this.context, this, notation, clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_11__["default"]) {
      return new _measure_number_notation_layout__WEBPACK_IMPORTED_MODULE_47__["default"](this.context, this, notation, clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_label_notation__WEBPACK_IMPORTED_MODULE_8__["default"]) {
      return new _label_notation_layout__WEBPACK_IMPORTED_MODULE_43__["default"](this.context, this, notation, clef, this.editorFonts, this.rootDiv, this.noteEditorService);
    } else if (notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_18__["default"]) {
      return null;
    } else if (notation instanceof _models_coda__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      return new _system_symbol_layout__WEBPACK_IMPORTED_MODULE_52__["default"](this.context, this, notation, _system_symbol_layout__WEBPACK_IMPORTED_MODULE_52__["default"].CODA_TYPE, clef, this.noteEditorService, this.rootDiv);
    } else if (notation instanceof _models_segno__WEBPACK_IMPORTED_MODULE_17__["default"]) {
      return new _system_symbol_layout__WEBPACK_IMPORTED_MODULE_52__["default"](this.context, this, notation, _system_symbol_layout__WEBPACK_IMPORTED_MODULE_52__["default"].SEGNO_TYPE, clef, this.noteEditorService, this.rootDiv);
    }
    throw new Error('Unhandled notation object in MeasureLayout: ' + notation);
  }
  forceZeroWidthLayout() {
    this.leftConstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](0)]);
    this._constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([this.leftConstraint]);
    this._notationLayouts = [];
    this._globalLayouts = [];
    this._minLyricBelowBaseY = 0;
    this._maxLyricAboveBaseY = 0;
  }
  doValidateLayout() {
    let multiRest, notationLayout, lyricLayout;
    this._temporarySpans = [];
    this.destroyChildren();
    this._width = 0;
    if (this.customMultiRestsEnabled && this.measure.multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_BODY) {
      this.forceZeroWidthLayout();
      return;
    }
    if (this.autoMultiRestsEnabled && this.measure.multiRest === _models_measure__WEBPACK_IMPORTED_MODULE_10__["default"].MULTI_REST_NONE) {
      if (this.isFirstMeasureOfMultiRest) {
        multiRest = _models_multi_rest__WEBPACK_IMPORTED_MODULE_13__["default"].createMultiRest(this.autoMultiRestNumberMeasures);
        multiRest.enabled = false;
        multiRest.dy = this.measure.effectiveClef.staffHeight / 2;
        multiRest.parent = this.measure.getVoiceAt(0);
        multiRest.span = this.autoMultiRestTotalDuration - 1;
        multiRest.rhythmPosition = 0;
        this._temporarySpans.push(multiRest);
      } else if (this.isBodyOfMultiRestButNotLastOne) {
        this.forceZeroWidthLayout();
        return;
      }
    }
    this._minLyricBelowBaseY = MeasureLayout.NO_LYRICS_BELOW_STAFF;
    this._maxLyricAboveBaseY = MeasureLayout.NO_LYRICS_ABOVE_STAFF;
    this.buildChildLayouts();
    this.buildGlobalLayouts();
    let lyricLayouts = [],
      hasBelowStaff = false,
      hasAboveStaff = false;
    for (let i = 0; i < this._notationLayouts.length; i++) {
      notationLayout = this._notationLayouts[i];
      notationLayout.validateLayout();
      if (notationLayout instanceof _lyric_layout__WEBPACK_IMPORTED_MODULE_45__["default"]) {
        lyricLayout = notationLayout;
        if (lyricLayout.aboveStaff) {
          this._maxLyricAboveBaseY = Math.max(this._maxLyricAboveBaseY, lyricLayout.baseY);
          hasAboveStaff = true;
        } else {
          this._minLyricBelowBaseY = Math.min(this._minLyricBelowBaseY, lyricLayout.baseY);
          hasBelowStaff = true;
        }
        lyricLayouts.push(lyricLayout);
      }
    }
    const staffMetrics = this.context.staffMetrics;
    if (lyricLayouts.length > 0) {
      const firstLyricLayoutHeihgt = lyricLayouts[0].height;
      for (let i = 0; i < this._notationLayouts.length; i++) {
        notationLayout = this._notationLayouts[i];
        if (notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"] || notationLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_51__["default"]) {
          if (hasBelowStaff) {
            this._minLyricBelowBaseY = Math.min(this._minLyricBelowBaseY, notationLayout.lyricExclusionBottom - staffMetrics.lyricsNotesPadding - staffMetrics.lyricsAscent * firstLyricLayoutHeihgt);
          }
          if (hasAboveStaff) {
            this._maxLyricAboveBaseY = Math.max(this._maxLyricAboveBaseY, notationLayout.lyricExclusionTop + staffMetrics.lyricsNotesPadding + staffMetrics.lyricsDescent * firstLyricLayoutHeihgt);
          }
        }
      }
    }
    this._constraint = this.leftPaddingConstraint;
    const measureLayoutState = new _measure_layout_state__WEBPACK_IMPORTED_MODULE_46__["default"](this);
    let prevNotationPosition = -1;
    this._lyricLayoutsList = [];
    for (let i = 0; i < this._notationLayouts.length; i++) {
      notationLayout = this._notationLayouts[i];
      const notation = notationLayout.notation;
      if (notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_24__["default"] && parseFloat(notation.voiceNumber) >= 0 && !notation.marking) {
        this.constrainValueNotation(measureLayoutState, notationLayout);
      } else if (notation instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_2__["default"] && staffMetrics.keepChordSymbolsApart && parseFloat(notation.voiceNumber) == _utils_voice_number__WEBPACK_IMPORTED_MODULE_28__.VoiceNumber.NON_METRICAL_VOICE_NUMBER && !notation.measure.isSystemMeasure && notation.position > prevNotationPosition && notation.position < this.measure.duration) {
        this.constrainChordSymbolNotation(measureLayoutState, notationLayout);
        prevNotationPosition = notation.position;
      } else if (notation.marking) {
        this.constrainMarkingNotation(measureLayoutState, notationLayout);
      } else if (notation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_9__["default"]) {
        this.constrainLyricNotation(measureLayoutState, notationLayout);
      } else {
        this.constrainNonVoiceNotation(measureLayoutState, notationLayout);
      }
    }
    const maxVoiceConstraint = this.getMaxVoicesConstraint(measureLayoutState);
    for (let i = 0; i < measureLayoutState.rootConstraints.length; i++) {
      const rootConstraint = measureLayoutState.rootConstraints[i];
      maxVoiceConstraint.addScaleDependent(rootConstraint);
    }
    this.leftConstraint = maxVoiceConstraint;
    this._constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([this.leftConstraint]);
    this._height = this.measure.effectiveClef.staffHeight;
    for (let i = 0; i < this._globalLayouts.length; i++) {
      const globalLayout = this._globalLayouts[i];
      globalLayout.validateLayout();
    }
    if (lyricLayouts.length > 0) {
      if (this.measure.staff) {
        const spanNotations = this.measure.staff.getSpanNotations(this.measure.index);
        for (let i = 0; i < spanNotations.length; i++) {
          const spanNotation = spanNotations[i];
          if (spanNotation.transposable) {
            (0,_utils_ststem_span__WEBPACK_IMPORTED_MODULE_27__.ensureSpanDefaulted)(spanNotation, this.context, this.editorFonts, this.rootDiv, this.noteEditorService);
            this._minLyricBelowBaseY = Math.min(this._minLyricBelowBaseY, spanNotation.bottom - this.context.staffMetrics.lyricsNotesPadding);
            this._maxLyricAboveBaseY = Math.max(this._maxLyricAboveBaseY, spanNotation.top + staffMetrics.lyricsNotesPadding);
          }
        }
      }
      for (let i = 0; i < lyricLayouts.length; i++) {
        lyricLayout = lyricLayouts[i];
        if (lyricLayout.aboveStaff) {
          lyricLayout.baseY = this._maxLyricAboveBaseY;
        } else {
          lyricLayout.baseY = this._minLyricBelowBaseY;
        }
      }
    }
  }
  constrainValueNotation(measureLayoutState, notationLayout) {
    const voiceNumber = notationLayout.notation.voiceNumber.toString();
    notationLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.originX), measureLayoutState.voiceConstraints[voiceNumber]]);
    if (notationLayout.floating) {
      measureLayoutState.voiceConstraints[voiceNumber] = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([measureLayoutState.voiceConstraints[voiceNumber], new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width)]);
      this._constraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([]);
      notationLayout.constraint = this._constraint;
      notationLayout.leftConstraint = this._constraint;
      measureLayoutState.rootConstraints.push(notationLayout.constraint);
    } else {
      this._constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([notationLayout.leftConstraint]);
      notationLayout.constraint = this._constraint;
      measureLayoutState.voiceConstraints[voiceNumber] = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width - notationLayout.originX)]);
    }
    if (measureLayoutState.floatingCombinedLayout && measureLayoutState.floatingLayouts[voiceNumber] == null) {
      const minConstraint = new _constraint_min_constraint__WEBPACK_IMPORTED_MODULE_38__["default"]([]);
      for (const key in measureLayoutState.floatingLayouts) {
        const sumConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](MeasureLayout.MAX_SPACE_DISPLACEMENT)]);
        measureLayoutState.rootConstraints.push(sumConstraint);
        minConstraint.addConstraint(sumConstraint);
        measureLayoutState.floatingLayouts[key] = new _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__["default"](measureLayoutState.floatingCombinedLayout.layout, sumConstraint);
      }
      measureLayoutState.floatingCombinedLayout.layout.constraint = measureLayoutState.floatingCombinedLayout.layout.leftConstraint = minConstraint;
      measureLayoutState.floatingCombinedLayout = null;
    }
    if (measureLayoutState.floatingLayouts[voiceNumber]) {
      const layoutConstraintPair = measureLayoutState.floatingLayouts[voiceNumber];
      layoutConstraintPair.constraint.constraints = [notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](-(notationLayout.originX + layoutConstraintPair.layout.width - layoutConstraintPair.layout.originX))];
      measureLayoutState.floatingLayouts[voiceNumber] = null;
    }
    if (notationLayout.floating) {
      measureLayoutState.floatingLayouts[voiceNumber] = new _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__["default"](notationLayout, notationLayout.constraint);
    }
  }
  constrainChordSymbolNotation(measureLayoutState, notationLayout) {
    if (measureLayoutState.lastChordSymbol && measureLayoutState.lastChordSymbol.layout) {
      notationLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.originX), measureLayoutState.lastChordSymbol.constraint]);
    } else if (measureLayoutState.lastBarline) {
      notationLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.originX), measureLayoutState.lastBarline]);
    } else {
      notationLayout.leftConstraint = new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.originX);
    }
    notationLayout.constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([notationLayout.leftConstraint]);
    measureLayoutState.lastChordSymbol = new _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__["default"](notationLayout, new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width - notationLayout.originX)]));
  }
  constrainMarkingNotation(measureLayoutState, notationLayout) {
    notationLayout.leftConstraint = this.leftPaddingConstraint;
    notationLayout.constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([notationLayout.leftConstraint]);
    measureLayoutState.rootConstraints.push(notationLayout.constraint);
  }
  constrainLyricNotation(measureLayoutState, lyricLayout) {
    const lyric = lyricLayout.lyric;
    const lyricLine = lyric.line.toString();
    this._lyricLayoutsList.push(lyricLayout);
    let lastLyricLayout = null;
    if (measureLayoutState.lastLyrics[lyricLine]) {
      lastLyricLayout = measureLayoutState.lastLyrics[lyricLine].layout;
      if (lastLyricLayout.lyric.extend) {
        this._globalLayouts.push(new _lyric_extender_layout__WEBPACK_IMPORTED_MODULE_44__["default"](this.context, lastLyricLayout, lyricLayout, this.noteEditorService, false));
        this.invalidateGlobal();
      }
    }
    if (lastLyricLayout && lastLyricLayout.lyric.position < lyric.position) {
      lyricLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](lyricLayout.originX), measureLayoutState.lastLyrics[lyricLine].constraint]);
    } else if (measureLayoutState.lastBarline) {
      lyricLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](lyricLayout.originX), measureLayoutState.lastBarline]);
    } else {
      lyricLayout.leftConstraint = new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](lyricLayout.originX);
    }
    lyricLayout.constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([lyricLayout.leftConstraint]);
    measureLayoutState.lastLyrics[lyricLine] = new _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__["default"](lyricLayout, new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([lyricLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](lyricLayout.width - lyricLayout.originX)]));
  }
  getMaxVoicesConstraint(measureLayoutState) {
    const maxConstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([]);
    for (const key in measureLayoutState.voiceConstraints) {
      const voiceConstraint = measureLayoutState.voiceConstraints[key];
      maxConstraint.addConstraint(voiceConstraint);
    }
    return maxConstraint;
  }
  constrainNonVoiceNotation(measureLayoutState, notationLayout) {
    let key,
      sumConstraint,
      maxVoicesConstraint = this.getMaxVoicesConstraint(measureLayoutState);
    const notation = notationLayout.notation;
    if (notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      for (key in measureLayoutState.lastLyrics) {
        const lastLyric = measureLayoutState.lastLyrics[key];
        maxVoicesConstraint.addConstraint(lastLyric.constraint);
        if (lastLyric.layout) {
          const lyricLayout = lastLyric.layout;
          if (lyricLayout.lyric.extend) {
            this._globalLayouts.push(new _lyric_extender_layout__WEBPACK_IMPORTED_MODULE_44__["default"](this.context, lyricLayout, null, this.noteEditorService, true));
            this.invalidateGlobal();
          }
        }
      }
    }
    notationLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.originX), maxVoicesConstraint]);
    this._constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([notationLayout.leftConstraint]);
    notationLayout.constraint = this._constraint;
    if (notationLayout.floating) {
      sumConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([maxVoicesConstraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width)]);
      for (const key in measureLayoutState.voiceConstraints) {
        measureLayoutState.voiceConstraints[key] = sumConstraint;
      }
      this._constraint = notationLayout.constraint = notationLayout.leftConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([]);
      measureLayoutState.rootConstraints.push(notationLayout.constraint);
    } else {
      this._constraint = notationLayout.constraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_37__["default"]([notationLayout.leftConstraint]);
      sumConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width - notationLayout.originX)]);
      for (key in measureLayoutState.voiceConstraints) {
        measureLayoutState.voiceConstraints[key] = sumConstraint;
      }
    }
    if (measureLayoutState.floatingCombinedLayout) {
      const floatingCombinedLayout = measureLayoutState.floatingCombinedLayout;
      floatingCombinedLayout.constraint.constraints = [notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](-(notationLayout.originX + floatingCombinedLayout.layout.width - floatingCombinedLayout.layout.originX))];
      measureLayoutState.floatingCombinedLayout = null;
    }
    if (notationLayout.notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      measureLayoutState.lastBarline = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_40__["default"]([notationLayout.constraint, new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_39__["default"](notationLayout.width - notationLayout.originX)]);
      for (key in measureLayoutState.lastLyrics) {
        const lastLyric = measureLayoutState.lastLyrics[key];
        lastLyric.constraint = measureLayoutState.lastBarline;
      }
    }
    if (notationLayout.floating) {
      measureLayoutState.floatingCombinedLayout = new _constraint_layout_constraint_pari__WEBPACK_IMPORTED_MODULE_36__["default"](notationLayout, notationLayout.constraint);
    }
  }
  invalidateGlobal() {
    super.invalidateGlobal();
    for (let i = 0; i < this._globalLayouts.length; i++) {
      const globalLayout = this._globalLayouts[i];
      globalLayout.invalidateGlobal();
    }
    for (let i = 0; i < this._notationLayouts.length; i++) {
      const notationLayout = this._notationLayouts[i];
      notationLayout.invalidateGlobal();
    }
  }
  doValidateGlobalLayout() {
    let bounds, abstractLayout, globalLayout;
    super.doValidateGlobalLayout();
    this._minY = 100;
    this._maxY = -100;
    this._minLyricBelowY = MeasureLayout.NO_LYRICS_BELOW_STAFF;
    this._maxLyricAboveY = MeasureLayout.NO_LYRICS_ABOVE_STAFF;
    let notationLayout, lyricLayout;
    for (let i = 0; i < this._globalLayouts.length; i++) {
      globalLayout = this._globalLayouts[i];
      abstractLayout = globalLayout;
      if (abstractLayout instanceof _beam_layout__WEBPACK_IMPORTED_MODULE_33__["default"]) {
        abstractLayout.validateGlobalLayout();
      }
    }
    for (let i = 0; i < this._notationLayouts.length; i++) {
      notationLayout = this._notationLayouts[i];
      if (!notationLayout.notation.excludeFromPositioning) {
        notationLayout.validateGlobalLayout();
      }
      if (this.dynamicVerticalPad) {
        bounds = notationLayout.bounds;
        if (notationLayout instanceof _lyric_layout__WEBPACK_IMPORTED_MODULE_45__["default"]) {
          lyricLayout = notationLayout;
          if (lyricLayout.lyric.text === '') {
            continue;
          }
          if (lyricLayout.aboveStaff) {
            this._maxLyricAboveY = Math.max(this._maxLyricAboveY, bounds.bottom);
          } else {
            this._minLyricBelowY = Math.min(this._minLyricBelowY, bounds.top);
          }
        }
        this._minY = Math.min(this._minY, bounds.top);
        this._maxY = Math.max(this._maxY, bounds.bottom);
      }
    }
    for (let i = 0; i < this._globalLayouts.length; i++) {
      globalLayout = this._globalLayouts[i];
      abstractLayout = globalLayout;
      if (!(abstractLayout instanceof _beam_layout__WEBPACK_IMPORTED_MODULE_33__["default"])) {
        abstractLayout.validateGlobalLayout();
      }
      if (this.dynamicVerticalPad) {
        bounds = abstractLayout.bounds;
        this._minY = Math.min(this._minY, bounds.top);
        this._maxY = Math.max(this._maxY, bounds.bottom);
      }
    }
  }
  createMeasureView(context, staffView) {
    this.validateGlobalLayout();
    return new _views_measure_view__WEBPACK_IMPORTED_MODULE_29__["default"](context, this, staffView, this.noteEditorService, this.rootDiv);
  }
  getMeasurePositionX(measurePosition, horGrace, voiceNum) {
    if (horGrace) {
      return MeasureLayout.computeMeasurePositionX(this.notationLayouts, measurePosition, true, voiceNum);
    } else if (this.systemMeasureLayout) {
      return this.systemMeasureLayout.getMeasurePositionX(measurePosition);
    } else {
      return 0;
    }
  }
  getMeasureXPosition(measurePosition, quantum, grace, noBarline, voiceNum) {
    if (grace) {
      return MeasureLayout.computeMeasureXPosition(this.notationLayouts, measurePosition, quantum, true, noBarline, voiceNum);
    } else if (this.systemMeasureLayout) {
      return this.systemMeasureLayout.getMeasureXPosition(measurePosition, quantum, noBarline);
    } else {
      return 0;
    }
  }
  static computeMeasurePositionX(notationLayouts, measurePosition, ignoreGrace, voiceNumber) {
    let notationBeforeMeasure = null,
      firstNotationLayout = null;
    for (let i = 0; i < notationLayouts.length; i++) {
      const layout = notationLayouts[i];
      const notationLayout = layout;
      if (notationLayout.notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"] && notationLayout.notation.position > 0 && firstNotationLayout == null) {
        firstNotationLayout = notationLayout;
      }
      if (!MeasureLayout.ignorePosition(notationLayout.notation, ignoreGrace, false, voiceNumber)) {
        if (notationLayout.notation.position > measurePosition) {
          firstNotationLayout = notationLayout;
          break;
        }
        notationBeforeMeasure = notationLayout;
      }
    }
    if (notationBeforeMeasure == null) return 0;
    if (firstNotationLayout) {
      const prevX = notationBeforeMeasure.x;
      const firstX = firstNotationLayout.x;
      const notationPosition = notationBeforeMeasure.notation.position;
      return prevX + (firstX - prevX) * (measurePosition - notationPosition) / (firstNotationLayout.notation.position - notationPosition);
    }
    return notationBeforeMeasure.x;
  }
  static getNotationPositions(notationLayouts, ignoreGrace, noBarline, voiceNum) {
    const positions = [];
    let currX = NaN;
    for (let i = 0; i < notationLayouts.length; i++) {
      const layout = notationLayouts[i];
      const notationLayout = layout;
      if (!MeasureLayout.ignorePosition(notationLayout.notation, ignoreGrace, noBarline, voiceNum) && notationLayout.x !== currX) {
        positions.push({
          x: notationLayout.x,
          position: notationLayout.notation.position
        });
        currX = notationLayout.x;
      }
    }
    return positions;
  }
  static computeMeasureXPosition(notationLayouts, measurePosition, quantum, ignoreGrace, noBarline, voiceNum) {
    let prevNotationLayout = null,
      firstNotationLayout = null;
    for (let i = 0; i < notationLayouts.length; i++) {
      const layout = notationLayouts[i];
      const notationLayout = layout;
      if (notationLayout.notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"] && notationLayout.notation.position > 0 && firstNotationLayout == null) {
        firstNotationLayout = notationLayout;
      }
      if (!MeasureLayout.ignorePosition(notationLayout.notation, ignoreGrace, noBarline, voiceNum) || noBarline && notationLayout.notation.position === notationLayout.notation.measure.duration) {
        if (notationLayout.x > measurePosition) {
          firstNotationLayout = notationLayout;
          break;
        }
        prevNotationLayout = notationLayout;
      }
    }
    if (prevNotationLayout == null) {
      return 0;
    }
    if (firstNotationLayout) {
      let prevX = prevNotationLayout.x;
      let firstX = firstNotationLayout.x;
      let prevPosition = prevNotationLayout.notation.position;
      let firstPosition = firstNotationLayout.notation.position;
      if (quantum > 0) {
        const positionDiff = firstNotationLayout.notation.position - prevNotationLayout.notation.position;
        const timeUnit = Math.min(prevNotationLayout.notation.measure.timeSignature.beatDuration, quantum);
        if (positionDiff > timeUnit) {
          const b = positionDiff * (measurePosition - prevX) / (firstX - prevX);
          const v = Math.floor(b / timeUnit);
          prevPosition += v * timeUnit;
          if (noBarline && prevPosition == prevNotationLayout.notation.measure.duration) {
            prevPosition = Math.max(0, prevPosition - timeUnit);
          }
          prevX += v * timeUnit * (firstX - prevX) / positionDiff;
        }
      }
      if (Math.abs(measurePosition - prevX) < Math.abs(measurePosition - firstX) || noBarline && firstNotationLayout.notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]) {
        return prevPosition;
      } else {
        return firstPosition;
      }
    }
    return prevNotationLayout.notation.position;
  }
  static ignorePosition(notation, ignoreGrace, noBarline, voiceNum) {
    if (notation.measure == null || notation.excludeFromPositioning || notation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_9__["default"]) {
      return true;
    }
    if (noBarline && notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      return true;
    }
    if (voiceNum >= 0 && notation.voiceNumber !== voiceNum) {
      return true;
    }
    const noteSet = notation;
    if (noteSet == null) {
      return !notation.metrial;
    } else if (ignoreGrace) {
      return noteSet.previousGraceNote != null;
    } else {
      return noteSet.grace;
    }
  }
  getEntryNotation(x, entryVoiceNumber) {
    let layout = null;
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < this.notationLayouts.length; i++) {
      const notationLayout = this.notationLayouts[i];
      if (notationLayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_24__["default"] && parseFloat(notationLayout.notation.voiceNumber) === entryVoiceNumber) {
        if (notationLayout.centered) {
          return notationLayout;
        }
        if (x < Math.max(0, notationLayout.x - staffMetrics.mouseNotationPadding)) {
          break;
        }
        layout = notationLayout;
      }
    }
    if (layout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_49__["default"]) {
      const noteSetLayout = layout;
      if (noteSetLayout.clef.tabStemDirection == null && (noteSetLayout.down && x < noteSetLayout.leftX + staffMetrics.mouseNoteEntryStemMargin || !noteSetLayout.down && x > noteSetLayout.leftX + noteSetLayout.noteWidth - staffMetrics.mouseNoteEntryStemMargin)) {
        return null;
      }
    }
    return layout;
  }
  getScoreNote(note) {
    return this.measure.getScoreNote(note, this.scoreInterval);
  }
}

/***/ }),

/***/ 4825:
/*!***********************************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-number-notation-layout.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureNumberNotationLayout)
/* harmony export */ });
/* harmony import */ var _views_measure_number_notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/measure-number-notation-view */ 36082);
/* harmony import */ var _label_notation_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./label-notation-layout */ 3131);


class MeasureNumberNotationLayout extends _label_notation_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_measure_number_notation_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 90307:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-prefixes-layout.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasurePrefixesLayout)
/* harmony export */ });
/* harmony import */ var _system_measure_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system-measure-layout */ 81576);

class MeasurePrefixesLayout {
  get measureIndex() {
    return this._measureIndex;
  }
  get totalPrefixes() {
    return this._prefixes.length;
  }
  get prefixes() {
    return this._prefixes;
  }
  get totalFlowWidth() {
    let totalFlowWidth = 0;
    for (let i = 0; i < this.totalPrefixes; i++) {
      const prefix = this.getPrefixAt(i);
      if (prefix instanceof _system_measure_layout__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        const systemMeasureLayout = prefix;
        if (systemMeasureLayout) {
          totalFlowWidth += systemMeasureLayout.flowWidth;
        }
      }
    }
    return totalFlowWidth;
  }
  constructor(measureIndex) {
    this._measureIndex = NaN;
    this._prefixes = [];
    this._measureIndex = measureIndex;
  }
  getPrefixAt(i) {
    if (i < this._prefixes.length) {
      return this._prefixes[i];
    } else {
      return null;
    }
  }
  addPrefix(prefix) {
    this._prefixes.push(prefix);
  }
  addArrayOfPrefixes(prefixes) {
    for (let o = 0; o < prefixes.length; o++) {
      const prefix = prefixes[o];
      const layout = prefix;
      this.addPrefix(layout);
    }
  }
  validateLayouts() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      prefix.validateLayout();
    }
  }
  invalidateLayouts() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      prefix.invalidate();
    }
  }
  invalidateGlobal() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      prefix.invalidateGlobal();
    }
  }
  destroy() {
    this.destroyChildren();
  }
  destroyChildren() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      prefix.destroy();
    }
  }
}

/***/ }),

/***/ 2248:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/measure-repeat-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureRepeatLayout)
/* harmony export */ });
/* harmony import */ var _models_measure_repeat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/measure-repeat */ 27506);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-beamable-layout */ 51729);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rest-layout */ 41910);





class MeasureRepeatLayout extends _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.centered = true;
  }
  doValidateLayout() {
    this.initializeLayout(this.notation);
    super.doValidateLayout();
  }
  initializeLayout(measureRepeat) {
    const distanceY = this.clef.getRestLine(_models_notation_value__WEBPACK_IMPORTED_MODULE_1__.NotationValue.QUARTER) * this.clef.lineSpacing + measureRepeat.dy;
    const restType = _rest_layout__WEBPACK_IMPORTED_MODULE_4__["default"].restType(_models_notation_value__WEBPACK_IMPORTED_MODULE_1__.NotationValue.WHOLE, distanceY, this.clef);
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, this.foundry.getSymbol(_models_measure_repeat__WEBPACK_IMPORTED_MODULE_0__["default"].MEASURE_REPEAT_SIGN) //, restType
    );

    glyphLayout.distanceY = distanceY;
    this.addGlyphLayout(glyphLayout);
  }
}

/***/ }),

/***/ 32916:
/*!********************************************************!*\
  !*** ./src/app/note-editor/layouts/multi-rest-view.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MultiRestView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);


class MultiRestView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, width, s, staffMetrics, alpha, noteEditorService) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    this.graphics.lineStyle(staffMetrics.lineSpacing, 0, alpha, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.moveTo(0, -0.5 * staffMetrics.lineThickness);
    this.graphics.lineTo(width, -0.5 * staffMetrics.lineThickness);
  }
}

/***/ }),

/***/ 18810:
/*!********************************************************!*\
  !*** ./src/app/note-editor/layouts/notation-layout.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotationLayout)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _glyph_set_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-set-layout */ 41335);
/* harmony import */ var _views_notation_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/notation-view */ 91755);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 94650);




class NotationLayout extends _glyph_set_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get foundry() {
    if (this._foundry == null) {
      const glyphScale = this.glyphScale;
      if (glyphScale === 1) {
        this._foundry = this.context.foundry;
      } else {
        this._foundry = this.context.getScaledFoundry(glyphScale);
      }
    }
    return this._foundry;
  }
  get glyphScale() {
    return this.notation.cue ? this.context.staffMetrics.cueScale : 1;
  }
  get leftX() {
    return this.x;
  }
  get measureLayout() {
    return this._measureLayout;
  }
  get clef() {
    return this._clef;
  }
  get padding() {
    return this._padding;
  }
  set padding(t) {
    this.invalidate();
    this._padding = t;
  }
  get floating() {
    return false;
  }
  get bounds() {
    this.validateLayout();
    return this._bounds;
  }
  get notation() {
    return this._notation;
  }
  get dx() {
    return this._dx;
  }
  set dx(v) {
    this._dx = v;
  }
  get dy() {
    return this._dy;
  }
  set dy(v) {
    this._dy = v;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._padding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this._bounds = null;
    this._foundry = null;
    this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this._dx = 0;
    this._dy = 0;
    this._clef = clef;
    this._notation = notation;
    this._measureLayout = measureLayout;
    this.onSelectSub$ = this._notation.onSelect.subscribe(info => {
      this.onSelect.emit(info);
    });
  }
  sameType(layout) {
    return this.constructor.name === layout.constructor.name;
  }
  doValidateLayout() {
    this.reviseBoundsAndGeometry();
  }
  reviseBoundsAndGeometry() {
    this._bounds = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.calculateBounds(this._bounds);
    this._width = this._bounds.width + this.padding.width;
    this._height = this.bounds.height + this.padding.height;
    this._originX = -(this._bounds.left + this.padding.left);
    this._originY = -(this._bounds.top + this.padding.bottom);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_notation_view__WEBPACK_IMPORTED_MODULE_2__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 29556:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/note-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteLayout)
/* harmony export */ });
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation-layout */ 18810);

class NoteLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get note() {
    return this.notation;
  }
  get pitchLine() {
    return this.clef.getPitchLine(this.scoreNote) * this.clef.lineSpacing;
  }
  get onStaffLine() {
    return 8 * this.clef.getPitchLine(this.scoreNote) % 8 === 0;
  }
  get effectiveFret() {
    return this.clef.getEffectiveFret(this.note);
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.scoreNote = null;
    this.scoreNote = measureLayout ? measureLayout.getScoreNote(notation) : notation;
  }
}

/***/ }),

/***/ 81967:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/note-placement.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotePlacement)
/* harmony export */ });
class NotePlacement {
  constructor() {
    this.measureIndex = 0;
    this.position = NaN;
    this.duration = NaN;
    this.grace = false;
    this.top = NaN;
    this.bottom = NaN;
    this.x = NaN;
    this.hasStem = false;
    this.noteWidth = NaN;
  }
}

/***/ }),

/***/ 83944:
/*!********************************************************!*\
  !*** ./src/app/note-editor/layouts/note-set-layout.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteSetLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _glyph_background_glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyph/background-glyph */ 94287);
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _glyph_leger_line_glyph__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../glyph/leger-line-glyph */ 77112);
/* harmony import */ var _glyph_stem_glyph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../glyph/stem-glyph */ 5162);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/effect-notation */ 4123);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./abstract-beamable-layout */ 51729);
/* harmony import */ var _fall_layout__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./fall-layout */ 28891);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _liaison_layout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./liaison-layout */ 89280);
/* harmony import */ var _note_layout__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./note-layout */ 29556);
/* harmony import */ var _views_note_set_view__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../views/note-set-view */ 61650);
/* harmony import */ var _rip_Layout__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./rip-Layout */ 85948);
/* harmony import */ var _models_note_head__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/note-head */ 80160);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/articulation-attribute */ 9349);
/* harmony import */ var _models_arpeggio__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/arpeggio */ 32363);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/notation-value */ 57485);























class NoteSetLayout extends _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_11__["default"] {
  static get MAX_SUPPORTED_TREMOLO_MARKS() {
    return 3;
  }
  get floating() {
    return this.noteSet.grace;
  }
  get direction() {
    let direction;
    if (this.context.staffMetrics.ignoreStemDirection || (direction = this.noteSet.direction) == null) {
      if ((direction = this.clef.tabStemDirection) != null) {
        return direction;
      } else if (this.noteSet.grace && !this.multiVoice) {
        return _models_notation_direction__WEBPACK_IMPORTED_MODULE_19__.Notation_Direction.DIRECTION_UP;
      } else if (this.clef.sign === _models_clef__WEBPACK_IMPORTED_MODULE_5__["default"].PERCUSSION_CLEF_SIGN && this.measureLayout.measure.numVoices === 1) {
        if (this.maxPitchLine <= _models_clef__WEBPACK_IMPORTED_MODULE_5__["default"].PERCUSSION_SPLIT_LINE) {
          return _models_notation_direction__WEBPACK_IMPORTED_MODULE_19__.Notation_Direction.DIRECTION_DOWN;
        } else {
          return _models_notation_direction__WEBPACK_IMPORTED_MODULE_19__.Notation_Direction.DIRECTION_UP;
        }
      } else {
        return null;
      }
    } else {
      return direction;
    }
  }
  get glyphScale() {
    const staffMetrics = this.context.staffMetrics;
    if (this.noteSet.grace) {
      if (this._isTab) {
        return super.glyphScale * staffMetrics.tabGraceScale;
      } else {
        return super.glyphScale * staffMetrics.graceScale;
      }
    } else {
      return super.glyphScale;
    }
  }
  get leftX() {
    return this.x + this._voiceOffset;
  }
  get noteWidth() {
    return this._noteWidth;
  }
  get noteHeight() {
    return this._noteHeight;
  }
  get hasAlternate() {
    return this._hasAlternate;
  }
  get showRhythm() {
    return this._showRhythm;
  }
  get isTab() {
    return this._isTab;
  }
  set stemLength(length) {
    const staffMetrics = this.context.staffMetrics;
    super.stemLength = length;
    if (this._stemLayout) {
      this._stemLayout.glyph.height = length * staffMetrics.lineSpacing;
      if (this._tremoloLayout) {
        this.positionStemDecorationSymbol(this._tremoloLayout, staffMetrics.tremoloVerticalStemOffset, staffMetrics.tremoloVerticalNoteOffset);
      }
    }
  }
  get stemLength() {
    return super.stemLength;
  }
  get hasStem() {
    return this.noteSet.value < _models_notation_value__WEBPACK_IMPORTED_MODULE_22__.NotationValue.WHOLE && !this.isPlainSlash && !this.furthestNoteFromStem.stemless;
  }
  get ascendingNoteLayouts() {
    const notelayoutCopy = this.noteLayouts.slice();
    NoteSetLayout.sortNoteLayouts(notelayoutCopy);
    return notelayoutCopy;
  }
  static sortNoteLayouts(noteLayouts) {
    noteLayouts.sort((prev, next) => {
      return _models_note__WEBPACK_IMPORTED_MODULE_7__.Note.compareNotePitch(prev.note, next.note);
    });
  }
  get stemmingLine() {
    if (isNaN(this._stemmingLine)) {
      let lineSum = 0;
      for (let i = 0; i < this.noteSet.notes.length; i++) {
        const note = this.noteSet.notes[i];
        lineSum += this.clef.getPitchLine(this.measureLayout.getScoreNote(note)) * this.clef.lineSpacing;
      }
      this._stemmingLine = lineSum / this.noteSet.notes.length;
    }
    return this._stemmingLine;
  }
  get maxPitchLine() {
    if (isNaN(this._maxLine)) {
      const lastNote = this.noteSet.notes[this.noteSet.notes.length - 1];
      this._maxLine = this.clef.getPitchLine(this.measureLayout.getScoreNote(lastNote)) * this.clef.lineSpacing;
    }
    return this._maxLine;
  }
  get minPitchLine() {
    if (isNaN(this._minLine)) {
      const firstNote = this.noteSet.notes[0];
      this._minLine = this.clef.getPitchLine(this.measureLayout.getScoreNote(firstNote)) * this.clef.lineSpacing;
    }
    return this._minLine;
  }
  get maxAccidentalLine() {
    for (let idx = this.noteSet.notes.length - 1; idx >= 0; idx--) {
      const scoreNote = this.measureLayout.getScoreNote(this.noteSet.notes[idx]);
      if (scoreNote.accidental) {
        return this.clef.getPitchLine(scoreNote) * this.clef.lineSpacing;
      }
    }
    return -2147483648;
  }
  get minAccidentalLine() {
    for (let idx = 0; idx < this.noteSet.notes.length; idx++) {
      const scoreNote = this.measureLayout.getScoreNote(this.noteSet.notes[idx]);
      if (scoreNote.accidental) {
        return this.clef.getPitchLine(scoreNote) * this.clef.lineSpacing;
      }
    }
    return 2147483647;
  }
  get stemStartLine() {
    if (this.isTab) {
      if (this.down) {
        return -1;
      } else {
        return this.clef.staffHeight + 1;
      }
    } else if (this.down) {
      return this.maxPitchLine;
    } else {
      return this.minPitchLine;
    }
  }
  get nearestStemLine() {
    if (this.down) {
      return Math.min(this.clef.staffHeight + 1.5, this.minPitchLine);
    } else {
      return Math.max(-1.5, this.maxPitchLine);
    }
  }
  get alternateVoiceNoteSetLayout() {
    return this.alternateVoiceLayout;
  }
  get numNoteLayouts() {
    return this._noteLayouts.length;
  }
  get stemOffset() {
    if (this.isTab) {
      return this.context.staffMetrics.tabStemOffset;
    } else {
      return 0;
    }
  }
  get stemEnd() {
    if (this._stemLayout == null) {
      if (this.hasStem) {
        this.addStems();
      }
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]((this.noteSet.rhythmPosition ? 0 : this.noteWidth) + this.stemOffset, (this.minPitchLine + this.maxPitchLine) / 2);
    }
    const x = this._stemLayout.glyph.startX / this.context.staffMetrics.lineSpacing + this.stemOffset;
    const y = this.down ? this.stemStartLine - this.stemLength : this.stemStartLine + this.stemLength;
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](x, y);
  }
  get notationWidth() {
    return this._noteWidth;
  }
  get standardStemLength() {
    const staffMetrics = this.context.staffMetrics;
    let stemLength = this.glyphScale * (this.hasStem ? staffMetrics.normalStemLength : staffMetrics.nullStemLength);
    if (this.clef.tabStemDirection) {
      return stemLength;
    } else {
      if (this.multiVoice) {
        if (this.down) {
          stemLength -= Math.min(staffMetrics.stemMultiVoiceCutback, Math.max(0, this.clef.centerLine - this.minPitchLine));
        } else {
          stemLength -= Math.min(staffMetrics.stemMultiVoiceCutback, Math.max(0, this.maxPitchLine - this.clef.centerLine));
        }
      }
      stemLength += this.maxPitchLine - this.minPitchLine;
      stemLength += this.down ? Math.max(0, this.minPitchLine - this.clef.staffHeight - 1.5) : Math.max(0, -this.maxPitchLine - 1.5);
      return stemLength;
    }
  }
  get dotsDown() {
    return this._down && this._multiVoice && this.hasStem && !(this.alternateVoiceNoteSetLayout && this._voiceOffset === 0 && this.maxPitchLine === this.alternateVoiceNoteSetLayout.minPitchLine);
  }
  get crossoverLines() {
    if (this.alternateVoiceNoteSetLayout) {
      if (this.down) {
        return this.maxPitchLine - this.alternateVoiceNoteSetLayout.minPitchLine;
      } else {
        return this.alternateVoiceNoteSetLayout.maxPitchLine - this.minPitchLine;
      }
    } else {
      return 0;
    }
  }
  get crossoverAccidentalLines() {
    if (this.alternateVoiceNoteSetLayout) {
      if (this.down) {
        return this.maxAccidentalLine - this.alternateVoiceNoteSetLayout.minPitchLine;
      } else {
        this.alternateVoiceNoteSetLayout.maxAccidentalLine - this.minAccidentalLine;
      }
    } else {
      Number.MIN_VALUE;
    }
  }
  get stemNoteHead() {
    return this.furthestNoteFromStem.noteHead;
  }
  get furthestNoteFromStem() {
    if (this.down) {
      return this.noteSet.getNoteAt(this.noteSet.notes.length - 1);
    } else {
      return this.noteSet.getNoteAt(0);
    }
  }
  get isPlainSlash() {
    return this.stemNoteHead === _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.SLASH_NOTE_HEAD && this.noteSet.duration === this.measureLayout.measure.timeSignature.defaultBeatGroupDuration && _models_timesignature__WEBPACK_IMPORTED_MODULE_9__["default"].groupStartAt(this.measureLayout.measure.timeSignature.beatGroups, this.noteSet.rhythmPosition);
  }
  get alternateVoiceOffset() {
    const staffMetrics = this.context.staffMetrics;
    if (this.alternateVoiceNoteSetLayout && !this.alternateVoiceNoteSetLayout.noteSet.invisible) {
      if (this._isTab) {
        if (this.noteSet.grace || this.noteSet.previousGraceNote || !this.alternateVoiceNoteSetLayout.noteSet.previousGraceNote) {
          return 0;
        } else {
          return staffMetrics.initialGracePadding.x - staffMetrics.tabFretWidth;
        }
      }
      if (!(this.down && this.alternateVoiceNoteSetLayout.noteSet.dots > 0 && this.noteSet.dots === 0) && (!this.down && this.alternateVoiceNoteSetLayout.noteSet.dots === 0 && this.noteSet.dots > 0 || this.down)) {
        const crossoverLines = this.crossoverLines;
        if ((!this.hasStem || !this.alternateVoiceNoteSetLayout.hasStem) && crossoverLines > -0.5) {
          if (this.alternateVoiceNoteSetLayout.noteSet.dots > 0) {
            return staffMetrics.wholeCrossoverOffset + 2 * staffMetrics.dotSpacing + staffMetrics.multipleDotGap * (this.alternateVoiceNoteSetLayout.noteSet.dots - 1);
          } else {
            return staffMetrics.wholeCrossoverOffset;
          }
        }
        if (crossoverLines === 0 && this.noteSet.dots === this.alternateVoiceNoteSetLayout.noteSet.dots && (this.noteSet.getNoteAt(0).noteHead || _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.NORMAL_NOTE_HEAD) === (this.alternateVoiceNoteSetLayout.noteSet.getNoteAt(0).noteHead || _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.NORMAL_NOTE_HEAD) && this.noteSet.value === _models_notation_value__WEBPACK_IMPORTED_MODULE_22__.NotationValue.HALF === (this.alternateVoiceNoteSetLayout.noteSet.value === _models_notation_value__WEBPACK_IMPORTED_MODULE_22__.NotationValue.HALF)) {
          return 0;
        }
        if (crossoverLines >= 0) {
          return staffMetrics.crossoverOffset;
        }
        if (crossoverLines === -0.5) {
          if (this.down) {
            return staffMetrics.nearCrossoverOffset;
          } else {
            return staffMetrics.crossoverOffset;
          }
        }
      }
    }
    return 0;
  }
  get lyricExclusionBottom() {
    const staffMetrics = this.context.staffMetrics;
    if (this.down && this.noteSet.lyrics.length === 0 && this.noteSet.liaisonCount > 0) {
      const doubleDurationWidth = 2 * staffMetrics.getDurationWidth(this.noteSet.duration);
      return Math.min(this.bounds.top, this.minPitchLine - this.noteHeight - staffMetrics.tieStandardHeight(doubleDurationWidth));
    }
    if (this.noteSet.articulations.length > 0 && (this._multiVoice ? this._down : !this._down)) {
      this.preValidateGlobal();
    }
    let lyricExclusionBottom = super.lyricExclusionBottom;
    if (this._tupletLayout && this.tupletLayout.down && this._tupletLayout.tuplet.show) {
      lyricExclusionBottom -= staffMetrics.tupletHeight + staffMetrics.tupletBracketHeight;
    }
    return lyricExclusionBottom;
  }
  get lyricExclusionTop() {
    const staffMetrics = this.context.staffMetrics;
    if (!this.down && this.noteSet.lyrics.length === 0 && this.noteSet.liaisonCount > 0) {
      const doubleDurationWidth = 2 * staffMetrics.getDurationWidth(this.noteSet.duration);
      return Math.max(this.bounds.top + this.bounds.height, this.maxPitchLine + this.noteHeight + staffMetrics.tieStandardHeight(doubleDurationWidth));
    }
    if (this.noteSet.articulations.length > 0 && (this._multiVoice ? !this._down : this._down)) {
      this.preValidateGlobal();
    }
    let lyricExclusionTop = super.lyricExclusionTop;
    if (this._tupletLayout && !this._tupletLayout.down && this._tupletLayout.tuplet.shown) {
      lyricExclusionTop += staffMetrics.tupletHeight + staffMetrics.tupletBracketHeight;
    }
    return lyricExclusionTop;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.liaisonEndLayout = null;
    this.enableStem = true;
    this._noteHead = null;
    this._noteWidth = NaN;
    this._noteHeight = NaN;
    this._minLine = NaN;
    this._maxLine = NaN;
    this._stemmingLine = NaN;
    this._voiceOffset = 0;
    this._showRhythm = false;
    this._hasAlternate = false;
    this._parenthesisWidth = 0;
    this._minAlternateLine = NaN;
    this._maxAlternateLine = NaN;
    this._leftAccidental = 0;
    this._stemLayout = null;
    this._tremoloLayout = null;
    this._requireLiaisonStartPadding = false;
    this._requireLiaisonEndPadding = false;
    this._liaisonsDetermined = false;
    this._hasLiaisons = false;
    this._isTab = false;
    this._singleNoteLiaison = false;
    this._alternatePitchLines = [];
  }
  calculateBounds(bounds) {
    super.calculateBounds(bounds);
    for (let i = 0; i < this._noteLayouts.length; i++) {
      const noteLayout = this._noteLayouts[i];
      noteLayout.calculateBounds(bounds);
    }
  }
  addNoteLayout(noteLayout) {
    this.invalidate();
    this._noteLayouts.push(noteLayout);
  }
  getNoteLayoutAt(idx) {
    return this._noteLayouts[idx];
  }
  doValidateLayout() {
    this.initializeLayout();
    super.doValidateLayout();
  }
  initializeLayout() {
    const staffMetrics = this.context.staffMetrics;
    this._noteLayouts = [];
    this._alternatePitchLines = [];
    this._voiceOffset = this.alternateVoiceOffset;
    this.padding = staffMetrics.notePadding;
    if (this.noteSet.grace && this.noteSet.previousGraceNote == null) {
      this.padding = staffMetrics.initialGracePadding;
    }
    this.addNoteHeads();
    this._showRhythm = this.clef.showRhythm(this.context.score) && !this.isPlainSlash;
    if (this._showRhythm && this.noteSet.dots > 0) {
      this.addDots();
    }
    if (this.clef.showKey) {
      this.addAccidentals();
    }
    if (this.noteSet.arpeggio) {
      this.addArpeggio();
    }
    if (this._showRhythm && this.enableStem) {
      this.addStems();
    }
    if (this.clef.showLegerLines) {
      this.addLegerLines();
    }
    this.addArticulationSpacers();
    if (this.alternateVoiceNoteSetLayout && this._voiceOffset === 0) {
      const alternateVoiceOffset = this.alternateVoiceNoteSetLayout.alternateVoiceOffset;
      if (alternateVoiceOffset > 0) {
        const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService));
        glyphLayout.distanceX = alternateVoiceOffset + this._noteWidth;
        this.addGlyphLayout(glyphLayout);
      }
    }
    if (this.noteSet.hasEffects) {
      this.addEffects();
    }
    this.adjustLiaisonPadding();
    if (this.noteSet.tremolo > 0 && !this.noteSet.tremoloDyad) {
      this.addTremoloMarks();
    }
  }
  getNextBeamableLayout() {
    const nextNoteSet = this.noteSet.nextNoteSet();
    if (nextNoteSet) {
      return this.measureLayout.getLayoutForNotation(nextNoteSet);
    } else {
      return null;
    }
  }
  getPreviousBeamableLayout() {
    const previousNoteSet = this.noteSet.previousNoteSet();
    if (previousNoteSet) {
      return this.measureLayout.getLayoutForNotation(previousNoteSet);
    } else {
      return null;
    }
  }
  static upToDownLiaison(prevBeamableLayout, nextBeamableLayout) {
    return prevBeamableLayout && nextBeamableLayout && !prevBeamableLayout.down && prevBeamableLayout.hasStem && nextBeamableLayout.down;
  }
  adjustLiaisonPadding() {
    const staffMetrics = this.context.staffMetrics;
    if (this.noteSet.liaisonCount > 0) {
      const singleNoteLiaison = this.noteSet.notes.length === 1 && !this.multiVoice && (this._requireLiaisonStartPadding || staffMetrics.tieSingleNoteEnabled);
      this._singleNoteLiaison = this._singleNoteLiaison || singleNoteLiaison;
      if (this._requireLiaisonStartPadding || !singleNoteLiaison || NoteSetLayout.upToDownLiaison(this, this.getNextBeamableLayout()) && (this.noteSet.position + this.noteSet.duration < this.noteSet.measure.duration || this.measureLayout.lastLayoutOnSystem)) {
        this.padding = this.padding.clone();
        this.padding.width += staffMetrics.noteLiaisonPadding;
      }
    }
    if (this.noteSet.liaisonEndCount > 0) {
      const singleNoteLiaison = this.noteSet.notes.length === 1 && !this.multiVoice && (this._requireLiaisonEndPadding || staffMetrics.tieSingleNoteEnabled);
      this._singleNoteLiaison = this._singleNoteLiaison || singleNoteLiaison;
      if (!(!this._requireLiaisonEndPadding && singleNoteLiaison && !NoteSetLayout.upToDownLiaison(this.getPreviousBeamableLayout(), this) || !(this.noteSet.position > 0 || this.measureLayout.firstLayoutOnSystem) && this.measureLayout.measure.flowFromPreviousMeasure)) {
        this.padding = this.padding.clone();
        this.padding.x -= staffMetrics.noteLiaisonPadding;
        this.padding.width += staffMetrics.noteLiaisonPadding;
      }
    }
  }
  addNoteHeads() {
    const staffMetrics = this.context.staffMetrics;
    const notes = this.noteSet.notes;
    const startIdx = this.down ? notes.length - 1 : 0;
    const r = this.down ? -1 : notes.length;
    const s = this.down ? -1 : 1;
    let i = -1000;
    let n = false;
    let a = false;
    for (let idx = startIdx; idx !== r; idx += s) {
      const note = notes[idx];
      if (note.liaison) {
        this._requireLiaisonStartPadding = this._requireLiaisonStartPadding || _liaison_layout__WEBPACK_IMPORTED_MODULE_14__["default"].requireSingleNotePadding(note.liaison);
      }
      if (note.liaisonStartNote) {
        this._requireLiaisonEndPadding = this._requireLiaisonEndPadding || _liaison_layout__WEBPACK_IMPORTED_MODULE_14__["default"].requireSingleNotePadding(note.liaisonStartNote.liaison);
      }
      const noteLayout = new _note_layout__WEBPACK_IMPORTED_MODULE_15__["default"](this.context, this.measureLayout, note, this.clef, this.noteEditorService, this.rootDiv);
      const pitchLine = noteLayout.pitchLine;
      this.addNoteLayout(noteLayout);
      if (this.clef.showRhythm(this.context.score) || !note.tieEnd) {
        let halfWitespaceWidth = 0,
          tabFretWidth = 0,
          noteHeight = 0,
          effectiveFret = this.clef.getEffectiveFret(note);
        if (effectiveFret >= 0 && (note.noteHead == null || note.noteHead === _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.NORMAL_NOTE_HEAD)) {
          if (note.cumulativeBend > 0) {
            if (note.relativeBend !== 0) {
              this._noteHead = this.foundry.getBendAlteration(note.cumulativeBend);
            } else {
              this._noteHead = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService);
            }
          } else {
            this._noteHead = this.foundry.getTabFret(effectiveFret);
          }
          tabFretWidth = staffMetrics.tabFretWidth;
          halfWitespaceWidth = Math.max(0, (tabFretWidth - this._noteHead.width / staffMetrics.lineSpacing) / 2);
          const tabFretBackgroundPadding = staffMetrics.tabFretBackgroundPadding;
          const backgroundGlyph = new _glyph_background_glyph__WEBPACK_IMPORTED_MODULE_1__["default"](this._noteHead.width + 2 * tabFretBackgroundPadding * staffMetrics.lineSpacing, this._noteHead.height, this.noteEditorService);
          const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, backgroundGlyph);
          glyphLayout.distanceX = this._voiceOffset - tabFretBackgroundPadding + halfWitespaceWidth;
          glyphLayout.distanceY = pitchLine + this._noteHead.originY / staffMetrics.lineSpacing;
          this.addGlyphLayout(glyphLayout);
          const emptyGlyph = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](tabFretWidth * staffMetrics.lineSpacing, this._noteHead.height, this.noteEditorService);
          const layout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, emptyGlyph);
          layout.distanceX = this._voiceOffset;
          layout.distanceY = pitchLine;
          this.addGlyphLayout(layout);
        } else {
          const notationValue = this.isPlainSlash ? _models_notation_value__WEBPACK_IMPORTED_MODULE_22__.NotationValue.QUARTER : this.noteSet.value;
          const noteValue = Math.max(_models_notation_value__WEBPACK_IMPORTED_MODULE_22__.NotationValue.QUARTER, notationValue);
          const noteHead = note.noteHead;
          const pitchLine = noteLayout.pitchLine;
          if (noteHead === _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.NAMED_NOTE_HEAD) {
            const noteNameStr = ''.concat(noteValue.toString()).concat(this._calculateNoteName(pitchLine));
            this._noteHead = this.foundry.getNoteHead(noteNameStr, noteHead);
            const backgroundNoteHead = this.foundry.getNoteHead(noteValue, _models_note_head__WEBPACK_IMPORTED_MODULE_18__.NoteHead.BACKGROUND_NOTE_HEAD);
            const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, backgroundNoteHead);
            glyphLayout.distanceX = this._voiceOffset + halfWitespaceWidth;
            glyphLayout.distanceY = pitchLine;
            if (pitchLine === i || 2 * (pitchLine - 1) === s) {
              let noteHeadWidth;
              if (tabFretWidth === 0) {
                noteHeadWidth = this._noteHead.width / staffMetrics.lineSpacing;
              }
              glyphLayout.distanceX += this.down ? -noteHeadWidth : noteHeadWidth;
            }
            noteLayout.addGlyphLayout(glyphLayout);
          } else {
            this._noteHead = this.foundry.getNoteHead(noteValue, noteHead);
          }
          if (this._isTab) {
            tabFretWidth = staffMetrics.tabFretWidth;
            halfWitespaceWidth = Math.max(0, (tabFretWidth - this._noteHead.width / staffMetrics.lineSpacing) / 2);
          }
        }
        if (tabFretWidth === 0) {
          tabFretWidth = this._noteHead.width / staffMetrics.lineSpacing;
        }
        noteHeight = this._noteHead.height / staffMetrics.lineSpacing;
        if (!a) {
          this._noteWidth = tabFretWidth;
          this._noteHeight = noteHeight;
          a = true;
        }
        const noteHeadGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this._noteHead);
        noteHeadGlyphLayout.distanceX = this._voiceOffset + halfWitespaceWidth;
        noteHeadGlyphLayout.distanceY = pitchLine;
        if (note.cue) {
          const cueScale = staffMetrics.cueScale;
          noteHeadGlyphLayout.scale = cueScale;
          tabFretWidth *= cueScale;
          noteHeight *= cueScale;
          if (!this.down) {
            noteHeadGlyphLayout.distanceX += this._noteWidth - tabFretWidth;
          }
        }
        if (pitchLine === i || 2 * (pitchLine - i) === s) {
          n = !n;
          if (n) {
            this._alternatePitchLines.push(pitchLine);
            if (this._hasAlternate) {
              this._minAlternateLine = Math.min(this._minAlternateLine, pitchLine);
              this._maxAlternateLine = Math.max(this._maxAlternateLine, pitchLine);
            } else {
              this._hasAlternate = true;
              this._minAlternateLine = this._maxAlternateLine = pitchLine;
            }
            noteHeadGlyphLayout.distanceX += this.down ? -tabFretWidth : tabFretWidth;
          }
        } else {
          n = false;
        }
        i = pitchLine;
        noteLayout.addGlyphLayout(noteHeadGlyphLayout);
        if (note.parentheses) {
          let parenthesisGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol('leftParenthesis'));
          parenthesisGlyphLayout.distanceX = staffMetrics.parenthesisSpacing - noteHeadGlyphLayout.distanceX;
          parenthesisGlyphLayout.distanceY = pitchLine;
          parenthesisGlyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
          noteLayout.addGlyphLayout(parenthesisGlyphLayout);
          parenthesisGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol('rightParenthesis'));
          parenthesisGlyphLayout.distanceX = staffMetrics.parenthesisSpacing + noteHeadGlyphLayout.distanceX + this._noteHead.width / staffMetrics.lineSpacing;
          parenthesisGlyphLayout.distanceY = pitchLine;
          noteLayout.addGlyphLayout(parenthesisGlyphLayout);
          this._parenthesisWidth = parenthesisGlyphLayout.width;
        }
      } else {
        this._noteWidth = this._noteHeight = 0;
      }
    }
  }
  _calculateNoteName(pitchLine) {
    const noteNames = ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
    let namesCount = noteNames.length;
    return noteNames[((2 * pitchLine + this.clef.initialStep) % namesCount + namesCount) % namesCount];
  }
  addDots() {
    const staffMetrics = this.context.staffMetrics;
    let x = staffMetrics.dotSpacing + this._noteWidth + this._voiceOffset;
    let offsetX = 0;
    if (this.hasAlternate && !this.down) {
      offsetX += this._noteWidth;
    }
    if (this._parenthesisWidth > 0) {
      offsetX += staffMetrics.parenthesisSpacing + this._parenthesisWidth;
    }
    if (this.alternateVoiceNoteSetLayout && this._voiceOffset === 0 && this.alternateVoiceNoteSetLayout.noteSet.dots > 0 && this.hasStem) {
      offsetX = Math.max(offsetX, this.alternateVoiceNoteSetLayout.alternateVoiceOffset);
    }
    x += offsetX;
    let prevDistanceY = NaN;
    let noteLayouts = this._noteLayouts;
    const dotsDown = this.dotsDown;
    if (dotsDown) {
      noteLayouts = noteLayouts.slice().reverse();
    }
    for (let i = 0; i < noteLayouts.length; i++) {
      const noteLayout = noteLayouts[i];
      let distanceY = dotsDown ? Math.ceil(noteLayout.pitchLine) - 0.5 : Math.floor(noteLayout.pitchLine) + 0.5;
      if (distanceY === prevDistanceY) {
        distanceY += dotsDown ? 1 : -1;
      }
      prevDistanceY = distanceY;
      for (let j = 0; j < this.noteSet.dots; j++) {
        const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getRhythmDot());
        glyphLayout.distanceX = x + staffMetrics.multipleDotGap * j;
        glyphLayout.distanceY = distanceY;
        noteLayout.addGlyphLayout(glyphLayout);
      }
    }
  }
  addAccidentals() {
    const staffMetrics = this.context.staffMetrics;
    let noteLayouts = [];
    if (this.alternateVoiceNoteSetLayout && this.crossoverAccidentalLines < -staffMetrics.accidentalClearance) {
      if (this.down) {
        noteLayouts = this.noteLayouts.concat(this.alternateVoiceNoteSetLayout.noteLayouts);
        NoteSetLayout.sortNoteLayouts(noteLayouts);
      } else {
        noteLayouts = [];
      }
    } else {
      noteLayouts = this._noteLayouts;
      if (this.down) {
        noteLayouts = noteLayouts.slice().reverse();
      }
    }
    let accidentalSpacing = staffMetrics.accidentalSpacing;
    if (this._parenthesisWidth > 0) {
      accidentalSpacing += staffMetrics.parenthesisSpacing + this._parenthesisWidth;
    }
    if (this._hasAlternate && this.down) {
      accidentalSpacing += this._noteWidth;
    }
    const distanceXes = [];
    for (let i = 0; i < noteLayouts.length; i++) {
      distanceXes[i] = accidentalSpacing;
    }
    let leftIdx = 0;
    let rightIdx = noteLayouts.length;
    let a = -1;
    let distanceY = NaN;
    let prevAccidental = null;
    while (leftIdx < rightIdx) {
      const idx = a > 0 ? leftIdx++ : --rightIdx;
      const noteLayout = noteLayouts[idx];
      const accidental = noteLayout.scoreNote.accidental;
      if (accidental && (distanceY !== noteLayout.pitchLine || prevAccidental !== accidental)) {
        prevAccidental = accidental;
        distanceY = noteLayout.pitchLine;
        let glyphLayout,
          distanceX = distanceXes[idx];
        if (noteLayout.note.courtesyAccidental) {
          glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol('rightParenthesis'));
          glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
          glyphLayout.distanceX = distanceX;
          glyphLayout.distanceY = distanceY;
          noteLayout.addGlyphLayout(glyphLayout);
          distanceX += staffMetrics.parenthesisSpacing + glyphLayout.width;
        }
        glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getAccidental(accidental));
        glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
        glyphLayout.distanceX = distanceX;
        glyphLayout.distanceY = distanceY;
        noteLayout.addGlyphLayout(glyphLayout);
        distanceX += glyphLayout.width;
        if (noteLayout.note.courtesyAccidental) {
          distanceX += staffMetrics.parenthesisSpacing;
          glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol('leftParenthesis'));
          glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
          glyphLayout.distanceX = distanceX;
          glyphLayout.distanceY = distanceY;
          distanceX += glyphLayout.width;
          noteLayout.addGlyphLayout(glyphLayout);
        }
        const d = distanceX + staffMetrics.accidentalSpread;
        this._leftAccidental = Math.max(this._leftAccidental, d);
        for (let i = 0; i < noteLayouts.length; i++) {
          if (noteLayouts[i].pitchLine - noteLayout.pitchLine < staffMetrics.accidentalClearance) {
            distanceXes[i] = d;
          }
        }
        if (distanceXes[idx] > accidentalSpacing) {
          accidentalSpacing = distanceXes[idx];
          a = -a;
        }
      }
    }
    if (this.alternateVoiceNoteSetLayout && this.down && prevAccidental) {
      this.alternateVoiceNoteSetLayout.reviseBoundsAndGeometry();
    }
  }
  addArpeggio() {
    const staffMetrics = this.context.staffMetrics;
    let distanceX = -(staffMetrics.arpeggioSpacing + staffMetrics.arpeggioWidth);
    if (this._leftAccidental > 0) {
      distanceX -= this._leftAccidental;
    } else if (this._hasAlternate && this.down) {
      distanceX -= this._noteWidth;
    }
    if (this._parenthesisWidth > 0) {
      distanceX -= staffMetrics.parenthesisSpacing + this._parenthesisWidth;
    }
    let arpeggioUp = 'arpeggio';
    let arpeggioDown = 'arpeggio';
    switch (this.noteSet.arpeggio) {
      case _models_arpeggio__WEBPACK_IMPORTED_MODULE_21__.ARPEGGIO.UP:
        arpeggioUp = 'arpeggioUp';
        break;
      case _models_arpeggio__WEBPACK_IMPORTED_MODULE_21__.ARPEGGIO.DOWN:
        arpeggioDown = 'arpeggioDown';
        break;
    }
    let minDistanceY = this.minPitchLine - 0.5;
    let maxDistanceY = this.maxPitchLine + 0.5;
    let distance = minDistanceY - maxDistanceY;
    if (Math.floor(distance) < distance) {
      minDistanceY -= 0.25;
      maxDistanceY += 0.25;
    }
    let a = true;
    let distanceY = minDistanceY;
    while (distanceY < maxDistanceY) {
      let arpeggio;
      if (this.notation.notes.length === 1) {
        arpeggio = 'arpeggio';
      } else if (distanceY < maxDistanceY - 1) {
        if (a) {
          arpeggio = arpeggioDown;
        } else {
          arpeggio = 'arpeggio';
        }
      } else {
        arpeggio = arpeggioUp;
      }
      const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol(arpeggio));
      glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_LEFT;
      glyphLayout.distanceX = distanceX;
      glyphLayout.distanceY = distanceY;
      this.addGlyphLayout(glyphLayout);
      a = false;
      distanceY++;
    }
    this.padding = this.padding.clone();
    this.padding.x -= staffMetrics.arpeggioSpacing;
    this.padding.width += staffMetrics.arpeggioSpacing;
  }
  addStems() {
    const stemNoteHead = this.stemNoteHead;
    const notBeam = !this.beam;
    const graceStart = this.noteSet.grace && !this.noteSet.appoggiatura && this.noteSet.previousGraceNote == null;
    const stemGlyphs = this.foundry.getStem(this.noteSet.value, this._stemLength, this.down, notBeam, graceStart, stemNoteHead);
    for (let i = 0; i < stemGlyphs.length; i++) {
      const stemGlyph = stemGlyphs[i];
      const stemLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, stemGlyph);
      stemLayout.distanceX = this._voiceOffset + this.stemOffset;
      stemLayout.distanceY = this.stemStartLine;
      this.addGlyphLayout(stemLayout);
      if (stemGlyph instanceof _glyph_stem_glyph__WEBPACK_IMPORTED_MODULE_4__["default"]) {
        this._stemLayout = stemLayout;
      }
    }
  }
  addLegerLines() {
    let bottomPitchLine = Math.ceil(this.minPitchLine);
    while (bottomPitchLine < 0) {
      this.addLeger(bottomPitchLine, bottomPitchLine >= this._minAlternateLine);
      bottomPitchLine++;
    }
    let topPitchLine = Math.floor(this.maxPitchLine);
    while (topPitchLine > this.clef.staffHeight) {
      this.addLeger(topPitchLine, topPitchLine <= this._maxAlternateLine);
      topPitchLine--;
    }
  }
  addArticulationSpacers() {
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < this.noteSet.articulations.length; i++) {
      const articulation = this.noteSet.articulations[i];
      // TODO articulationStr
      if ((_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.AFFECTS_WIDTH) !== 0) {
        const articulationGlyph = this.foundry.getArticulation(articulation, true, this._isTab);
        let glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService));
        glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_LEFT;
        glyphLayout.distanceX = articulationGlyph.width / staffMetrics.lineSpacing;
        this.addGlyphLayout(glyphLayout);
        glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.noteEditorService));
        glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
        glyphLayout.distanceX = articulationGlyph.width / staffMetrics.lineSpacing;
        this.addGlyphLayout(glyphLayout);
      }
    }
  }
  calculateClear() {
    const staffMetrics = this.context.staffMetrics;
    let spacing = 0.5;
    if (this._singleNoteLiaison) {
      spacing += staffMetrics.tieSingleNoteBelowSpacing;
    }
    if (this.down) {
      this._clearBottom = this.maxPitchLine - this.stemLength - staffMetrics.articulationPadding;
      this._clearTop = this.maxPitchLine + spacing + staffMetrics.articulationPadding;
    } else {
      this._clearBottom = this.minPitchLine - spacing - staffMetrics.articulationPadding;
      this._clearTop = this.minPitchLine + this.stemLength + staffMetrics.articulationPadding;
    }
    this._extrasBottom = this._extrasTop = NaN;
  }
  addArticulations() {
    if (this.noteSet.articulations.length !== 0) {
      if (this._multiVoice) {
        if (this.down) {
          this.addBelowArticulations(this.noteSet.articulations, this.noteWidth / 2);
        } else {
          this.addAboveArticulations(this.noteSet.articulations, this.noteWidth / 2);
        }
      } else if (this._down) {
        this.addAboveArticulations(this.noteSet.articulations, this.noteWidth / 2);
      } else {
        const aboveStaffArticulations = [];
        const belowStaffArticulations = [];
        for (let i = 0; i < this.noteSet.articulations.length; i++) {
          const articulation = this.noteSet.articulations[i];
          if ((_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ALWAYS_ABOVE_STAFF) !== 0) {
            aboveStaffArticulations.push(articulation);
          } else {
            belowStaffArticulations.push(articulation);
          }
        }
        this.addAboveArticulations(aboveStaffArticulations, this.noteWidth / 2);
        this.addBelowArticulations(belowStaffArticulations, this.noteWidth / 2);
      }
    }
  }
  addStemDecorationGlyph(articulationStr) {
    const staffMetrics = this.context.staffMetrics;
    const decorationSymbol = this.foundry.getStemDecorationSymbol(articulationStr);
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, decorationSymbol);
    this.positionStemDecorationSymbol(glyphLayout, staffMetrics.stemDecorationVerticalStemOffset, staffMetrics.stemDecorationVerticalNoteOffset);
    this.addGlyphLayout(glyphLayout);
  }
  addAboveArticulations(articulations, halfNoteWidth) {
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < articulations.length; i++) {
      const articulation = articulations[i];
      // TODO articulationStr
      if (_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] !== _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ARTICULATION_LIAISON) {
        if (_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] === _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.STEM_DECORATION) {
          this.addStemDecorationGlyph(articulation);
        } else {
          const articulationGlyph = this.foundry.getArticulation(articulation, true, this._isTab);
          const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, articulationGlyph);
          const articulationAttr = _models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation];
          glyphLayout.affectsWidth = (articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.AFFECTS_WIDTH) !== 0;
          glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_BOTTOM;
          if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ALLOWED_IN_STAFF) === 0) {
            this.clearAboveStaff(0);
          } else if (this._clearTop < this.clef.displayLineEndIndex - 1 + staffMetrics.articulationPadding) {
            if (this.clef.displayLineSpacing === 1 && this.clef.showLegerLines) {
              this._clearTop = Math.floor(this._clearTop + 0.4999) + 0.5 - glyphLayout.height / 2;
            } else {
              this._clearTop -= glyphLayout.height / 2;
              for (let displayLineIdx = this.clef.displayLineEndIndex - 1; displayLineIdx >= this.clef.displayLineStartIndex; displayLineIdx -= this.clef.displayLineSpacing) {
                if (Math.abs(this._clearTop - displayLineIdx) < 0.5) {
                  this._clearTop = displayLineIdx + 0.5 - glyphLayout.height / 2;
                  break;
                }
              }
            }
          }
          glyphLayout.distanceX = halfNoteWidth + this._voiceOffset;
          if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.PLACE_TO_RIGHT) != 0) {
            glyphLayout.distanceX += staffMetrics.rightArticulationPadding;
          }
          glyphLayout.distanceY = this._clearTop + glyphLayout.height;
          this.addGlyphLayout(glyphLayout);
          this._clearTop += glyphLayout.height + staffMetrics.articulationSpacing;
        }
      }
    }
  }
  addBelowArticulations(articulations, halfNoteWidth) {
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < articulations.length; i++) {
      const articulation = articulations[i];
      if (_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] !== _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ARTICULATION_LIAISON) {
        if (_models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] === _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.STEM_DECORATION) {
          this.addStemDecorationGlyph(articulation);
        } else {
          const articulationGlyph = this.foundry.getArticulation(articulation, false, this._isTab);
          const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, articulationGlyph);
          const articulationAttr = _models_noteset__WEBPACK_IMPORTED_MODULE_8__.NoteSet.ARTICULATION_ATTRIBUTES[articulation];
          glyphLayout.affectsWidth = (articulation & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.AFFECTS_WIDTH) !== 0;
          glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_BOTTOM;
          if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ALLOWED_IN_STAFF) === 0) {
            this.clearBelowStaff(0);
          } else if (this._clearBottom > this.clef.displayLineStartIndex - staffMetrics.articulationPadding) {
            if (this.clef.displayLineSpacing === 1 && this.clef.showLegerLines) {
              this._clearBottom = Math.ceil(this._clearBottom - 0.4999) - 0.5 + glyphLayout.height / 2;
            } else {
              this._clearBottom += glyphLayout.height / 2;
              for (let displayLineIdx = this.clef.displayLineStartIndex; displayLineIdx < this.clef.displayLineEndIndex; displayLineIdx += this.clef.displayLineSpacing) {
                if (Math.abs(this._clearBottom - displayLineIdx) < 0.5) {
                  this._clearBottom = displayLineIdx - 0.5 + glyphLayout.height / 2;
                  break;
                }
              }
            }
          }
          glyphLayout.distanceX = halfNoteWidth + this._voiceOffset;
          if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.PLACE_TO_RIGHT) !== 0) {
            glyphLayout.distanceX += staffMetrics.rightArticulationPadding;
          }
          glyphLayout.distanceY = this._clearBottom;
          this.addGlyphLayout(glyphLayout);
          this._clearBottom -= glyphLayout.height + staffMetrics.articulationSpacing;
        }
      }
    }
  }
  addTremoloMarks() {
    const staffMetrics = this.context.staffMetrics;
    let tremolo = this.noteSet.tremolo;
    if (tremolo > NoteSetLayout.MAX_SUPPORTED_TREMOLO_MARKS) {
      tremolo = NoteSetLayout.MAX_SUPPORTED_TREMOLO_MARKS;
    }
    const tremoloGlyph = this.foundry.getTremolo(tremolo, this.down);
    this._tremoloLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, tremoloGlyph);
    this.positionStemDecorationSymbol(this._tremoloLayout, staffMetrics.tremoloVerticalStemOffset, staffMetrics.tremoloVerticalNoteOffset);
    this.addGlyphLayout(this._tremoloLayout);
  }
  addEffects() {
    for (let i = 0; i < this._noteLayouts.length; i++) {
      const noteLayout = this._noteLayouts[i];
      const preEffect = noteLayout.note.preEffect;
      const postEffect = noteLayout.note.postEffect;
      if (preEffect) {
        this.addPreEffect(preEffect, noteLayout);
      }
      if (postEffect) {
        this.addPostEffect(postEffect, noteLayout);
      }
    }
  }
  addPreEffect(preEffect, noteLayout) {
    const staffMetrics = this.context.staffMetrics;
    const tieEnd = noteLayout.note.tieEnd;
    let r = 0;
    let effectAlternateSpacing = 0;
    const alternateDown = this.hasAlternate && this.down;
    switch (preEffect.type) {
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.SCOOP:
        if (alternateDown && this._leftAccidental === 0) {
          effectAlternateSpacing += this.effectAlternateSpacing(noteLayout.pitchLine, 2, 0.5);
        }
        r = -this._noteHeight;
        if (tieEnd && !this._down) {
          r += staffMetrics.tieEffectVerticalPadding;
        }
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.PLOP:
        if (alternateDown && this._leftAccidental === 0) {
          effectAlternateSpacing += this.effectAlternateSpacing(noteLayout.pitchLine, 0.5, 2);
        }
        r = this._noteHeight;
        if (tieEnd && this._down) {
          r -= staffMetrics.tieEffectVerticalPadding;
        }
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.RIP1:
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.RIP2:
        if (alternateDown) {
          let a = 2.5;
          if (this._leftAccidental > 0) {
            a += 0.5;
          }
          effectAlternateSpacing += this.effectAlternateSpacing(noteLayout.pitchLine, a, 0.5);
        }
        this.addDraggablePreEffect(preEffect, noteLayout, effectAlternateSpacing);
        return;
    }
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol(preEffect.type));
    glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_RIGHT;
    glyphLayout.distanceX = staffMetrics.glyphEffectSpacing + effectAlternateSpacing + this._leftAccidental;
    glyphLayout.distanceY = noteLayout.pitchLine + r;
    noteLayout.addGlyphLayout(glyphLayout);
  }
  addPostEffect(postEffect, noteLayout) {
    const staffMetrics = this.context.staffMetrics;
    let distanceX = staffMetrics.glyphEffectSpacing + this.noteWidth + this.leftX;
    if (this.hasAlternate && !this.down) {
      distanceX += this.noteWidth;
    }
    if (this.alternateVoiceNoteSetLayout && this._voiceOffset === 0) {
      distanceX += this.alternateVoiceNoteSetLayout.alternateVoiceOffset;
    }
    let r = 0;
    let s = false;
    switch (postEffect.type) {
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.QUICK_FALL:
        s = this.down;
        r = -this._noteHeight / 2;
        r -= noteLayout.onStaffLine ? staffMetrics.postEffectVerticalSpacing : 0;
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.DOIT:
        s = !this.dotsDown;
        r = this._noteHeight / 2;
        r += noteLayout.onStaffLine ? staffMetrics.postEffectVerticalSpacing : 0;
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.FALL1:
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_6__.EffectNotation.FALL2:
        this.addDraggablePostEffect(postEffect, noteLayout, distanceX);
        return;
    }
    if (this.noteSet.dots && (!noteLayout.onStaffLine || s)) {
      distanceX += 2 * staffMetrics.dotSpacing;
      if (this.noteSet.dots === 2) {
        distanceX += staffMetrics.multipleDotGap;
      }
    }
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, this.foundry.getSymbol(postEffect.type));
    glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"].ANCHOR_LEFT;
    glyphLayout.distanceX = distanceX;
    glyphLayout.distanceY = noteLayout.pitchLine + r;
    noteLayout.addGlyphLayout(glyphLayout);
  }
  addDraggablePreEffect(notation, noteLayout, effectAlternateSpacing) {
    const ripLayout = new _rip_Layout__WEBPACK_IMPORTED_MODULE_17__["default"](this.context, this.measureLayout, notation, this.clef, this.noteEditorService, this.rootDiv);
    let i = noteLayout.originY + ripLayout.verticalSpacing;
    i += noteLayout.onStaffLine ? 0 : ripLayout.offLinePadding;
    ripLayout.spacingY = i - notation.dy;
    ripLayout.spacingX = -ripLayout.horizontalSpacing + this.x - effectAlternateSpacing + notation.dx;
    ripLayout.affectsWidth = false;
    noteLayout.addGlyphLayout(ripLayout);
  }
  addDraggablePostEffect(notation, noteLayout, effectAlternateSpacing) {
    const staffMetrics = this.context.staffMetrics;
    const fallLayout = new _fall_layout__WEBPACK_IMPORTED_MODULE_12__["default"](this.context, this.measureLayout, notation, this.clef, this.noteEditorService, this.rootDiv);
    let i = fallLayout.verticalSpacing;
    i += noteLayout.onStaffLine ? 0 : fallLayout.offLinePadding;
    fallLayout.spacingY = i - noteLayout.pitchLine - notation.dy;
    let spacingX = fallLayout.horizontalSpacing + effectAlternateSpacing + notation.dy;
    if (this.dotsDown && noteLayout.onStaffLine) {
      spacingX += 2 * staffMetrics.dotSpacing;
      if (this.noteSet.dots === 2) {
        spacingX += staffMetrics.multipleDotGap;
      }
    }
    fallLayout.spacingX = spacingX;
    fallLayout.affectsWidth = false;
    noteLayout.addGlyphLayout(fallLayout);
  }
  effectAlternateSpacing(pitchLine, e, r) {
    let i = e,
      a = r;
    for (let i = 0; i < this._alternatePitchLines.length; i++) {
      const alternatePitchLine = this._alternatePitchLines[i];
      if (pitchLine < alternatePitchLine) {
        a = Math.min(alternatePitchLine - pitchLine, a);
      } else {
        i = Math.min(pitchLine - alternatePitchLine, i);
      }
    }
    return i < e || a < r ? this.noteWidth : 0;
  }
  positionStemDecorationSymbol(layout, stemOffset, noteOffset) {
    const tabNotShowRhythm = this._isTab && !this._showRhythm;
    const downOrTabNotShowRhythm = this.down || tabNotShowRhythm;
    const hasStemNotTabOrShowRhythm = this.hasStem && !tabNotShowRhythm;
    if (hasStemNotTabOrShowRhythm) {
      layout.distanceY = this.stemEnd.y - stemOffset * (downOrTabNotShowRhythm ? -1 : 1);
    } else {
      const pitchLine = downOrTabNotShowRhythm ? this.minPitchLine : this.maxPitchLine;
      layout.distanceY = pitchLine + noteOffset * (downOrTabNotShowRhythm ? -1 : 1);
    }
    layout.distanceX = hasStemNotTabOrShowRhythm ? this.down ? this.stemOffset : this.stemEnd.x : this.noteWidth / 2;
  }
  addLeger(pitchLine, alternateOutside) {
    const staffMetrics = this.context.staffMetrics;
    const i = alternateOutside ? 2 : 1;
    const n = (this.down && alternateOutside ? -1 : 0) * this._noteHead.width;
    const a = staffMetrics.legerLineThickness * staffMetrics.lineSpacing;
    const legerLineGlyph = new _glyph_leger_line_glyph__WEBPACK_IMPORTED_MODULE_3__["default"](this._noteHead.width * (i + staffMetrics.legerLineRatio), a, n + this._noteHead.width * (-staffMetrics.legerLineRatio / 2), this.noteEditorService);
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_13__["default"](this.context, legerLineGlyph);
    glyphLayout.affectsWidth = false;
    glyphLayout.distanceX = this._voiceOffset;
    glyphLayout.distanceY = pitchLine;
    this.addGlyphLayout(glyphLayout);
  }
  determineLiaisons() {
    if (this._liaisonsDetermined) {
      return this._hasLiaisons;
    }
    this.liaisonEndLayout = null;
    this._liaisonsDetermined = true;
    this._hasLiaisons = this.noteSet.liaisonStart || this.noteSet.hasArticulationWithAttribute(_models_articulation_attribute__WEBPACK_IMPORTED_MODULE_20__.ArticulationAttribute.ARTICULATION_LIAISON);
    if (this._hasLiaisons) {
      let notationLayouts = this.measureLayout.notationLayouts;
      let notationLayoutIdx = notationLayouts.indexOf(this);
      if (notationLayoutIdx < 0) {
        throw new Error("Couldn't find note set layout in parent measure layout!");
      }
      for (notationLayoutIdx++; notationLayoutIdx < notationLayouts.length;) {
        const notationlayout = notationLayouts[notationLayoutIdx];
        if (parseFloat(notationlayout.notation.voiceNumber) === this.noteSet.voiceNumber && notationlayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_10__["default"]) {
          this.liaisonEndLayout = notationlayout;
          return this._hasLiaisons;
        }
        notationLayoutIdx++;
      }
      const nextMeasureLayout = this.measureLayout.nextLayout;
      if (nextMeasureLayout) {
        nextMeasureLayout.validateLayout();
        notationLayouts = nextMeasureLayout.notationLayouts;
        notationLayoutIdx = 0;
        while (notationLayoutIdx < notationLayouts.length) {
          const notationLayout = notationLayouts[notationLayoutIdx];
          if (parseFloat(notationLayout.notation.voiceNumber) === this.noteSet.voiceNumber && notationLayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_10__["default"]) {
            this.liaisonEndLayout = notationLayout;
            return this._hasLiaisons;
          }
          notationLayoutIdx++;
        }
        notationLayoutIdx = 0;
        while (notationLayoutIdx < notationLayouts.length) {
          const notationLayout = notationLayouts[notationLayoutIdx];
          if (notationLayout.notation.voiceNumber !== this.noteSet.voiceNumber && notationLayout.notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_10__["default"]) {
            this.liaisonEndLayout = notationLayout;
            return this._hasLiaisons;
          }
          notationLayoutIdx++;
        }
      }
    }
    return this._hasLiaisons;
  }
  invalidateGlobal() {
    super.invalidateGlobal();
    this._liaisonsDetermined = false;
  }
  doValidateGlobalLayout() {
    this.calculateClear();
    this.addArticulations();
    this.reviseBoundsAndGeometry();
  }
  preValidateGlobal() {
    const glyphLayouts = this._glyphLayouts.slice();
    this.validateGlobalLayout();
    this._glyphLayouts = glyphLayouts;
    this.invalidateGlobal();
  }
  createDisplayObject(context) {
    return new _views_note_set_view__WEBPACK_IMPORTED_MODULE_16__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 25180:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/overlay-system-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OverlaySystemLayout)
/* harmony export */ });
/* harmony import */ var _models_staff_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/staff-metrics */ 26032);
/* harmony import */ var _views_overlay_system_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/overlay-system-view */ 11498);
/* harmony import */ var _system_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./system-layout */ 54495);



class OverlaySystemLayout extends _system_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get partLabelProperty() {
    return 'showName';
  }
  get startMeasureIndex() {
    return this.getStaffLayoutAt(0).staffStartLayout.measure.index;
  }
  constructor(context, displayMode, editorFonts, rootDiv, noteEditorService) {
    super(context, displayMode, editorFonts, rootDiv, noteEditorService);
    this._overlayInitialized = false;
  }
  determineStaffPositions() {
    if (!this._overlayInitialized) {
      super.determineStaffPositions();
      this._overlayInitialized = true;
    }
  }
  dispatchStaffPositionEvent(t) {}
  getPartLabel(part) {
    return part.shortName;
  }
  setStaffSpacing(evt) {
    for (const key in evt.staffYs) {
      if (Object.prototype.hasOwnProperty.call(evt.staffYs, key)) {
        this._staffLayouts[key].distanceY = evt.staffYs[key];
      }
    }
    this._height = evt.systemHeight;
    this._topPadding = evt.topPadding;
  }
  showPartNames() {
    const staffMetrics = this.score.effectiveStaffMetrics;
    return staffMetrics.showPartNames && staffMetrics.partNamePosition === _models_staff_metrics__WEBPACK_IMPORTED_MODULE_0__["default"].PART_NAME_POSITION_STAFF;
  }
  swapStaffStartMeasures(measureIdx) {
    for (const key in this.staffLayouts) {
      if (Object.prototype.hasOwnProperty.call(this.staffLayouts, key)) {
        const staffLayout = this.staffLayouts[key];
        const measure = staffLayout.staff.getMeasureAt(measureIdx);
        staffLayout.staffStartLayout.measure = measure;
      }
    }
    this.invalidateSystemStart();
    this.validateLayout();
    for (const key in this.staffLayouts) {
      const staffLayout = this.staffLayouts[key];
      staffLayout.invalidateGlobal();
      staffLayout.validateGlobalLayout();
    }
    // this.dispatchEvent(
    //   new StaffStartChangeEvent(StaffStartChangeEvent.STAFF_START_CHANGE)
    // );
  }

  createDisplayObject(context) {
    return new _views_overlay_system_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
}

/***/ }),

/***/ 36817:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/page-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageLayout)
/* harmony export */ });
/* harmony import */ var _events_measure_display_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/measure-display-event */ 94333);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _views_page_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/page-view */ 89531);
/* harmony import */ var _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/score-text-field */ 61474);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _block_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./block-layout */ 78811);
/* harmony import */ var _system_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./system-layout */ 54495);







class PageLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_4__["default"] {
  get isActualLayout() {
    return true;
  }
  get chunkLayoutsLength() {
    return this._chunkLayouts.length;
  }
  get chunkLayouts() {
    return this._chunkLayouts;
  }
  get score() {
    return this.context.score;
  }
  get firstChhunkLayout() {
    if (this._chunkLayouts.length > 0) {
      return this.chunkLayouts[0];
    } else {
      return null;
    }
  }
  get lastChunkLayout() {
    if (this._chunkLayouts.length > 0) {
      return this._chunkLayouts[this._chunkLayouts.length - 1];
    } else {
      return null;
    }
  }
  get startMeasureIndex() {
    return this.getChunkLayoutAt(0).startMeasureIndex;
  }
  get endMeasureIndex() {
    return this.getChunkLayoutAt(this._chunkLayouts.length - 1).endMeasureIndex;
  }
  constructor(context, index, editorFonts, rootDiv, noteEditorService, options = {}) {
    super(context, noteEditorService, rootDiv);
    this.index = 0;
    this.pageHeight = NaN;
    this.firstSystemY = NaN;
    this.pageBreakHeight = NaN;
    this._chunkLayouts = [];
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this._showScoreInfo = options.showScoreInfo === undefined || options.showScoreInfo;
    this.index = index;
    this.initChunkLayouts();
  }
  destroyChildren() {
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      chunkLayout.destroy();
    }
  }
  isLayoutValid() {
    return this._chunkLayouts.length > 0 && this.chunkLayouts[0].startMeasureIndex > -1;
  }
  initChunkLayouts() {
    this._chunkLayouts = [];
    const staffMetrics = this.context.staffMetrics;
    const pageMetrics = this.context.pageMetrics;
    this.pageBreakHeight = pageMetrics.contentHeight / staffMetrics.lineSpacing;
    if (this.index === 0 && this._showScoreInfo) {
      let superTitleHeight = 0;
      if (this.score.supertitle) {
        superTitleHeight = staffMetrics.titlePageSupertitlePadding + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.supertitleFont, -staffMetrics.supertitleSize, staffMetrics.supertitleBold, false, false, pageMetrics.contentWidth, true, false, this.score.supertitle, this.rootDiv, this.noteEditorService);
      }
      this.firstSystemY = staffMetrics.titlePageTopPadding + staffMetrics.titlePageFirstStaffPadding;
      let titleBottom = staffMetrics.titleY + superTitleHeight + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.titleFont, -staffMetrics.titleSize, staffMetrics.titleBold, false, false, pageMetrics.contentWidth, true, false, this.score.title, this.rootDiv, this.noteEditorService) + staffMetrics.composerBottomPadding;
      if (this.score.subtitle) {
        titleBottom += staffMetrics.titlePageSubtitlePadding + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.subtitleFont, -staffMetrics.subtitleSize, staffMetrics.subtitleBold, false, false, pageMetrics.contentWidth, true, false, this.score.subtitle, this.rootDiv, this.noteEditorService);
      }
      titleBottom = Math.max(titleBottom, staffMetrics.composerY);
      let composerBottom = titleBottom + staffMetrics.composerBottomPadding + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.composerFont, -staffMetrics.composerSize, false, false, false, pageMetrics.contentWidth, true, false, this.score.composer, this.rootDiv, this.noteEditorService);
      this.firstSystemY = Math.max(this.firstSystemY, composerBottom);
      let lyricistBottom = titleBottom + staffMetrics.composerBottomPadding + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.lyricistFont, -staffMetrics.composerSize, false, false, false, pageMetrics.contentWidth, true, false, this.score.lyricist, this.rootDiv, this.noteEditorService);
      let headerBottom = lyricistBottom;
      if (this.score.showArranger) {
        headerBottom = lyricistBottom + staffMetrics.arrangerBottomPadding + _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.arrangerFont, -staffMetrics.composerSize, false, false, false, pageMetrics.contentWidth, true, false, this.score.arranger, this.rootDiv, this.noteEditorService);
        if (!this.score.arranger && this.score.lyricist) {
          headerBottom += staffMetrics.arrangerPlaceholderBottomPadding;
        }
      }
      this.firstSystemY = Math.max(this.firstSystemY, headerBottom);
      this.pageBreakHeight -= _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.copyrightFont, -staffMetrics.copyrightSize, false, false, false, pageMetrics.contentWidth, true, false, this.score.copyright, this.rootDiv, this.noteEditorService);
      if (this.score.prompt) {
        const promptHeight = _views_score_text_field__WEBPACK_IMPORTED_MODULE_3__["default"].getTextHeight(staffMetrics, this.editorFonts, staffMetrics.textFont, -staffMetrics.titlePagePromptSize, false, false, false, pageMetrics.contentWidth - staffMetrics.titlePagePromptPadding.right * staffMetrics.lineSpacing, true, true, this.score.prompt, this.rootDiv, this.noteEditorService);
        this.firstSystemY += promptHeight + staffMetrics.titlePagePromptPadding.bottom;
      }
    } else {
      this.firstSystemY = staffMetrics.pageTopPadding;
    }
    this.positionChunkLayouts();
    this.invalidate();
  }
  checkChunkLayoutsAreConsecutive() {
    let prevEndMeasureIndex = -1;
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      if (chunkLayout.startMeasureIndex < prevEndMeasureIndex) {
        this.truncateChunkLayouts(i);
        break;
      }
      prevEndMeasureIndex = chunkLayout.endMeasureIndex;
    }
  }
  truncateChunkLayouts(startIdx) {
    for (let i = startIdx; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      chunkLayout.destroy();
    }
    this._chunkLayouts = this._chunkLayouts.slice(0, startIdx);
  }
  positionChunkLayouts() {
    const staffMetrics = this.context.staffMetrics;
    let prevChunkLayout = null;
    this.pageHeight = this.firstSystemY;
    let distanceNotEqualBreak = false;
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      chunkLayout.validateGlobalLayout();
      if (this.positionChunk(chunkLayout, prevChunkLayout)) {
        distanceNotEqualBreak = true;
      }
      this.pageHeight = chunkLayout.bottomY;
      prevChunkLayout = chunkLayout;
    }
    const notBlockLayouts = [];
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      if (!(chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_5__["default"])) {
        notBlockLayouts.push(chunkLayout);
      }
    }
    if (prevChunkLayout && notBlockLayouts.length > 1 && prevChunkLayout.endMeasureIndex < this.score.numMeasures) {
      const space = (this.pageBreakHeight - prevChunkLayout.bottomY - staffMetrics.staffSpacing) / (this._chunkLayouts.length - 1);
      if (space > 0) {
        const spaces = {};
        for (let i = 1; i < notBlockLayouts.length; i++) {
          const notBlockLayout = notBlockLayouts[i];
          const prevNotBlockLayout = notBlockLayouts[i - 1];
          const distanceY = notBlockLayout.distanceY;
          notBlockLayout.distanceY = notBlockLayout.pageBreakY + (prevNotBlockLayout.distanceY - prevNotBlockLayout.pageBreakY) + Math.min(space, staffMetrics.systemStretch);
          spaces[notBlockLayout.uuid] = notBlockLayout.distanceY - distanceY;
        }
        this.positionBlockLayoutsAfterSpacing(spaces);
        distanceNotEqualBreak = true;
      }
    }
    if (distanceNotEqualBreak) {
      this.invalidate();
    }
  }
  positionBlockLayoutsAfterSpacing(spaces) {
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      if (chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_5__["default"]) {
        let hasSystemLayout = false;
        if (chunkLayout.block.hasColumnPositionedBeforeSystem) {
          for (let ascIdx = i + 1; ascIdx < this._chunkLayouts.length; ascIdx++) {
            const layout = this._chunkLayouts[ascIdx];
            if (layout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_6__["default"]) {
              hasSystemLayout = true;
              const space = spaces[layout.uuid];
              if (space) {
                chunkLayout.distanceY = chunkLayout.distanceY + space;
              }
              break;
            }
          }
        } else {
          for (let descIdx = i - 1; descIdx >= 0; descIdx--) {
            const layout = this._chunkLayouts[descIdx];
            if (layout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_6__["default"]) {
              hasSystemLayout = true;
              const space = spaces[layout.uuid];
              if (space) {
                chunkLayout.distanceY = chunkLayout.distanceY + space;
              }
              break;
            }
          }
        }
        if (!hasSystemLayout) {
          chunkLayout.distanceY = this.pageBreakHeight - chunkLayout.height;
        }
        if (chunkLayout.distanceY + chunkLayout.height > this.pageBreakHeight) {
          chunkLayout.distanceY = this.pageBreakHeight - chunkLayout.height;
        }
      }
    }
  }
  positionChunk(chunkLayout, prevChunkLayout) {
    const staffMetrics = this.context.staffMetrics;
    if (prevChunkLayout) {
      chunkLayout.pageBreakY = prevChunkLayout.pageBreakY + prevChunkLayout.height + Math.max(staffMetrics.systemSpacing, prevChunkLayout.bottomPadding + chunkLayout.topPadding + staffMetrics.minVerticalGap) - chunkLayout.topPadding;
      if (chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_5__["default"] && chunkLayout.isFirstBeforeBlockOfMeasure) {
        chunkLayout.pageBreakY = chunkLayout.pageBreakY + staffMetrics.blockBeforeBuffer;
      }
      if (chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_5__["default"] && chunkLayout.isFirstAfterBlockOfMeasure) {
        chunkLayout.pageBreakY = chunkLayout.pageBreakY + staffMetrics.blockAfterBuffer;
      }
    } else {
      const staffBreakY = -staffMetrics.topStaffGap + this.firstSystemY;
      chunkLayout.pageBreakY = Math.max(staffBreakY, this.firstSystemY - chunkLayout.topPadding);
    }
    const distanceNotEqualBreak = chunkLayout.distanceY !== chunkLayout.pageBreakY;
    chunkLayout.distanceY = chunkLayout.pageBreakY;
    chunkLayout.forceReflow = false;
    return distanceNotEqualBreak;
  }
  getChunkLayoutAt(idx) {
    return this._chunkLayouts[idx];
  }
  updateChunkLayout(pageChunk) {
    const chunkLayout = pageChunk.chunkLayout;
    const pageChunkIndex = pageChunk.pageChunkIndex;
    chunkLayout.validateGlobalLayout();
    let prevChunk = null;
    if (pageChunkIndex > 0) {
      prevChunk = this._chunkLayouts[pageChunkIndex - 1];
    }
    this.positionChunk(chunkLayout, prevChunk);
    if (this._chunkLayouts[pageChunkIndex]) {
      this._chunkLayouts[pageChunkIndex].destroy();
    }
    this._chunkLayouts.splice(pageChunkIndex, 1, chunkLayout);
  }
  addChunkLayout(chunkLayout) {
    if (this._chunkLayouts.length > 0 && chunkLayout.startMeasureIndex > 0 && this.score.getBreak(chunkLayout.startMeasureIndex - 1) === _models_measure__WEBPACK_IMPORTED_MODULE_1__["default"].PAGE_BREAK_TYPE) {
      this.positionChunkLayouts();
      return false;
    }
    chunkLayout.validateGlobalLayout();
    if (this._chunkLayouts.length > 0) {
      this.positionChunk(chunkLayout, this._chunkLayouts[this._chunkLayouts.length - 1]);
    } else {
      this.positionChunk(chunkLayout, null);
    }
    const bottomY = chunkLayout.bottomY;
    if (this._chunkLayouts.length > 0 && bottomY > this.pageBreakHeight) {
      this.positionChunkLayouts();
      return false;
    } else {
      this._chunkLayouts.push(chunkLayout);
      this.pageHeight = bottomY;
      if (this.endMeasureIndex === this.score.numMeasures) {
        this.positionChunkLayouts();
      }
      this.invalidate();
      return true;
    }
  }
  isFirstMeasureOfChunk(measureIdx) {
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      if (measureIdx === chunkLayout.startMeasureIndex) {
        return true;
      }
    }
    return false;
  }
  doValidateLayout() {
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      chunkLayout.validateLayout();
    }
  }
  createDisplayObject(context, options = {}) {
    return new _views_page_view__WEBPACK_IMPORTED_MODULE_2__["default"](context, this, this.editorFonts, this.rootDiv, this.noteEditorService, options);
  }
  getXPosition(measure, viewContext) {
    return viewContext.toViewUnits(measure.leftMargin);
  }
  revalidateMeasurePrefixesAt(idx) {
    for (let i = 0; i < this._chunkLayouts.length; i++) {
      const chunkLayout = this._chunkLayouts[i];
      if (chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_6__["default"]) {
        const systemLayout = chunkLayout;
        if (!(idx < systemLayout.startMeasureIndex || idx > systemLayout.endMeasureIndex)) {
          systemLayout.revalidateSystemMeasurePrefixesAt(idx);
          for (let j = 0; j < systemLayout.staffLayouts.length; j++) {
            const staffLayout = systemLayout.staffLayouts[j];
            staffLayout.revalidateMeasurePrefixesAt(idx);
          }
        }
      }
    }
  }
  validateMeasuresAt(measureIndices, systemLayout, staves = null) {
    var measureDisplayEvt = new _events_measure_display_event__WEBPACK_IMPORTED_MODULE_0__["default"](_events_measure_display_event__WEBPACK_IMPORTED_MODULE_0__["default"].DISPLAY, measureIndices, systemLayout, true, arguments.length > 2 && undefined !== arguments[2] ? arguments[2] : null);
    this.noteEditorService.onPageDisplay.emit(measureDisplayEvt);
  }
  geometryChangedAt(measureIndices, systemLayout) {
    // var measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.GEOMETRY_CHANGE,
    //   measureIndices,
    //   systemLayout,
    //   true
    // );
    // this.dispatchEvent(measureDisplayEvt);
  }
  spanChangedAt(measureIndices, systemLayout) {
    // var measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.SPAN_CHANGE,
    //   measureIndices,
    //   systemLayout,
    //   true
    // );
    // this.dispatchEvent(measureDisplayEvt);
  }
}

/***/ }),

/***/ 97709:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/layouts/pagenated-layout.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ReflowType": () => (/* binding */ ReflowType),
/* harmony export */   "default": () => (/* binding */ PaginatedLayout)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/measure-validation-event */ 1179);
/* harmony import */ var _models_block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/block */ 45577);
/* harmony import */ var _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/chunk-element-identifier */ 69552);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_page_chunk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/page-chunk */ 93323);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _views_paginated_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../views/paginated-view */ 61609);
/* harmony import */ var _block_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./block-layout */ 78811);
/* harmony import */ var _page_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./page-layout */ 36817);
/* harmony import */ var _score_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./score-layout */ 24033);
/* harmony import */ var _system_layout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./system-layout */ 54495);
/* harmony import */ var _events_page_reflow_event__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../events/page-reflow-event */ 73117);













class PaginatedLayout extends _score_layout__WEBPACK_IMPORTED_MODULE_9__["default"] {
  static get WIDOW_BREAK_WIDTH_RATIO() {
    return 0.75;
  }
  static get WIDOW_PREVENTION_BARS() {
    return 10;
  }
  static get MAX_CHUNKS_TO_REFLOW() {
    return 10;
  }
  static get MAX_PAGES_TO_REFLOW() {
    return 2;
  }
  get displayMode() {
    return _models_score__WEBPACK_IMPORTED_MODULE_5__["default"].PAGINATED_DISPLAY;
  }
  get pageLayouts() {
    return this._pageLayouts;
  }
  get chunks() {
    return this._chunks;
  }
  set document(d) {
    super.document = d;
    if (d == null) {
      this.isIncrementalLayoutComplete = true;
    }
  }
  get document() {
    return super.document;
  }
  get totalPages() {
    return this._pageLayouts.length;
  }
  get endMeasureIndex() {
    return this._pageLayouts[this._pageLayouts.length - 1].endMeasureIndex;
  }
  constructor(context, buildIncrementally, editorFonts, rootDiv, noteEditorService, overlay, options = {}) {
    super(context, editorFonts, rootDiv, noteEditorService);
    this.onChunkReflow = new _angular_core__WEBPACK_IMPORTED_MODULE_12__.EventEmitter();
    this.onPagesDisplay = new _angular_core__WEBPACK_IMPORTED_MODULE_12__.EventEmitter();
    this._pageLayouts = [];
    this._chunks = [];
    this._chunksToBeUpdated = [];
    this._numMeasures = 0;
    this._forceReflow = false;
    this.isIncrementalLayoutComplete = false;
    const showScoreInfo = options.showScoreInfo === undefined || options.showScoreInfo;
    this._buildIncrementally = buildIncrementally;
    this.rootDiv = rootDiv;
    this._overlay = overlay;
    this._numMeasures = context.score.numMeasures;
    this.showScoreInfo = showScoreInfo;
    this.onMeasureSequenceChangeSub$ = this.noteEditorService.onMeasureSequenceChange.subscribe(evt => {
      this.handleMeasureSequenceChange(evt);
    });
  }
  destroyChildren() {
    super.destroyChildren();
    for (let i = 0; i < this._pageLayouts.length; i++) {
      const pageLayout = this._pageLayouts[i];
      pageLayout.destroy();
    }
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      chunk.chunkLayout.destroy();
    }
  }
  invalidate() {
    super.invalidate();
    this.isIncrementalLayoutComplete = false;
  }
  createPageLayout(context, pageLayoutIdx, options = {}) {
    options.showScoreInfo = this.showScoreInfo;
    return new _page_layout__WEBPACK_IMPORTED_MODULE_8__["default"](context, pageLayoutIdx, this.editorFonts, this.rootDiv, this.noteEditorService, options);
  }
  isFirstMeasureOfChunk(measureIdx) {
    for (let i = 0; i < this._pageLayouts.length; i++) {
      const pageLayout = this._pageLayouts[i];
      if (pageLayout.isFirstMeasureOfChunk(measureIdx)) {
        return true;
      }
    }
    return false;
  }
  getNextPageLayout(pageLayoutIdx) {
    if (this._pageLayouts.length > pageLayoutIdx + 1) {
      return this._pageLayouts[pageLayoutIdx + 1];
    } else {
      return null;
    }
  }
  doValidateLayout() {
    if (!this._overlay) {
      this.destroyChildren();
      this._chunks = [];
      this._pageLayouts = [this.createPageLayout(this.context, 0)];
      if (this._buildIncrementally) {
        this.doIncrementalFlow();
      } else {
        while (this.doIncrementalFlow()) {}
      }
    }
  }
  doAsyncValidateLayout(onComplete) {
    if (!this.overlay) {
      const that = this;
      this.destroyChildren();
      this._chunks = [];
      this._pageLayouts = [this.createPageLayout(this.context, 0)];
      !function r() {
        if (that.doIncrementalFlow()) {
          setTimeout(() => {
            r();
          }, 10);
        } else {
          onComplete();
        }
      };
    }
  }
  getHyphensBeginningStaff(staffLayoutIdx, startMeasureIdx) {
    for (let i = 0; i < this.chunks.length; i++) {
      const chunk = this.chunks[i];
      if (chunk.chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        const systemLayout = chunk.chunkLayout;
        if (chunk.endPosition.measureIndex === startMeasureIdx - 1 && systemLayout.staffLayouts[staffLayoutIdx]) {
          return systemLayout.staffLayouts[staffLayoutIdx].hyphenStateEndStaff;
        }
      }
    }
    return null;
  }
  getSystemLayoutStartingAt(measureIdx) {
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      if (chunk.startPosition.measureIndex === measureIdx && this._chunks[i].chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        return chunk.chunkLayout;
      }
    }
    return null;
  }
  getPageContainingMeasure(measureIdx) {
    for (let i = 0; i < this._pageLayouts.length; i++) {
      const pageLayout = this._pageLayouts[i];
      if (pageLayout.startMeasureIndex <= measureIdx && measureIdx <= pageLayout.endMeasureIndex) {
        return pageLayout;
      }
    }
    return null;
  }
  getXPosition(layout, viewContext) {
    if (this._pageLayouts.length === 0) {
      return 0;
    } else {
      return this._pageLayouts[0].getXPosition(layout, viewContext);
    }
  }
  createDisplayObject(context) {
    // console.trace();
    return new _views_paginated_view__WEBPACK_IMPORTED_MODULE_6__["default"](context, this, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
  handleMeasureSequenceChange(measureValidationEvt) {
    const firstMeasureIdx = measureValidationEvt.firstMeasureIndex;
    const chunkElementIdentifier = new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(firstMeasureIdx));
    let chunkIdx = this.chunkIndexOfElementIdentifier(chunkElementIdentifier);
    if (chunkIdx >= 0 && chunkIdx < this._chunks.length) {
      chunkIdx = Math.max(0, chunkIdx - 1);
      const chunk = this._chunks[chunkIdx];
      if (chunk.isSystem) {
        chunk.invalid = true;
        if (chunk.chunkLayout) {
          chunk.chunkLayout.forceReflow = true;
        }
      }
    }
    if (measureValidationEvt.reflow) {
      this._forceReflow = true;
      this.rebuildSystemMeasureLayouts(firstMeasureIdx, measureValidationEvt.measures.length);
    } else {
      this.addOrRemoveMeasures(measureValidationEvt);
    }
    const firstMeasureIndice = measureValidationEvt.measureIndices.length > 0 ? measureValidationEvt.measureIndices[0] : 0;
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      if (chunk.chunkLayout.staffLayouts) {
        for (let j = 0; j < chunk.chunkLayout.staffLayouts.length; j++) {
          const staffLayout = chunk.chunkLayout.staffLayouts[j];
          if (staffLayout.staffStartLayout && staffLayout.staffStartLayout.measure.index >= firstMeasureIndice) {
            staffLayout.staffStartLayout.handleMeasureSequenceChange();
          }
          for (let k = 0; k < staffLayout.measureLayouts.length; k++) {
            const measureLayout = staffLayout.measureLayouts[k];
            if (measureLayout.measure.index >= firstMeasureIndice) {
              measureLayout.handleMeasureSequenceChange();
            }
          }
        }
      }
    }
    this.handleMeasureValidate(measureValidationEvt);
  }
  runIncrementalFlow() {
    if (this._overlay) {
      this.isIncrementalLayoutComplete = true;
    } else {
      this.isIncrementalLayoutComplete = false;
      if (this._buildIncrementally) {
        // TODO  CONTINUE_INCREMENTAL_FLOW
        // this.dispatchEvent(
        //   new IncrementalLayoutEvent(
        //     IncrementalLayoutEvent.CONTINUE_INCREMENTAL_FLOW
        //   )
        // );
        this.noteEditorService.onContinueIncrementalFlow.emit();
      } else {
        while (this.doIncrementalFlow()) {}
      }
    }
  }
  isLastChunk(measureIdx) {
    return this._chunks[this.chunks.length - 1].startPosition.measureIndex <= measureIdx;
  }
  handleMeasureValidate(measureValidationEvt) {
    const scoreNumMeasures = this.context.score.numMeasures;
    const s = scoreNumMeasures - this._numMeasures;
    this._numMeasures = scoreNumMeasures;
    const pagesToReflow = [];
    const a = {};
    let chunksToReflowCount = 0;
    let forceReflow = this._forceReflow;
    let overflow = false;
    let reflowStartIdx = 9999999999;
    let f = 0;
    let afterBlockIndex = -1;
    let beforeBlockIndex = -1;
    if (!this.overlay && measureValidationEvt.measures && measureValidationEvt.measures.length > 0) {
      if (measureValidationEvt.type === _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE) {
        // todo
        // this.context.dispatchEvent(
        //   new MeasureValidationEvent(
        //     MeasureValidationEvent.SEQUENCE_CHANGE,
        //     measureValidationEvt.measures,
        //     measureValidationEvt.staves
        //   )
        // );
      } else {
        // this.context.dispatchEvent(
        //   new MeasureValidationEvent(
        //     MeasureValidationEvent.INVALIDATE,
        //     measureValidationEvt.measures,
        //     measureValidationEvt.staves
        //   )
        // );
      }
    }
    for (let i = 0; i < measureValidationEvt.measureIndices.length - 1; i++) {
      const indices = measureValidationEvt.measureIndices;
      if (indices[i] > indices[i + 1]) {
        forceReflow = true;
        break;
      }
    }
    const chunksInfo = [];
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      chunksInfo.push({
        start: chunk.startPosition.measure,
        startIndex: chunk.startPosition.measureIndex,
        end: chunk.endPosition.measure,
        endIndex: chunk.endPosition.measureIndex
      });
    }
    const measureIndices = measureValidationEvt.measureIndices;
    this.revalidateSystemMeasureLayouts(measureIndices);
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndice = measureIndices[i];
      for (let j = 0; j < this._chunks.length; j++) {
        const chunk = this._chunks[j];
        if (chunk.startPosition.measureIndex <= measureIndice && chunk.endPosition.measureIndex >= measureIndice) {
          chunk.pageLayout.revalidateMeasurePrefixesAt(measureIndice);
          break;
        }
      }
    }
    let chunkElementIdentifier = null,
      chunkIdx = null;
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndice = measureIndices[i];
      chunkElementIdentifier = new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(measureIndice));
      if (!(a[chunkIdx = this.chunkIndexOfElementIdentifier(chunkElementIdentifier)] || chunkIdx < 0)) {
        const chunkidx = chunkIdx;
        f = Math.max(f, chunkIdx);
        let x = 1;
        if (chunkIdx > 0 && !a[chunkIdx - 1]) {
          chunkIdx--;
          x++;
        }
        let continuous = false;
        while (chunkIdx < this._chunks.length && (x > 0 || !continuous) && !forceReflow) {
          const chunk = this._chunks[chunkIdx];
          x--;
          if (chunksToReflowCount > PaginatedLayout.MAX_CHUNKS_TO_REFLOW || pagesToReflow.length > PaginatedLayout.MAX_PAGES_TO_REFLOW) {
            forceReflow = true;
          } else {
            let measureindice = 0;
            if (chunkIdx > 0) {
              const prevChunk = this._chunks[chunkIdx - 1];
              const currChunk = this._chunks[chunkIdx];
              if (currChunk.chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_7__["default"] && currChunk.chunkLayout.block.hasColumnPositionedAfterSystem || prevChunk.chunkLayout instanceof _block_layout__WEBPACK_IMPORTED_MODULE_7__["default"] && prevChunk.chunkLayout.block && prevChunk.chunkLayout.block.hasColumnPositionedBeforeSystem) {
                measureindice = prevChunk.endPosition.measureIndex;
              } else {
                measureindice = prevChunk.endPosition.measureIndex + 1;
              }
            }
            if (measureindice >= this._numMeasures) {
              overflow = true;
              this.reflowChunksStartingAt(chunkIdx);
              break;
            }
            chunk.invalid = true;
            afterBlockIndex = chunk.endPosition.afterBlockIndex;
            beforeBlockIndex = chunk.endPosition.beforeBlockIndex;
            const sequenceChange = measureValidationEvt.type === _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].SEQUENCE_CHANGE && chunk.containsAnyMeasure(measureValidationEvt.measures.map(t => t.index));
            let reflow = this.reflowChunk(chunkIdx, measureindice, afterBlockIndex, beforeBlockIndex, sequenceChange, chunksInfo);
            const chunkLayout = chunk.chunkLayout;
            chunkLayout.invalidate();
            if (this.chunkRequiresReflow(chunk)) {
              reflow = ReflowType.reflowThisAndFollowingChunks;
            }
            switch (reflow) {
              case ReflowType.reflowThisAndFollowingChunks:
                reflowStartIdx = Math.max(0, chunkIdx);
                overflow = true;
                if (pagesToReflow.indexOf(chunk.pageLayout.index) === -1) {
                  pagesToReflow.push(chunk.pageLayout.index);
                }
                chunksToReflowCount++;
                break;
              case ReflowType.reflowOnlyThisChunk:
                const invalidMeasures = [];
                const chunkInfo = chunksInfo[chunkIdx];
                for (let l = chunkInfo.startIndex; l <= chunkInfo.endIndex; l++) {
                  invalidMeasures.push(l);
                }
                // todo
                // this.context.dispatchEvent(
                //   new MeasureValidationEvent(
                //     MeasureValidationEvent.INVALIDATE,
                //     invalidMeasures,
                //     measureValidationEvt.staves
                //   )
                // );
                this.updatePageChunk(this._chunks[chunkIdx], {
                  pageLayoutIndex: chunk.pageLayout.index,
                  chunkIndex: chunkIdx
                });
                break;
              default:
                this.justifyChunkLayout(chunkLayout);
                if (chunkidx === this._chunks.indexOf(chunk) && chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
                  chunk.pageLayout.validateMeasuresAt(measureIndices, chunkLayout, measureValidationEvt.staves);
                }
                break;
            }
            if (chunkIdx < 0) {
              chunkIdx = Math.max(0, chunkIdx);
              continue;
            }
            a[chunkIdx] = 1;
            chunk.invalid = false;
            chunkLayout.validateLayout();
            continuous = false;
            if (this._chunks[chunkIdx + 1]) {
              continuous = this._chunks[chunkIdx].endPosition.measureIndex + 1 === this._chunks[chunkIdx + 1].startPosition.measure.index;
            }
            if (!forceReflow) {
              chunkIdx++;
            }
          }
        }
        if (forceReflow) {
          this.reflowChunksStartingAt(chunkIdx);
          break;
        }
        if (!continuous) {
          this.runIncrementalFlow();
        }
      }
    }
    if (overflow) {
      if (s !== 0) {
        for (let i = f + 1; i < this._chunks.length; i++) {
          const chunk = this._chunks[i];
          if (chunk.chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
            // (chunk.chunkLayout as SystemLayout).dispatchEvent(
            //   new MeasureDisplayEvent(
            //     MeasureDisplayEvent.UPDATE_MEASURE_HANDLE_INDEX,
            //     null,
            //     null
            //   )
            // );
          }
        }
      }
      for (let i = 0; i < pagesToReflow.length; i++) {
        const pageIdx = pagesToReflow[i];
        this._pageLayouts[pageIdx].checkChunkLayoutsAreConsecutive();
      }
      this.noteEditorService.onPageReflow.emit(new _events_page_reflow_event__WEBPACK_IMPORTED_MODULE_11__["default"](_events_page_reflow_event__WEBPACK_IMPORTED_MODULE_11__["default"].PAGE_REFLOW, pagesToReflow, measureIndices, measureValidationEvt.staves));
      for (let i = 0; i < this._chunks.length - 1; i++) {
        const chunk = this._chunks[i];
        if (this._chunks[i].endPosition.measureIndex >= this._chunks[i + 1].startPosition.measureIndex) {
          this.reflowChunksStartingAt(i + 1);
          break;
        }
      }
      if (reflowStartIdx < this._chunks.length) {
        this.reflowChunksStartingAt(reflowStartIdx);
      }
    }
    this._forceReflow = false;
  }
  chunkRequiresReflow(chunk) {
    const lastChunkLayout = chunk.lastChunkLayout;
    const hideAreaHeight = chunk.pageLayout.pageBreakHeight - lastChunkLayout.bottomY;
    if (hideAreaHeight < 0 && chunk.pageLayout.chunkLayoutsLength > 1) {
      return true;
    }
    const nextPageLayout = this.getNextPageLayout(chunk.pageLayout.index);
    const nextPageFirstChunkLayout = nextPageLayout ? nextPageLayout.firstChunkLayout : null;
    const overflow = nextPageFirstChunkLayout && nextPageFirstChunkLayout.height + this.context.staffMetrics.staffSpacing < hideAreaHeight;
    const noBreak = lastChunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"] && !lastChunkLayout.hasPageBreak;
    return overflow && noBreak;
  }
  handleMeasureGeometryChange(measureValidationEvt) {
    let measureIndices = measureValidationEvt.measureIndices || this.allMeasureIndices;
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      for (let j = 0; j < measureIndices.length; j++) {
        const measureIdx = measureIndices[j];
        if (chunk.chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"] && measureIdx >= chunk.startPosition.measureIndex && measureIdx <= chunk.endPosition.measureIndex) {
          this.justifyChunkLayout(chunk.chunkLayout);
          chunk.pageLayout.geometryChangedAt(measureIndices, chunk.chunkLayout);
          break;
        }
      }
    }
  }
  handleMeasureSpanChange(measureValidationEvt) {
    let measureIndices = measureValidationEvt.measureIndices || this.allMeasureIndices;
    for (let i = 0; i < this._chunks.length; i++) {
      const chunk = this._chunks[i];
      for (let j = 0; j < measureIndices.length; j++) {
        const measureIdx = measureIndices[j];
        if (chunk.chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"] && measureIdx >= chunk.startPosition.measureIndex && measureIdx <= chunk.endPosition.measureIndex) {
          chunk.pageLayout.spanChangedAt(measureIndices, chunk.chunkLayout);
          break;
        }
      }
    }
  }
  justifyChunkLayout(chunkLayout) {
    if (chunkLayout instanceof _system_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
      const systemLayout = chunkLayout;
      if (!chunkLayout.valid) {
        for (let i = 0; i < systemLayout.staffLayouts.length; i++) {
          const staffLayout = systemLayout.staffLayouts[i];
          staffLayout.invalidate();
        }
        systemLayout.validateLayout();
      }
      // if (this.context.pageMetrics.justify) {
      systemLayout.constraint.solveForLength(this.systemBreakWidth - (systemLayout.leftMargin + systemLayout.rightMargin), 0.5 / this.context.staffMetrics.lineSpacing);
      //   debugger;
      // } else {
      //   systemLayout.constraint.generateLayoutVector(
      //     LayoutWeights.STANDARD_WEIGHTS
      //   );
      // }
      for (let i = 0; i < systemLayout.staffLayouts.length; i++) {
        const staffLayout = systemLayout.staffLayouts[i];
        staffLayout.invalidateGlobalAllLayouts();
      }
    }
  }
  reflowChunk(chunkIdx, measureIdx, afterBlockIdx, beforeBlockIdx, sequenceChange, chunksInfo) {
    if (this._overlay) {
      return false;
    }
    const chunk = this._chunks[chunkIdx];
    const pageChunk = this.createPageChunk(new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(measureIdx), afterBlockIdx, beforeBlockIdx), chunk.breakWidth);
    const chunkMeasureCount = chunk.endPosition.measureIndex - chunk.startPosition.measureIndex;
    const pageChunkCount = pageChunk.startPosition.measureIndex - pageChunk.endPosition.measureIndex;
    if (pageChunk.startPosition.measureIndex == chunk.startPosition.measureIndex && pageChunk.endPosition.measureIndex == chunk.endPosition.measureIndex && pageChunk.startPosition.afterBlockIndex == chunk.startPosition.afterBlockIndex && pageChunk.endPosition.afterBlockIndex == chunk.endPosition.afterBlockIndex && pageChunk.startPosition.beforeBlockIndex == chunk.startPosition.beforeBlockIndex && pageChunk.endPosition.beforeBlockIndex == chunk.endPosition.beforeBlockIndex && !sequenceChange) {
      return ReflowType.noChunkReflow;
    }
    pageChunk.pageChunkIndex = chunk.pageChunkIndex;
    const replaceChunk = this._chunks.splice(chunkIdx, 1, pageChunk);
    replaceChunk[0].chunkLayout.destroy();
    this.createChunkLayout(pageChunk);
    const pageLayoutIdx = chunk.pageLayout.index;
    const pageLayout = this._pageLayouts[pageLayoutIdx];
    pageLayout.updateChunkLayout(pageChunk);
    pageLayout.validateLayout();
    pageChunk.pageLayout = pageLayout;
    const isLastMeasure = chunksInfo[chunkIdx] && chunksInfo[chunkIdx].end.id === pageChunk.endPosition.measure.id;
    let reflowType = ReflowType.noChunkReflow;
    if (isLastMeasure) {
      if (chunkMeasureCount !== pageChunkCount || sequenceChange) {
        reflowType = ReflowType.reflowOnlyThisChunk;
      }
    } else {
      reflowType = ReflowType.reflowThisAndFollowingChunks;
    }
    return reflowType;
  }
  destroyPageAt(startIdx) {
    for (let i = startIdx; i < this._pageLayouts.length; i++) {
      const pageLayout = this._pageLayouts[i];
      pageLayout.destroy();
    }
    this._pageLayouts = this._pageLayouts.slice(0, startIdx);
  }
  destroyChunkAndFollowingPages(chunk) {
    this.destroyPageAt(chunk.pageLayout.index + 1);
    chunk.pageLayout.truncateChunkLayouts(chunk.pageChunkIndex);
  }
  reflowChunksStartingAt(chunkIdx) {
    if (!(chunkIdx >= this._chunks.length || this.overlay)) {
      for (let i = chunkIdx; i < this._chunks.length; i++) {
        const chunk = this._chunks[i];
        chunk.chunkLayout.destroy();
      }
      const chunk = this._chunks[chunkIdx];
      this._chunks = this._chunks.slice(0, chunkIdx);
      if (chunk.pageChunkIndex === 0) {
        this.destroyPageAt(chunk.pageLayout.index);
      } else {
        this.destroyChunkAndFollowingPages(chunk);
      }
      this.appendPageChunksStartingAt(chunkIdx);
      this.runIncrementalFlow();
    }
  }
  findNextChunk(elementId) {
    const systemStaff = this.context.score.systemStaff;
    const endMeasure = systemStaff.getMeasureAt(elementId.measureIndex);
    const nextMeasure = systemStaff.getMeasureAt(elementId.measureIndex + 1);
    if (!endMeasure) {
      return null;
    }
    if (elementId.afterBlockIndex === -1 && elementId.beforeBlockIndex === -1) {
      if (endMeasure.hasBlockPositionedAfterSystem) {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex), 0, -1, _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].AFTER_SYSTEM);
      }
      if (nextMeasure && nextMeasure.hasBlockPositionedBeforeSystem) {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex + 1), -1, 0, _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].BEFORE_SYSTEM);
      }
    }
    if (elementId.beforeBlockIndex > -1) {
      if (endMeasure.hasBlockPositionedBeforeSystem && elementId.beforeBlockIndex + 1 < endMeasure.blocksPositionedBeforeSystem.length) {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex), -1, elementId.beforeBlockIndex + 1, _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].BEFORE_SYSTEM);
      } else {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex), -1, -1);
      }
    }
    if (elementId.afterBlockIndex > -1) {
      if (endMeasure.hasBlockPositionedAfterSystem && elementId.afterBlockIndex + 1 < endMeasure.blocksPositionedAfterSystem.length) {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex), elementId.afterBlockIndex + 1, -1, _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].AFTER_SYSTEM);
      }
      if (nextMeasure && nextMeasure.hasBlockPositionedBeforeSystem) {
        return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measureIndex + 1), -1, 0, _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].BEFORE_SYSTEM);
      }
    }
    if (elementId.measure.index + 1 < this.context.score.numMeasures) {
      return new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(elementId.measure.index + 1));
    } else {
      return null;
    }
  }
  getRelativeChunkIndex(chunkIdx, pageIdx) {
    let chunkCountBeforeCurrPage = 0;
    for (let i = 0; i < pageIdx; i++) {
      if (!(i < this.pageLayouts.length)) {
        return -1;
      }
      chunkCountBeforeCurrPage += this.pageLayouts[i].chunkLayouts.length;
    }
    return chunkIdx - chunkCountBeforeCurrPage;
  }
  doIncrementalFlow() {
    if (this._overlay) {
      return false;
    }
    let t = false;
    let e = false;
    if (!this.isIncrementalLayoutComplete) {
      // this.dispatchEvent(
      //   new IncrementalLayoutEvent(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_INITIATED
      //   )
      // );
      for (let i = 0; i < this._chunksToBeUpdated.length; i++) {
        const chunk = this._chunksToBeUpdated[i];
        if (chunk.pageIndex < this._pageLayouts.length) {
          this.onChunkReflow.emit({
            pageIndex: chunk.pageIndex,
            lastChunkIndex: this.getRelativeChunkIndex(chunk.chunkIndex, chunk.pageIndex)
          });
          // this.dispatchEvent(
          //   new PageDisplayEvent(
          //     PageDisplayEvent.CHUNK_REFLOW,
          //     chunk.pageIndex,
          //     this.getRelativeChunkIndex(chunk.chunkIndex, chunk.pageIndex)
          //   )
          // );
        }
      }

      let totalChunk = this._chunks.length;
      let chunkElementIdentifier = totalChunk === 0 ? new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(0)) : this.findNextChunk(this._chunks[totalChunk - 1].endPosition);
      let i;
      while (!i) {
        if (chunkElementIdentifier && this.flowNextChunk(chunkElementIdentifier)) {
          i = this.appendPageChunksStartingAt(totalChunk);
          totalChunk = this._chunks.length - 1;
          chunkElementIdentifier = this.findNextChunk(this._chunks[totalChunk].endPosition);
          totalChunk++;
          e = true;
          t = true;
        } else {
          i = true;
        }
      }
      if (!t || !chunkElementIdentifier) {
        this.isIncrementalLayoutComplete = true;
        if (e) {
          this.onPagesDisplay.emit(this.pageLayouts.length - 1);
          // this.dispatchPageDisplayEvent(this.pageLayouts.length - 1);
        } else {
          const lastChunkIdx = this._chunks[this._chunks.length - 1].pageChunkIndex;
          // this.dispatchEvent(
          //   new PageDisplayEvent(
          //     PageDisplayEvent.CHECK_OLD_REMAINING_CHUNKS,
          //     this.pageLayouts.length - 1,
          //     lastChunkIdx
          //   )
          // );
        }
      }
      // this.dispatchEvent(
      //   new IncrementalLayoutEvent(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_COMPLETE
      //   )
      // );
    }

    return t;
  }
  flowNextChunk(chunkElementIdentifier) {
    if (this._overlay) {
      return false;
    }
    if (chunkElementIdentifier.measureIndex < this.numMeasureLayouts) {
      const pageChunk = this.createPageChunk(chunkElementIdentifier, this.systemBreakWidth);
      this._chunks.push(pageChunk);
      return true;
    }
    return false;
  }
  dispatchPageDisplayEvent(pageIndex) {
    // var pageDisplayEvt = new PageDisplayEvent(
    //   PageDisplayEvent.PAGE_DISPLAY,
    //   pageIndex
    // );
    // this.dispatchEvent(pageDisplayEvt);
    this.onPagesDisplay.emit(pageIndex);
  }
  appendPageChunksStartingAt(startIdx = 0) {
    let crossPage = false;
    while (startIdx < this._chunks.length) {
      const pageBreak = this.appendPageChunk(this._chunks[startIdx]);
      crossPage = crossPage || pageBreak;
      startIdx++;
    }
    return crossPage;
  }
  shouldRespectSystemBreaks() {
    return !this.context.score.isFlowMode;
  }
  calculateSystemLayoutWidth(startMeasureIdx, endMeasureIdx) {
    const systemLayout = this.createSystemLayout(startMeasureIdx, endMeasureIdx, {
      validate: true,
      tentative: true,
      displayMode: _models_score__WEBPACK_IMPORTED_MODULE_5__["default"].PAGINATED_DISPLAY,
      ignoreCautionaries: true
    });
    const totalWidth = systemLayout.totalWidth;
    systemLayout.destroy();
    return totalWidth;
  }
  createPageSystem(chunkElementIdentifier, breakWidth) {
    const startIdx = chunkElementIdentifier.measureIndex;
    const lastMeasureIdx = this.numMeasureLayouts - 1;
    let endIdx = startIdx;
    let systemMeasureLayout = null;
    const shouldRespectSystemBreaks = this.shouldRespectSystemBreaks();
    let systemOrPageBreak = false;
    let hasBlockPositionedAfterSystem = false;
    let nextSystemMeasureLayoutHasBlockPositionedBeforeSystem = false;
    let systemLayoutWidth = this.calculateSystemLayoutWidth(startIdx, startIdx);
    let breakIdx = -1;
    for (let idx = startIdx; idx <= lastMeasureIdx; idx++) {
      systemMeasureLayout = this.getSystemMeasureLayoutAt(idx);
      let nextSystemMeasureLayout = null;
      if (idx + 1 < lastMeasureIdx) {
        nextSystemMeasureLayout = this.getSystemMeasureLayoutAt(idx + 1);
      }
      systemMeasureLayout.validateLayout();
      if (systemMeasureLayout.systemMeasure?.hasBlockPositionedAfterSystem) {
        endIdx = idx;
        hasBlockPositionedAfterSystem = true;
        break;
      }
      if (nextSystemMeasureLayout && nextSystemMeasureLayout.systemMeasure?.hasBlockPositionedBeforeSystem) {
        endIdx = idx;
        nextSystemMeasureLayoutHasBlockPositionedBeforeSystem = true;
        break;
      }
      if (shouldRespectSystemBreaks && systemMeasureLayout.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].KEEP_WITH_NEXT_TYPE && breakIdx === -1) {
        breakIdx = idx;
      }
      if (idx > startIdx) {
        systemLayoutWidth += systemMeasureLayout.flowWidth;
      }
      if (systemMeasureLayout.flowWidth > 0 && systemLayoutWidth > breakWidth) {
        if (breakIdx <= -1) {
          endIdx = idx === startIdx ? idx : idx - 1;
          break;
        }
        if (breakIdx !== startIdx) {
          endIdx = breakIdx - 1;
          break;
        }
      }
      if (systemMeasureLayout.breakType !== _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].KEEP_WITH_NEXT_TYPE) {
        breakIdx = -1;
      }
      if (shouldRespectSystemBreaks && (systemMeasureLayout.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].SYSTEM_BREAK_TYPE || systemMeasureLayout.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].PAGE_BREAK_TYPE)) {
        endIdx = idx;
        systemOrPageBreak = true;
        break;
      }
      if (idx === lastMeasureIdx) {
        endIdx = idx;
        break;
      }
    }
    const systemLayout = this.createSystemLayout(startIdx, endIdx, {
      validate: true,
      tentative: true,
      dispMode: _models_score__WEBPACK_IMPORTED_MODULE_5__["default"].PAGINATED_DISPLAY
    });
    if (systemOrPageBreak || hasBlockPositionedAfterSystem || nextSystemMeasureLayoutHasBlockPositionedBeforeSystem) {
      const breakwidth = breakWidth - (systemLayout.leftMargin + systemLayout.rightMargin);
      systemLayout.destroy();
      const pageChunkWithMeasureIndices = _models_page_chunk__WEBPACK_IMPORTED_MODULE_4__["default"].createPageChunkWithMeasureIndices(this.score.systemMeasureByIndex(startIdx), this.score.systemMeasureByIndex(endIdx), breakwidth);
      return pageChunkWithMeasureIndices;
    }
    let systemLayoutFlowWidth = systemLayout.flowWidth;
    systemLayout.destroy();
    const systemlayout = this.createSystemLayout(startIdx, startIdx, {
      validate: true,
      tentative: true,
      dispMode: _models_score__WEBPACK_IMPORTED_MODULE_5__["default"].PAGINATED_DISPLAY,
      ignoreCautionaries: true
    });
    let b = 0;
    let leftedFlowWidth = systemlayout.flowWidth - this.getSystemMeasureLayoutAt(startIdx).flowWidth;
    systemlayout.destroy();
    let nextmeasureidx = endIdx + 1;
    while (leftedFlowWidth < breakWidth && nextmeasureidx < this.numMeasureLayouts) {
      systemMeasureLayout = this.getSystemMeasureLayoutAt(nextmeasureidx);
      leftedFlowWidth += systemMeasureLayout.flowWidth;
      if (shouldRespectSystemBreaks && (systemMeasureLayout.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].SYSTEM_BREAK_TYPE || systemMeasureLayout.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].PAGE_BREAK_TYPE) || nextmeasureidx === this.context.score.numMeasures - 1) {
        while (true) {
          const measureflowwidth = this.getSystemMeasureLayoutAt(endIdx).flowWidth;
          if (measureflowwidth === 0) {
            b++;
          } else if (endIdx > 0 && shouldRespectSystemBreaks) {
            if (this.getSystemMeasureLayoutAt(endIdx - 1).breakType === _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].KEEP_WITH_NEXT_TYPE) {
              break;
            }
          }
          if (systemLayoutFlowWidth - leftedFlowWidth <= measureflowwidth || leftedFlowWidth + measureflowwidth >= breakWidth || endIdx <= startIdx) {
            if (b > 0) {
              endIdx += b;
            }
            break;
          }
          leftedFlowWidth += measureflowwidth;
          systemLayoutFlowWidth -= measureflowwidth;
          endIdx--;
          if (measureflowwidth !== 0) {
            b = 0;
          }
        }
        break;
      }
      nextmeasureidx++;
    }
    const pageChunkWithMeasureIndices = _models_page_chunk__WEBPACK_IMPORTED_MODULE_4__["default"].createPageChunkWithMeasureIndices(this.score.systemMeasureByIndex(startIdx), this.score.systemMeasureByIndex(endIdx), breakWidth);
    return pageChunkWithMeasureIndices;
  }
  createPageBlock(chunkElementIdentifier) {
    const endPosition = new _models_chunk_element_identifier__WEBPACK_IMPORTED_MODULE_2__["default"](this.score.systemMeasureByIndex(chunkElementIdentifier.measureIndex), chunkElementIdentifier.afterBlockIndex, chunkElementIdentifier.beforeBlockIndex);
    const pageChunk = new _models_page_chunk__WEBPACK_IMPORTED_MODULE_4__["default"](chunkElementIdentifier, endPosition, 0);
    pageChunk.isSystem = false;
    return pageChunk;
  }
  createPageChunk(chunkElementIdentifier, breakWidth) {
    const systemMeasure = this.getSystemMeasureLayoutAt(chunkElementIdentifier.measureIndex).systemMeasure;
    if (chunkElementIdentifier.afterBlockIndex === -1 && chunkElementIdentifier.beforeBlockIndex === -1 || chunkElementIdentifier.afterBlockIndex >= systemMeasure.blocksPositionedAfterSystem.length || chunkElementIdentifier.beforeBlockIndex >= systemMeasure.blocksPositionedBeforeSystem.length) {
      return this.createPageSystem(chunkElementIdentifier, breakWidth);
    } else {
      return this.createPageBlock(chunkElementIdentifier);
    }
  }
  chunkIndexOfElementIdentifier(chunkElementIdentifier) {
    let chunk = null;
    for (let i = 0; i < this._chunks.length; i++) {
      chunk = this._chunks[i];
      if (chunkElementIdentifier.measureIndex <= chunk.endPosition.measureIndex && chunkElementIdentifier.beforeBlockIndex === chunk.endPosition.beforeBlockIndex && chunkElementIdentifier.afterBlockIndex === chunk.endPosition.afterBlockIndex) {
        return i;
      }
      if (chunkElementIdentifier.measureIndex <= chunk.endPosition.measureIndex && -1 == chunkElementIdentifier.beforeBlockIndex && -1 == chunkElementIdentifier.afterBlockIndex && -1 == chunk.endPosition.beforeBlockIndex && -1 == chunk.endPosition.afterBlockIndex) return i;
      if (chunk.endPosition.measureIndex < chunk.startPosition.measureIndex) return i;
    }
    if (null != chunk && chunkElementIdentifier.measureIndex > chunk.endPosition.measureIndex) {
      return this._chunks.length - 1;
    } else {
      return -1;
    }
  }
  createChunkLayout(chunk) {
    if (chunk.isSystem) {
      chunk.chunkLayout = this.createSystemLayout(chunk.startPosition.measureIndex, chunk.endPosition.measureIndex, {
        validate: true,
        tentative: false,
        dispMode: _models_score__WEBPACK_IMPORTED_MODULE_5__["default"].PAGINATED_DISPLAY
      });
      this.justifyChunkLayout(chunk.chunkLayout);
    } else if (chunk.startPosition.activeBlockType === _models_block__WEBPACK_IMPORTED_MODULE_1__["default"].AFTER_SYSTEM) {
      chunk.chunkLayout = this.createBlockLayout(chunk.startPosition.measureIndex, chunk.startPosition.afterBlockIndex, chunk.startPosition.activeBlockType);
    } else {
      chunk.chunkLayout = this.createBlockLayout(chunk.startPosition.measureIndex, chunk.startPosition.beforeBlockIndex, chunk.startPosition.activeBlockType);
    }
  }
  updatePageChunk(pageChunk, info = {}) {
    this.createChunkLayout(pageChunk);
    if (info.pageChunkIndex) {
      pageChunk.pageChunkIndex = info.pageChunkIndex;
    }
    this._chunksToBeUpdated.push({
      pageIndex: info.pageLayoutIndex,
      chunkIndex: info.chunkIndex
    });
    this.runIncrementalFlow();
  }
  appendPageChunk(chunk) {
    let pageLayout;
    let crossPage = false;
    this.createChunkLayout(chunk);
    if (this._pageLayouts.length === 0) {
      pageLayout = this.createPageLayout(this.context, this._pageLayouts.length);
      this.pageLayouts.push(pageLayout);
    } else {
      pageLayout = this._pageLayouts[this.pageLayouts.length - 1];
    }
    while (!pageLayout.addChunkLayout(chunk.chunkLayout)) {
      crossPage = true;
      if (this.context.preview) {
        this.isIncrementalLayoutComplete = true;
        break;
      }
      pageLayout = this.createPageLayout(this.context, this._pageLayouts.length);
      this._pageLayouts.push(pageLayout);
    }
    chunk.pageLayout = pageLayout;
    chunk.pageChunkIndex = pageLayout.chunkLayoutsLength - 1;
    if (crossPage) {
      this.dispatchPageDisplayEvent(Math.max(0, chunk.pageLayout.index - 1));
    }
    return crossPage;
  }
}
var ReflowType;
(function (ReflowType) {
  ReflowType["noChunkReflow"] = "noChunkReflow";
  ReflowType["reflowOnlyThisChunk"] = "reflowOnlyThisChunk";
  ReflowType["reflowThisAndFollowingChunks"] = "reflowThisAndFollowingChunks";
})(ReflowType || (ReflowType = {}));

/***/ }),

/***/ 28213:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/layouts/performance-text-layout.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PerformanceTextLayout)
/* harmony export */ });
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _views_performance_text_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/performance-text-view */ 15957);
/* harmony import */ var _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-notation-layout */ 88175);



class PerformanceTextLayout extends _text_notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, context.staffMetrics.performanceTextPadding, editorFonts, rootDiv, noteEditorService);
  }
  doValidateLayout() {
    if (!this.notation.measure.isSystemMeasure || this.measureLayout.topStaffOnSystem) {
      this.addEscapedTextGlyphs(this.textNotation.text);
      this.createBoxOutsideText();
    }
    super.doValidateLayout();
  }
  createTextFormat() {
    const staffMetrics = this.context.staffMetrics;
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_0__["default"](staffMetrics.staffTextFont, staffMetrics.baseFontSize * staffMetrics.performanceTextSize);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_performance_text_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 73428:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/layouts/placeholder-page-layout.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlaceholderPageLayout)
/* harmony export */ });
/* harmony import */ var _views_page_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/page-view */ 89531);
/* harmony import */ var _page_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page-layout */ 36817);


class PlaceholderPageLayout extends _page_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(context, index, editorFonts, rootDiv, noteEditorService) {
    super(context, index, editorFonts, rootDiv, noteEditorService);
    this.index = index;
  }
  get isActualLayout() {
    return false;
  }
  createDisplayObject(context) {
    var pageView = new _views_page_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, this.editorFonts, this.rootDiv, this.noteEditorService);
    pageView.state = _views_page_view__WEBPACK_IMPORTED_MODULE_0__["default"].PLACEHOLDER;
    return pageView;
  }
}

/***/ }),

/***/ 23082:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/layouts/prefixes-cache.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PrefixesCache)
/* harmony export */ });
class PrefixesCache {
  static get _prefixesLayoutCache() {
    return PrefixesCache.prefixesLayoutCache;
  }
  static set _prefixesLayoutCache(t) {
    PrefixesCache.prefixesLayoutCache = t;
  }
  static cache(staffIdx, measureIdx, prefix) {
    if (!PrefixesCache._prefixesLayoutCache[staffIdx]) {
      PrefixesCache._prefixesLayoutCache[staffIdx] = {};
    }
    PrefixesCache._prefixesLayoutCache[staffIdx][measureIdx] = prefix;
  }
  static retrieve(staffIdx, measureIdx) {
    if (!PrefixesCache._prefixesLayoutCache[staffIdx]) {
      PrefixesCache._prefixesLayoutCache[staffIdx] = {};
    }
    const prefix = PrefixesCache._prefixesLayoutCache[staffIdx][measureIdx];
    if (prefix) {
      return prefix;
    } else {
      return null;
    }
  }
  static invalidate(staffIdx, measureIdx) {
    if (PrefixesCache._prefixesLayoutCache[staffIdx] && PrefixesCache._prefixesLayoutCache[staffIdx][measureIdx]) {
      delete PrefixesCache._prefixesLayoutCache[staffIdx][measureIdx];
    }
  }
  static clear() {
    PrefixesCache._prefixesLayoutCache = {};
  }
}
PrefixesCache.prefixesLayoutCache = {};

/***/ }),

/***/ 6927:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/layouts/repeat-ending-span.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RepeatEndingSpan)
/* harmony export */ });
/* harmony import */ var _views_repeat_ending_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/repeat-ending-view */ 30620);
/* harmony import */ var _line_notation_span__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./line-notation-span */ 92527);


class RepeatEndingSpan extends _line_notation_span__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(staffLayout, sn, editorFonts, rootDiv, noteEditorService) {
    super(staffLayout, sn, editorFonts, rootDiv, noteEditorService);
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  createSystemSpanView(context, start, pEnd) {
    return new _views_repeat_ending_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, start, pEnd, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
}

/***/ }),

/***/ 41910:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/rest-layout.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RestLayout)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/articulation-attribute */ 9349);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _views_rest_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/rest-view */ 97898);
/* harmony import */ var _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./abstract-beamable-layout */ 51729);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./glyph-layout */ 29532);







class RestLayout extends _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_5__["default"] {
  get direction() {
    return this.notation.direction;
  }
  get stemingLine() {
    return this.stemStartLine;
  }
  get stemStartLine() {
    return this.clef.getRestLine(this.noteSet.value);
  }
  get nearestStemLine() {
    return this.stemStartLine;
  }
  get stemEnd() {
    const centerX = this._noteGlyphLayout.width / 2;
    let y;
    if (this.down) {
      y = this.stemStartLine - this.stemLength;
    } else {
      y = this.stemStartLine + this.stemLength;
    }
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](centerX, y);
  }
  set beamY(beamY) {
    if (!this.noteSet.explicitRestY) {
      const distanceY = beamY + this._noteGlyphLayout.origin.y - (this.down ? this._noteGlyphLayout.bounds.top - 0.5 : this._noteGlyphLayout.bounds.bottom + 0.5);
      if (this.down && distanceY > this._restPosition || !this.down && distanceY < this._restPosition) {
        this._noteGlyphLayout.distanceY = distanceY;
        this.positionDotGlyph();
      }
    }
  }
  get notationWidth() {
    return this._noteGlyphLayout.width;
  }
  get standardStemLength() {
    return 0;
  }
  get hasStem() {
    return false;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this._restPosition = 0;
    this._voiceDelta = 0;
    this._noteGlyphLayout = null;
    this._dotGlyphLayout = null;
  }
  doValidateLayout() {
    this.initializeLayout();
    super.doValidateLayout();
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    const restView = new _views_rest_view__WEBPACK_IMPORTED_MODULE_4__["default"](context, this, this.noteEditorService, this.rootDiv);
    if (!this.clef.showRhythm(this.context.score)) {
      restView.hidden = true;
    }
    return restView;
  }
  initializeLayout() {
    const staffMetrics = this.context.staffMetrics;
    this.padding = staffMetrics.notePadding;
    this._restPosition = this.clef.getRestLine(this.noteSet.value) * this.clef.lineSpacing + this.noteSet.dy;
    this._voiceDelta = 0;
    if (!this.noteSet.explicitRestY && this.multiVoice && this.clef.numLines > 1 && (this.alternateVoiceLayout == null || !this.alternateVoiceLayout.noteSet.invisible)) {
      let voiceRestOffset;
      if (parseFloat(this.noteSet.voiceNumber) === 0) {
        voiceRestOffset = staffMetrics.upperVoiceRestOffset;
      } else {
        voiceRestOffset = staffMetrics.lowerVoiceRestOffset;
      }
      this._voiceDelta += voiceRestOffset;
    }
    this._restPosition += this._voiceDelta;
    const restType = RestLayout.restType(this.noteSet.value, this._restPosition, this.clef);
    this._noteGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, this.foundry.getRest(this.noteSet.value, restType));
    this._noteGlyphLayout.distanceY = this._restPosition;
    this.addGlyphLayout(this._noteGlyphLayout);
    for (let i = 0; i < this.noteSet.dots; i++) {
      this._dotGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, this.foundry.getRhythmDot());
      this._dotGlyphLayout.distanceX = staffMetrics.dotSpacing + staffMetrics.multipleDotGap * i + this._noteGlyphLayout.width;
      this.addGlyphLayout(this._dotGlyphLayout);
      this.positionDotGlyph();
    }
  }
  positionDotGlyph() {
    if (this._dotGlyphLayout) {
      this._dotGlyphLayout.distanceY = Math.floor(this._noteGlyphLayout.distanceY) + 0.5;
      if (this.noteSet.value === _models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE) {
        this._dotGlyphLayout.distanceY -= 1;
      }
    }
  }
  doValidateGlobalLayout() {
    const staffMetrics = this.context.staffMetrics;
    this._clearTop = this.clef.staffHeight + this._voiceDelta + this.noteSet.dy + staffMetrics.articulationPadding;
    this._clearBottom = this._voiceDelta;
    this._extrasBottom = this._extrasTop = NaN;
    for (let i = 0; i < this.noteSet.articulations.length; i++) {
      const articulation = this.noteSet.articulations[i];
      if ((_models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST) !== 0) {
        this.applyArticulation(articulation);
      }
    }
  }
  applyArticulation(articulation) {
    if (this._multiVoice) {
      if (this._down) {
        this.addArticulation(articulation, false);
      } else {
        this.addArticulation(articulation, true);
      }
    } else {
      if (this._down || _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF) {
        this.addArticulation(articulation, true);
      } else {
        this.addArticulation(articulation, false);
      }
    }
  }
  addArticulation(articulationStr, aboveGlyph) {
    const staffMetrics = this.context.staffMetrics;
    const articulation_attr = _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet.ARTICULATION_ATTRIBUTES[articulationStr];
    if ((articulation_attr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST) !== 0) {
      const articulation = this.foundry.getArticulation(articulationStr, aboveGlyph, false);
      const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, articulation);
      glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_6__["default"].ANCHOR_BOTTOM;
      glyphLayout.distanceX = this._noteGlyphLayout.width / 2;
      if ((articulation_attr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT) !== 0) {
        glyphLayout.distanceX += staffMetrics.rightArticulationPadding;
      }
      glyphLayout.distanceY = aboveGlyph ? this._clearTop + glyphLayout.height : this._clearBottom;
      this.addGlyphLayout(glyphLayout);
      this._clearTop += glyphLayout.height + staffMetrics.articulationSpacing;
    }
  }
  static restType(notationValue, distanceY, clef) {
    distanceY /= clef.lineSpacing;
    if (notationValue >= _models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.HALF && (clef.displayLineCount === 0 || Math.abs(distanceY - Math.round(distanceY)) > 0.01 || distanceY < 0 || distanceY > clef.numLines - 1)) {
      return 'line';
    } else {
      return null;
    }
  }
}

/***/ }),

/***/ 85948:
/*!***************************************************!*\
  !*** ./src/app/note-editor/layouts/rip-Layout.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RipLayout)
/* harmony export */ });
/* harmony import */ var _effect_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./effect-layout */ 44670);
/* harmony import */ var _views_rip_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/rip-view */ 52598);


class RipLayout extends _effect_layout__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
  }
  get horizontalSpacing() {
    return this.staffMetrics.ripHorizontalSpacing;
  }
  get verticalSpacing() {
    return this.staffMetrics.preEffectVerticalSpacing;
  }
  get offLinePadding() {
    return this.staffMetrics.preEffectVerticalPaddingOffLine;
  }
  createDisplayObject(context) {
    return new _views_rip_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.spacingX, this.spacingY, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 24033:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/score-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreLayout)
/* harmony export */ });
/* harmony import */ var _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/measure-validation-event */ 1179);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _block_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./block-layout */ 78811);
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure-layout */ 7536);
/* harmony import */ var _overlay_system_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./overlay-system-layout */ 25180);
/* harmony import */ var _staff_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./staff-layout */ 21831);
/* harmony import */ var _system_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./system-layout */ 54495);
/* harmony import */ var _system_measure_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./system-measure-layout */ 81576);









class ScoreLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get displayMode() {
    return this.context.score.displayMode;
  }
  get score() {
    return this._document.score;
  }
  get document() {
    return this._document;
  }
  set document(d) {
    if (this._document !== d) {
      if (this._document) {
        this.disposeSystemMeasureLayouts();
      }
      this._document = d;
      if (this._document) {
        this.buildStaffLayouts();
        this.buildSystemMeasureLayouts();
      }
    }
  }
  get totalPage() {
    return 1;
  }
  get overlay() {
    return this._overlay;
  }
  get endMeasureIndex() {
    return -1;
  }
  get numMeasureLayouts() {
    return this._systemMeasureLayouts.length;
  }
  get systemBreakWidth() {
    return this.context.pageMetrics.contentWidth / this.context.staffMetrics.lineSpacing;
  }
  //   get systemLayouts() {
  //     const systemLayouts = [];
  //     for (let i = 0; i < this._chunks.length; i++) {
  //       const chunk = this._chunks[i];
  //       // todo
  //     }
  //   }
  get allMeasureIndices() {
    const measureIndices = [];
    for (let i = 0; i < this.score.numMeasures; i++) {
      measureIndices.push(i);
    }
    return measureIndices;
  }
  constructor(context, editorFonts, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this._staffLayouts = [];
    this._document = null;
    this._systemMeasureLayouts = [];
    this._overlay = false;
    this.editorFonts = editorFonts;
    this._context.scoreLayout = this;
    this.rootDiv = rootDiv;
  }
  prepareLayout() {}
  isFirstMeasureOfChunk(t) {
    return false;
  }
  getStaffLayoutAt(idx) {
    return this._staffLayouts[idx];
  }
  getSystemMeasureLayoutAt(idx) {
    return this._systemMeasureLayouts[idx];
  }
  destroyChildren() {
    for (let i = 0; i < this._staffLayouts.length; i++) {
      this.getStaffLayoutAt(i).destroy();
    }
  }
  buildStaffLayouts() {
    let visibleStaves;
    this.removeListeners();
    this._staffLayouts = [];
    if (this.context.partToPrint) {
      visibleStaves = [];
      for (let i = 0; i < this.context.partToPrint.staves.length; i++) {
        const staff = this.context.partToPrint.staves[i];
        visibleStaves.push(staff);
      }
    } else {
      visibleStaves = this.score.visibleStaves;
    }
    for (let i = 0; i < visibleStaves.length; i++) {
      const staff = visibleStaves[i];
      const measureLayouts = [];
      const staffLayout = new _staff_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, null, this._staffLayouts.length, this.editorFonts, this.rootDiv, this.noteEditorService);
      let prevMeasureLayout = null;
      for (let j = 0; j < staff.measures.length; j++) {
        const measure = staff.measures[j];
        const measurelayout = new _measure_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, measure, this.editorFonts, this.rootDiv, this.noteEditorService);
        measurelayout.topStaffOnSystem = i === 0;
        measurelayout.bottomStaffOnSystem = i === visibleStaves.length - 1;
        measureLayouts.push(measurelayout);
        if (prevMeasureLayout) {
          prevMeasureLayout.nextLayout = measurelayout;
        }
        prevMeasureLayout = measurelayout;
      }
      staffLayout.measureLayouts = measureLayouts;
      this._staffLayouts.push(staffLayout);
    }
    console.log(this._staffLayouts);
    console.log('buildStaffLayouts');
  }
  addOrRemoveMeasures(measureValidationEvt) {
    if (measureValidationEvt.sequenceChanges.length) {
      for (let i = 0; i < measureValidationEvt.sequenceChanges.length; i++) {
        const sequenceChange = measureValidationEvt.sequenceChanges[i];
        if (sequenceChange.type === _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].ADD) {
          this.addMeasureToStaffLayoutsAt(sequenceChange.measureIndex, sequenceChange.systemMeasure);
          this.addSystemMeasureLayoutAt(sequenceChange.measureIndex);
          this.addVisibleMeasure(sequenceChange.measureIndex);
        } else if (sequenceChange.type === _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_0__["default"].REMOVE) {
          this.removeMeasureFromStaffLayoutsAt(sequenceChange.measureIndex);
          this.removeSystemMeasureLayoutAt(sequenceChange.measureIndex);
          this.removeVisibleMeasure(sequenceChange.measureIndex);
        }
      }
      //   PrefixesCache.clear(); TODO
    }
  }

  addVisibleMeasure(t) {}
  removeVisibleMeasure(t) {}
  addMeasureToStaffLayoutsAt(measureIdx, measure) {
    for (var idx = 0; idx < this._staffLayouts.length; idx++) {
      var staffLayout = this.getStaffLayoutAt(idx),
        measureLayout = new _measure_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, staffLayout.staff.getMeasureAt(measure.index), this.editorFonts, this.rootDiv, this.noteEditorService);
      staffLayout.insertMeasureLayout(measureLayout, measureIdx);
    }
  }
  removeMeasureFromStaffLayoutsAt(measureIdx) {
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      this.getStaffLayoutAt(i).removeMeasureLayout(measureIdx);
    }
  }
  addSystemMeasureLayoutAt(idx) {
    const systemMeasureLayout = this.createSystemMeasureLayout(idx);
    this._systemMeasureLayouts.splice(idx, 0, systemMeasureLayout);
  }
  removeSystemMeasureLayoutAt(idx) {
    const systemLayout = this._systemMeasureLayouts[idx];
    if (systemLayout) {
      systemLayout.destroy();
      this._systemMeasureLayouts.splice(idx, 1);
    }
  }
  revalidateSystemMeasureLayouts(measureIndices) {
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndice = measureIndices[i];
      const systemMeasureLayout = this.getSystemMeasureLayoutAt(measureIndice);
      if (systemMeasureLayout) {
        systemMeasureLayout.invalidateMeasures();
        systemMeasureLayout.validateLayout();
      }
    }
  }
  rebuildStaffLayouts(firstMeasureIdx, measuresCount = 1) {
    if (firstMeasureIdx !== 0) {
      for (let i = 0; i < this._staffLayouts.length; i++) {
        const staffLayout = this.getStaffLayoutAt(i);
        let measureLayout = staffLayout.getMeasureLayoutAt(firstMeasureIdx - 1);
        const measureLayouts = [];
        let prevMeasureLayout = null;
        for (let j = firstMeasureIdx; j < firstMeasureIdx + measuresCount; j++) {
          prevMeasureLayout = new _measure_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, staffLayout.staff.getMeasureAt(j), this.editorFonts, this.rootDiv, this.noteEditorService);
          prevMeasureLayout.topStaffOnSystem = i === 0;
          prevMeasureLayout.bottomStaffOnSystem = i === this._staffLayouts.length - 1;
          if (measureLayout) {
            measureLayout.nextLayout = prevMeasureLayout;
          }
          measureLayout = prevMeasureLayout;
          measureLayouts.push(prevMeasureLayout);
        }
        if (prevMeasureLayout && prevMeasureLayout.measure.index < staffLayout.length - 2) {
          const nextMeasureLayout = staffLayout.getMeasureLayoutAt(firstMeasureIdx + measuresCount);
          prevMeasureLayout.nextLayout = nextMeasureLayout;
        }
        staffLayout.spliceMeasureLayouts(firstMeasureIdx, measuresCount, measureLayouts);
      }
    } else {
      this.buildStaffLayouts();
    }
  }
  buildSystemMeasureLayouts() {
    for (let i = 0; i < this.score.numMeasures; i++) {
      this.layoutMeasureAt(i);
    }
  }
  rebuildSystemMeasureLayouts(firstMeasureIdx, measureCount) {
    this.rebuildStaffLayouts(firstMeasureIdx, measureCount);
    this._systemMeasureLayouts.splice(firstMeasureIdx);
    for (let i = firstMeasureIdx; i < this.score.numMeasures; i++) {
      this.layoutMeasureAt(i);
    }
  }
  layoutMeasureAt(idx) {
    this._systemMeasureLayouts[idx] = this.createSystemMeasureLayout(idx);
  }
  createSystemMeasureLayout(idx) {
    const measureLayouts = [];
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      const measureLayout = staffLayout.getMeasureLayoutAt(idx);
      measureLayouts.push(measureLayout);
    }
    const systemMeasureLayout = new _system_measure_layout__WEBPACK_IMPORTED_MODULE_8__["default"](this.context, this.noteEditorService, this.rootDiv, this.displayMode);
    systemMeasureLayout.measureLayouts = measureLayouts;
    return systemMeasureLayout;
  }
  disposeSystemMeasureLayouts() {
    for (let i = 0; i < this._systemMeasureLayouts.length; i++) {
      const systemMeasureLayout = this._systemMeasureLayouts[i];
      systemMeasureLayout.measureLayouts = null;
    }
    this._systemMeasureLayouts = [];
  }
  createBlockLayout(measureIdx, blockIdx, activeBlockType) {
    const measure = this.score.systemStaff.getMeasureAt(measureIdx);
    const blockLayout = new _block_layout__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, measure, this.editorFonts, this.rootDiv, this.noteEditorService);
    blockLayout.setBlock(blockIdx, activeBlockType);
    blockLayout.validateLayout();
    return blockLayout;
  }
  createSystemLayout(startMeasureIdx, endMeasureIdx, options = {}) {
    const validate = true; // options.validate;
    const tentative = options.tentative;
    const dispMode = options.dispMode;
    const systemLayout = this._overlay ? new _overlay_system_layout__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, dispMode, this.editorFonts, this.rootDiv, this.noteEditorService) : new _system_layout__WEBPACK_IMPORTED_MODULE_7__["default"](this.context, dispMode, this.editorFonts, this.rootDiv, this.noteEditorService);
    let newStaffLayouts = [];
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      const newStaffLayout = new _staff_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, systemLayout, newStaffLayouts.length, this.editorFonts, this.rootDiv, this.noteEditorService);
      newStaffLayout.measureLayouts = staffLayout.measureLayouts.slice(startMeasureIdx, endMeasureIdx + 1);
      newStaffLayouts.push(newStaffLayout);
    }
    if (!tentative && newStaffLayouts.length > 0) {
      let topStaffIdx = 0;
      let bottomStaffIdx = newStaffLayouts.length - 1;
      if (dispMode !== _models_score__WEBPACK_IMPORTED_MODULE_1__["default"].STRIP_DISPLAY) {
        while (newStaffLayouts[topStaffIdx].canHide && topStaffIdx + 1 < newStaffLayouts.length) {
          topStaffIdx++;
        }
        while (newStaffLayouts[bottomStaffIdx].canHide && bottomStaffIdx - 1 >= 0) {
          bottomStaffIdx--;
        }
      }
      newStaffLayouts[topStaffIdx].topStaff = true;
      newStaffLayouts[bottomStaffIdx].bottomStaff = true;
      const visibleStaffLayouts = [];
      for (let i = 0; i < newStaffLayouts.length; i++) {
        const staffLayout = newStaffLayouts[i];
        const staff = staffLayout.staff;
        const part = staff.part;
        for (let j = 0; j < staffLayout.measureLayouts.length; j++) {
          const measureLayout = staffLayout.getMeasureLayoutAt(j);
          measureLayout.firstLayoutOnSystem = 0 === j;
          measureLayout.lastLayoutOnSystem = j === staffLayout.measureLayouts.length - 1;
          const staffMetrics = this.score.effectiveStaffMetrics;
          measureLayout.showBarNumber = staffMetrics.showBarNumbersOnEachMeasure && staffMetrics.showBarNumbers;
          if (!staffLayout.canHide || dispMode === _models_score__WEBPACK_IMPORTED_MODULE_1__["default"].STRIP_DISPLAY) {
            measureLayout.topStaffOnSystem = i === topStaffIdx;
            measureLayout.bottomStaffOnSystem = i === bottomStaffIdx;
            measureLayout.topStaffInBarlineGroup = measureLayout.topStaffOnSystem || staff.firstInPart && visibleStaffLayouts.length > 0 && visibleStaffLayouts[visibleStaffLayouts.length - 1].staff.part.barlineBreak || part.hasPedal && staff.lastInPart;
            measureLayout.bottomStaffInBarlineGroup = measureLayout.bottomStaffOnSystem || staff.lastInPart && part.barlineBreak || part.hasPedal && staff.penultimateInPart;
          }
        }
        if (!staffLayout.canHide || dispMode === _models_score__WEBPACK_IMPORTED_MODULE_1__["default"].STRIP_DISPLAY) {
          visibleStaffLayouts.push(staffLayout);
        }
      }
      if (visibleStaffLayouts.length > 0) {
        newStaffLayouts = visibleStaffLayouts;
      }
    }
    if (validate) {
      for (let i = startMeasureIdx; i <= endMeasureIdx; i++) {
        const systemMeasureLayout = this.getSystemMeasureLayoutAt(i);
        if (systemMeasureLayout) {
          if (this.context.staffMetrics.autoMultiMeasureRestCreation && systemMeasureLayout.measureLayouts.length === 1 && systemMeasureLayout.measureLayouts[0].measure.isTacet) {
            systemMeasureLayout.invalidateMeasures();
          }
          systemMeasureLayout.validateLayout();
        }
      }
    }
    systemLayout.setLayouts(newStaffLayouts, this._systemMeasureLayouts.slice(startMeasureIdx, endMeasureIdx + 1));
    if (validate) {
      systemLayout.validateLayout(options);
    } else {
      systemLayout.prepareLayout();
    }
    return systemLayout;
  }
  handleMeasureSequenceChange(t) {}
  handleMeasureValidate(t) {}
  handleMeasureGeometryChange(t) {}
  handleMeasureSpanChange(t) {}
  getHyphensBeginningStaff(t, e) {
    return null;
  }
  getSystemLayoutStartingAt(t) {
    return null;
  }
}

/***/ }),

/***/ 51341:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/slide-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SlideLayout)
/* harmony export */ });
/* harmony import */ var _views_line_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/line-view */ 36764);
/* harmony import */ var _liaison_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./liaison-layout */ 89280);


class SlideLayout extends _liaison_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(noteEditorService) {
    super(noteEditorService);
  }
  get horizontalPadding() {
    return this.staffMetrics.slideHorizontalPadding;
  }
  get lineDither() {
    if (this._leftNl && this._leftNl.isTab) {
      return 0;
    } else {
      return super.lineDither;
    }
  }
  get singleNote() {
    return false;
  }
  get adjustForLiaisonCrossingStem() {
    return false;
  }
  doCreateView(nsl, nl, spacingX, spacingY, contentWidth) {
    this.calculateAscent();
    let delta = 0;
    if (nsl.isTab) {
      delta = nsl.clef.lineSpacing * this.staffMetrics.slideStrokeBias * (this._pitchDelta > 0 ? 1.5 : -1.5);
    }
    return new _views_line_view__WEBPACK_IMPORTED_MODULE_0__["default"](spacingX * this.staffMetrics.lineSpacing, -(spacingY - delta + this._dy) * this.staffMetrics.lineSpacing, contentWidth * this.staffMetrics.lineSpacing, -(this._ascent + 2 * delta) * this.staffMetrics.lineSpacing, this.staffMetrics.slideThickness * this.staffMetrics.lineSpacing, this.staffMetrics, this.noteEditorService);
  }
}

/***/ }),

/***/ 88823:
/*!**************************************************!*\
  !*** ./src/app/note-editor/layouts/slur-span.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SlurSpan)
/* harmony export */ });
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _views_slur_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/slur-view */ 79610);
/* harmony import */ var _system_span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./system-span */ 32047);



class SlurSpan extends _system_span__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(staffLayout, sn, editorFonts, rootDiv, noteEditorService) {
    super(staffLayout, sn, editorFonts, rootDiv, noteEditorService);
  }
  get slur() {
    return this.notation;
  }
  startPoint(view) {
    const startPoint = super.startPoint(view);
    if (this.startBreak) {
      const slurHeight = _views_slur_view__WEBPACK_IMPORTED_MODULE_1__["default"].slurHeight(super.endPoint(view).x - startPoint.x, this.staffMetrics);
      startPoint.x -= this.staffMetrics.noteLiaisonPadding * this.staffMetrics.lineSpacing;
      startPoint.y += (slurHeight / 2 + 0.25 * this.staffMetrics.lineSpacing) * (this.slur.direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_0__.Notation_Direction.DIRECTION_DOWN ? 1 : -1);
    }
    return startPoint;
  }
  endPoint(view) {
    const endPoint = super.endPoint(view);
    if (this.endBreak) {
      const slurHeight = _views_slur_view__WEBPACK_IMPORTED_MODULE_1__["default"].slurHeight(endPoint.x - super.startPoint(view).x, this.staffMetrics);
      endPoint.x += this.staffMetrics.noteLiaisonPadding * this.staffMetrics.lineSpacing;
      endPoint.y += (slurHeight / 2 + 0.25 * this.staffMetrics.lineSpacing) * (this.slur.direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_0__.Notation_Direction.DIRECTION_DOWN ? 1 : -1);
    }
    return endPoint;
  }
  createSystemSpanView(context, start, pEnd) {
    return new _views_slur_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, start, pEnd, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 18128:
/*!**************************************************!*\
  !*** ./src/app/note-editor/layouts/span-info.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpanInfo)
/* harmony export */ });
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_slur__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/slur */ 85888);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _exoression_text_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./exoression-text-layout */ 80477);
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./measure-layout */ 7536);
/* harmony import */ var _note_placement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./note-placement */ 81967);
/* harmony import */ var _note_set_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./note-set-layout */ 83944);
/* harmony import */ var _system_measure_layout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./system-measure-layout */ 81576);











class SpanInfo {
  get staffMetrics() {
    return this._context.staffMetrics;
  }
  get empty() {
    return this.notePlacements.length === 0;
  }
  constructor(context, sn, editorFonts, rootDiv, noteEditorService) {
    this.voiceNumber = 0;
    this.startNoteWidth = NaN;
    this.endNoteWidth = NaN;
    this.notesUp = false;
    this.notesDown = false;
    this.multiVoice = false;
    this.multiVoiceDown = false;
    this.grace = false;
    this.notePlacements = null;
    this.startEndSpan = NaN;
    this._forceInitialX = false;
    this._forceInitialXPosition = NaN;
    this._lastExpText = null;
    this._context = null;
    this._multiVoiceDownSet = false;
    this._sn = null;
    this._context = context;
    this.noteEditorService = noteEditorService;
    this._sn = sn;
    this.voiceNumber = this._sn.voiceNumber;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this.calculateDefaults(this._sn.measurePosition, this._sn.endPosition, this._sn.measure.staff);
  }
  calculateDefaults(snMeasurePosition, snEndPosition, staff) {
    let graceLayout,
      noteSetLayout,
      currX = 0;
    this.notePlacements = [];
    let isSlur = false;
    for (let measureIdx = snMeasurePosition.measureIndex; measureIdx <= snEndPosition.measureIndex; measureIdx++) {
      const measure = staff.getMeasureAt(measureIdx);
      const measureLayout = new _measure_layout__WEBPACK_IMPORTED_MODULE_7__["default"](this._context, measure, this.editorFonts, this.rootDiv, this.noteEditorService);
      const systemMeasureLayout = new _system_measure_layout__WEBPACK_IMPORTED_MODULE_10__["default"](this._context, this.noteEditorService, this.rootDiv, _models_score__WEBPACK_IMPORTED_MODULE_2__["default"].STRIP_DISPLAY);
      systemMeasureLayout.measureLayouts = [measureLayout];
      systemMeasureLayout.validateLayout();
      measureLayout.validateGlobalLayout();
      for (let i = 0; i < measureLayout.notationLayouts.length; i++) {
        const notationLayout = measureLayout.notationLayouts[i];
        const voiceNumber = notationLayout.notation.voiceNumber;
        const unknownVoiceOrEqualVoice = this.voiceNumber === _utils_voice_number__WEBPACK_IMPORTED_MODULE_5__.VoiceNumber.UNKNOWN_VOICE_NUMBER || parseFloat(voiceNumber) === this.voiceNumber;
        if (notationLayout instanceof _exoression_text_layout__WEBPACK_IMPORTED_MODULE_6__["default"]) {
          const expressionTextLayout = notationLayout;
          if (measureIdx === snEndPosition.measureIndex && notationLayout.notation.rhythmPosition <= snEndPosition.position + 1) {
            this._lastExpText = expressionTextLayout;
          }
          if (measureIdx === snMeasurePosition.measureIndex && this._sn instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_0__["default"] && notationLayout.notation.rhythmPosition === snMeasurePosition.position) {
            this._forceInitialX = true;
            this._forceInitialXPosition = expressionTextLayout.dx + expressionTextLayout.glyphWidths + this.staffMetrics.hairpinStrartExpressionPadding;
          }
        }
        if (!(parseFloat(voiceNumber) < 0 || (isSlur || this._sn.defaultDirection) && !unknownVoiceOrEqualVoice)) {
          const notationPosition = notationLayout.notation.position;
          if (measureIdx !== snMeasurePosition.measureIndex || notationPosition >= snMeasurePosition.position) {
            if (measureIdx === snEndPosition.measureIndex && notationPosition > snEndPosition.position) {
              break;
            }
            if (notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_9__["default"]) {
              noteSetLayout = notationLayout;
              this.multiVoice = this.multiVoice || noteSetLayout.multiVoice;
              if (graceLayout == null && unknownVoiceOrEqualVoice) {
                if (noteSetLayout.noteSet.grace && !this._sn.includeGrace) {
                  continue;
                }
                graceLayout = noteSetLayout;
                isSlur = this._sn instanceof _models_slur__WEBPACK_IMPORTED_MODULE_3__["default"] && graceLayout.noteSet.grace;
                if (isSlur) {
                  this.notePlacements = [];
                }
              }
              let notePlacement = new _note_placement__WEBPACK_IMPORTED_MODULE_8__["default"]();
              notePlacement.measureIndex = measureIdx;
              notePlacement.position = notationPosition;
              notePlacement.duration = noteSetLayout.noteSet.duration;
              notePlacement.grace = noteSetLayout.noteSet.grace;
              notePlacement.top = noteSetLayout.spanTop;
              notePlacement.bottom = noteSetLayout.spanBottom;
              notePlacement.x = currX + noteSetLayout.x;
              notePlacement.hasStem = noteSetLayout.hasStem;
              notePlacement.noteWidth = noteSetLayout.noteWidth;
              if (this._sn.defaultDirection != null && this.notePlacements.length > 0) {
                const placement = this.notePlacements[this.notePlacements.length - 1];
                if (placement.measureIndex !== measureIdx || placement.position !== notationPosition || placement.grace) {
                  this.notePlacements.push(notePlacement);
                } else {
                  placement.top = Math.max(notePlacement.top, placement.top);
                  placement.bottom = Math.min(notePlacement.bottom, placement.bottom);
                  if (unknownVoiceOrEqualVoice && !notePlacement.grace) {
                    placement.x = notePlacement.x;
                    placement.hasStem = notePlacement.hasStem;
                    placement.noteWidth = notePlacement.noteWidth;
                    placement.duration = notePlacement.duration;
                  }
                  notePlacement = placement;
                }
              } else {
                this.notePlacements.push(notePlacement);
              }
              if (noteSetLayout.tupletLayout && !(measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_4__["default"])) {
                const tupletLayout = noteSetLayout.tupletLayout;
                const tupletHeight = this._context.staffMetrics.tupletHeight;
                const getPeak = function (y) {
                  if (tupletLayout.down) {
                    notePlacement.bottom = Math.min(notePlacement.bottom, y - tupletHeight);
                  } else {
                    notePlacement.top = Math.max(notePlacement.top, y + tupletHeight);
                  }
                };
                if (noteSetLayout.noteSet.rhythmPosition === 0) {
                  if (tupletLayout.tuplet.showBracket) {
                    getPeak(tupletLayout.startY);
                  }
                } else if (noteSetLayout.noteSet.rhythmPosition === tupletLayout.tuplet.duration) {
                  if (tupletLayout.tuplet.showBracket) {
                    getPeak(tupletLayout.startY + tupletLayout.rise);
                  }
                } else if (tupletLayout.tuplet.showActualNumber || tupletLayout.tuplet.showNormalNumber) {
                  getPeak(tupletLayout.startY + tupletLayout.rise * (noteSetLayout.x - tupletLayout.startX) / (tupletLayout.endX - tupletLayout.startX));
                }
              }
              if (!noteSetLayout.noteSet.grace && unknownVoiceOrEqualVoice) {
                if (noteSetLayout.down) {
                  this.notesDown = true;
                } else {
                  this.notesUp = true;
                }
                if (this.multiVoice && noteSetLayout.multiVoice && noteSetLayout.hasStem && !this._multiVoiceDownSet) {
                  this.multiVoiceDown = noteSetLayout.down;
                  this._multiVoiceDownSet = true;
                }
              }
            }
          }
        }
      }
      currX += systemMeasureLayout.x;
    }
    if (this.multiVoice && !this._multiVoiceDownSet) {
      this.multiVoiceDown = 1 === this.voiceNumber;
    }
    if (this.notePlacements.length > 0) {
      const firstNotePlacement = this.notePlacements[0];
      const lastNotePlacement = this.notePlacements[this.notePlacements.length - 1];
      const firstX = firstNotePlacement.x;
      for (let i = 0; i < this.notePlacements.length; i++) {
        const noteplacement = this.notePlacements[i];
        noteplacement.x -= firstX;
      }
      if (this._sn instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        this.startNoteWidth = this._forceInitialX ? this._forceInitialXPosition : 0;
        if (!this._lastExpText || this._lastExpText.notation.rhythmPosition !== lastNotePlacement.position && this._lastExpText.notation.rhythmPosition !== lastNotePlacement.position + lastNotePlacement.duration) {
          this.endNoteWidth = -0.5 * this.staffMetrics.hairpinEndExpressionPadding;
        } else {
          this.endNoteWidth = this._lastExpText.dx - this.staffMetrics.hairpinEndExpressionPadding;
        }
      } else {
        const firstMeasurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](firstNotePlacement.measureIndex, firstNotePlacement.position);
        const lastMeasurePosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](lastNotePlacement.measureIndex, lastNotePlacement.position);
        this.startNoteWidth = firstNotePlacement.noteWidth;
        this.endNoteWidth = lastNotePlacement.noteWidth;
        this.grace = firstNotePlacement.grace;
        this.startEndSpan = Math.max(firstNotePlacement.duration, staff.score.rangeDuration(firstMeasurePosition, lastMeasurePosition));
      }
    }
  }
}

/***/ }),

/***/ 21831:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/staff-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffLayout)
/* harmony export */ });
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _models_slur__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/slur */ 85888);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _cautionary_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cautionary-layout */ 49606);
/* harmony import */ var _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constraint/sum-constraint */ 57962);
/* harmony import */ var _hairpin_span__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./hairpin-span */ 53466);
/* harmony import */ var _hyphen_element__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./hyphen-element */ 52204);
/* harmony import */ var _hyphen_layout__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./hyphen-layout */ 62240);
/* harmony import */ var _line_notation_span__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./line-notation-span */ 92527);
/* harmony import */ var _lyric_layout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lyric-layout */ 43541);
/* harmony import */ var _measure_gap_layout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./measure-gap-layout */ 83135);
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./measure-layout */ 7536);
/* harmony import */ var _measure_prefixes_layout__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./measure-prefixes-layout */ 90307);
/* harmony import */ var _prefixes_cache__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./prefixes-cache */ 23082);
/* harmony import */ var _repeat_ending_span__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./repeat-ending-span */ 6927);
/* harmony import */ var _slur_span__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./slur-span */ 88823);
/* harmony import */ var _staff_start_layout__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./staff-start-layout */ 87846);





















class StaffLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_6__["default"] {
  get systemLayout() {
    return this._parent;
  }
  get measureLayouts() {
    return this._measureLayouts;
  }
  get measurePrefixesLayouts() {
    return this._measurePrefixesLayouts;
  }
  get index() {
    return this._index;
  }
  get score() {
    return this._staff.score;
  }
  set measureLayouts(layouts) {
    console.log(layouts);
    this.destroyChildren();
    this._measureLayouts = layouts;
    const measure = layouts[0].measure;
    this._staff = measure.staff;
    this._auxiliaryMeasuresPrepared = false;
    this.updateMeasurePrefixes();
    this.invalidate();
  }
  get canHide() {
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      if (!measureLayout.measure.canHideStaff) {
        return false;
      }
    }
    return true;
  }
  get staff() {
    return this._staff;
  }
  get staffStartLayout() {
    return this._staffStartLayout;
  }
  get cautionaryLayout() {
    return this._cautionaryLayout;
  }
  get topPadding() {
    return this._topPadding;
  }
  get bottomPadding() {
    return this._bottomPadding;
  }
  get minLyricBelowBaseY() {
    return this._minLyricBelowBaseY;
  }
  get maxLyricAboveBaseY() {
    return this._maxLyricAboveBaseY;
  }
  get maxLyricExtraLinesAboveStaff() {
    return this._maxLyricExtraLinesAboveStaff;
  }
  get staffStartLayouts() {
    const staffStartLayouts = [];
    for (const key in this._measurePrefixesLayouts) {
      const prefixLayout = this._measurePrefixesLayouts[key];
      for (let j = 0; j < prefixLayout.prefixes.length; j++) {
        const prefix = prefixLayout.prefixes[j];
        if (prefix instanceof _staff_start_layout__WEBPACK_IMPORTED_MODULE_20__["default"]) {
          staffStartLayouts.push(prefix);
        }
      }
    }
    return staffStartLayouts;
  }
  get hyphenStateBeginningStaff() {
    return this._hyphenStateBeginningStaff;
  }
  get hyphenStateEndStaff() {
    return this._hyphenStateEndStaff;
  }
  get lastMeasureLayout() {
    return this._measureLayouts[this._measureLayouts.length - 1];
  }
  get startMeasure() {
    const measureLayout = this.getMeasureLayoutAt(0);
    if (measureLayout) {
      return measureLayout.measure;
    } else {
      return null;
    }
  }
  get startMeasureIndex() {
    if (this.startMeasure) {
      return this.startMeasure.index;
    } else {
      return null;
    }
  }
  get endMeasureIndex() {
    return this.startMeasureIndex + this._measureLayouts.length;
  }
  get lastMeasure() {
    return this._measureLayouts[this._measureLayouts.length - 1].measure;
  }
  get length() {
    return this._measureLayouts.length;
  }
  get hyphens() {
    return this._hyphenLayouts;
  }
  constructor(context, parent, index, editorFonts, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this._index = NaN;
    this.distanceY = NaN;
    this.topStaff = false;
    this.bottomStaff = false;
    this._measureLayouts = [];
    this._staffStartLayout = null;
    this._cautionaryLayout = null;
    this._staff = null;
    this._auxiliaryMeasuresPrepared = false;
    this._topPadding = NaN;
    this._bottomPadding = NaN;
    this._maxLyricAboveBaseY = NaN;
    this._minLyricBelowBaseY = NaN;
    this._maxLyricExtraLinesAboveStaff = NaN;
    this._measurePrefixesLayouts = {};
    this._hyphenLayouts = [];
    this._hyphenStateBeginningStaff = {};
    this._hyphenStateEndStaff = {};
    this._parent = parent;
    this._index = index;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  updateMeasureLayout(measureLayout) {
    const layout = this._measureLayouts[measureLayout.measure.index];
    if (layout) {
      layout.destroy();
    }
    this.measureLayouts[measureLayout.measure.index] = measureLayout;
  }
  insertMeasureLayout(measureLayout, idx) {
    const prevMeasureLayout = this.getMeasureLayoutAt(idx - 1);
    const nextMeasureLayout = this.getMeasureLayoutAt(idx + 1);
    if (prevMeasureLayout) {
      prevMeasureLayout.nextLayout = measureLayout;
    }
    if (nextMeasureLayout) {
      measureLayout.nextLayout = nextMeasureLayout;
    }
    this.measureLayouts.splice(idx, 0, measureLayout);
  }
  removeMeasureLayout(idx) {
    const prevMeasureLayout = this.getMeasureLayoutAt(idx - 1);
    const measureLayout = this.getMeasureLayoutAt(idx);
    const nextMeasureLayout = this.getMeasureLayoutAt(idx + 1);
    if (prevMeasureLayout && nextMeasureLayout) {
      prevMeasureLayout.nextLayout = nextMeasureLayout;
    }
    if (measureLayout) {
      measureLayout.destroy();
    }
    this.measureLayouts.splice(idx, 1);
  }
  getPrefixLayout(measure) {
    const measurePrefixesLayout = _prefixes_cache__WEBPACK_IMPORTED_MODULE_17__["default"].retrieve(this.staff.index, measure.index);
    if (measurePrefixesLayout) {
      this._staffStartLayout = measurePrefixesLayout.prefixes[0];
      if (this.staffStartLayout.measure.index > -1) {
        return measurePrefixesLayout;
      }
    }
    const visibleStaves = this.staff.score.visibleStavesAtMeasure(measure.index);
    const showMeasureNumber = measure.index !== 0 && this.staff.score.effectiveStaffMetrics.showBarNumbers && (visibleStaves.length > 0 && visibleStaves[0] === this.staff || this.context.partToPrint && this.context.partToPrint === this.staff.part && this.context.partToPrint.staves[0] === this.staff);
    this._staffStartLayout = new _staff_start_layout__WEBPACK_IMPORTED_MODULE_20__["default"](this.context, measure, showMeasureNumber, this.editorFonts, this.rootDiv, this.noteEditorService);
    const prefixLayout = new _measure_prefixes_layout__WEBPACK_IMPORTED_MODULE_16__["default"](measure.index);
    prefixLayout.addPrefix(this._staffStartLayout);
    _prefixes_cache__WEBPACK_IMPORTED_MODULE_17__["default"].cache(this.staff.index, measure.index, prefixLayout);
    return prefixLayout;
  }
  updateMeasurePrefixes() {
    this._measurePrefixesLayouts = {};
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measure = this._measureLayouts[i].measure;
      if (i === 0) {
        this._measurePrefixesLayouts[i] = this.getPrefixLayout(measure);
      } else if (measure.previousMeasure && measure.previousMeasure.systemMeasure.systemGap) {
        const measureGapLayout = new _measure_gap_layout__WEBPACK_IMPORTED_MODULE_14__["default"](this.context, measure, this.editorFonts, this.rootDiv, this.noteEditorService);
        const staffStartLayout = new _staff_start_layout__WEBPACK_IMPORTED_MODULE_20__["default"](this.context, measure, false, this.editorFonts, this.rootDiv, this.noteEditorService);
        const measurePrefixesLayout = new _measure_prefixes_layout__WEBPACK_IMPORTED_MODULE_16__["default"](measure.index);
        measurePrefixesLayout.addArrayOfPrefixes([measureGapLayout, staffStartLayout]);
        this._measurePrefixesLayouts[i] = measurePrefixesLayout;
      }
    }
  }
  revalidateMeasurePrefixesAt(measureIdx) {
    const localIndex = measureIdx - this.startMeasureIndex;
    if (this._measurePrefixesLayouts[localIndex]) {
      this._measurePrefixesLayouts[localIndex].invalidateLayouts();
      this._measurePrefixesLayouts[localIndex].validateLayouts();
      _prefixes_cache__WEBPACK_IMPORTED_MODULE_17__["default"].invalidate(this.staff.index, measureIdx);
    }
  }
  spliceMeasureLayouts(startIdx, count, layouts) {
    for (let i = startIdx; i < startIdx + count; i++) {
      this._measureLayouts[i].destroy();
    }
    this._measureLayouts.splice(startIdx, count, ...layouts);
  }
  invalidateGlobalAllLayouts() {
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      measureLayout.invalidateGlobal();
    }
    for (const key in this._measurePrefixesLayouts) {
      const prefixesLayout = this._measurePrefixesLayouts[key];
      prefixesLayout.invalidateGlobal();
    }
  }
  getMeasurePrefixesLayoutAt(idx) {
    return this._measurePrefixesLayouts[idx];
  }
  getMeasurePrefixesLayoutByMeasureIndex(idx) {
    return this.getMeasurePrefixesLayoutAt(idx - this.startMeasureIndex);
  }
  getMeasurePrefixByIndexAt(meausreIdx, prefixIdx) {
    const prefixes = this.getMeasurePrefixesLayoutByMeasureIndex(meausreIdx).prefixes;
    if (prefixIdx < prefixes.length) {
      return prefixes[prefixIdx];
    } else {
      return null;
    }
  }
  getMeasureLayoutAt(idx) {
    return this._measureLayouts[idx];
  }
  getMeasureLayoutByIndex(measureIdx) {
    return this.getMeasureLayoutAt(measureIdx - this.startMeasureIndex);
  }
  getSpansInRange(startIdx, endIdx) {
    const spans = [];
    const spanNotations = this.staff.getSpanNotationsInRange(startIdx, endIdx);
    for (let i = 0; i < spanNotations.length; i++) {
      const spanNotation = spanNotations[i];
      spans.push(this.createSpan(spanNotation));
    }
    if (this.topStaff) {
      const spanNotations = this.staff.score.systemStaff.getSpanNotationsInRange(startIdx, endIdx);
      for (let i = 0; i < spanNotations.length; i++) {
        const spanNotation = spanNotations[i];
        spans.push(this.createSpan(spanNotation));
      }
    }
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      for (let j = 0; j < measureLayout.temporarySpans.length; j++) {
        const spanNotation = measureLayout.temporarySpans[j];
        spans.push(this.createSpan(spanNotation));
      }
    }
    return spans;
  }
  createSpan(spanNotation) {
    if (spanNotation instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      return new _hairpin_span__WEBPACK_IMPORTED_MODULE_9__["default"](this, spanNotation, this.editorFonts, this.rootDiv, this.noteEditorService);
    }
    if (spanNotation instanceof _models_slur__WEBPACK_IMPORTED_MODULE_5__["default"]) {
      return new _slur_span__WEBPACK_IMPORTED_MODULE_19__["default"](this, spanNotation, this.editorFonts, this.rootDiv, this.noteEditorService);
    }
    if (spanNotation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      return new _repeat_ending_span__WEBPACK_IMPORTED_MODULE_18__["default"](this, spanNotation, this.editorFonts, this.rootDiv, this.noteEditorService);
    }
    if (spanNotation instanceof _models_line_notation__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      return new _line_notation_span__WEBPACK_IMPORTED_MODULE_12__["default"](this, spanNotation, this.editorFonts, this.rootDiv, this.noteEditorService);
    }
    throw new Error('Unrecognized SpanNotation type');
  }
  invalidateSystemStart() {
    this.invalidate();
    this._staffStartLayout.invalidate();
  }
  destroyChildren() {
    if (this._staffStartLayout) {
      this._staffStartLayout.destroy();
    }
    if (this._cautionaryLayout) {
      this._cautionaryLayout.destroy();
    }
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      measureLayout.destroy();
    }
  }
  drawHyphen(startLyricLayout, endLyricLayout = null, startMeasure = null, endMeasure = null) {
    this._hyphenLayouts.push(new _hyphen_layout__WEBPACK_IMPORTED_MODULE_11__["default"](this.context, startLyricLayout, endLyricLayout, startMeasure, endMeasure, this.editorFonts, this.rootDiv, this.noteEditorService));
  }
  updateHyphens(measureIdx = 0) {
    this.createHyphens(); //measureIdx
    // this.dispatchEvent(
    //   new HyphensUpdateEvent(HyphensUpdateEvent.HYPHENS_UPDATED)
    // );
  }

  createLyricLineId(lyricLayout) {
    const line = lyricLayout.lyric.line.toString();
    return lyricLayout.aboveStaff ? '-' + line : line;
  }
  createHyphens() {
    if (this.staff.seenLyrics) {
      this._hyphenLayouts = [];
      this._hyphenStateEndStaff = {};
      this._hyphenStateBeginningStaff = {};
      let measure,
        lyricLineId,
        hyphenEl,
        lyricLayouts = {};
      for (let i = 0; i < this.measureLayouts.length; i++) {
        const measureLayout = this.measureLayouts[i];
        for (let j = 0; j < measureLayout.lyricLayoutList.length; j++) {
          const lyricLayout = measureLayout.lyricLayoutList[j];
          if (lyricLayout.lyric.text) {
            const id = this.createLyricLineId(lyricLayout);
            if (!lyricLayouts[id]) {
              lyricLayouts[id] = lyricLayout;
            }
            const hyphenElement = this._hyphenStateEndStaff[id];
            if (hyphenElement) {
              this.drawHyphen(hyphenElement, null, lyricLayout);
              delete this._hyphenStateEndStaff[id];
            }
            if (lyricLayout.lyric.continued) {
              this._hyphenStateEndStaff[id] = new _hyphen_element__WEBPACK_IMPORTED_MODULE_10__["default"](lyricLayout);
            }
          }
        }
        if (measureLayout.measure.systemMeasure.endRepeat) {
          measure = measure || measureLayout.measure;
          for (const key in this._hyphenStateEndStaff) {
            hyphenEl = this._hyphenStateEndStaff[key];
            if (hyphenEl) {
              this.drawHyphen(hyphenEl.lyricLayout, null, null, measureLayout.measure);
              delete this._hyphenStateEndStaff[this.createLyricLineId(hyphenEl.lyricLayout)];
            }
          }
        }
      }
      const hyphensBeginStaff = this.context.scoreLayot.getHyphensBeginningStaff(this._index, this.systemLayout.startMeasureIndex);
      if (hyphensBeginStaff) {
        this._hyphenStateBeginningStaff = hyphensBeginStaff;
        for (const key in hyphensBeginStaff) {
          const lyricLayout = lyricLayouts[key];
          if (lyricLayout || measure) {
            if (measure && !(lyricLayout || measure.index < lyricLayout.measureIndex)) {
              this.drawHyphen(hyphensBeginStaff[key].lyricLayout, this.startMeasure, null, measure);
            } else {
              if (lyricLayout && (lyricLayout.measureIndex !== this.startMeasureIndex || lyricLayout.lyric.position > 0)) {
                this.drawHyphen(hyphensBeginStaff[key].lyricLayout, this.startMeasure, lyricLayout, null);
              }
            }
          } else {
            this._hyphenStateEndStaff[key] = hyphensBeginStaff[key];
          }
        }
      }
      for (const key in this._hyphenStateEndStaff) {
        hyphenEl = this._hyphenStateEndStaff[key];
        if (hyphenEl) {
          this.drawHyphen(hyphenEl.lyricLayout, null, null, this.lastMeasure);
        }
      }
      this.context.lyricsContext.updateStaffHyphensInfo(this._index, this.systemLayout, this._hyphenStateEndStaff);
    }
  }
  prepareLayout(options = {}) {
    const ignoreCautionaries = options.ignoreCautionaries || false;
    if (!this._auxiliaryMeasuresPrepared) {
      const firstMeasure = this.getMeasureLayoutAt(0).measure;
      const lastSystemMeasure = this.getMeasureLayoutAt(this._measureLayouts.length - 1).measure.systemMeasure;
      if (lastSystemMeasure.index < lastSystemMeasure.staff.numChildren - 1 && !lastSystemMeasure.disableCautionaries) {
        const nextSystemMeasure = lastSystemMeasure.staff.getMeasureAt(lastSystemMeasure.index + 1);
        const nextMeasure = firstMeasure.staff.getMeasureAt(nextSystemMeasure.index);
        if (!ignoreCautionaries && _cautionary_layout__WEBPACK_IMPORTED_MODULE_7__["default"].isNeeded(nextMeasure, lastSystemMeasure, nextSystemMeasure)) {
          const cautionaryLayout = new _cautionary_layout__WEBPACK_IMPORTED_MODULE_7__["default"](this.context, nextMeasure, lastSystemMeasure, nextSystemMeasure, this.topStaff, this.editorFonts, this.rootDiv, this.noteEditorService);
          this._cautionaryLayout = cautionaryLayout;
        }
      }
      this._auxiliaryMeasuresPrepared = true;
    }
    this._height = this._topPadding = this._bottomPadding = this._minLyricBelowBaseY = this._maxLyricAboveBaseY = this._maxLyricExtraLinesAboveStaff = 0;
    this._width = 0;
    this._constraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_8__["default"]([]);
    if (this._cautionaryLayout) {
      this.validateMeasureLayout(this._cautionaryLayout);
    }
  }
  doValidateLayout(options) {
    this.prepareLayout(options);
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measurePrefixesLayout = this.getMeasurePrefixesLayoutAt(i);
      if (measurePrefixesLayout) {
        for (let j = 0; j < measurePrefixesLayout.prefixes.length; j++) {
          const prefix = measurePrefixesLayout.prefixes[j];
          const prefixLayout = prefix;
          this.validateMeasureLayout(prefixLayout);
        }
      }
      const measurelayout = this._measureLayouts[i];
      this.validateMeasureLayout(measurelayout);
    }
  }
  ticksBetweenMeasurePositions(position1, position2) {
    if (position1.measureIndex === position2.measureIndex) {
      return position2.position - position1.position;
    }
    let ticks = this.score.getSystemStaffMeasureAt(position1.measureIndex).duration - position1.position;
    for (let i = position1.measureIndex + 1; i < position2.measureIndex; i++) {
      ticks += this.score.getSystemStaffMeasureAt(i).duration;
    }
    return ticks;
  }
  doValidateGlobalLayout() {
    this._height = this._topPadding = this._bottomPadding = this._minLyricBelowBaseY = this._maxLyricAboveBaseY = this._maxLyricExtraLinesAboveStaff = 0;
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      if (measureLayout.valid) {
        this._minLyricBelowBaseY = Math.min(this._minLyricBelowBaseY, measureLayout.minLyricBelowBaseY);
        this._maxLyricAboveBaseY = Math.max(this._maxLyricAboveBaseY, measureLayout.maxLyricAboveBaseY);
        const lyricLayouts = measureLayout.getLyricLayoutsListAboveStaff();
        for (let j = 0; j < lyricLayouts.length; j++) {
          const lyricLayout = lyricLayouts[j];
          this._maxLyricExtraLinesAboveStaff = Math.max(this._maxLyricExtraLinesAboveStaff, lyricLayout.lyric.line);
        }
      }
    }
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      const measurePrefixesLayout = this.getMeasurePrefixesLayoutByMeasureIndex(measureLayout.measure.index);
      if (measurePrefixesLayout) {
        for (let j = 0; j < measurePrefixesLayout.prefixes.length; j++) {
          const prefix = measurePrefixesLayout.prefixes[j];
          this.validateMeasureGlobal(prefix);
        }
      }
    }
    if (staffMetrics.verticalAutoSpace) {
      const spans = this.getSpansInRange(this.startMeasureIndex, this.endMeasureIndex);
      for (let i = 0; i < spans.length; i++) {
        const span = spans[i];
        const systemSpan = span;
        if (systemSpan.notation instanceof _models_slur__WEBPACK_IMPORTED_MODULE_5__["default"]) {
          let beforeTicks,
            afterTicks = 0;
          const index = systemSpan.notation.measure.index;
          if (this.startMeasureIndex <= index && index < this.endMeasureIndex) {
            beforeTicks = -this.ticksBetweenMeasurePositions(new _models_measure_position__WEBPACK_IMPORTED_MODULE_2__["default"](this.startMeasureIndex, 0), systemSpan.notation.measurePosition);
          } else {
            afterTicks = beforeTicks = this.ticksBetweenMeasurePositions(systemSpan.notation.measurePosition, new _models_measure_position__WEBPACK_IMPORTED_MODULE_2__["default"](this.startMeasureIndex, 0));
          }
          let ticks = beforeTicks;
          const endIndex = systemSpan.notation.endPosition.measureIndex;
          if (this.startMeasureIndex <= endIndex && endIndex < this.endMeasureIndex) {
            ticks += this.ticksBetweenMeasurePositions(new _models_measure_position__WEBPACK_IMPORTED_MODULE_2__["default"](this.startMeasureIndex, 0), systemSpan.notation.endPosition);
          } else {
            ticks += this.ticksBetweenMeasurePositions(new _models_measure_position__WEBPACK_IMPORTED_MODULE_2__["default"](this.startMeasureIndex, 0), new _models_measure_position__WEBPACK_IMPORTED_MODULE_2__["default"](this.lastMeasure.index, this.lastMeasure.duration));
          }
          const maxHeight = systemSpan.notation.getMaxHeightInSegment(afterTicks, ticks);
          const topPadding = maxHeight + staffMetrics.slurPadding - this.getMeasureLayoutAt(0).measure.effectiveClef.staffHeight;
          this._topPadding = Math.max(this._topPadding, topPadding);
          const bottomPadding = maxHeight - staffMetrics.slurPadding;
          this._bottomPadding = Math.max(this._bottomPadding, -bottomPadding);
        } else {
          if (!isNaN(systemSpan.notation.top)) {
            this._topPadding = Math.max(this._topPadding, systemSpan.notation.top - this.getMeasureLayoutAt(0).measure.effectiveClef.staffHeight);
            this._bottomPadding = Math.max(this._bottomPadding, -systemSpan.notation.bottom);
          }
        }
      }
    }
    if (this._hyphenLayouts.length > 0) {
      for (let i = 0; i < this._hyphenLayouts.length; i++) {
        const hyphenLayout = this._hyphenLayouts[i];
        if (hyphenLayout.startLyricLayout.direction === _models_notation_direction__WEBPACK_IMPORTED_MODULE_3__.Notation_Direction.DIRECTION_DOWN) {
          if (this._minLyricBelowBaseY === 0) {
            this._minLyricBelowBaseY = -this._bottomPadding + staffMetrics.lyricsBelowStaffTop;
          }
          this._bottomPadding = Math.max(this._bottomPadding, -_lyric_layout__WEBPACK_IMPORTED_MODULE_13__["default"].lyricY(this.context, hyphenLayout.startLyricLayout, this, hyphenLayout.startLyricLayout.lyric));
        } else {
          if (this._maxLyricAboveBaseY === 0) {
            this._maxLyricAboveBaseY = this._topPadding;
          }
          this._topPadding = Math.max(this._topPadding, _lyric_layout__WEBPACK_IMPORTED_MODULE_13__["default"].lyricY(this.context, hyphenLayout.startLyricLayout, this, hyphenLayout.startLyricLayout.lyric));
        }
      }
    }
  }
  validateMeasureGlobal(measureLayout) {
    if (measureLayout.valid) {
      measureLayout.validateGlobalLayout();
      this._height = Math.max(this._height, measureLayout.height);
      this._topPadding = Math.max(this._topPadding, measureLayout.topPadding);
      this._bottomPadding = Math.max(this._bottomPadding, measureLayout.bottomPadding);
      if (measureLayout.bottomLyricY !== _measure_layout__WEBPACK_IMPORTED_MODULE_15__["default"].NO_LYRICS_BELOW_STAFF) {
        this._bottomPadding = Math.max(this._bottomPadding, -measureLayout.bottomLyricY + Math.max(0, measureLayout.minLyricBelowBaseY - this._minLyricBelowBaseY));
      }
      if (measureLayout.topLyricY !== _measure_layout__WEBPACK_IMPORTED_MODULE_15__["default"].NO_LYRICS_ABOVE_STAFF) {
        this._topPadding = Math.max(this._topPadding, measureLayout.maxLyricAboveBaseY + this._maxLyricExtraLinesAboveStaff * this.context.staffMetrics.lyricsLineSpacing);
      }
    }
  }
  validateMeasureLayout(measureLayout) {
    const sumConstraint = this._constraint;
    if (measureLayout.systemMeasureLayout) {
      measureLayout.systemMeasureLayout.validateLayout();
    } else {
      measureLayout.validateLayout();
    }
    sumConstraint.addConstraint(measureLayout.constraint);
  }
}

/***/ }),

/***/ 87846:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/layouts/staff-start-layout.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffStartLayout)
/* harmony export */ });
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/measure-number-notation */ 36987);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _clef_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./clef-layout */ 29567);
/* harmony import */ var _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constraint/space-constraint */ 46321);
/* harmony import */ var _keysignature_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./keysignature-layout */ 14955);
/* harmony import */ var _measure_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./measure-layout */ 7536);








class StaffStartLayout extends _measure_layout__WEBPACK_IMPORTED_MODULE_7__["default"] {
  get leftPaddingConstraint() {
    return new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_5__["default"](0);
  }
  get requiresMeasureNumber() {
    return this._showMeasureNumber;
  }
  constructor(context, measure, showMeasureNumber, editorFonts, rootDiv, noteEditorService) {
    super(context, measure, editorFonts, rootDiv, noteEditorService);
    this.showAnnotations = false;
    this._showMeasureNumber = showMeasureNumber;
  }
  buildChildLayouts() {
    this.initializeNotationLayouts();
    this._measureNumberNotation = null;
    let canHideStaff = true;
    if (this.measure.effectiveClef.sign === _models_clef__WEBPACK_IMPORTED_MODULE_0__["default"].TAB_CLEF_SIGN) {
      for (let i = this.measure.index - 1; i > 0; i--) {
        if (!this.measure.staff.measures[i].canHideStaff) {
          canHideStaff = false;
          break;
        }
      }
    }
    if (this.measure.effectiveClef.sign !== _models_clef__WEBPACK_IMPORTED_MODULE_0__["default"].TAB_CLEF_SIGN || this.measure.index === 0 || canHideStaff) {
      this.addNotationLayout(this.createNotationLayout(this.measure.effectiveClef, this.measure.effectiveClef));
    }
    this.addNotationLayout(this.createNotationLayout(this.measure.keySignature, this.measure.effectiveClef));
    if (this.requiresMeasureNumber) {
      const measureNumberNotation = new _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_2__["default"](0, this.measure);
      measureNumberNotation.parent = this.measure.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_3__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
      measureNumberNotation.textbox = this.context.staffMetrics.barNumberBoxed;
      this._measureNumberNotation = this.createNotationLayout(measureNumberNotation, this.measure.effectiveClef);
      this.addNotationLayout(this._measureNumberNotation);
    }
  }
  createNotationLayout(notation, clef) {
    if (notation instanceof _models_clef__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      return new _clef_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, this, notation, false, this.noteEditorService, this.rootDiv);
    }
    if (notation instanceof _models_keysignature__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      let keySignature = notation;
      if (!this.measure.scoreInterval.octaveMultiple) {
        keySignature = keySignature.transposeFifths(this.measure.scoreInterval.fifths);
      }
      if (keySignature.fifths === 0) {
        return null;
      } else {
        return new _keysignature_layout__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, this, notation, keySignature, clef, this.noteEditorService, this.rootDiv);
      }
    }
    return super.createNotationLayout(notation, clef);
  }
  createMeasureView(context, staffView) {
    const measureView = super.createMeasureView(context, staffView);
    measureView.highlightEnabled = false;
    measureView.isStaffStartView = true;
    return measureView;
  }
  handleMeasureChange(t) {}
  buildGlobalLayouts() {
    this._globalLayouts = [];
  }
}

/***/ }),

/***/ 28836:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/strip-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StripLayout)
/* harmony export */ });
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _views_strip_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/strip-view */ 77738);
/* harmony import */ var _score_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./score-layout */ 24033);



class StripLayout extends _score_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get displayMode() {
    return _models_score__WEBPACK_IMPORTED_MODULE_0__["default"].STRIP_DISPLAY;
  }
  get systemLayout() {
    return this._systemLayout;
  }
  get endMeasureIndex() {
    return this._systemLayout.endMeasureIndex;
  }
  constructor(context, editorFonts, buildIncrementally, rootDiv, noteEditorService, overlay) {
    super(context, editorFonts, rootDiv, noteEditorService);
    this._systemLayout = null;
    this._buildIncrementally = false;
    this.editorFonts = editorFonts;
    this._buildIncrementally = buildIncrementally;
    this._context.scoreLayout = this;
    this._overlay = overlay;
  }
  isFirstMeasureOfChunk(measureIdx) {
    return measureIdx === 0;
  }
  insertMeasure(idx) {
    if (!this._overlay) {
      for (let i = 0; i < this._systemLayout.staffLayouts.length; i++) {
        const staffLayout = this.getStaffLayoutAt(i);
        const systemStaffLayout = this._systemLayout.getStaffLayoutAt(i);
        const measureLayout = staffLayout.getMeasureLayoutAt(idx);
        const systemMeasureLayout = systemStaffLayout.getMeasureLayoutAt(0);
        measureLayout.topStaffOnSystem = systemMeasureLayout.topStaffOnSystem;
        measureLayout.bottomStaffOnSystem = systemMeasureLayout.topStaffOnSystem;
        measureLayout.topStaffInBarlineGroup = systemMeasureLayout.topStaffInBarlineGroup;
        measureLayout.bottomStaffInBarlineGroup = systemMeasureLayout.bottomStaffInBarlineGroup;
        systemStaffLayout.insertMeasureLayout(measureLayout, idx);
      }
    }
  }
  removeMeasure(measureIdx) {
    for (let i = 0; i < this._systemLayout.staffLayouts.length; i++) {
      const staffLayout = this._systemLayout.getStaffLayoutAt(i).removeMeasureLayout(measureIdx);
    }
  }
  addVisibleMeasure(idx) {
    this._systemLayout.insertSystemMeasureLayout(this.getSystemMeasureLayoutAt(idx), idx);
    this.insertMeasure(idx);
  }
  removeVisibleMeasure(measureIdx) {
    this._systemLayout.removeSystemMeasureLayout(measureIdx);
    this.removeMeasure(measureIdx);
  }
  prepareLayout() {
    const systemLayout = this.createSystemLayout(0, 1, {
      validate: true,
      tentative: false,
      dispMode: _models_score__WEBPACK_IMPORTED_MODULE_0__["default"].STRIP_DISPLAY
    });
    this._width = systemLayout.x;
    systemLayout.validateGlobalLayout();
    const numMeasures = this._overlay ? 1 : this.score.numMeasures;
    this._systemLayout = this.createSystemLayout(0, numMeasures, {
      validate: false,
      tentative: false,
      dispMode: _models_score__WEBPACK_IMPORTED_MODULE_0__["default"].STRIP_DISPLAY
    });
    // if (!this._overlay) {
    //   this._systemLayout.addEventListener(
    //     OverlayUpdateEvent.STAFF_SPACING,
    //     RumtimeHelper.bindMethod(this, this.handleUpdateStaffSpacing)
    //   );
    // }
    for (let i = 0; i < systemLayout.staffLayouts.length; i++) {
      this._systemLayout.getStaffLayoutAt(i).distanceY = systemLayout.getStaffLayoutAt(i).distanceY;
    }
    systemLayout.destroy();
    const staffMetrics = this.context.staffMetrics;
    const stripMetrics = this.context.stripMetrics;
    const systemLayoutDistanceY = stripMetrics.stripMarginTop / staffMetrics.lineSpacing + staffMetrics.pageTopPadding;
    this._systemLayout.distanceY = systemLayoutDistanceY;
    this._height = this._systemLayout.distanceY + systemLayout.height + stripMetrics.stripMarginBottom / staffMetrics.lineSpacing;
  }
  handleUpdateStaffSpacing(evt) {
    // this.dispatchEvent(evt);
  }
  getXPosition(layout, context) {
    return context.info.staffHandleExtent - context.info.staffHandlePadding + this.context.stripMetrics.stripMarginLeft;
  }
  doValidateLayout() {
    this._systemLayout = this.createSystemLayout(0, this.score.numMeasures, {
      validate: true,
      tentative: false,
      dispMode: _models_score__WEBPACK_IMPORTED_MODULE_0__["default"].STRIP_DISPLAY
    });
    this._width = this._systemLayout.x;
    this.determineSystemPosition();
  }
  determineSystemPosition() {
    const staffMetrics = this.context.staffMetrics;
    const stripMetrics = this.context.stripMetrics;
    this._systemLayout.validateGlobalLayout();
    const distanceY = stripMetrics.stripMarginTop / staffMetrics.lineSpacing + staffMetrics.pageTopPadding;
    this._systemLayout.distanceY = Math.max(-staffMetrics.topStaffGap, distanceY - this._systemLayout.topPadding);
    this._height = this._systemLayout.distanceY + this._systemLayout.height + Math.max(stripMetrics.stripMarginBottom / staffMetrics.lineSpacing, this._systemLayout.bottomPadding);
  }
  createDisplayObject(context) {
    return new _views_strip_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.editorFonts, this.noteEditorService, this.rootDiv);
  }
  handleMeasureSequenceChange(measureValidationEvt) {
    this.invalidate();
    this.addOrRemoveMeasures(measureValidationEvt);
    if (measureValidationEvt.measureIndices && measureValidationEvt.measureIndices.length) {
      this.revalidateSystemMeasureLayouts(measureValidationEvt.measureIndices);
    } else {
      this.prepareLayout();
    }
    // const measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.SEQUENCE_CHANGE,
    //   measureValidationEvt.measureIndices,
    //   this._systemLayout
    // );
    // this.dispatchEvent(measureDisplayEvt);
  }

  handleMeasureValidate(measureValidationEvt) {
    const measureIndices = measureValidationEvt.measureIndices;
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndex = measureIndices[i];
      if (measureIndex === this._systemLayout.startMeasureIndex) {
        this._systemLayout.invalidateSystemStart();
        this._systemLayout.validateLayout();
      }
      const systemMeasureLayout = this.getSystemMeasureLayoutAt(measureIndex);
      systemMeasureLayout.invalidateMeasures();
      systemMeasureLayout.validateLayout();
    }
    // const measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.DISPLAY,
    //   measureIndices,
    //   this._systemLayout,
    //   false,
    //   measureValidationEvt.staves
    // );
    // this._systemLayout.dispatchEvent(measureDisplayEvt);
    // this.dispatchEvent(measureDisplayEvt);
    // this.dispatchEvent(
    //   new IncrementalLayoutEvent(
    //     IncrementalLayoutEvent.CONTINUE_INCREMENTAL_FLOW,
    //     measureValidationEvt.firstMeasureIndex,
    //     measureValidationEvt
    //   )
    // );
  }

  handleMeasureGeometryChange(measureValidationEvt) {
    let measureIndices = measureValidationEvt.measureIndices;
    if (measureIndices == null) {
      measureIndices = this.allMeasureIndices;
    }
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndex = measureIndices[i];
      this.getSystemMeasureLayoutAt(measureIndex);
    }
    // const measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.GEOMETRY_CHANGE,
    //   measureIndices,
    //   this._systemLayout
    // );
    // this._systemLayout.dispatchEvent(measureDisplayEvt);
    // this.dispatchEvent(measureDisplayEvt);
  }

  handleMeasureSpanChange(measureValidationEvt) {
    let measureIndices = measureValidationEvt.measureIndices;
    if (null == measureIndices) {
      measureIndices = this.allMeasureIndices;
    }
    // const measureDisplayEvt = new MeasureDisplayEvent(
    //   MeasureDisplayEvent.SPAN_CHANGE,
    //   measureIndices,
    //   this._systemLayout
    // );
    // this._systemLayout.dispatchEvent(measureDisplayEvt);
    // this.dispatchEvent(measureDisplayEvt);
  }

  updateHyphens(targetMeasureIndex = 0, staves = null) {
    this._systemLayout.updateHyphens(targetMeasureIndex, staves);
  }
}

/***/ }),

/***/ 54495:
/*!******************************************************!*\
  !*** ./src/app/note-editor/layouts/system-layout.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemLayout)
/* harmony export */ });
/* harmony import */ var _views_score_text_field__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/score-text-field */ 61474);
/* harmony import */ var _chunk_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-layout */ 45111);
/* harmony import */ var _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constraint/max-constraint */ 24056);
/* harmony import */ var _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constraint/space-constraint */ 46321);
/* harmony import */ var _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constraint/sum-constraint */ 57962);
/* harmony import */ var _measure_prefixes_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./measure-prefixes-layout */ 90307);
/* harmony import */ var _note_set_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note-set-layout */ 83944);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rest-layout */ 41910);
/* harmony import */ var _system_measure_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./system-measure-layout */ 81576);
/* harmony import */ var _system_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./system-view */ 46882);










class SystemLayout extends _chunk_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get staffLayouts() {
    return this._staffLayouts;
  }
  get systemMeasureLayouts() {
    return this._systemMeasureLayouts;
  }
  get systemMeasure() {
    return this.getSystemMeasureLayoutAt(0).systemMeasure;
  }
  get hasPageBreak() {
    return this.systemMeasureLayouts[this.systemMeasureLayouts.length - 1].hasPageBreak;
  }
  get partStaffIndices() {
    return this._partStaffIndices;
  }
  get unpaddedHeight() {
    return this._unpaddedHeight;
  }
  get score() {
    return this.getStaffLayoutAt(0)?.staff.score;
  }
  get bottomY() {
    return this.distanceY + this.height + this._bottomPadding;
  }
  get topPadding() {
    return this._topPadding;
  }
  get bottomPadding() {
    return this._bottomPadding;
  }
  get leftPadding() {
    if (this._cachedLeftPadding === this.NO_PADDING_CACHED) {
      if (this.showPartNames()) {
        let textWidth = 0;
        for (let i = 0; i < this.staffLayouts.length; i++) {
          const staffLayout = this.staffLayouts[i];
          const partLabel = this.getPartLabel(staffLayout.staff.part);
          textWidth = Math.max(textWidth, _views_score_text_field__WEBPACK_IMPORTED_MODULE_0__["default"].getTextWidth(this.context.staffMetrics, this.editorFonts, this.context.staffMetrics.staffTextFont, this.context.staffMetrics.partNameSize, false, false, false, partLabel, this.rootDiv, this.noteEditorService));
        }
        this._cachedLeftPadding = textWidth + this.context.staffMetrics.staffLabelPadding;
      } else {
        this._cachedLeftPadding = 0;
      }
    }
    return this._cachedLeftPadding;
  }
  get beatsPerBar() {
    return this.systemMeasureLayouts.map(systemMeasureLayout => {
      systemMeasureLayout.systemMeasure.beats;
    });
  }
  get notePositions() {
    const notePositions = [];
    this.staffLayouts.forEach(staffLayout => {
      staffLayout.measureLayouts.forEach(measureLayout => {
        const scorePosition = measureLayout.measure.scorePosition;
        measureLayout.notationLayouts.forEach(notationLayout => {
          if (notationLayout instanceof _note_set_layout__WEBPACK_IMPORTED_MODULE_6__["default"] || notationLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_7__["default"]) {
            const notationPosition = notationLayout.notation.position;
            notePositions.push(scorePosition + notationPosition);
          }
        });
      });
    });
    return notePositions;
  }
  get flowWidth() {
    let leftPadding = this.leftPadding;
    for (let i = 0; i < this._systemMeasureLayouts.length; i++) {
      const systemMeasureLayout = this._systemMeasureLayouts[i];
      const prefixesLayout = this.getSystemMeasurePrefixesLayoutByMeasureIndex(systemMeasureLayout.systemMeasure?.index);
      if (prefixesLayout) {
        leftPadding += prefixesLayout.totalFlowWidth;
      }
      leftPadding += systemMeasureLayout.flowWidth;
    }
    return leftPadding;
  }
  get totalWidth() {
    return this.flowWidth + this.leftMargin + this.rightMargin;
  }
  get partLabelProperty() {
    return this.startMeasureIndex === 0 ? 'name' : 'shortName';
  }
  get staffStartLayout() {
    if (this._staffLayouts.length === 0) {
      return [];
    } else {
      return this._staffLayouts[0].staffStartLayout;
    }
  }
  get startMeasureIndex() {
    return this.getStaffLayoutAt(0)?.startMeasureIndex;
  }
  get endMeasureIndex() {
    return this.getStaffLayoutAt(0)?.endMeasureIndex;
  }
  constructor(context, displayMode, editorFonts, rootDiv, noteEditorService) {
    super(context, displayMode, noteEditorService, rootDiv);
    this._staffLayouts = [];
    this._systemMeasureLayouts = [];
    this._systemMeasurePrefixesLayouts = {};
    this._partStaffIndices = [];
    this._unpaddedHeight = NaN;
    this._topPadding = NaN;
    this._bottomPadding = NaN;
    this.NO_PADDING_CACHED = -9999;
    this._cachedLeftPadding = this.NO_PADDING_CACHED;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  showPartNames() {
    return this.score?.showPartNameNextToStaff(this.startMeasureIndex);
  }
  getSystemMeasurePrefixesLayoutByMeasureIndex(measureIdx) {
    for (let i = 0; i < this._systemMeasurePrefixesLayouts.length; i++) {
      const prefixesLayout = this._systemMeasurePrefixesLayouts[i];
      if (prefixesLayout.measureIndex === measureIdx) {
        return prefixesLayout;
      }
    }
    return null;
  }
  revalidateSystemMeasurePrefixesAt(idx) {
    const systemIdx = idx - this.startMeasureIndex;
    const prefixesLayout = this._systemMeasurePrefixesLayouts[systemIdx];
    if (prefixesLayout) {
      prefixesLayout.invalidateLayouts();
      prefixesLayout.validateLayouts();
    }
  }
  getPartLabel(part) {
    return this.startMeasureIndex === 0 ? part.name : part.shortName;
  }
  destroyChildren() {
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      staffLayout.destroy();
    }
    for (let i = 0; i < this._systemMeasureLayouts.length; i++) {
      const systemMeasureLayout = this._systemMeasureLayouts[i];
      systemMeasureLayout.destroy();
    }
    for (let i = 0; i < this._systemMeasurePrefixesLayouts.length; i++) {
      const prefixLayout = this._systemMeasurePrefixesLayouts[i];
      prefixLayout.destroy();
    }
  }
  canHide() {
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      if (!staffLayout.canHide) {
        return false;
      }
    }
    return true;
  }
  getPrefixesLayout(measureIdx, prefixes) {
    const measurePrefixesLayout = new _measure_prefixes_layout__WEBPACK_IMPORTED_MODULE_5__["default"](measureIdx);
    const canHide = this.canHide();
    for (let prefixIdx = 0; prefixIdx < prefixes.length; prefixIdx++) {
      const prefixesLayout = [];
      for (let i = 0; i < this._staffLayouts.length; i++) {
        const staffLayout = this._staffLayouts[i];
        const measureLayout = staffLayout.getMeasureLayoutByIndex(measureIdx);
        if (measureLayout && (canHide || !measureLayout.measure.canHideStaff)) {
          prefixesLayout.push(staffLayout.getMeasurePrefixByIndexAt(measureIdx, prefixIdx));
        }
      }
      if (prefixesLayout.length) {
        const systemMeasureLayout = new _system_measure_layout__WEBPACK_IMPORTED_MODULE_8__["default"](this.context, this.noteEditorService, this.rootDiv, this.displayMode);
        systemMeasureLayout.setValidMeasureLayouts(prefixesLayout);
        measurePrefixesLayout.addPrefix(systemMeasureLayout);
      }
    }
    return measurePrefixesLayout;
  }
  createSystemMeasurePrefixesLayouts() {
    this._systemMeasurePrefixesLayouts = {};
    for (let measureIdx = this.startMeasureIndex; measureIdx < this.endMeasureIndex; measureIdx++) {
      const localIdx = measureIdx - this.startMeasureIndex;
      const measurePrefixesLayout = this._staffLayouts[0].getMeasurePrefixesLayoutByMeasureIndex(measureIdx);
      if (measurePrefixesLayout) {
        this._systemMeasurePrefixesLayouts[localIdx] = this.getPrefixesLayout(measureIdx, measurePrefixesLayout.prefixes);
        this._systemMeasurePrefixesLayouts[localIdx].validateLayouts();
      }
    }
  }
  setLayouts(staffLayouts, systemMeasureLayouts) {
    this.destroyChildren();
    this._staffLayouts = staffLayouts;
    // console.log('setLayouts - system layout');
    // console.log(staffLayouts);
    // console.log(staffLayouts[0].measureLayouts);
    // console.log(systemMeasureLayouts);
    this._systemMeasureLayouts = systemMeasureLayouts;
    this.createSystemMeasurePrefixesLayouts();
    this.invalidate();
  }
  insertSystemMeasureLayout(systemMeasureLayout, idx) {
    this._systemMeasureLayouts.splice(idx, 0, systemMeasureLayout);
  }
  removeSystemMeasureLayout(idx) {
    const systemMeasureLayout = this._systemMeasureLayouts[idx];
    if (systemMeasureLayout) {
      systemMeasureLayout.destroy();
      this._systemMeasureLayouts.splice(idx, 1);
    }
  }
  getStaffLayoutAt(idx) {
    return this._staffLayouts[idx];
  }
  getSystemMeasureLayoutAt(idx) {
    return this._systemMeasureLayouts[idx];
  }
  invalidateCache() {
    this._cachedLeftPadding = this.NO_PADDING_CACHED;
  }
  invalidate() {
    super.invalidate();
    this.invalidateCache();
  }
  invalidateGlobal() {
    super.invalidateGlobal();
    this.invalidateCache();
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      staffLayout.invalidateGlobal();
    }
  }
  invalidateSystemStart() {
    this.invalidate();
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      staffLayout.invalidateSystemStart();
    }
  }
  prepareLayout(options = {}) {
    this.createLayout(Object.assign(options, {
      validate: false
    }));
  }
  doValidateLayout(options = {}) {
    this.createLayout(Object.assign(options, {
      validate: true
    }));
  }
  doValidateGlobalLayout() {
    super.doValidateGlobalLayout();
    this.determineStaffPositions();
  }
  createLayout(options = {}) {
    const validate = options.validate;
    const maxConstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_2__["default"]([]);
    let part = null;
    this._partStaffIndices = [];
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      if (validate) {
        staffLayout.validateLayout({
          ignoreCautionaries: options.ignoreCautionaries
        });
      } else {
        staffLayout.prepareLayout();
      }
    }
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      maxConstraint.addConstraint(staffLayout.constraint);
      if (staffLayout.staff.part === part) {
        this._partStaffIndices[this._partStaffIndices.length - 1].push(i);
      } else {
        this._partStaffIndices.push([i]);
        part = staffLayout.staff.part;
      }
    }
    this._constraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_4__["default"]([new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_3__["default"](this.leftPadding), maxConstraint]);
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      staffLayout.createHyphens();
    }
    const firstStaffLayout = this.getStaffLayoutAt(0);
    const staffMetrics = this.context.staffMetrics;
    if (staffMetrics.ignoreSystemMargins) {
      this.leftMargin = 0;
      this.rightMargin = 0;
    } else {
      if (firstStaffLayout) {
        this.leftMargin = firstStaffLayout.getMeasureLayoutAt(0).measure.systemMeasure.effectiveLeftMargin;
        this.rightMargin = firstStaffLayout.getMeasureLayoutAt(firstStaffLayout.length - 1).measure.systemMeasure.rightMargin;
      }
    }
  }
  determineStaffPositions() {
    let distanceY = 0;
    this._height = 0;
    let staffLayout;
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < this._staffLayouts.length; i++) {
      staffLayout = this._staffLayouts[i];
      staffLayout.validateGlobalLayout();
    }
    const staffYs = {};
    for (let i = 0; i < this._staffLayouts.length; i++) {
      staffLayout = this._staffLayouts[i];
      if (i === 0) {
        this._topPadding = staffLayout.topPadding;
        distanceY += this._topPadding;
      }
      this._height += staffLayout.height;
      distanceY += staffLayout.height;
      staffLayout.distanceY = distanceY;
      staffYs[i] = distanceY;
      if (i !== this._staffLayouts.length - 1) {
        const spacing = Math.max(staffMetrics.staffSpacing, staffLayout.bottomPadding + this._staffLayouts[i + 1].topPadding + staffMetrics.minVerticalGap);
        this._height += spacing;
        distanceY += spacing;
      }
    }
    this._unpaddedHeight = this._height;
    if (staffLayout) {
      this._bottomPadding = staffLayout.bottomPadding;
    }
    this._height += this.getStaffLayoutAt(0)?.topPadding;
    // this.dispatchStaffPositionEvent(staffYs);
    // TODO
  }
  // dispatchStaffPositionEvent(staffYs) {
  //   var overlayUpdateEvt = new OverlayUpdateEvent(
  //     OverlayUpdateEvent.STAFF_SPACING
  //   );
  //   overlayUpdateEvt.staffYs = staffYs;
  //   overlayUpdateEvt.systemHeight = this._height;
  //   overlayUpdateEvt.topPadding = this._topPadding;
  //   this.dispatchEvent(overlayUpdateEvt);
  // }
  updateHyphens(measureIdx = 0, staves = null) {
    for (let i = 0; i < this._staffLayouts.length; i++) {
      const staffLayout = this._staffLayouts[i];
      if (!staves || staves.indexOf(staffLayout.staff) !== -1) {
        staffLayout.updateHyphens(measureIdx);
      }
    }
  }
  createDisplayObject(context) {
    console.log(context);
    return new _system_view__WEBPACK_IMPORTED_MODULE_9__["default"](context, this, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
}

/***/ }),

/***/ 81576:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/system-measure-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemMeasureLayout)
/* harmony export */ });
/* harmony import */ var _models_layout_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/layout-position */ 48903);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _models_span_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/span-notation */ 43586);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _constraint_layout_weights__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constraint/layout-weights */ 8370);
/* harmony import */ var _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./constraint/max-constraint */ 24056);
/* harmony import */ var _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./constraint/space-constraint */ 46321);
/* harmony import */ var _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./constraint/sum-constraint */ 57962);
/* harmony import */ var _constraint_time_constraint__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./constraint/time-constraint */ 30815);









// import StaffStartLayout from './staff-start-layout';
class SystemMeasureLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get index() {
    if (this._measureLayouts && this.measureLayouts.length > 0) {
      return this._measureLayouts[0].measure.index;
    } else {
      return -1;
    }
  }
  get measureLayouts() {
    return this._measureLayouts;
  }
  set measureLayouts(t) {
    this.removeListeners();
    this._measureLayouts = t;
    if (this._measureLayouts) {
      for (let i = 0; i < this._measureLayouts.length; i++) {
        const measureLayout = this._measureLayouts[i];
        measureLayout.systemMeasureLayout = this;
        const measure = measureLayout.measure;
        if (measure) {
          //   measure.addEventListener(
          //     ModelEvent.MODEL_CHANGE,
          //     RumtimeHelper.bindMethod(this, this.handleMeasureChange),
          //     false
          //   );
          //   measure.addEventListener(
          //     ModelUpdateEvent.MODEL_UPDATE,
          //     RumtimeHelper.bindMethod(
          //       this,
          //       this.handleMeasureUpdate
          //     ),
          //     false
          //   )
        }
        measureLayout.invalidate();
      }
    }
    this.invalidate();
  }
  get systemMeasure() {
    if (this._measureLayouts && this._measureLayouts.length > 0) {
      return this._measureLayouts[0].measure.systemMeasure;
    } else {
      return null;
    }
  }
  get breakType() {
    if (this._forceBreakType) {
      if (this._forceBreakType === _models_measure__WEBPACK_IMPORTED_MODULE_1__["default"].FORCE_NO_BREAK) {
        return null;
      } else {
        return this._forceBreakType;
      }
    } else {
      return this.context.score.getBreak(this.index);
    }
  }
  get hasPageBreak() {
    return this.breakType === _models_measure__WEBPACK_IMPORTED_MODULE_1__["default"].PAGE_BREAK_TYPE;
  }
  get singlePart() {
    if (!this._measureLayouts) return false;
    if (this._measureLayouts.length <= 1) return true;
    const part = this._measureLayouts[0].measure.part;
    for (let i = 0; i < this._measureLayouts.length; i++) {
      const measureLayout = this._measureLayouts[i];
      if (measureLayout.measure.part !== part) {
        return false;
      }
    }
    return true;
  }
  get flowWidth() {
    this.validateLayout();
    return this._flowWidth;
  }
  constructor(context, noteEditorService, rootDiv, displayMode = null) {
    super(context, noteEditorService, rootDiv);
    this._flowWidth = NaN;
    this._measureLayouts = [];
    this._layoutPositions = null;
    this._forceBreakType = null;
    this._displayMode = null;
    this._displayMode = displayMode;
  }
  setValidMeasureLayouts(measureLayouts) {
    this.removeListeners();
    this._measureLayouts = measureLayouts;
    if (this._measureLayouts) {
      for (let i = 0; i < this._measureLayouts.length; i++) {
        const measureLayout = this._measureLayouts[i];
        measureLayout.systemMeasureLayout = this;
        // measureLayout.measure.addEventListener(
        //   ModelEvent.MODEL_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleMeasureChange),
        //   false
        // );
        // measureLayout.measure.addEventListener(
        //   ModelUpdateEvent.MODEL_UPDATE,
        //   RumtimeHelper.bindMethod(this, this.handleMeasureUpdate),
        //   false
        // );
      }
    }
  }
  // hasStaffStartLayouts() {
  //   if (this._measureLayouts) {
  //     for (let i = 0; i < this._measureLayouts.length; i++) {
  //       const measureLayout: MeasureLayout = this._measureLayouts[i];
  //       if (measureLayout instanceof StaffStartLayout) {
  //         return true;
  //       }
  //     }
  //   }
  //   return false;
  // }
  removeListeners() {
    if (this._measureLayouts) {
      for (let i = 0; i < this._measureLayouts.length; i++) {
        const measureLayout = this._measureLayouts[i];
        // measure.removeEventListener(
        //   ModelEvent.MODEL_CHANGE,
        //   RumtimeHelper.bindMethod(this, this.handleMeasureChange)
        // );
        // measure.removeEventListener(
        //   ModelUpdateEvent.MODEL_UPDATE,
        //   RumtimeHelper.bindMethod(this, this.handleMeasureUpdate)
        // );
      }
    }
  }

  handleMeasureChange(t) {
    this.invalidate();
  }
  handleMeasureUpdate(evt) {
    if (!(evt.source instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_2__["default"])) {
      this.invalidate();
    }
  }
  invalidateMeasures() {
    if (this._measureLayouts) {
      for (let i = 0; i < this._measureLayouts.length; i++) {
        const measureLayout = this._measureLayouts[i];
        measureLayout.invalidate();
      }
    }
  }
  intersectingStaves(startIdx, endIdx) {
    if (!this._layoutPositions) return false;
    const staves = [];
    let layoutPosition;
    for (let position = this._layoutPositions[startIdx].position; startIdx < this._layoutPositions.length && !((layoutPosition = this._layoutPositions[startIdx]).position > position);) {
      if (parseFloat(layoutPosition.voiceNumber) >= 0) {
        staves[layoutPosition.staffIndex] = 1;
      }
      startIdx++;
    }
    for (let position = this._layoutPositions[endIdx].position; endIdx < this._layoutPositions.length && !((layoutPosition = this._layoutPositions[endIdx]).position > position);) {
      if (parseFloat(layoutPosition.voiceNumber) >= 0 && staves[layoutPosition.staffIndex] == 1) {
        return true;
      }
      endIdx++;
    }
    return false;
  }
  doValidateLayout() {
    if (this._measureLayouts) {
      const staffMetrics = this.context.staffMetrics;
      const layoutPositions = [];
      this._layoutPositions = layoutPositions;
      const maxConstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_5__["default"]([]);
      for (let i = 0; i < this._measureLayouts.length; i++) {
        const measureLayout = this._measureLayouts[i];
        measureLayout.validateLayout();
        for (let j = 0; j < measureLayout.notationLayouts.length; j++) {
          const notationLayout = measureLayout.notationLayouts[j];
          if (notationLayout.notation.metrical) {
            layoutPositions[layoutPositions.length] = new _models_layout_position__WEBPACK_IMPORTED_MODULE_0__["default"](notationLayout);
          }
        }
        maxConstraint.addConstraint(measureLayout.leftConstraint);
        measureLayout.constraint.addConstraint(maxConstraint);
        if (measureLayout.measure.staffHidingChange && this.breakType == null) {
          this._forceBreakType = _models_measure__WEBPACK_IMPORTED_MODULE_1__["default"].SYSTEM_BREAK_TYPE;
        }
      }
      layoutPositions.sort(this.compareLayoutPositions.bind(this));
      let maxconstraint,
        duration,
        nextIdx = 0,
        spaceConstraint = new _constraint_space_constraint__WEBPACK_IMPORTED_MODULE_6__["default"](0),
        scale = this.systemMeasure ? this.systemMeasure.layoutWeight * Math.exp(Math.LN2 * this.context.score.effectiveStaffMetrics.layoutSpacing / 10) : 1,
        maxDuration = 1000000;
      for (let idx = 0; idx < layoutPositions.length;) {
        const layoutPos = layoutPositions[idx];
        idx++;
        maxconstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_5__["default"]([layoutPos.leftConstraint, spaceConstraint]);
        layoutPos.constraint.addConstraint(maxconstraint);
        duration = layoutPos.duration > 0 ? layoutPos.duration : maxDuration;
        layoutPos.duration = 0;
        nextIdx = idx;
        while (nextIdx < layoutPositions.length) {
          const nextLayoutPos = layoutPositions[nextIdx];
          const gap = nextLayoutPos.position - layoutPos.position;
          if (gap > 0) {
            if (maxconstraint) {
              let durationWidth = staffMetrics.getDurationWidth(gap);
              if (duration < maxDuration && gap < duration && !this.intersectingStaves(idx - 1, nextIdx)) {
                const gapWidth = staffMetrics.getDurationWidth(duration) * gap / duration;
                durationWidth = Math.min(durationWidth, gapWidth);
              }
              const timeConstraint = new _constraint_time_constraint__WEBPACK_IMPORTED_MODULE_8__["default"](durationWidth, scale);
              spaceConstraint = new _constraint_sum_constraint__WEBPACK_IMPORTED_MODULE_7__["default"]([maxconstraint, timeConstraint]);
              maxconstraint = null;
            }
            idx = nextIdx;
            break;
          }
          nextIdx++;
          if (maxconstraint) {
            maxconstraint.addConstraint(nextLayoutPos.leftConstraint);
          } else {
            maxconstraint = new _constraint_max_constraint__WEBPACK_IMPORTED_MODULE_5__["default"]([nextLayoutPos.leftConstraint]);
          }
          nextLayoutPos.constraint.addConstraint(maxconstraint);
          const nextDuration = nextLayoutPos.duration;
          nextLayoutPos.duration = 0;
          if (nextDuration > 0 && nextDuration < duration) {
            duration = nextDuration;
          }
        }
      }
      this._constraint = maxConstraint;
      if (this.context.score.isStripMode) {
        this._constraint.generateLayoutVector(_constraint_layout_weights__WEBPACK_IMPORTED_MODULE_4__["default"].STANDARD_WEIGHTS);
        this._flowWidth = 0;
      } else {
        this._constraint.generateLayoutVector(_constraint_layout_weights__WEBPACK_IMPORTED_MODULE_4__["default"].FLOW_WEIGHTS);
        this._flowWidth = this.x;
      }
      const firstMeasureLayout = this._measureLayouts[0];
      if (firstMeasureLayout && firstMeasureLayout.isMultiRest) {
        const isFirstMeasureOfMultiRest = firstMeasureLayout.isFirstMeasureOfMultiRest;
        const isBodyOfMultiRestButNotLastOne = firstMeasureLayout.isBodyOfMultiRestButNotLastOne;
        const isLastMeasureOfMultiRest = firstMeasureLayout.isLastMeasureOfMultiRest;
        if (isFirstMeasureOfMultiRest || isBodyOfMultiRestButNotLastOne) {
          this._forceBreakType = _models_measure__WEBPACK_IMPORTED_MODULE_1__["default"].FORCE_NO_BREAK;
        }
        if (isBodyOfMultiRestButNotLastOne || isLastMeasureOfMultiRest) {
          this._flowWidth = 0;
        }
      }
    }
  }
  getMeasurePositionX(position) {
    let measurePosition = null;
    let nextLayoutPosition = null;
    if (this._layoutPositions == null) {
      console.log('This condition occurs in the chromaticTransposition test. You should not see this live.');
      return 0;
    }
    for (let i = 0; i < this._layoutPositions.length; i++) {
      const layoutPosition = this._layoutPositions[i];
      if (layoutPosition.includeInPositioning) {
        if (layoutPosition.position > position) {
          nextLayoutPosition = layoutPosition;
          break;
        }
      }
      measurePosition = layoutPosition;
    }
    if (measurePosition == null) {
      return 0;
    }
    if (nextLayoutPosition) {
      const measurePositionX = measurePosition.x;
      const nextPositionX = nextLayoutPosition.x;
      const measureposition = measurePosition.position;
      return measurePositionX + (nextPositionX - measurePositionX) * (position - measureposition) / (nextLayoutPosition.position - measureposition);
    }
    return measurePosition.x;
  }
  getMeasureXPosition(measurePosition, duration, ignore) {
    let prevPosition = null,
      nextPosition = null;
    for (let i = 0; i < this._layoutPositions.length; i++) {
      const layoutPosition = this._layoutPositions[i];
      if (layoutPosition.barline && layoutPosition.position > 0 && nextPosition == null) {
        nextPosition = layoutPosition;
      }
      if (!(!layoutPosition.includeInPositioning || ignore && layoutPosition.barline || ignore && this.systemMeasure && layoutPosition.position === this.systemMeasure.duration)) {
        if (layoutPosition.x > measurePosition) {
          nextPosition = layoutPosition;
          break;
        }
        prevPosition = layoutPosition;
      }
    }
    if (prevPosition == null) {
      return 0;
    }
    if (nextPosition) {
      let prevX = prevPosition.x;
      const nextX = nextPosition.x;
      let pPPosition = prevPosition.position;
      let nPPosition = nextPosition.position;
      if (duration > 0) {
        const positionDistance = nextPosition.position - prevPosition.position;
        const beatDuration = this.systemMeasure ? Math.min(this.systemMeasure.timeSignature.beatDuration, duration) : duration;
        if (positionDistance > beatDuration) {
          const p = positionDistance * (measurePosition - prevX) / (nextX - prevX);
          const m = Math.floor(p / beatDuration);
          pPPosition += m * beatDuration;
          if (ignore && this.systemMeasure && pPPosition === this.systemMeasure.duration) {
            pPPosition = Math.max(0, pPPosition - beatDuration);
          }
          prevX += m * beatDuration * (nextX - prevX) / positionDistance;
        }
      }
      return Math.abs(measurePosition - prevX) < Math.abs(measurePosition - nextX) || ignore && nextPosition.barline ? pPPosition : nPPosition;
    }
    return prevPosition.position;
  }
  getNotationPositions() {
    const notationPositions = [];
    let prevPositionX = null;
    for (let i = 0; i < this._layoutPositions.length; i++) {
      const layoutPosition = this._layoutPositions[i];
      if (layoutPosition.includeInPositioning && layoutPosition.x !== prevPositionX) {
        notationPositions.push({
          x: layoutPosition.x,
          position: layoutPosition.position
        });
      }
      prevPositionX = layoutPosition.x;
    }
    return notationPositions;
  }
  compareLayoutPositions(position1, position2) {
    const positionDiff = position1.position - position2.position;
    if (positionDiff !== 0) {
      if (positionDiff < 0) {
        return -1;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  }
  hasNonTabClefs() {
    return this._measureLayouts.some(measureLayout => !measureLayout.measure.clef.isTab());
  }
}

/***/ }),

/***/ 32047:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/system-span.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemSpan)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _utils_ststem_span__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/ststem-span */ 8227);



class SystemSpan {
  get startBreak() {
    return this._startBreak;
  }
  get endBreak() {
    return this._endBreak;
  }
  get notation() {
    return this._sn;
  }
  get staffLayout() {
    return this._staffLayout;
  }
  get staffMetrics() {
    return this._staffLayout.context.staffMetrics;
  }
  get startBreakPadding() {
    return -this.staffMetrics.barStartPaddingLeft;
  }
  get endBreakPadding() {
    return 0;
  }
  constructor(staffLayout, sn, editorFonts, rootDiv, noteEditorService) {
    this._staffLayout = null;
    this._sn = null;
    this._startPosition = null;
    this._startBreak = false;
    this._endPosition = null;
    this._endBreak = false;
    this._staffLayout = staffLayout;
    this._sn = sn;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this.noteEditorService = noteEditorService;
    this.initializeSpan();
  }
  initializeSpan() {
    (0,_utils_ststem_span__WEBPACK_IMPORTED_MODULE_2__.ensureSpanDefaulted)(this._sn, this._staffLayout.context, this.editorFonts, this.rootDiv, this.noteEditorService);
    this._startPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this._sn.measure.index, this._sn.position);
    this._startBreak = this._startPosition.measureIndex < this._staffLayout.startMeasureIndex;
    if (this._startBreak) {
      this._startPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this._staffLayout.startMeasureIndex, 0);
    }
    this._endPosition = this._sn.endPosition;
    this._endBreak = this._endPosition.measureIndex >= this._staffLayout.endMeasureIndex;
    if (this._endBreak) {
      this._endPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this._staffLayout.endMeasureIndex - 1, this._staffLayout.staff.getMeasureAt(this._staffLayout.endMeasureIndex - 1).duration);
    }
  }
  static spanStartPosOptions(span) {
    const opts = {
      verticalAlign: 'bottom'
    };
    if (parseFloat(span.voiceNumber) >= 0) {
      opts.horizontalAlign = span.includeGrace ? 'grace' : 'normal';
      opts.voiceNumber = span.voiceNumber;
    }
    return opts;
  }
  startPoint(view) {
    let dx,
      dy,
      position = this._startPosition.position;
    if (this.startBreak) {
      dx = this.startBreakPadding;
      const rangeDuration = this._staffLayout.staff.score.rangeDuration(this._sn.measurePosition, this._startPosition);
      dy = this._sn.dy + this._sn.ascent * rangeDuration / this._sn.span;
    } else {
      dx = this._sn.dx;
      dy = this._sn.dy;
      if (position === 0 && this._sn.canStartAtBarline) {
        position = -1;
        dx = 0;
      }
    }
    const localPoint = view.getLocalPointInMeasure(this._startPosition.measureIndex, this._staffLayout.staff, position, SystemSpan.spanStartPosOptions(this._sn));
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](localPoint.x + dx * this.staffMetrics.lineSpacing, localPoint.y - dy * this.staffMetrics.lineSpacing);
  }
  endPoint(view) {
    let dx, dy, horizontalAlign;
    if (this.endBreak) {
      dx = this.endBreakPadding;
      const rangeDuration = this._staffLayout.staff.score.rangeDuration(this._sn.measurePosition, this._endPosition);
      dy = this._sn.dy + this._sn.ascent * rangeDuration / this._sn.span;
      horizontalAlign = 'normal';
    } else {
      dx = this._sn.endX;
      dy = this._sn.dy + this._sn.ascent;
      horizontalAlign = 'noBarline';
    }
    const endLocalPoint = view.getLocalPointInMeasure(this._endPosition.measureIndex, this._staffLayout.staff, this._endPosition.position, {
      verticalAlign: 'bottom',
      horizontalAlign
    });
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](endLocalPoint.x + dx * this.staffMetrics.lineSpacing, endLocalPoint.y - dy * this.staffMetrics.lineSpacing);
  }
  createSystemDisplayObject(view) {
    return this.createSystemSpanView(view.context, this.startPoint(view), this.endPoint(view));
  }
  createSystemSpanView(context, startPoint, endPoint) {
    throw new Error('createSystemSpanView() not overridden by subclass');
  }
}

/***/ }),

/***/ 33720:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/layouts/system-symbol-layout.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemSymbolLayout)
/* harmony export */ });
/* harmony import */ var _views_notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/notation-view */ 91755);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notation-layout */ 18810);



class SystemSymbolLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  static get CODA_TYPE() {
    return SystemSymbolLayout.coda_type;
  }
  static set CODA_TYPE(t) {
    SystemSymbolLayout.coda_type = t;
  }
  static get SEGNO_TYPE() {
    return SystemSymbolLayout.segno_type;
  }
  static set SEGNO_TYPE(t) {
    SystemSymbolLayout.segno_type = t;
  }
  static get BREATH_TYPE() {
    return SystemSymbolLayout.breath_type;
  }
  static set BREATH_TYPE(t) {
    SystemSymbolLayout.breath_type = t;
  }
  static get CAESURA_TYPE() {
    return SystemSymbolLayout.caesura_type;
  }
  static set CAESURA_TYPE(t) {
    SystemSymbolLayout.caesura_type = t;
  }
  get symbol() {
    return this.notation;
  }
  constructor(context, measureLayout, notation, symbolType, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this._symbolType = null;
    this._symbolType = symbolType;
    this.rootDiv = rootDiv;
  }
  doValidateLayout() {
    this.initializeLayout();
    super.doValidateLayout();
  }
  initializeLayout() {
    const staffMetrics = this.context.staffMetrics;
    const symbolGlyph = this.foundry.getSymbol(this._symbolType);
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_1__["default"](this.context, symbolGlyph);
    const staff = this.measureLayout.measure.staff;
    glyphLayout.distanceX = this.symbol.dx;
    glyphLayout.distanceY = staff.type.numLines * staff.type.lineSpacing + this.symbol.dy + staffMetrics.symbolOffset;
    glyphLayout.scale = staffMetrics.symbolScale;
    glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_1__["default"].ANCHOR_CENTER;
    this.addGlyphLayout(glyphLayout);
  }
  createDisplayObject(context) {
    this.doValidateGlobalLayout();
    return new _views_notation_view__WEBPACK_IMPORTED_MODULE_0__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}
SystemSymbolLayout.coda_type = 'coda';
SystemSymbolLayout.segno_type = 'segno';
SystemSymbolLayout.breath_type = 'breath';
SystemSymbolLayout.caesura_type = 'caesura';

/***/ }),

/***/ 46882:
/*!****************************************************!*\
  !*** ./src/app/note-editor/layouts/system-view.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_part_label__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/part-label */ 83765);
/* harmony import */ var _models_staff_position__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/staff-position */ 42605);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _views_chunk_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../views/chunk-view */ 17002);
/* harmony import */ var _views_score_text_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../views/score-text-field */ 61474);
/* harmony import */ var _views_staff_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../views/staff-view */ 72908);
/* harmony import */ var _views_staff_handle__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../views/staff-handle */ 1625);
/* harmony import */ var _views_view_context__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../views/view-context */ 65532);
/* harmony import */ var _views_measure_handle__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../views/measure-handle */ 57852);
/* harmony import */ var _views_measure_view_dimensions__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../views/measure-view-dimensions */ 3537);














class SystemView extends _views_chunk_view__WEBPACK_IMPORTED_MODULE_7__["default"] {
  static get _lastRolled() {
    return SystemView.lastRolled;
  }
  static set _lastRolled(t) {
    SystemView.lastRolled = t;
  }
  static get ONE() {
    return 'one';
  }
  static get UP_TO_SCROLL_POS() {
    return 'upToScrollPos';
  }
  static get EVERYTHING() {
    return 'everything';
  }
  static get RECALCULATE_AVG_MEASURE_WIDTH() {
    return 40;
  }
  get backdropSprite() {
    return this._backdropSprite;
  }
  get layout() {
    return this._layout;
  }
  get systemHeight() {
    return this.toViewUnits(this._layout.height);
  }
  get systemHeightWithBottomPadding() {
    return this.systemHeight + this.toViewUnits(this._layout.bottomPadding);
  }
  get staffViews() {
    return this._staffViews;
  }
  get numStaffViews() {
    return this._staffViews.length;
  }
  get numMeasureViews() {
    return this._staffViews[0].numMeasureViews;
  }
  get numMeasures() {
    return this.context.document.score.numMeasures;
  }
  get firstStaffHandle() {
    return this._staffHandles[0];
  }
  get lastMeasureHandle() {
    return this._measureHandles[this._measureHandles.length - 1];
  }
  get lastDrawnMeasure() {
    return this._staffViews[this._staffViews.length - 1].lastDrawnMeasure;
  }
  get measureHandleY() {
    const t = Math.max(1, 5 / this.context.layoutContext.staffMetrics.lineSpacing);
    return this.toViewUnits(this._layout.topPadding) - this.toViewUnits(this.staffMetrics.measureHandlePadding) * t - this.context.info.measureHandleHeight;
  }
  get isMoreFlowNeeded() {
    const documentView = this.context.documentView;
    const firstStaffView = this.getStaffViewAt(0);
    const numMeasureViews = firstStaffView.numMeasureViews;
    const lastMeasureView = firstStaffView.getMeasureViewAt(numMeasureViews - 1);
    const displayScale = this.context.documentView.viewInfo.displayScale;
    const visibleRight = (documentView.viewportWidth + documentView.horizontalScrollPosition) / displayScale;
    return numMeasureViews !== this.numMeasures && (lastMeasureView == null || lastMeasureView.x <= visibleRight);
  }
  get arrangeCurrentMeasuresWidth() {
    const numMeasureViews = this.getStaffViewAt(0).numMeasureViews;
    const lastMeasureView = this.getStaffViewAt(0).getMeasureViewAt(numMeasureViews - 1);
    if (lastMeasureView) {
      if (this.context.cachedMeasureWidth === 0 || numMeasureViews - this.context.cachedMeasureWidthForTheLastTime > SystemView.RECALCULATE_AVG_MEASURE_WIDTH) {
        this.context.cachedMeasureWidth = (lastMeasureView.x + lastMeasureView.width) / numMeasureViews;
        this.context.cachedMeasureWidthForTheLastTime = numMeasureViews;
      }
      return this.context.cachedMeasureWidth;
    } else {
      return 0;
    }
  }
  get endSpritePosition() {
    let x;
    const firstStaffView = this.getStaffViewAt(0);
    const numMeasureViews = firstStaffView.numMeasureViews;
    const lastMeasureView = firstStaffView.getMeasureViewAt(numMeasureViews - 1);
    if (this.isIncrementalFlowComplete) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](lastMeasureView.x + lastMeasureView.width);
    } else {
      if (numMeasureViews > 0) {
        x = this.numMeasures / numMeasureViews * lastMeasureView.x;
      }
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](x, 0);
    }
  }
  constructor(context, layout, editorFonts, rootDiv, noteEditorService) {
    super(context, layout, noteEditorService, rootDiv);
    this._layout = null;
    this._staffViews = [];
    this._spanViews = [];
    this._measureHandles = [];
    this._staffHandles = [];
    this._backdropSprite = null;
    this._partLabels = [];
    this._fullHeightViews = [];
    this._handleAlpha = 0;
    this._rollEvent = null;
    this.HANDLE_ANIMATION_TIME_CONSTANT = 3;
    this.MAX_MEASURES_TO_LOAD = 50;
    this.isIncrementalFlowComplete = false;
    this._layout = layout;
    console.log(this._layout);
    console.log(this._layout._measureLayouts);
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    // this._layout.addEventListener(
    //   MeasureDisplayEvent.DISPLAY,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay),
    //   false,
    //   0,
    //   true
    // );
    // this._layout.addEventListener(
    //   MeasureDisplayEvent.GEOMETRY_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureGeometryChange),
    //   false,
    //   0,
    //   true
    // );
    // this._layout.addEventListener(
    //   MeasureDisplayEvent.SPAN_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureSpanChange),
    //   false,
    //   0,
    //   true
    // );
    // this._layout.addEventListener(
    //   MeasureDisplayEvent.UPDATE_MEASURE_HANDLE_INDEX,
    //   RumtimeHelper.bindMethod(this, this.handleUpdateMeasureHandleIndex),
    //   false,
    //   0,
    //   true
    // );
    this.initializeView();
    if (!context.info.printView && !context.info.testView) {
      if (_views_view_context__WEBPACK_IMPORTED_MODULE_11__["default"].useRolloverEvents) {
        // todo
      } else {
        this._svg.addEventListener('click', this.handleClickAsRoll.bind(this));
      }
    }
    if (this.systemStatusChangeSub$) {
      this.systemStatusChangeSub$.unsubscribe();
    }
    if (!context.info.printView) {
      this.systemStatusChangeSub$ = this.noteEditorService.onSystemStatusChange.subscribe(evt => {
        this.handleStatusChange(evt);
      });
      //   this.context.document.score.systemStaff.addEventListener(
      //     NotationEvent.SYSTEM_STATUS_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleStatusChange),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.document.score.systemStaff.addEventListener(
      //     NotationEvent.FOCUS_MEASURE_NUMBER,
      //     RumtimeHelper.bindMethod(this, this.handleFocusMeasureNumber),
      //     false,
      //     0,
      //     true
      //   );
    }
  }

  removeListeners() {
    // todo
  }
  getStaffViewAt(idx) {
    return this._staffViews[idx];
  }
  measureViewWidthAt(idx) {
    return this.getStaffViewAt(0).measureViewWidthAt(idx);
  }
  hideMeasure(idx) {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.hideMeasure(idx);
    }
  }
  showHideMeasure(idx) {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.showHiddenMeasure(idx);
    }
  }
  getStaffView(staff) {
    let normalStaff;
    if (staff.isSystemStaff) {
      normalStaff = this._layout.getStaffLayoutAt(0).staff;
    } else {
      normalStaff = staff;
    }
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      if (staffView.layout.staff === normalStaff) {
        return staffView;
      }
    }
    return null;
  }
  getLocalPointInMeasure(measureIdx, staff, mPosition, posOpts) {
    let verTop = true;
    let horGrace = false;
    let voiceNumber = -1;
    if (posOpts) {
      verTop = 'top' === posOpts.verticalAlign;
      horGrace = 'grace' === posOpts.horizontalAlign;
      voiceNumber = 'voiceNumber' in posOpts ? posOpts.voiceNumber : -1;
    }
    if (measureIdx >= this._layout.startMeasureIndex && measureIdx < this._layout.endMeasureIndex) {
      let measureView;
      const staffView = staff != null ? this.getStaffView(staff) : this.getStaffViewAt(0);
      if (staffView) {
        measureView = staffView.getMeasureViewAt(measureIdx - this._layout.startMeasureIndex);
        while (measureView == null) {
          this.flowMeasures(1);
          this.arrangeMeasureHandles();
          measureView = staffView.getMeasureViewAt(measureIdx - this._layout.startMeasureIndex);
        }
        const measurePosition = mPosition < 0 ? 0 : measureView.layout.getMeasurePositionX(mPosition, horGrace, voiceNumber);
        let x = staffView.x + measureView.x + this.toViewUnits(measurePosition);
        let y;
        if (staff == null) {
          if (verTop) {
            y = staffView.y - this.toViewUnits(staffView.layout.height + this.staffMetrics.measureHandlePadding);
          } else {
            y = this.systemHeightWithBottomPadding;
          }
        } else {
          if (verTop) {
            y = staffView.y - this.toViewUnits(staffView.layout.height);
          } else {
            y = staffView.y;
          }
        }
        return new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](x, y);
      } else {
        return null;
      }
    }
  }
  getPointInMeasure(measureIdx, staff, measurePosition, posOpts = null) {
    let localPoint = this.getLocalPointInMeasure(measureIdx, staff, measurePosition, posOpts);
    if (localPoint) {
      localPoint = this.localToGlobal(localPoint);
    }
    return localPoint;
  }
  getLocalMeasureStart(measureIdx) {
    if (measureIdx >= this._layout.startMeasureIndex && measureIdx <= this._layout.endMeasureIndex) {
      const endIdx = Math.min(measureIdx, this._layout.endMeasureIndex - 1);
      const firstStaffView = this.getStaffViewAt(0);
      const measureView = firstStaffView.getMeasureViewAt(endIdx - this._layout.startMeasureIndex);
      if (measureView == null) {
        return null;
      }
      let x = firstStaffView.x + measureView.x;
      const y = firstStaffView.y - this.toViewUnits(this._layout.bottomPadding);
      if (measureIdx === this._layout.endMeasureIndex) {
        x += measureView.measureWidth;
      }
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](x, y);
    }
    return null;
  }
  getPositionUnderPoint(context, point, quantum, staff = null, positioningOptions = null) {
    let measureView,
      grace = false,
      noBarline = false,
      voiceNumber = -1,
      measurePosition = null;
    if (positioningOptions) {
      grace = positioningOptions.horizontalAlign === 'grace';
      noBarline = positioningOptions.horizontalAlign === 'noBarline';
      if ('voiceNumber' in positioningOptions) {
        voiceNumber = positioningOptions.voiceNumber;
      } else {
        voiceNumber = -1;
      }
      measurePosition = positioningOptions.measurePosition;
    }
    let staffView;
    if (staff) {
      staffView = this.getStaffView(staff);
    } else {
      staffView = this.getStaffViewAt(0);
    }
    if (measurePosition) {
      measureView = staffView.getMeasureViewAt(measurePosition.measureIndex - this._layout.endMeasureIndex - 1);
    } else {
      let startMeasureIndex = this._layout.startMeasureIndex;
      let endMeasureIndex = this._layout.endMeasureIndex;
      if (staffView == null) {
        throw Error('staffView should not be null');
      }
      const pointLocal = staffView.globalToLocal(point);
      while (startMeasureIndex <= endMeasureIndex) {
        const centerMeasureIndex = Math.floor((startMeasureIndex + endMeasureIndex) / 2); // numberToInt 0 | x
        measureView = staffView.getMeasureViewAt(centerMeasureIndex - this._layout.startMeasureIndex);
        let centerMeasureViewX;
        if (measureView) {
          centerMeasureViewX = measureView.x;
        } else {
          centerMeasureViewX = NaN;
        }
        if (isNaN(centerMeasureViewX) || pointLocal.x < centerMeasureViewX) {
          endMeasureIndex = centerMeasureIndex - 1;
        } else {
          startMeasureIndex = centerMeasureIndex + 1;
        }
      }
      measureView = staffView.getMeasureViewAt(endMeasureIndex - this._layout.startMeasureIndex);
    }
    if (measureView == null) {
      return null;
    }
    measurePosition = measureView.globalToLocal(point).x / context.layoutContext.staffMetrics.lineSpacing;
    const measureLayout = measureView.layout;
    if (!measureLayout.systemMeasureLayout) {
      return null;
    }
    let measureposition = null;
    if (measurePosition) {
      measureposition = measurePosition.position;
    } else {
      measureposition = measureLayout.getMeasureXPosition(measurePosition, quantum, grace, noBarline, voiceNumber);
    }
    const dx = measurePosition - measureLayout.getMeasurePositionX(measureposition, grace, voiceNumber);
    const localPoint = this.globalToLocal(point);
    if (staff == null) {
      for (let i = 0; i < this._layout.staffLayouts.length; i++) {
        if (i === this._layout.staffLayouts.length - 1 || localPoint.y <= this.getStaffViewAt(i).y + this.toViewUnits(this.staffMetrics.staffSpacing)) {
          staff = this.getStaffViewAt(i).layout.staff;
          break;
        }
      }
    }
    if (null == staff) {
      throw Error('staff should not be null');
    }
    let dy = 0;
    staffView = this.getStaffView(staff);
    if (staffView) {
      dy = (staffView.y - localPoint.y) / this.staffMetrics.lineSpacing;
    }
    return new _models_staff_position__WEBPACK_IMPORTED_MODULE_5__["default"](staff.index, measureLayout.measure.index, measureposition, dx, dy);
  }
  initializeView() {
    this._spanViews = [];
    super.initializeView();
  }
  updateLabelsAndBrackets(startMeasureIdx = 0) {
    const staffStartViews = this.getStaffViewAt(0)?.staffStartViews || [];
    for (let i = 0; i < staffStartViews.length; i++) {
      const staffStartView = staffStartViews[i];
      if (staffStartView.measure.index >= startMeasureIdx) {
        for (let j = 0; j < this._layout.partStaffIndices.length; j++) {
          const partStaffIndice = this._layout.partStaffIndices[j] || [];
          const firstIndice = partStaffIndice[0];
          let lastIndice = partStaffIndice[partStaffIndice.length - 1];
          const staffLayout = this._layout.getStaffLayoutAt(firstIndice);
          const part = staffLayout.staff.part;
          const score = staffLayout.staff.score;
          if (part.hasPedal && part.staves.length > 2) {
            lastIndice--;
          }
          if (i === 0 && score.showPartNameNextToStaff(this._layout.startMeasureIndex)) {
            const textFieldOpts = {
              model: part,
              property: this._layout.partLabelProperty,
              editGroupName: 'Part' //Localizer.getString('editor/placeholder.partName'),
            };

            const partTextField = new _views_score_text_field__WEBPACK_IMPORTED_MODULE_8__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__.TextFieldAutoSize.RIGHT, this.staffMetrics.staffTextFont, this.staffMetrics.partNameSize, this.editorFonts, textFieldOpts, this.rootDiv, this.noteEditorService);
            const partLabel = new _models_part_label__WEBPACK_IMPORTED_MODULE_4__["default"](partTextField, firstIndice, lastIndice, i);
            this._partLabels.push(partLabel);
            this.addChild(partTextField);
          }
          if (firstIndice < lastIndice) {
            const barline = this.context.layoutContext.foundry.getBarline(_models_barline__WEBPACK_IMPORTED_MODULE_3__["default"].GRAND_STAFF);
            const barlineView = barline.createDisplayObject(this.context.info);
            if (staffLayout.canHide && !this.context.info.printView) {
              barlineView.alpha = this.context.info.hiddenMeasureAlpha;
            }
            const fullHeightView = {
              view: barlineView,
              unscaledHeight: barline.height,
              start: firstIndice,
              end: lastIndice,
              staffStartIndex: i
            };
            this.updateFullHeightGeometry(fullHeightView);
            this._fullHeightViews.push(fullHeightView);
            this.addChild(barlineView);
          }
        }
      }
    }
    this.updatePartLabelsGeometry();
  }
  updatePartLabelsGeometry() {
    const leftPadding = this._layout.leftPadding;
    for (let i = 0; i < this._partLabels.length; i++) {
      const partLabel = this._partLabels[i];
      this.updatePartLabelGeometry(partLabel, leftPadding);
    }
  }
  updateView() {
    this.destroyChildren();
    this._staffViews = [];
    this._layout.validateGlobalLayout();
    for (let i = 0; i < this._layout.staffLayouts.length; i++) {
      const staffLayout = this._layout.staffLayouts[i];
      this.createStaffView(staffLayout, i === this._layout.staffLayouts.length - 1, i);
    }
    this._partLabels = [];
    this._fullHeightViews = [];
    this.updateLabelsAndBrackets();
    this._backdropSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    this._backdropSprite.alpha = 0;
    if (!this.context.info.printView || this.context.info.testView) {
      this._measureHandles = [];
      for (let measureIdx = this._layout.startMeasureIndex; measureIdx < this._layout.endMeasureIndex; measureIdx++) {
        this.updateOrAddMeasureHandle(measureIdx);
      }
      this._staffHandles = [];
      for (let staffIdx = 0; staffIdx < this._staffViews.length; staffIdx++) {
        const staffView = this._staffViews[staffIdx];
        this._staffHandles.push(this.addStaffHandle(staffView));
      }
    }
    for (let staffIdx = 0; staffIdx < this._staffViews.length; staffIdx++) {
      const staffView = this._staffViews[staffIdx];
      this.addChild(staffView);
    }
    this.updateGeometry();
    this.updateSpanNotations(null);
  }
  updateBackdrop() {
    this.graphics.clear();
    this._backdropSprite.graphics.clear();
    if (!this.context.info.printView && this.context.document.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      const measureSelection = this.context.document.selection;
      if (measureSelection.startIndex < this._layout.endMeasureIndex && measureSelection.endIndex > this._layout.startMeasureIndex) {
        const startIndex = Math.max(this._layout.startMeasureIndex, measureSelection.startIndex);
        const endIndex = Math.min(this._layout.endMeasureIndex, measureSelection.endIndex);
        const startMeasureLeftTop = this.getLocalMeasureStart(startIndex);
        let endMeasureLeftTop = this.getLocalMeasureStart(endIndex);
        if (endMeasureLeftTop == null && endIndex > this.getStaffViewAt(0).numMeasureViews - 1) {
          endMeasureLeftTop = this.getLocalMeasureStart(this.getStaffViewAt(0).numMeasureViews - 1);
        }
        if (startMeasureLeftTop && endMeasureLeftTop) {
          const startMeasureX = startMeasureLeftTop.x;
          const endMeasureX = endMeasureLeftTop.x;
          this.graphics.beginFill(this.context.info.measureHighlightColor, this.context.info.measureHighlightAlpha);
          this.graphics.drawRect(startMeasureX, -this.toViewUnits(-this.layout.topPadding + this.context.info.systemHighlightMargin), endMeasureX - startMeasureX, this.systemHeight + this.toViewUnits(2 * this.context.info.systemHighlightMargin - this.layout.topPadding));
          this.graphics.endFill();
        }
      }
    }
    const endMeasureLeftTop = this.getLocalMeasureStart(this._layout.endMeasureIndex);
    if (endMeasureLeftTop) {
      this._backdropSprite.graphics.beginFill(0, 0);
      this._backdropSprite.graphics.drawRect(0, 0, endMeasureLeftTop.x, this.systemHeight + this.toViewUnits(this._layout.bottomPadding));
      this._backdropSprite.graphics.endFill();
    }
    if (this._layout.getStaffLayoutAt(0)?.staff.score.numVisibleStaves > 0) {
      const systemLineThickness = this.toViewUnits(this.staffMetrics.systemLineThickness);
      const staffStartViews = this.getStaffViewAt(0).staffStartViews;
      for (let i = 0; i < staffStartViews.length; i++) {
        const staffStartView = staffStartViews[i];
        const staffStartViewContentX = staffStartView.x - 1 + this.toViewUnits(this._layout.leftPadding);
        const top = this.getStaffViewAt(0).y - this.toViewUnits(this._layout.getStaffLayoutAt(0).staffStartLayout.measure.effectiveClef.staffHeight);
        this.graphics.beginFill(0, 1);
        this.graphics.drawRect(staffStartViewContentX, top, systemLineThickness, this.getStaffViewAt(this._staffViews.length - 1).y - top);
        this.graphics.endFill();
      }
    }
    for (let i = 0; i < this._measureHandles.length; i++) {
      const measureHandle = this._measureHandles[i];
      measureHandle.updateStatus();
    }
  }
  createStaffView(staffLayout, isLast, idx) {
    const staffView = new _views_staff_view__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, staffLayout, idx, this.rootDiv, this.noteEditorService);
    staffView.x = this.toViewUnits(this._layout.leftPadding);
    staffView.y = this.toViewUnits(staffLayout.distanceY);
    this._staffViews.push(staffView);
    return this.y;
  }
  destroyChildren() {
    SystemView._lastRolled = null;
    if (this._backdropSprite) {
      while (this._backdropSprite.numChildren > 0) {
        this._backdropSprite.removeChildAt(0);
      }
    }
    for (let i = 0; i < this._measureHandles.length; i++) {
      const measureHandle = this._measureHandles[i];
      measureHandle.destroy();
    }
    for (let i = 0; i < this._staffHandles.length; i++) {
      const staffHandle = this._staffHandles[i];
      staffHandle.destroy();
    }
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.destroy();
    }
    for (let i = 0; i < this._partLabels.length; i++) {
      const partLabel = this._partLabels[i];
      partLabel.field.destroy();
    }
    for (let i = 0; i < this._spanViews.length; i++) {
      const spanView = this._spanViews[i];
      if (spanView) {
        for (let j = 0; j < spanView.length; j++) {
          spanView[j].destroy();
        }
      }
    }
  }
  deleteMeasureHandlesStartingAt(startIdx) {
    for (let i = startIdx; i < this._measureHandles.length; i++) {
      const measureHandle = this._measureHandles[i];
      this._backdropSprite.removeChild(measureHandle);
      measureHandle.destroy();
    }
    this._measureHandles.splice(startIdx);
  }
  updateOrAddMeasureHandle(measureIdx) {
    const measureHandleY = this.measureHandleY;
    const localIdx = measureIdx - this._layout.startMeasureIndex;
    const measureView = this.getStaffViewAt(0).getMeasureViewAt(localIdx);
    if (measureView) {
      const layout = measureView.layout;
      const measureHandle = new _views_measure_handle__WEBPACK_IMPORTED_MODULE_12__["default"](this.context, layout, this, this.editorFonts, this.rootDiv, this.noteEditorService);
      measureHandle.y = measureHandleY;
      const measurehandle = this._measureHandles[localIdx];
      this._measureHandles[localIdx] = measureHandle;
      if (measurehandle) {
        this._backdropSprite.removeChild(measurehandle);
        measurehandle.destroy();
      }
      this._backdropSprite.addChildAt(measureHandle, 0);
    }
  }
  arrangeMeasureHandles(measureIndex = -1) {
    if (this._measureHandles) {
      let startMeasureIndex;
      if (measureIndex === -1) {
        startMeasureIndex = this._layout.startMeasureIndex;
      } else {
        startMeasureIndex = measureIndex;
      }
      for (let i = startMeasureIndex; i < this._layout.endMeasureIndex; i++) {
        const measureHandle = this._measureHandles[i - this._layout.startMeasureIndex];
        if (measureHandle) {
          const measureLeftTop = this.getLocalMeasureStart(i);
          if (measureLeftTop == null) {
            break;
          }
          measureHandle.x = measureLeftTop.x;
          measureHandle.y = this.measureHandleY;
          measureHandle.updateStatus();
        }
      }
    }
  }
  addStaffHandle(staffView) {
    const staffHandle = new _views_staff_handle__WEBPACK_IMPORTED_MODULE_10__["default"](this.context, staffView.layout, this, this.noteEditorService, this.rootDiv);
    staffHandle.y = staffView.y;
    this._backdropSprite.addChild(staffHandle);
    return staffHandle;
  }
  arrangeStaffHandles() {
    if (this._staffHandles) {
      for (let i = 0; i < this._staffHandles.length; i++) {
        const staffHandle = this._staffHandles[i];
        staffHandle.y = this._staffViews[i].y;
      }
    }
  }
  updateMeasureViewsStartingAt(startIdx) {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      for (let j = startIdx; j < this.numMeasures; j++) {
        staffView.updateMeasureAt(j - this._layout.startMeasureIndex);
      }
    }
  }
  handleMeasureDisplay(measureDisplayEvt) {
    console.log('handleMeasureDisplay');
    let staff, idx, staffView, measureView;
    this.layout.validateGlobalLayout();
    const visibleStaffViews = {};
    let widthDifferent = false,
      heightDifferent = false,
      measureIndices = measureDisplayEvt.measureIndices;
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIndice = measureIndices[i];
      if (!(measureIndice < this._layout.startMeasureIndex || measureIndice >= this._layout.endMeasureIndex)) {
        if (measureDisplayEvt.staves && measureDisplayEvt.staves.length > 0 && measureDisplayEvt.staves[0].index != -1) {
          for (let j = 0; j < measureDisplayEvt.staves.length; j++) {
            const staff = measureDisplayEvt.staves[j];
            if (staff.index != -1 && (staffView = this.getViewForStaff(staff)) //if staffView==null then condition is false
            ) {
              const localIndex = measureIndice - this._layout.startMeasureIndex;
              if (localIndex >= staffView.numMeasureViews) {
                visibleStaffViews[staffView.layout.index] = staffView;
              } else {
                measureView = staffView.getMeasureViewAt(localIndex);
                staffView.updateLayoutToMeasureViews();
                const measureViewDimensions = new _views_measure_view_dimensions__WEBPACK_IMPORTED_MODULE_13__["default"]();
                if (!widthDifferent && !heightDifferent) {
                  measureViewDimensions.record(measureView);
                }
                staffView.updateMeasureAt(localIndex);
                if (!widthDifferent && !heightDifferent) {
                  measureView = staffView.getMeasureViewAt(localIndex);
                  if (measureViewDimensions.isWidthDifferent(measureView)) {
                    widthDifferent = true;
                  } else if (measureViewDimensions.isHeightDifferent(measureView)) {
                    heightDifferent = true;
                  }
                }
                if (!widthDifferent && !heightDifferent) {
                  staffView.updateGeometry();
                }
                visibleStaffViews[staffView.layout.index] = staffView;
              }
            }
          }
        } else {
          for (let i = 0; i < this._staffViews.length; i++) {
            const staffView = this._staffViews[i];
            staffView.updateMeasureAt(measureIndice - this._layout.startMeasureIndex);
            visibleStaffViews[staffView.layout.index] = staffView;
          }
          widthDifferent = true;
        }
      }
    }
    if (widthDifferent || heightDifferent) {
      for (let i = 0; i < this._staffViews.length; i++) {
        const staffView = this._staffViews[i];
        for (let j = this._layout.startMeasureIndex; j < this._layout.endMeasureIndex; j++) {
          if ((measureDisplayEvt.justify || this.context.controller.score.isStripMode) && (measureDisplayEvt.measureIndices.indexOf(j) == -1 || measureDisplayEvt.staves && measureDisplayEvt.staves.indexOf(staffView.layout.staff) == -1)) {
            staffView.justifyMeasureAt(j - this._layout.startMeasureIndex);
            visibleStaffViews[staffView.layout.index] = staffView;
          }
        }
      }
    }
    for (const key in visibleStaffViews) {
      const staffView = visibleStaffViews[key];
      staffView.updateGeometry();
    }
    this.updateGeometry();
    measureIndices = [];
    for (let i = this._layout.startMeasureIndex; i < this._layout.endMeasureIndex; i++) {
      const localMeasureIndex = i - this._layout.startMeasureIndex;
      const measureView = this.getStaffViewAt(0).getMeasureViewAt(localMeasureIndex);
      if (measureView && !measureView.isPlaceHolder) {
        measureIndices.push(i);
      }
    }
    this.updateSpanNotations(measureIndices);
  }
  handleMeasureGeometryChange(measureValidationEvt) {
    if (this.stage) {
      for (let i = 0; i < this._staffViews.length; i++) {
        const staffView = this._staffViews[i];
        for (let j = this._layout.startMeasureIndex; j < this._layout.endMeasureIndex.length; j++) {
          if (measureValidationEvt.justify || measureValidationEvt.measureIndices.indexOf(j) >= 0) {
            staffView.justifyMeasureAt(j - this._layout.startMeasureIndex);
          }
        }
        staffView.updateGeometry();
      }
      this.updateGeometry();
      this.updateSpanNotations(null);
    }
  }
  handleMeasureSpanChange(measureValidationEvt) {
    if (this.stage) {
      this.updateSpanNotations(measureValidationEvt.measureIndices);
    }
  }
  updateStavesGeometry() {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.updateGeometry();
    }
  }
  updateGeometry() {
    this.layout.validateGlobalLayout();
    if (this.context.documentView) {
      this.x = this.context.documentView.scoreLayout.getXPosition(this._layout, this.context);
    } else {
      this.x = this.toViewUnits(this._layout.leftMargin);
    }
    this._backdropSprite.x = this.x;
    for (let i = 0; i < this.numStaffViews; i++) {
      const staffView = this.getStaffViewAt(i);
      if (staffView.layout) {
        staffView.y = this.toViewUnits(staffView.layout.distanceY);
        staffView.updateBarlineHeight();
      }
    }
    this.arrangeStaffHandles();
    this.updateBackdrop();
    this.arrangeMeasureHandles();
    this.updatePartLabelsGeometry();
    for (let i = 0; i < this._fullHeightViews.length; i++) {
      const fullHeightView = this._fullHeightViews[i];
      this.updateFullHeightGeometry(fullHeightView);
    }
  }
  updatePartLabelGeometry(partLabel, leftPadding) {
    const textField = partLabel.field;
    const start = partLabel.start;
    const startLayout = this._layout.getStaffLayoutAt(start);
    const end = partLabel.end;
    const endLayout = this._layout.getStaffLayoutAt(end);
    const staffLeftTop = this.getStaffViewAt(0).staffStartViews[partLabel.staffStartIndex];
    textField.x = staffLeftTop.x + this.toViewUnits(leftPadding) - this.toViewUnits(this.staffMetrics.staffLabelPadding);
    textField.y = this.toViewUnits((startLayout.distanceY - startLayout.height / 2 + endLayout.distanceY - endLayout.height / 2) / 2) - textField.ascent / 2 - 2;
  }
  updateFullHeightGeometry(fullHeightView) {
    const displayObj = fullHeightView.view;
    const start = fullHeightView.start;
    const startStaffLayout = this._layout.getStaffLayoutAt(start);
    const end = fullHeightView.end;
    const endStaffLayout = this._layout.getStaffLayoutAt(end);
    const staffStartView = this.getStaffViewAt(0).staffStartViews[fullHeightView.staffStartIndex];
    displayObj.x = staffStartView.x + this.toViewUnits(this._layout.leftPadding) - this.toViewUnits(this.staffMetrics.grandStaffPadding);
    displayObj.scaleY = this.toViewUnits(endStaffLayout.distanceY - (startStaffLayout.distanceY - startStaffLayout.height)) / fullHeightView.unscaledHeight;
    displayObj.y = this._staffViews[end].y;
  }
  updateSpanNotations(measureIndices) {
    let measureIndex, endIndex, subIdx, viewIdx;
    if (measureIndices == null) {
      measureIndex = this._layout.startMeasureIndex;
      endIndex = measureIndex + this.getStaffViewAt(0)?.numMeasureViews;
    } else {
      measureIndex = this._layout.endMeasureIndex;
      endIndex = 0;
      for (let i = 0; i < measureIndices.length; i++) {
        const measureIndice = measureIndices[i];
        measureIndex = Math.min(measureIndex, measureIndice);
        endIndex = Math.max(endIndex, measureIndice + 1);
      }
      measureIndex = Math.max(this._layout.startMeasureIndex, measureIndex);
      endIndex = Math.min(this._layout.endMeasureIndex, endIndex);
    }
    for (let i = measureIndex; i < endIndex; i++) {
      if (this._spanViews[i]) {
        const views = this._spanViews[i].slice();
        for (let j = 0; j < views.length; j++) {
          const spanView = views[j];
          const scoreObjectView = spanView;
          this.removeChild(scoreObjectView);
          subIdx = i;
          while (subIdx >= this._layout.startMeasureIndex && this._spanViews[subIdx] && (viewIdx = this._spanViews[subIdx].indexOf(scoreObjectView)) >= 0) {
            const p = this._spanViews[subIdx].splice(viewIdx, 1);
            for (let k = 0; k < p.length; k++) {
              p[k].destroy();
            }
            subIdx--;
          }
          subIdx = i + 1;
          while (subIdx < this._layout.endMeasureIndex && this._spanViews[subIdx] && (viewIdx = this._spanViews[subIdx].indexOf(scoreObjectView)) >= 0) {
            const p = this._spanViews[subIdx].splice(viewIdx, 1);
            for (let k = 0; k < p.length; k++) {
              p[k].destroy();
            }
            subIdx++;
          }
        }
      }
    }
    for (let i = 0; i < this._layout.staffLayouts.length; i++) {
      const spansInRange = this._layout.getStaffLayoutAt(i).getSpansInRange(measureIndex, endIndex);
      for (let j = 0; j < spansInRange.length; j++) {
        const span = spansInRange[j];
        const systemSpan = span;
        const spanView = systemSpan.createSystemDisplayObject(this);
        this.addChild(spanView);
        subIdx = Math.max(this._layout.startMeasureIndex, systemSpan.notation.measure.index);
        viewIdx = Math.min(this._layout.endMeasureIndex, systemSpan.notation.endPosition.measureIndex + 1);
        for (let k = subIdx; k < viewIdx; k++) {
          if (this._spanViews[k] == null) {
            this._spanViews[k] = [];
          }
          this._spanViews[k].push(spanView);
        }
      }
    }
  }
  handleStatusChange(evt) {
    if (this._layout.startMeasureIndex <= evt.endMeasureIndex && this._layout.endMeasureIndex >= evt.startMeasureIndex) {
      this.updateBackdrop();
    }
  }
  handleFocusMeasureNumber(evt) {
    if (this._layout.startMeasureIndex <= evt.startMeasureIndex && evt.startMeasureIndex <= this._layout.endMeasureIndex - 1) {
      this.updateBackdrop();
      setTimeout(() => {
        this._measureHandles[evt.startMeasureIndex - this._layout.startMeasureIndex].focusMeasureNumber(evt);
      }, 1);
    }
  }
  handleUpdatedMeasureHandleIndex(evt) {
    for (let i = 0; i < this._measureHandles.length; i++) {
      const measureHandle = this._measureHandles[i];
      measureHandle.updateMeasureIndex();
    }
  }
  handleRollOut(evt) {
    if (this._rollEvent) {
      // todo
      throw new Error('not implemented');
    }
  }
  handleRollOver(evt) {
    this._rollEvent = evt;
    if (SystemView._lastRolled != null && SystemView._lastRolled != this) {
      SystemView._lastRolled.handleRollOut(evt);
    }
    SystemView._lastRolled = this;
    this._handleAlpha = 1;
  }
  handleClickAsRoll(t) {
    if (this.context.controller.isNotationInteractionAvailable()) {
      this.showHandles();
    }
  }
  areHandlesShown() {
    for (let i = 0; i < this._measureHandles.length; i++) {
      const measureHandle = this._measureHandles[i];
      if (measureHandle.active) {
        return true;
      }
    }
    return false;
  }
  showHandles() {
    if (SystemView._lastRolled != this) {
      SystemView.clearLastRolled();
    }
    SystemView._lastRolled = this;
    this._backdropSprite.alpha = 1;
  }
  static clearLastRolled() {
    if (null != SystemView._lastRolled && SystemView._lastRolled._backdropSprite) {
      SystemView._lastRolled._backdropSprite.alpha = 0;
    }
  }
  removeEnterFrameListener() {
    // this.removeEventListener(
    //   FlashEvent.ENTER_FRAME,
    //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
    // );
  }
  handleRemovedFromStage(t) {
    this.removeEnterFrameListener();
  }
  handleEnterFrame(t) {
    this._backdropSprite.alpha += (this._handleAlpha - this._backdropSprite.alpha) / this.HANDLE_ANIMATION_TIME_CONSTANT;
    if (this._backdropSprite.alpha < 0.1) {
      this._backdropSprite.alpha = 0;
      //   this.removeEventListener(
      //     FlashEvent.ENTER_FRAME,
      //     RumtimeHelper.bindMethod(this, this.handleEnterFrame)
      //   );
    }
  }

  flowMeasures(flowNum) {
    const numMeasureViews = this.numMeasureViews;
    if (numMeasureViews < this.numMeasures) {
      for (let staffIdx = 0; staffIdx < this._staffViews.length; staffIdx++) {
        const staffView = this.getStaffViewAt(staffIdx);
        for (let measureIdx = numMeasureViews; measureIdx < numMeasureViews + flowNum; measureIdx++) {
          if (measureIdx >= this.numMeasures) {
            this.isIncrementalFlowComplete = true;
            break;
          }
          staffView.createMeasurePrefixesViewsAt(measureIdx);
          staffView.createMeasureViewAt(measureIdx, true);
          if (staffIdx === 0 && !this.context.info.printView || this.context.info.testView) {
            this.updateOrAddMeasureHandle(measureIdx);
          }
        }
        staffView.updateGeometry();
      }
      this.updateLabelsAndBrackets(numMeasureViews);
    } else {
      this.isIncrementalFlowComplete = true;
    }
  }
  doIncrementalFlow(flowType = SystemView.ONE) {
    let numMeasureToLoad;
    switch (flowType) {
      case SystemView.UP_TO_SCROLL_POS:
        numMeasureToLoad = this.estimateNumberOfMeasuresToLoad();
        break;
      case SystemView.EVERYTHING:
        numMeasureToLoad = this.MAX_MEASURES_TO_LOAD;
        break;
      default:
        numMeasureToLoad = 1;
        break;
    }
    if (numMeasureToLoad > 0) {
      this.flowMeasures(Math.min(this.MAX_MEASURES_TO_LOAD, numMeasureToLoad));
    }
    if (this.isMoreFlowNeeded) {
      this.arrangeMeasureHandles();
    } else {
      this.updateGeometry();
      this.updateSpanNotations(null);
    }
  }
  truncateSystemViewAt(startIdx) {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.truncateMeasureViewsStartingAt(startIdx);
    }
    for (let i = startIdx; i < this._spanViews.length; i++) {
      const spanView = this._spanViews[i];
      if (spanView) {
        for (let j = 0; j < spanView[j].length; j++) {
          const view = spanView[j][j];
          this.removeChild(view);
          view.destroy();
        }
      }
    }
    this.isIncrementalFlowComplete = false;
  }
  updateMeasureHandlesStartingAt(startIdx) {
    for (let i = startIdx; i < this._layout.endMeasureIndex.length; i++) {
      this.updateOrAddMeasureHandle(i);
    }
    this.deleteMeasureHandlesStartingAt(this._layout.endMeasureIndex);
  }
  getMeasureXPosition(measurePosition) {
    return this._staffViews[0].getMeasureXPosition(measurePosition);
  }
  getStaffXPosition() {
    return this._staffViews[0].x;
  }
  estimateNumberOfMeasuresToLoad() {
    const firstStaffView = this.getStaffViewAt(0);
    const numMeasureViews = firstStaffView.numMeasureViews;
    const lastMeasureView = firstStaffView.getMeasureViewAt(numMeasureViews - 1);
    if (!lastMeasureView) {
      return 1;
    }
    const visibleHeight = (this.context.documentView.viewportWidth + this.context.documentView.horizontalScrollPosition) / this.context.documentView.viewInfo.displayScale;
    return Math.ceil(Math.max(0, (visibleHeight - lastMeasureView.x) / this.arrangeCurrentMeasuresWidth));
  }
  getViewForStaff(staff) {
    return this.staffViews.find(e => e.layout.staff == staff);
  }
}
SystemView.lastRolled = null;

/***/ }),

/***/ 82970:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/tacet-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TacetLayout)
/* harmony export */ });
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/articulation-attribute */ 9349);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./abstract-beamable-layout */ 51729);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./rest-layout */ 41910);







class TacetLayout extends _abstract_beamable_layout__WEBPACK_IMPORTED_MODULE_4__["default"] {
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.centered = true;
  }
  doValidateLayout() {
    this.initializeLayout(this.notation);
    super.doValidateLayout();
  }
  initializeLayout(tacet) {
    const staffMetrics = this.context.staffMetrics;
    let glyphLayout,
      articulationDistanceY,
      distanceY = this.clef.getRestLine(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE) * this.clef.lineSpacing + tacet.dy,
      isUpper = parseFloat(tacet.voiceNumber) === 0,
      voiceRestOffset = 0;
    if (!this.noteSet.explicitRestY && this.multiVoice && this.clef.numLines > 1 && (this.alternateVoiceLayout == null || !this.alternateVoiceLayout.noteSet.invisible)) {
      voiceRestOffset += isUpper ? staffMetrics.upperVoiceRestOffset : staffMetrics.lowerVoiceRestOffset;
    }
    distanceY += voiceRestOffset;
    if (this.clef.showRhythm(this.context.score) && !this.measureLayout.isMultiRest) {
      const restType = _rest_layout__WEBPACK_IMPORTED_MODULE_6__["default"].restType(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE, distanceY, this.clef);
      glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, this.foundry.getRest(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE, restType));
      glyphLayout.distanceY = distanceY;
    } else {
      glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, this.noteEditorService));
    }
    this.addGlyphLayout(glyphLayout);
    articulationDistanceY = isUpper ? this.clef.staffHeight + voiceRestOffset + tacet.dy + staffMetrics.articulationPadding : distanceY - glyphLayout.height - staffMetrics.articulationPadding;
    for (let i = 0; i < tacet.articulations.length; i++) {
      const articulation = tacet.articulations[i];
      const articulationAttr = _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet.ARTICULATION_ATTRIBUTES[articulation];
      if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST) !== 0) {
        const articulationGlyph = this.foundry.getArticulation(articulation, isUpper, false);
        const articulationGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, articulationGlyph);
        let halfWidth = glyphLayout.width / 2;
        articulationGlyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_5__["default"].ANCHOR_BOTTOM;
        if ((articulationAttr & _models_articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT) !== 0) {
          halfWidth += staffMetrics.rightArticulationPadding;
        }
        articulationGlyphLayout.distanceX = halfWidth;
        if (isUpper) {
          articulationDistanceY += articulationGlyphLayout.height;
        }
        articulationGlyphLayout.distanceY = articulationDistanceY;
        this.addGlyphLayout(articulationGlyphLayout);
        if (isUpper) {
          articulationDistanceY += staffMetrics.articulationSpacing;
        } else {
          articulationDistanceY -= staffMetrics.articulationSpacing;
          articulationDistanceY -= articulationGlyphLayout.height;
        }
      }
    }
  }
}

/***/ }),

/***/ 81413:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/layouts/tempo-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TempoLayout)
/* harmony export */ });
/* harmony import */ var _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/text-glyph */ 37857);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-layout */ 18810);




class TempoLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get tempo() {
    return this.notation;
  }
  constructor(context, measureLayout, notation, clef, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this.rootDiv = rootDiv;
    let xOffset;
    const staffMetrics = this.context.staffMetrics;
    if (notation.measure.timeSignatureNotation) {
      if (measureLayout.firstLayoutOnSystem) {
        xOffset = staffMetrics.tempoTimeSignatureXOffsetFirstMeasure;
      } else {
        xOffset = staffMetrics.tempoTimeSignatureXOffset;
      }
    } else if (measureLayout.firstLayoutOnSystem) {
      xOffset = staffMetrics.tempoXOffsetFirstMeasure;
    } else {
      xOffset = staffMetrics.tempoXOffset;
    }
    const tempoGlyph = this.foundry.getTempo(notation.value, notation.dots > 0, true);
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, tempoGlyph);
    const staff = measureLayout.measure.staff;
    glyphLayout.scale = staffMetrics.tempoSymbolScale;
    glyphLayout.distanceX = -glyphLayout.width - xOffset;
    glyphLayout.distanceY = staff.type.numLines * staff.type.lineSpacing + notation.dy + staffMetrics.tempoUnitOffset;
    glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"].ANCHOR_RIGHT;
    this.addGlyphLayout(glyphLayout);
    const textGlyph = new _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](this.createTextFormat(), notation.bpm.toString(), editorFonts, null, null, null, null, this.rootDiv, this.noteEditorService);
    const textGlyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_2__["default"](context, textGlyph);
    textGlyphLayout.distanceX = glyphLayout.width + xOffset;
    textGlyphLayout.distanceY = staff.type.numLines * staff.type.lineSpacing + notation.dy + staffMetrics.tempoTextOffset;
    this.addGlyphLayout(textGlyphLayout);
  }
  createTextFormat() {
    const staffMetrics = this.context.staffMetrics;
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_1__["default"](staffMetrics.tempoFont, staffMetrics.baseFontSize * staffMetrics.tempoSymbolSize, null, staffMetrics.tempoBold);
  }
}

/***/ }),

/***/ 88175:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/layouts/text-notation-layout.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextNotationLaout)
/* harmony export */ });
/* harmony import */ var _glyph_rectangle_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/rectangle-glyph */ 16768);
/* harmony import */ var _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyph/text-glyph */ 37857);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/text-notation */ 70240);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notation-layout */ 18810);






class TextNotationLaout extends _notation_layout__WEBPACK_IMPORTED_MODULE_5__["default"] {
  get textNotation() {
    return this.notation;
  }
  get glyphWidths() {
    return this._x;
  }
  get glyphHeight() {
    return this._y;
  }
  get distanceY() {
    return -this.padding.bottom + this._y + this.textNotation.dy;
  }
  get glyphGap() {
    return 0.125 * this._scale;
  }
  constructor(context, measureLayout, notation, clef, padding, editorFonts, rootDiv, noteEditorService) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    this._scale = 1;
    this._x = 0;
    this._y = 0;
    this._globalX = 0;
    this._globalY = 0;
    this._textGlyphHeight = 0;
    this._totalTextGliphHeight = 0;
    this._currentLine = 0;
    this._firstGlyphInCurrentLine = 0;
    this._format = null;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this._format = this.createTextFormat();
    if (notation.alignToStaffTop) {
      this.padding = padding.clone();
      this.padding.y -= clef.staffHeight;
    } else {
      this.padding = padding;
    }
  }
  addGlyph(glyph, glyphGap = NaN, notFirstLine) {
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, glyph);
    glyphLayout.scale = this._scale;
    if (notFirstLine) {
      this._x = 0;
      this._currentLine++;
      this._firstGlyphInCurrentLine = this._glyphLayouts.length;
    }
    const height = this._format.size * this._scale / this.context.staffMetrics.lineSpacing;
    this._textGlyphHeight = Math.max(this._textGlyphHeight, height);
    this._globalY = this.distanceY - this._currentLine * this._textGlyphHeight;
    glyphLayout.distanceX = this._x + this.textNotation.dx;
    glyphLayout.distanceY = this._globalY;
    const widthAndGap = glyphLayout.width + (isNaN(glyphGap) ? this.glyphGap : glyphGap);
    this._x += widthAndGap;
    this._globalX = Math.max(this._globalX, this._x);
    switch (this.textNotation.justify) {
      case _models_text_notation__WEBPACK_IMPORTED_MODULE_3__["default"].JUSTIFY_CENTER:
        glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_CENTER;
        break;
      case _models_text_notation__WEBPACK_IMPORTED_MODULE_3__["default"].JUSTIFY_RIGHT:
        for (let i = this._firstGlyphInCurrentLine; i < this._glyphLayouts.length; i++) {
          this._glyphLayouts[i].distanceX -= widthAndGap;
          glyphLayout.distanceX = this.textNotation.dx - glyphLayout.width;
          glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_LEFT;
        }
        break;
      default:
        glyphLayout.verticalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"].ANCHOR_BOTTOM;
    }
    this.addGlyphLayout(glyphLayout);
    return glyph;
  }
  addNoteGlyph(notationValue, hasDots) {
    const tempoGlyph = this.foundry.getTempo(notationValue, hasDots, false);
    this._y += 2;
    this.addGlyph(tempoGlyph);
    this._y -= 2;
    return tempoGlyph;
  }
  addSymbolGlyph(symbolType) {
    const symbolGlyph = this.foundry.getSymbol(symbolType);
    const staffMetrics = this.context.staffMetrics;
    this._scale *= staffMetrics.symbolScale;
    const height = symbolGlyph.height * this._scale / staffMetrics.lineSpacing;
    this._y += height;
    this.addGlyph(symbolGlyph);
    this._y -= height;
    this._scale /= staffMetrics.symbolScale;
    return symbolGlyph;
  }
  addEscapedTextGlyphs(text) {
    for (let i = 0; i < 2; i++) {
      text = (text = (text = text.replace(/(^|\s|\n|\r)+([A-G])b([0-9])?($|\s|\n|\r)+/g, '$1$2{flat}$3$4')).replace(/(^|\s|\n|\r)+([A-G])#([0-9])?($|\s|\n|\r)+/g, '$1$2{sharp}$3$4')).replace(/(^|\s|\n|\r)+([A-G])=([0-9])?($|\s|\n|\r)+/g, '$1$2{natural}$3$4');
      while (text.length > 0) {
        const matchArr = /\{([a-zA-Z0-9\-\ ]+)\}/.exec(text);
        if (matchArr == null) {
          this.manageTextGlyphs(text);
          break;
        }
        if (matchArr.index > 0) {
          this.manageTextGlyphs(text.substring(0, matchArr.index));
        }
        switch (matchArr[1]) {
          case 'coda':
          case 'segno':
            this.addSymbolGlyph(matchArr[1]);
            break;
          case 'flat':
            this.addGlyph(this.foundry.getChordSymbol('@'));
            break;
          case 'sharp':
            this.addGlyph(this.foundry.getChordSymbol('#'));
            break;
          case 'natural':
            this.addGlyph(this.foundry.getChordSymbol('$'));
            break;
          case 'double flat':
            this.addGlyph(this.foundry.getChordSymbol('%'));
            break;
          case 'double sharp':
            this.addGlyph(this.foundry.getChordSymbol('*'));
            break;
          case 'sixteenth':
          case '16th':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.SIXTEENTH);
            break;
          case 'eighth':
          case '8th':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.EIGHTH);
            break;
          case 'quarter':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.QUARTER);
            break;
          case 'half':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.HALF);
            break;
          case 'whole':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE);
            break;
          case 'dotted sixteenth':
          case 'dotted 16th':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.SIXTEENTH, true);
            break;
          case 'dotted eighth':
          case 'dotted 8th':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.EIGHTH, true);
            break;
          case 'dotted quarter':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.QUARTER, true);
            break;
          case 'dotted half':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.HALF, true);
            break;
          case 'dotted whole':
            this.addNoteGlyph(_models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.WHOLE, true);
            break;
          default:
            this.manageTextGlyphs(text.substring(matchArr.index, matchArr.index + matchArr[0].length));
        }
        text = text.substring(matchArr.index + matchArr[0].length);
      }
    }
  }
  createBoxOutsideText() {
    if (this.textNotation.textbox) {
      const t = this.context.staffMetrics.lineSpacing / this._scale;
      const contentW = this._globalX * t;
      const contentH = this._textGlyphHeight * (this._currentLine + 1) * t;
      const x = this.textNotation.justify === _models_text_notation__WEBPACK_IMPORTED_MODULE_3__["default"].JUSTIFY_RIGHT ? -contentW : 0;
      const height = this._textGlyphHeight * t;
      const color = this.textNotation.effectiveColor;
      const width_get_height = this._currentLine === 0;
      const rectGlyph = this.createRectangleGlyph(x, -height, contentW, contentH, color, width_get_height);
      const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_4__["default"](this.context, rectGlyph);
      glyphLayout.scale = this._scale;
      glyphLayout.distanceX = this.textNotation.dx;
      glyphLayout.distanceY = this.distanceY;
      this.addGlyphLayout(glyphLayout);
    }
  }
  manageTextGlyphs(text) {
    const lines = this.splitByLinebreaks(text);
    for (let i = 0; i < lines.length; i++) {
      this.addGlyph(this.createTextGlyph(lines[i]), NaN, i > 0);
    }
  }
  splitByLinebreaks(text) {
    return text.split(/[\n\r]/);
  }
  createTextGlyph(text) {
    return new _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_1__["default"](this._format, text, this.editorFonts, null, null, null, null, this.rootDiv, this.noteEditorService);
  }
  createRectangleGlyph(x, y, contentW, contentH, color, width_get_height) {
    let xOffset = 0;
    let width = contentW + 8;
    let height = contentH + 4;
    if (width_get_height && width < height) {
      xOffset = -(height - width) / 2;
      width = height;
    }
    return new _glyph_rectangle_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](x - 4 + xOffset, y, width, height, this.noteEditorService, color);
  }
  createTextFormat() {
    throw new Error('createTextFormat() not overridden');
  }
}

/***/ }),

/***/ 10461:
/*!***************************************************!*\
  !*** ./src/app/note-editor/layouts/tie-layout.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TieLayout)
/* harmony export */ });
/* harmony import */ var _views_tie_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../views/tie-view */ 51553);
/* harmony import */ var _liaison_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./liaison-layout */ 89280);


class TieLayout extends _liaison_layout__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(noteEditorService) {
    super(noteEditorService);
  }
  doCreateView(nsl, nl, spacingX, spacingY, contentWidth) {
    return new _views_tie_view__WEBPACK_IMPORTED_MODULE_0__["default"](spacingX * this.staffMetrics.lineSpacing, -(spacingY + nl.pitchLine) * this.staffMetrics.lineSpacing, contentWidth * this.staffMetrics.lineSpacing, -this.tieHeight(contentWidth) * this.staffMetrics.lineSpacing, this.staffMetrics, this.noteEditorService);
  }
}

/***/ }),

/***/ 49468:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/layouts/time-signature-layout.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TimeSignatureLayout)
/* harmony export */ });
/* harmony import */ var _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/empty-glyph */ 36705);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _notation_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notation-layout */ 18810);



class TimeSignatureLayout extends _notation_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get timeSignature() {
    return this.notation;
  }
  constructor(context, measureLayout, notation, clef, noteEditorService, rootDiv) {
    super(context, measureLayout, notation, clef, noteEditorService, rootDiv);
    const isShowRhythm = clef.showRhythm(context.score);
    if (notation.timeSymbol) {
      this.addTimeSignatureGlyph(this.foundry.getTimeSignatureSymbol(notation.timeSymbol), isShowRhythm, clef.staffHeight / 2);
    } else {
      this.addTimeSignatureGlyph(this.foundry.getTimeSignature(notation.beats), isShowRhythm, clef.staffHeight / 2 + 1);
      this.addTimeSignatureGlyph(this.foundry.getTimeSignature(notation.beatType), isShowRhythm, clef.staffHeight / 2 - 1);
    }
    const staffMetrics = context.staffMetrics;
    this.padding = staffMetrics.timeSignaturePadding;
  }
  addTimeSignatureGlyph(glyph, isShowRhythm, distanceY) {
    if (!isShowRhythm) {
      glyph = new _glyph_empty_glyph__WEBPACK_IMPORTED_MODULE_0__["default"](glyph.width, glyph.height, this.noteEditorService);
    }
    const glyphLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_1__["default"](this.context, glyph);
    glyphLayout.distanceY = distanceY;
    glyphLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_1__["default"].ANCHOR_CENTER;
    this.addGlyphLayout(glyphLayout);
  }
}

/***/ }),

/***/ 60773:
/*!******************************************************!*\
  !*** ./src/app/note-editor/layouts/tuplet-layout.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TupletLayout)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _views_tuplet_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/tuplet-view */ 21406);
/* harmony import */ var _abstract_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./abstract-layout */ 45009);
/* harmony import */ var _glyph_layout__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./glyph-layout */ 29532);
/* harmony import */ var _rest_layout__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./rest-layout */ 41910);





class TupletLayout extends _abstract_layout__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get tuplet() {
    return this._tuplet;
  }
  get numBeamableLayouts() {
    return this._beamableLayouts.length;
  }
  get lastBeamableLayoutIndex() {
    return this._beamableLayouts.length - 1;
  }
  get requiresBracket() {
    for (let i = 0; i < this._beamableLayouts.length; ++i) {
      const beamableLayout = this.getBeamableLayoutAt(i);
      if (!beamableLayout.beam && !beamableLayout.notation.grace) {
        return true;
      }
    }
    return this.tuplet.hasChildTuplet;
  }
  get bounds() {
    if (this.tuplet.tremolo) {
      return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, 0, 0);
    }
    let rect = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"]();
    for (let i = 0; i < this._beamableLayouts.length; i++) {
      const beamableLayout = this._beamableLayouts[i];
      const layout = beamableLayout;
      rect = rect.union(layout.bounds);
    }
    const staffMetrics = this.context.staffMetrics;
    const height = this.tuplet.showBracket || this.tuplet.showActualNumber || this.tuplet.showNormalNumber ? staffMetrics.tupletHeight + staffMetrics.articulationPadding + staffMetrics.tupletBracketHeight : 0;
    if (this.down) {
      return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, rect.top - height, 0, height);
    } else {
      return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, rect.bottom, 0, height);
    }
  }
  get slope() {
    return this.rise / (this.endX - this.startX);
  }
  constructor(context, tuplet, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this.startX = NaN;
    this.endX = NaN;
    this.startY = NaN;
    this.rise = NaN;
    this.down = false;
    this.numberLayout = null;
    this._beamableLayouts = [];
    this._tuplet = null;
    this._tuplet = tuplet;
  }
  addBeamableLayout(layout) {
    this._beamableLayouts.push(layout);
  }
  getBeamableLayoutAt(idx) {
    return this._beamableLayouts[idx];
  }
  setUpTuplet() {
    this.tuplet.showBracket = this.requiresBracket;
    if (this.getBeamableLayoutAt(0).noteSet.measure.numVoices === 1) {
      if (this.tuplet.showBracket) {
        this.down = false;
      } else {
        this.down = this.getBeamableLayoutAt(0).down;
      }
    } else {
      this.down = parseFloat(this.getBeamableLayoutAt(0).noteSet.voiceNumber) > 0;
      for (let i = 0; i < this._beamableLayouts.length; i++) {
        const beamableLayout = this._beamableLayouts[i];
        if (beamableLayout.multiVoice && beamableLayout.hasStem) {
          this.down = beamableLayout.down;
          break;
        }
      }
    }
  }
  doValidateLayout() {}
  getFirstNonRestLayout(startIdx) {
    if (startIdx >= this.numBeamableLayouts) {
      return this.getBeamableLayoutAt(0);
    }
    const beamableLayout = this.getBeamableLayoutAt(startIdx);
    if (beamableLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      return this.getFirstNonRestLayout(startIdx + 1);
    } else {
      return beamableLayout;
    }
  }
  getLastNonRestLayout(endIdx) {
    if (endIdx < 0) {
      return this.getBeamableLayoutAt(this.lastBeamableLayoutIndex);
    }
    const beamableLayout = this.getBeamableLayoutAt(endIdx);
    if (beamableLayout instanceof _rest_layout__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      return this.getFirstNonRestLayout(endIdx - 1);
    } else {
      return beamableLayout;
    }
  }
  doValidateGlobalLayout() {
    const firstBeamableLayout = this.getBeamableLayoutAt(0);
    this.startX = firstBeamableLayout.leftX;
    const firstNonRestLayout = this.getFirstNonRestLayout(0);
    this.startY = this.down ? firstNonRestLayout.clearExtrasBottom(0) : firstNonRestLayout.clearExtrasTop(0);
    const lastBeamableLayout = this.getBeamableLayoutAt(this.lastBeamableLayoutIndex);
    this.endX = lastBeamableLayout.leftX;
    const lastNonRestLayout = this.getLastNonRestLayout(this.lastBeamableLayoutIndex);
    let bottomOrTop = 0;
    if (lastNonRestLayout) {
      bottomOrTop = this.down ? lastNonRestLayout.clearExtrasBottom(0) : lastNonRestLayout.clearExtrasTop(0);
    }
    if (this.tuplet.showBracket) {
      this.endX = this.endX + lastBeamableLayout.notationWidth;
    } else {
      if (!this.down) {
        this.endX = this.endX + 2 * lastBeamableLayout.notationWidth;
      }
    }
    this.rise = bottomOrTop - this.startY;
    let height = 0;
    const staffMetrics = this.context.staffMetrics;
    for (let i = 0; i < this.numBeamableLayouts; i++) {
      const beamableLayout = this.getBeamableLayoutAt(i);
      const centerX = beamableLayout.leftX + beamableLayout.notationWidth / 2;
      const y = this.startY + this.rise * (centerX - this.startX) / (this.endX - this.startX);
      height = this.down ? Math.min(height, beamableLayout.clearExtrasBottom(0) - staffMetrics.tupletBracketHeight - y) : Math.max(height, beamableLayout.clearExtrasTop(0) + staffMetrics.tupletBracketHeight - y);
    }
    this.startY += height;
    for (let i = 0; i < this.numBeamableLayouts; i++) {
      const beamableLayout = this.getBeamableLayoutAt(i);
      this.down ? beamableLayout.clearExtrasBottom(staffMetrics.tupletHeight + staffMetrics.articulationPadding) : beamableLayout.clearExtrasTop(staffMetrics.tupletHeight + staffMetrics.articulationPadding);
    }
    if (!this.tuplet.tremolo && this.tuplet.showActualNumber) {
      this.numberLayout = new _glyph_layout__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, this.context.foundry.getTupletNumber(this.tuplet.rhythmUnits));
      this.numberLayout.horizontalAnchor = _glyph_layout__WEBPACK_IMPORTED_MODULE_3__["default"].ANCHOR_CENTER;
    }
  }
  createDisplayObject(context) {
    return new _views_tuplet_view__WEBPACK_IMPORTED_MODULE_1__["default"](context, this, this.noteEditorService, this.rootDiv);
  }
}

/***/ }),

/***/ 89305:
/*!**************************************************!*\
  !*** ./src/app/note-editor/layouts/view-info.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ViewInfo)
/* harmony export */ });
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/score */ 17784);

class ViewInfo {
  constructor() {
    this._feedbackColor = 0x666666;
    this._selectionColors = [0xea5223, 0xa52a2a];
    this._scoreColor = 0xffffff;
    this._scoreDropShadowDistance = 4;
    this._scoreDropShadowColor = 0x333333;
    this._scoreDorpShadowAlpha = 0.8;
    this._scoreDropShadowEnabled = true;
    this._handleFont = 'SourceSansPro';
    this._handleTextSize = 8;
    this._handleColor = 0xeeeeee;
    this._measureHighlightColor = 0xea5223;
    this._measureHighlightAlpha = 0.15;
    this._measureInserterOffset = 18;
    this._measureHandleHeight = 14;
    this._measureHandleMouseHeight = 48;
    this._measureHandleHighlightColor = 0xffeecc;
    this._measureHandlePadding = 2;
    this._measureHandleAlpha = 0.8;
    this._inserterScale = 0.75;
    this._hiddenMeasureAlpha = 0.25;
    this._staffHandleWidth = 12;
    this._staffHandleExtent = 24;
    this._staffHandlePadding = -10;
    this._dragHighlightOutlineColor = 0xcccccc;
    this._dragHighlightOutlineAlpha = 1;
    this._dragHightlightInsertionPointColor = 0xea5223;
    this._measureHighlightMargin = 2;
    this._systemHighlightMargin = 2;
    this._measureInsertionPointInsert = 1;
    this._measureInsertionMultiVoiceOffset = 2.5;
    this._measureInsertionPointPadding = 0.5;
    this._tabInsertionPointExtension = 0.6;
    this._doubleClickMillis = 300;
    this._displayScale = 1;
    this._displayMode = _models_score__WEBPACK_IMPORTED_MODULE_0__["default"].PAGINATED_DISPLAY;
    this._displayTop = 0;
    this._printView = false;
    this._testView = false;
    this._buildIncrementally = true;
    this._buildWhileIdle = true;
    this._buildScoreAsSoonAsPossible = false;
    this._hidePlaybackControls = false;
    this._shadowBottomUrl = null;
    this._shadowBottomLeftUrl = null;
    this._shadowBottomRightUrl = null;
    this._shadowLeftUrl = null;
    this._shadowPreviewUrl = null;
    this._shadowRightUrl = null;
    this._shadowTopUrl = null;
    this._shadowTopLeftUrl = null;
    this._shadowTopRightUrl = null;
    this._showScoreInfo = true;
    this._measureInsertionPointInset = 1;
    this._useMeasureViewsCache = false;
    this._dragHighlightInsertionPointColor = 0xea5223;
  }
  get feedbackColor() {
    return this._feedbackColor;
  }
  set feedbackColor(v) {
    this._feedbackColor = v;
  }
  get selectionColors() {
    return this._selectionColors;
  }
  set selectionColors(v) {
    this._selectionColors = v;
  }
  get scoreColor() {
    return this._scoreColor;
  }
  set scoreColor(v) {
    this._scoreColor = v;
  }
  get scoreDropShadowDistance() {
    return this._scoreDropShadowDistance;
  }
  set scoreDropShadowDistance(v) {
    this._scoreDropShadowDistance = v;
  }
  get scoreDropShadowColor() {
    return this._scoreDropShadowColor;
  }
  set scoreDropShadowColor(v) {
    this._scoreDropShadowColor = v;
  }
  get scoreDorpShadowAlpha() {
    return this._scoreDorpShadowAlpha;
  }
  set scoreDorpShadowAlpha(v) {
    this._scoreDorpShadowAlpha = v;
  }
  get scoreDropShadowEnabled() {
    return this._scoreDropShadowEnabled;
  }
  set scoreDropShadowEnabled(v) {
    this._scoreDropShadowEnabled = v;
  }
  get handleFont() {
    return this._handleFont;
  }
  set handleFont(v) {
    this._handleFont = v;
  }
  get handleTextSize() {
    return this._handleTextSize;
  }
  set handleTextSize(v) {
    this._handleTextSize = v;
  }
  get handleColor() {
    return this._handleColor;
  }
  set handleColor(v) {
    this._handleColor = v;
  }
  get measureHighlightColor() {
    return this._measureHighlightColor;
  }
  set measureHighlightColor(v) {
    this._measureHighlightColor = v;
  }
  get measureHighlightAlpha() {
    return this._measureHighlightAlpha;
  }
  set measureHighlightAlpha(v) {
    this._measureHighlightAlpha = v;
  }
  get measureInserterOffset() {
    return this._measureInserterOffset;
  }
  set measureInserterOffset(v) {
    this._measureInserterOffset = v;
  }
  get measureHandleHeight() {
    return this._measureHandleHeight;
  }
  set measureHandleHeight(v) {
    this._measureHandleHeight = v;
  }
  get measureHandleMouseHeight() {
    return this._measureHandleMouseHeight;
  }
  set measureHandleMouseHeight(v) {
    this._measureHandleMouseHeight = v;
  }
  get measureHandleHighlightColor() {
    return this._measureHandleHighlightColor;
  }
  set measureHandleHighlightColor(v) {
    this._measureHandleHighlightColor = v;
  }
  get measureHandlePadding() {
    return this._measureHandlePadding;
  }
  set measureHandlePadding(v) {
    this._measureHandlePadding = v;
  }
  get measureHandleAlpha() {
    return this._measureHandleAlpha;
  }
  set measureHandleAlpha(v) {
    this._measureHandleAlpha = v;
  }
  get inserterScale() {
    return this._inserterScale;
  }
  set inserterScale(v) {
    this._inserterScale = v;
  }
  get hiddenMeasureAlpha() {
    return this._hiddenMeasureAlpha;
  }
  set hiddenMeasureAlpha(v) {
    this._hiddenMeasureAlpha = v;
  }
  get staffHandleWidth() {
    return this._staffHandleWidth;
  }
  set staffHandleWidth(v) {
    this._staffHandleWidth = v;
  }
  get staffHandleExtent() {
    return this._staffHandleExtent;
  }
  set staffHandleExtent(v) {
    this._staffHandleExtent = v;
  }
  get staffHandlePadding() {
    return this._staffHandlePadding;
  }
  set staffHandlePadding(v) {
    this._staffHandlePadding = v;
  }
  get dragHighlightOutlineColor() {
    return this._dragHighlightOutlineColor;
  }
  set dragHighlightOutlineColor(v) {
    this._dragHighlightOutlineColor = v;
  }
  get dragHighlightOutlineAlpha() {
    return this._dragHighlightOutlineAlpha;
  }
  set dragHighlightOutlineAlpha(v) {
    this._dragHighlightOutlineAlpha = v;
  }
  get dragHightlightInsertionPointColor() {
    return this._dragHightlightInsertionPointColor;
  }
  set dragHightlightInsertionPointColor(v) {
    this._dragHightlightInsertionPointColor = v;
  }
  get measureHighlightMargin() {
    return this._measureHighlightMargin;
  }
  set measureHighlightMargin(v) {
    this._measureHighlightMargin = v;
  }
  get systemHighlightMargin() {
    return this._systemHighlightMargin;
  }
  set systemHighlightMargin(v) {
    this._systemHighlightMargin = v;
  }
  get measureInsertionPointInsert() {
    return this._measureInsertionPointInsert;
  }
  set measureInsertionPointInsert(v) {
    this._measureInsertionPointInsert = v;
  }
  get measureInsertionMultiVoiceOffset() {
    return this._measureInsertionMultiVoiceOffset;
  }
  set measureInsertionMultiVoiceOffset(v) {
    this._measureInsertionMultiVoiceOffset = v;
  }
  get measureInsertionPointPadding() {
    return this._measureInsertionPointPadding;
  }
  set measureInsertionPointPadding(v) {
    this._measureInsertionPointPadding = v;
  }
  get tabInsertionPointExtension() {
    return this._tabInsertionPointExtension;
  }
  set tabInsertionPointExtension(v) {
    this._tabInsertionPointExtension = v;
  }
  get doubleClickMillis() {
    return this._doubleClickMillis;
  }
  set doubleClickMillis(v) {
    this._doubleClickMillis = v;
  }
  get displayScale() {
    return this._displayScale;
  }
  set displayScale(v) {
    this._displayScale = v;
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(v) {
    this._displayMode = v;
  }
  get displayTop() {
    return this._displayTop;
  }
  set displayTop(v) {
    this._displayTop = v;
  }
  get printView() {
    return this._printView;
  }
  set printView(v) {
    this._printView = v;
  }
  get testView() {
    return this._testView;
  }
  set testView(v) {
    this._testView = v;
  }
  get buildIncrementally() {
    return this._buildIncrementally;
  }
  set buildIncrementally(v) {
    this._buildIncrementally = v;
  }
  get buildWhileIdle() {
    return this._buildWhileIdle;
  }
  set buildWhileIdle(v) {
    this._buildWhileIdle = v;
  }
  get buildScoreAsSoonAsPossible() {
    return this._buildScoreAsSoonAsPossible;
  }
  set buildScoreAsSoonAsPossible(v) {
    this._buildScoreAsSoonAsPossible = v;
  }
  get hidePlaybackControls() {
    return this._hidePlaybackControls;
  }
  set hidePlaybackControls(v) {
    this._hidePlaybackControls = v;
  }
  get shadowBottomUrl() {
    return this._shadowBottomUrl;
  }
  set shadowBottomUrl(v) {
    this._shadowBottomUrl = v;
  }
  get shadowBottomLeftUrl() {
    return this._shadowBottomLeftUrl;
  }
  set shadowBottomLeftUrl(v) {
    this._shadowBottomLeftUrl = v;
  }
  get shadowBottomRightUrl() {
    return this._shadowBottomRightUrl;
  }
  set shadowBottomRightUrl(v) {
    this._shadowBottomRightUrl = v;
  }
  get shadowLeftUrl() {
    return this._shadowLeftUrl;
  }
  set shadowLeftUrl(v) {
    this._shadowLeftUrl = v;
  }
  get shadowPreviewUrl() {
    return this._shadowPreviewUrl;
  }
  set shadowPreviewUrl(v) {
    this._shadowPreviewUrl = v;
  }
  get shadowRightUrl() {
    return this._shadowRightUrl;
  }
  set shadowRightUrl(v) {
    this._shadowRightUrl = v;
  }
  get shadowTopUrl() {
    return this._shadowTopUrl;
  }
  set shadowTopUrl(v) {
    this._shadowTopUrl = v;
  }
  get shadowTopLeftUrl() {
    return this._shadowTopLeftUrl;
  }
  set shadowTopLeftUrl(v) {
    this._shadowTopLeftUrl = v;
  }
  get shadowTopRightUrl() {
    return this._shadowTopRightUrl;
  }
  set shadowTopRightUrl(v) {
    this._shadowTopRightUrl = v;
  }
  get showScoreInfo() {
    return this._showScoreInfo;
  }
  set showScoreInfo(v) {
    this._showScoreInfo = v;
  }
  get measureInsertionPointInset() {
    return this._measureInsertionPointInset;
  }
  set measureInsertionPointInset(v) {
    this._measureInsertionPointInset = v;
  }
  get useMeasureViewsCache() {
    return this._useMeasureViewsCache;
  }
  set useMeasureViewsCache(v) {
    this._useMeasureViewsCache = v;
  }
  get dragHighlightInsertionPointColor() {
    return this._dragHighlightInsertionPointColor;
  }
  set dragHighlightInsertionPointColor(v) {
    this._dragHighlightInsertionPointColor = v;
  }
  clone() {
    const viewInfo = new ViewInfo();
    viewInfo.feedbackColor = this.feedbackColor;
    viewInfo.selectionColors = this.selectionColors.slice();
    viewInfo.displayScale = this.displayScale;
    return viewInfo;
  }
}

/***/ }),

/***/ 22382:
/*!********************************************************************!*\
  !*** ./src/app/note-editor/measure-view/measure-view.component.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MeasureViewComponent": () => (/* binding */ MeasureViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

class MeasureViewComponent {
  constructor() {}
  ngOnInit() {}
}
MeasureViewComponent.ɵfac = function MeasureViewComponent_Factory(t) {
  return new (t || MeasureViewComponent)();
};
MeasureViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: MeasureViewComponent,
  selectors: [["app-measure-view"]],
  decls: 2,
  vars: 0,
  template: function MeasureViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "measure-view works!");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  }
});

/***/ }),

/***/ 18659:
/*!**************************************************!*\
  !*** ./src/app/note-editor/models/accidental.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Accidental": () => (/* binding */ Accidental)
/* harmony export */ });
var Accidental;
(function (Accidental) {
  Accidental["DOUBLE_FLAT"] = "doubleFlat";
  Accidental["FLAT"] = "flat";
  Accidental["NATURAL"] = "natural";
  Accidental["SHARP"] = "sharp";
  Accidental["DOUBLE_SHARP"] = "doubleSharp";
})(Accidental || (Accidental = {}));

/***/ }),

/***/ 32363:
/*!************************************************!*\
  !*** ./src/app/note-editor/models/arpeggio.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ARPEGGIO": () => (/* binding */ ARPEGGIO)
/* harmony export */ });
var ARPEGGIO;
(function (ARPEGGIO) {
  ARPEGGIO["NORMAL"] = "normal";
  ARPEGGIO["UP"] = "up";
  ARPEGGIO["DOWN"] = "down";
})(ARPEGGIO || (ARPEGGIO = {}));

/***/ }),

/***/ 9349:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/models/articulation-attribute.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ArticulationAttribute": () => (/* binding */ ArticulationAttribute)
/* harmony export */ });
var ArticulationAttribute;
(function (ArticulationAttribute) {
  ArticulationAttribute[ArticulationAttribute["ALWAYS_ABOVE_STAFF"] = 1] = "ALWAYS_ABOVE_STAFF";
  ArticulationAttribute[ArticulationAttribute["ALLOWED_IN_STAFF"] = 2] = "ALLOWED_IN_STAFF";
  ArticulationAttribute[ArticulationAttribute["ALLOWED_ON_REST"] = 4] = "ALLOWED_ON_REST";
  ArticulationAttribute[ArticulationAttribute["AFFECTS_WIDTH"] = 8] = "AFFECTS_WIDTH";
  ArticulationAttribute[ArticulationAttribute["PLACE_TO_RIGHT"] = 16] = "PLACE_TO_RIGHT";
  ArticulationAttribute[ArticulationAttribute["STEM_DECORATION"] = 32] = "STEM_DECORATION";
  ArticulationAttribute[ArticulationAttribute["ARTICULATION_LIAISON"] = 64] = "ARTICULATION_LIAISON";
})(ArticulationAttribute || (ArticulationAttribute = {}));

/***/ }),

/***/ 78859:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/articulation.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Articulation": () => (/* binding */ Articulation)
/* harmony export */ });
var Articulation;
(function (Articulation) {
  Articulation["UP_BOW"] = "upBow";
  Articulation["DOWN_BOW"] = "downBow";
  Articulation["CLOSED"] = "closed";
  Articulation["OPEN"] = "open";
  Articulation["BUZZ"] = "buzz";
  Articulation["FERMATA"] = "fermata";
  Articulation["MARCATO"] = "marcato";
  Articulation["MARTELLATO"] = "martellato";
  Articulation["STACCATO"] = "staccato";
  Articulation["STACCATISSIMO"] = "staccatissimo";
  Articulation["TENUTO"] = "tenuto";
  Articulation["BREATH"] = "breath";
  Articulation["CAESURA"] = "caesura";
  Articulation["MORDENT"] = "mordent";
  Articulation["INVERTED_MORDENT"] = "invertedMordent";
  Articulation["TURN"] = "turn";
  Articulation["INVERTED_TURN"] = "invertedTurn";
  Articulation["DELAYED_TURN"] = "delayedTurn";
  Articulation["DELAYED_INVERTED_TURN"] = "delayedInvertedTurn";
  Articulation["LV_TIE"] = "lvTie";
  Articulation["BEND"] = "bendJazz";
  Articulation["HAMMER_ON"] = "hammerOn";
  Articulation["PULL_OFF"] = "pullOff";
})(Articulation || (Articulation = {}));

/***/ }),

/***/ 32655:
/*!***************************************************!*\
  !*** ./src/app/note-editor/models/audio-track.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AudioTrack)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);

class AudioTrack extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this._playbackEnabled = true;
  }
  get playbackEnabled() {
    return this._playbackEnabled;
  }
  set playbackEnabled(v) {
    this._playbackEnabled = v;
  }
}

/***/ }),

/***/ 24728:
/*!***********************************************!*\
  !*** ./src/app/note-editor/models/barline.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Barline)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);

class Barline extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  static get SINGLE() {
    return 'single';
  }
  static get DOUBLE() {
    return 'double';
  }
  static get INVISIBLE() {
    return 'invisible';
  }
  static get FINAL() {
    return 'final';
  }
  static get INITIAL() {
    return 'initial';
  }
  static get DASHED() {
    return 'dashed';
  }
  static get REPEAT() {
    return 'repeat';
  }
  static get START_REPEAT() {
    return 'startRepeat';
  }
  static get END_REPEAT() {
    return 'endRepeat';
  }
  static get GRAND_STAFF() {
    return 'grandStaff';
  }
  static get TOP_START_WING() {
    return 'topStartWing';
  }
  static get BOTTOM_START_WING() {
    return 'bottomStartWing';
  }
  static get TOP_INITIAL_WING() {
    return 'topInitialWing';
  }
  static get BOTTOM_INITIAL_WING() {
    return 'bottomInitialWing';
  }
  static get TOP_END_WING() {
    return 'topEndWing';
  }
  static get BOTTOM_END_WING() {
    return 'bottomEndWing';
  }
  static get BRACE_BODY() {
    return 'braceBody';
  }
  get type() {
    return this._type;
  }
  set type(v) {
    this._type = v;
  }
  get metrical() {
    return this.position === this.measure.duration;
  }
  get hasValueConstraint() {
    return true;
  }
  get breaksMultiMeasureRest() {
    return this.type === Barline.DOUBLE || this.type === Barline.FINAL || this.type === Barline.REPEAT || this.type === Barline.END_REPEAT;
  }
  constructor(rhythmPosition = 0, type = Barline.SINGLE) {
    super(rhythmPosition);
    this.type = type;
  }
  clone() {
    const barline = super.clone(Barline);
    barline.type = this.type;
    return barline;
  }
}

/***/ }),

/***/ 91203:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/block-column.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BlockColumn)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);

class BlockColumn extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get POSITION_AFTER_SYSTEM() {
    return 'after';
  }
  static get POSITION_BEFORE_SYSTEM() {
    return 'before';
  }
  get block() {
    return this._parent;
  }
  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
  }
  get weight() {
    return this._weight;
  }
  set weight(v) {
    this._weight = v;
  }
  get position() {
    return this._position;
  }
  set position(v) {
    this._position = v;
  }
  constructor(text, weight, position = BlockColumn.POSITION_AFTER_SYSTEM) {
    super();
    this._text = text;
    this._weight = weight;
    this._position = position;
  }
}

/***/ }),

/***/ 45577:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/block.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Block)
/* harmony export */ });
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/uuid */ 1275);
/* harmony import */ var _block_column__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./block-column */ 91203);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model */ 10924);



class Block extends _model__WEBPACK_IMPORTED_MODULE_2__["default"] {
  static get PATH_PREFIX() {
    return 'b';
  }
  static get BEFORE_SYSTEM() {
    return 'before';
  }
  static get AFTER_SYSTEM() {
    return 'after';
  }
  get totalColumns() {
    return this.columns.length;
  }
  get totalWeight() {
    return this._totalWeight;
  }
  get measure() {
    return this._measure;
  }
  set measure(v) {
    this._measure = v;
  }
  get uuid() {
    return this._uuid;
  }
  get columns() {
    return this.children;
  }
  get hasColumnPositionedBeforeSystem() {
    for (let i = 0; i < this.columns.length; i++) {
      const column = this.columns[i];
      if (column.position === _block_column__WEBPACK_IMPORTED_MODULE_1__["default"].POSITION_BEFORE_SYSTEM) {
        return true;
      }
    }
    return false;
  }
  get hasColumnPositionedAfterSystem() {
    for (let i = 0; i < this.columns.length; i++) {
      const column = this.columns[i];
      if (column.position === _block_column__WEBPACK_IMPORTED_MODULE_1__["default"].POSITION_AFTER_SYSTEM) {
        return true;
      }
    }
    return false;
  }
  get text() {
    let textConcated = '';
    for (let i = 0; i < this.columns.length; i++) {
      const column = this.columns[i];
      textConcated += column.text;
    }
    return textConcated;
  }
  //   get path() {
  //     var t = this.measure;
  //     return null == t
  //       ? '/'
  //       : ''
  //           .concat(t.path, '/')
  //           .concat(Block.PATH_PREFIX)
  //           .concat(t.blocks.indexOf(this));
  //   }
  constructor() {
    super();
    this._totalWeight = 0;
    this._uuid = (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_0__.generateUUID)();
    this._totalWeight = 0;
    this._measure = null;
  }
  getColumnAt(idx) {
    return this.columns[idx];
  }
  addColumn(column) {
    this.addChild(column);
    this._totalWeight += column.weight;
  }
  getColumnRatio(idx) {
    return this.columns[idx].weight / this.totalWeight;
  }
  accumulatedRatio(endIdx) {
    let weightSum = 0;
    for (let i = 0; i < endIdx; i++) {
      const column = this.columns[endIdx];
      weightSum += column.weight;
    }
    return weightSum / this.totalWeight;
  }
}

/***/ }),

/***/ 72410:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/chord-symbol.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChordSymbol)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _utils_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/note */ 7265);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _text_notation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./text-notation */ 70240);





class ChordSymbol extends _text_notation__WEBPACK_IMPORTED_MODULE_4__["default"] {
  static get TONIC_MATCHER() {
    return ChordSymbol.tonic_matcher;
  }
  get fretboard() {
    return this._fretboard;
  }
  set fretboard(v) {
    this._fretboard = v;
  }
  get alignToStaffTop() {
    return true;
  }
  get paddingY() {
    if (this.fretboard) {
      return this.score.effectiveStaffMetrics.chordSymbolPadding.y;
    } else {
      return this.score.effectiveStaffMetrics.chordFramePadding.y;
    }
  }
  get renderText() {
    return ChordSymbol.canonicalizeChord(this.text);
  }
  get chordTonic() {
    const tonicMatched = this.text.match(ChordSymbol.TONIC_MATCHER);
    if (tonicMatched) {
      return tonicMatched[0];
    } else {
      return null;
    }
  }
  get hideChordSymbols() {
    return this.measure && this.measure.staff && this.measure.staff.part && this.measure.staff.part.hideChordSymbols;
  }
  get hideFretboards() {
    return this.measure && this.measure.staff && this.measure.staff.part && this.measure.staff.part.hideFretboards;
  }
  get transposedText() {
    if (this.measure) {
      return ChordSymbol.transposeSymbol(this.text, this.measure.scoreInterval);
    } else {
      return this.text;
    }
  }
  set transposedText(v) {
    if (this.measure) {
      this.text = ChordSymbol.transposeSymbol(v, this.measure.scoreInterval.inverse());
    } else {
      this.text = v;
    }
  }
  static canonicalizeChord(text) {
    if ('{{' === text.slice(0, 2) && '}}' === text.slice(-2, text.length)) {
      return text.slice(2, -2);
    } else if ('(' == text.charAt(0) && ')' == text.charAt(text.length - 1)) {
      return '(' + ChordSymbol.canonicalizeChord(text.substring(1, text.length - 1)) + ')';
    } else {
      return text.replace(/^([b=#]?)\^([0-9])$/, '$1&$2').replace(/([A-Ga-g])bb/g, '$1%').replace(/([A-Ga-g])##/g, '$1*').replace(/([A-Ga-g])b/g, '$1@').replace(/b(\d|[IiVv&]+)/g, '@$1').replace(/=(\d|[IiVv&]+)/g, '$$$1').replace(/(\/o)/g, 'ø').replace(/b$/, '@').replace(/=$/, '$$').replace(/b([ \/\r\n])/g, '@$1').replace(/=([ \/\r\n])/g, '$$$1').replace(/(([a-gA-G]|[@#]?[IiVv]+)[@#*%]?)o([\(\)@#\$0-9 \/\r\n,]|$)/, '$1°$3').replace(/(([A-GNP]|[@#]?[IiVv]+)[@#*%]?)([a-zA-Z\-\+\u00B0\u00F8]*)([\(\)@#\$0-9 \/\r\n,a-z\-\+\u00B0]*[\)0-9])/g, '$1$3^$4^').replace(/(sus)/gi, '^$1^').replace(/([456])([239])/g, '$1 $2').replace(/(([A-G]|[@#]?[IiVv]+)[@#*%]?)(MAJ|DIM|AUG)/g, '$1!$3!').replace(/\^\^/g, '').replace(/\u00F8/g, '^ø^');
    }
  }
  transposeInterval(interval) {
    if (interval.octaveMultiple) return this;
    const chordSymbol = this.clone();
    chordSymbol.text = ChordSymbol.transposeSymbol(this.text, interval, this.measure.effectiveKeySignature);
    return chordSymbol;
  }
  propertyChangeHandler(evt) {
    throw new Error('Not implemented');
  }
  removeFretboard() {
    this.fretboard = null;
    if (this.score) {
      this.score.effectiveStaffMetrics.showChordDiagrams = false;
    }
  }
  static transposeSymbol(text, interval, effectiveKeySignature = null) {
    if (interval.octaveMultiple || !text.match(/^\s*[A-G]/)) {
      return text;
    }
    return text.replace(/([^a-zA-Z]|\b)([A-G][b#]?[b#]?)([mM]|maj|Maj|MAJ|min|Min|MIN|sus|Sus|SUS|dim|Dim|DIM|[oO]|[^a-zA-Z]|$)/g, function (t, s, noteStr, n, a, o) {
      return s + ChordSymbol.transposeTone(noteStr, interval, effectiveKeySignature) + n;
    });
  }
  static transposeTone(noteStr, interval, effectiveKeySignature = null) {
    let transposedInterval = _note__WEBPACK_IMPORTED_MODULE_3__.Note.fromString(noteStr).transposeInterval(interval);
    while (transposedInterval.alteration > 1) {
      transposedInterval = transposedInterval.transposeInterval(new _interval__WEBPACK_IMPORTED_MODULE_2__["default"](1, 0));
    }
    while (transposedInterval.alteration < -1) {
      transposedInterval = transposedInterval.transposeInterval(new _interval__WEBPACK_IMPORTED_MODULE_2__["default"](-1, 0));
    }
    if (effectiveKeySignature) {
      transposedInterval = (0,_utils_note__WEBPACK_IMPORTED_MODULE_1__.getEnharmonicWithMinimumAlterations)(transposedInterval, effectiveKeySignature);
    }
    return _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].STEP_NAMES.charAt(transposedInterval.step) + ['bb', 'b', '', '#', '##'][transposedInterval.alteration + 2];
  }
  static isFiguredBass(text) {
    return null != text.match(/^[0-9 \/@#%*\$\-\+\\\(][0-9 \/\r\n@#%*\$\-\+\\_\(\)]*$/);
  }
  clone() {
    var chordSymbol = super.clone(ChordSymbol);
    chordSymbol.fretboard = this.fretboard;
    return chordSymbol;
  }
}
ChordSymbol.tonic_matcher = /[A-G][b#]?[b#]?/;

/***/ }),

/***/ 69552:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/models/chunk-element-identifier.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChunkElementIdentifier)
/* harmony export */ });
class ChunkElementIdentifier {
  constructor(measure, afterBlockIndex = -1, beforeBlockIndex = -1, activeBlockType = null) {
    this.measure = measure;
    this.measureIndex = measure.index;
    this.afterBlockIndex = afterBlockIndex;
    this.beforeBlockIndex = beforeBlockIndex;
    this.activeBlockType = activeBlockType;
  }
}

/***/ }),

/***/ 87690:
/*!********************************************!*\
  !*** ./src/app/note-editor/models/clef.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Clef)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./articulation */ 78859);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _notation_value__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-value */ 57485);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _note_head__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./note-head */ 80160);






class Clef extends _notation__WEBPACK_IMPORTED_MODULE_2__.Notation {
  static get G_CLEF_SIGN() {
    return 'G';
  }
  static get F_CLEF_SIGN() {
    return 'F';
  }
  static get C_CLEF_SIGN() {
    return 'C';
  }
  static get TENOR_VOICE_CLEF_SIGN() {
    return 'tenorVoice';
  }
  static get VOCAL_TENOR_CLEF_SIGN() {
    return 'F8below';
  }
  static get PERCUSSION_CLEF_SIGN() {
    return 'percussion';
  }
  static get PERCUSSION2_CLEF_SIGN() {
    return 'percussion2';
  }
  static get TAB_CLEF_SIGN() {
    return 'tab';
  }
  static get BERKLEE_MAP() {
    return 'berklee';
  }
  static get PAS_MAP() {
    return 'PAS';
  }
  static get PERCUSSION_SPLIT_LINE() {
    return 1.5;
  }
  static get SHARP_SEQUENCE() {
    return Clef.sharp_sequence;
  }
  static get FLAT_SEQUENCE() {
    return Clef.flat_sequence;
  }
  get numLines() {
    return this._numLines;
  }
  set numLines(v) {
    this._numLines = v;
  }
  get line() {
    return this._line;
  }
  set line(v) {
    this._line = v;
  }
  get sign() {
    return this._sign;
  }
  set sign(v) {
    this._sign = v;
  }
  get note() {
    return this._note;
  }
  set note(v) {
    this._note = v;
  }
  get lineSpacing() {
    return this._lineSpacing;
  }
  set lineSpacing(v) {
    this._lineSpacing = v;
  }
  get displayLineCount() {
    return this._displayLineCount;
  }
  set displayLineCount(v) {
    this._displayLineCount = v;
  }
  get displayLineSpacing() {
    return this._displayLineSpacing;
  }
  set displayLineSpacing(v) {
    this._displayLineSpacing = v;
  }
  get percussionMap() {
    return this._percussionMap;
  }
  set percussionMap(v) {
    this._percussionMap = v;
  }
  get hasValueConstraint() {
    return true;
  }
  get staffHeight() {
    return (this.numLines - 1) * this.lineSpacing;
  }
  get centerLine() {
    return (this.numLines - 1) / 2;
  }
  get defaultStemsUp() {
    return this.displayLineCount <= 1;
  }
  get initialStep() {
    if (!this.note) throw Error('this.note expected to be non-null');
    let t = this.note.step - 2 * this.line;
    while (t < 0) {
      t += 7;
    }
    return t % 7;
  }
  get unpitched() {
    return this.sign === Clef.PERCUSSION_CLEF_SIGN || this.sign === Clef.PERCUSSION2_CLEF_SIGN;
  }
  get showKey() {
    return true;
  }
  get tabStemDirection() {
    return null;
  }
  get showLegerLines() {
    return this.displayLineCount === this.numLines;
  }
  get showSign() {
    return this.displayLineCount > 0;
  }
  get displayLineStartIndex() {
    return (this.numLines - 1 - (this.displayLineCount - 1) * this.displayLineSpacing) / 2;
  }
  get displayLineEndIndex() {
    return this.displayLineStartIndex + (this.displayLineCount - 1) * this.displayLineSpacing + 1;
  }
  constructor(rhythmPosition = 0, sign = null, line = 0, note = null, numLines = 5, displayLineCount = -1, displayLineSpacing = 1) {
    super(rhythmPosition);
    this._numLines = 0;
    this._line = 0;
    this._lineSpacing = 1;
    this._displayLineCount = -1;
    this.sign = sign;
    this.line = parseFloat(line);
    this.note = note;
    this.numLines = parseFloat(numLines);
    this.displayLineCount = displayLineCount >= 0 ? displayLineCount : numLines;
    this.displayLineSpacing = displayLineSpacing;
    if (sign === Clef.PERCUSSION_CLEF_SIGN) {
      this.percussionMap = Clef.BERKLEE_MAP;
    }
  }
  static parseString(str) {
    switch (str) {
      case 'treble':
      case 'G':
        return Clef.trebleClef();
      case 'tenorVoice':
        return Clef.tenorVoiceClef();
      case 'bass':
      case 'F':
        return Clef.bassClef();
      case 'alto':
        return Clef.altoClef();
      case 'tenor':
        return Clef.tenorClef();
      case 'percussion':
        return Clef.percussionClef();
      default:
        return null;
    }
  }
  static trebleClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.G_CLEF_SIGN, 1, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].G, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE)));
  }
  static tenorVoiceClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.TENOR_VOICE_CLEF_SIGN, 1, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].G, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE - 1)));
  }
  static bassClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.F_CLEF_SIGN, 3, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].F, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE - 1)));
  }
  static altoClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.C_CLEF_SIGN, 2, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].C, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE)));
  }
  static tenorClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.C_CLEF_SIGN, 3, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].C, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE)));
  }
  static vocalTenorClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.VOCAL_TENOR_CLEF_SIGN, 1, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].F, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE - 2)));
  }
  static percussionClef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.PERCUSSION_CLEF_SIGN, 2, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].D, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE - 1)));
  }
  static percussion2Clef(rhythmPosition = 0) {
    return new Clef(rhythmPosition, Clef.PERCUSSION2_CLEF_SIGN, 2, new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].B, _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].MIDDLE_C_OCTAVE)));
  }
  getPitchLine(note) {
    if (!this.note) {
      throw new Error('this.note expected to be non-null');
    }
    return this.line + 0.5 * (note.step - this.note.step) + 3.5 * (note.notatedOctave - this.note.notatedOctave);
  }
  getEffectiveFret(note) {
    return -1;
  }
  isTab() {
    return this.sign === Clef.TAB_CLEF_SIGN;
  }
  getLineNote(line, measure, isSlash = true) {
    if (!this.note) throw Error('this.note expected to be non-null');
    const lineDiff = Math.round(2 * (line - this.line));
    if (isSlash) {
      return this.note.transposeDiatonic(lineDiff - measure.scoreInterval.steps);
    } else {
      return this.note.transposeDiatonic(lineDiff);
    }
  }
  getRestLine(notationValue) {
    let centerLine = this.numLines % 2 === 1 ? (this.numLines - 1) / 2 : this.numLines / 2;
    if (this.displayLineCount > 1) {
      if (this.displayLineCount === 2 && notationValue >= _notation_value__WEBPACK_IMPORTED_MODULE_3__.NotationValue.HALF) {
        centerLine -= this.displayLineSpacing / 2;
      }
      if (notationValue === _notation_value__WEBPACK_IMPORTED_MODULE_3__.NotationValue.WHOLE) {
        centerLine += this.displayLineSpacing;
      }
    }
    return centerLine;
  }
  getKeySignatureLines(cancel) {
    if (cancel > 0) {
      return Clef.SHARP_SEQUENCE[this.initialStep].slice(0, cancel);
    } else if (cancel < 0) {
      return Clef.FLAT_SEQUENCE[this.initialStep].slice(0, -cancel);
    } else {
      return [];
    }
  }
  showRhythm(score) {
    return true;
  }
  equals(clef) {
    return clef.position === this.position && this.sameAs(clef);
  }
  sameAs(clef) {
    return clef.numLines === this.numLines && clef.line === this.line && clef.sign === this.sign && (clef.note != null && this.note != null && clef.note.pitch.ordinal === this.note.pitch.ordinal || clef.note == null && this.note == null);
  }
  mapNoteAndArticulation(note) {
    if (this.percussionMap) {
      if (this.percussionMap === Clef.BERKLEE_MAP) {
        switch (note.pitch.toString()) {
          case 'G#3':
            note.pitch = note.pitch.transpose(-1);
            note.step = _note__WEBPACK_IMPORTED_MODULE_4__.Note.G;
            note.accidental = null;
            return _articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.OPEN;
        }
      } else if (this.percussionMap === Clef.PAS_MAP) {
        if (note.pitch.toString() === 'G#5') {
          note.pitch = note.pitch.transpose(-1);
          note.step = _note__WEBPACK_IMPORTED_MODULE_4__.Note.G;
          note.accidental = null;
          return _articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.OPEN;
        }
      }
    }
    return null;
  }
  defaultNoteHead(pitch) {
    if (this.percussionMap === Clef.BERKLEE_MAP) {
      switch (pitch.toString()) {
        case 'C3':
        case 'G3':
        case 'B3':
        case 'C4':
          return _note_head__WEBPACK_IMPORTED_MODULE_5__.NoteHead.CROSS_NOTE_HEAD;
        default:
          return _note_head__WEBPACK_IMPORTED_MODULE_5__.NoteHead.NORMAL_NOTE_HEAD;
      }
    } else if (this.percussionMap === Clef.PAS_MAP) {
      switch (pitch.toString()) {
        case 'D4':
        case 'F5':
        case 'G5':
        case 'A5':
        case 'B5':
        case 'C6':
          return _note_head__WEBPACK_IMPORTED_MODULE_5__.NoteHead.CROSS_NOTE_HEAD;
        default:
          return _note_head__WEBPACK_IMPORTED_MODULE_5__.NoteHead.NORMAL_NOTE_HEAD;
      }
    }
    return null;
  }
  clone(type = Clef) {
    const clef = super.clone(type);
    clef.numLines = this.numLines;
    clef.line = this.line;
    clef.sign = this.sign;
    clef.note = this.note;
    clef.lineSpacing = this.lineSpacing;
    clef.displayLineCount = this.displayLineCount;
    clef.displayLineSpacing = this.displayLineSpacing;
    clef.percussionMap = this.percussionMap;
    return clef;
  }
}
Clef.sharp_sequence = [[1.5, 3.5, 2, 4, 2.5, 4.5, 3], [1, 3, 1.5, 3.5, 2, 4, 2.5], [4, 2.5, 4.5, 3, 1.5, 3.5, 2], [3.5, 2, 4, 2.5, 1, 3, 1.5], [3, 1.5, 3.5, 2, 0.5, 2.5, 1], [2.5, 1, 3, 1.5, 3.5, 2, 4], [2, 4, 2.5, 4.5, 3, 1.5, 3.5]];
Clef.flat_sequence = [[3, 4.5, 2.5, 4, 2, 3.5, 1.5], [2.5, 4, 2, 3.5, 1.5, 3, 1], [2, 3.5, 1.5, 3, 1, 2.5, 0.5], [1.5, 3, 1, 2.5, 0.5, 2, 0], [1, 2.5, 0.5, 2, 0, 1.5, -0.5], [4, 2, 3.5, 1.5, 3, 1, 2.5], [3.5, 1.5, 3, 1, 2.5, 0.5, 2]];

/***/ }),

/***/ 32229:
/*!********************************************!*\
  !*** ./src/app/note-editor/models/coda.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Coda)
/* harmony export */ });
/* harmony import */ var _system_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system-symbol */ 93093);

class Coda extends _system_symbol__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(rhythmPosition = 0) {
    super(rhythmPosition);
  }
}

/***/ }),

/***/ 90384:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/display-mode.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DisplayMode": () => (/* binding */ DisplayMode)
/* harmony export */ });
var DisplayMode;
(function (DisplayMode) {
  DisplayMode["paginated"] = "paginated";
  DisplayMode["flow"] = "flow";
  DisplayMode["strip"] = "strip";
  DisplayMode["perform"] = "perform";
})(DisplayMode || (DisplayMode = {}));

/***/ }),

/***/ 4123:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/models/effect-notation.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EffectNotation": () => (/* binding */ EffectNotation)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);

class EffectNotation extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  static get RIP1() {
    return 'rip1';
  }
  static get RIP2() {
    return 'rip2';
  }
  static get FALL1() {
    return 'fall1';
  }
  static get FALL2() {
    return 'fall2';
  }
  static get SCOOP() {
    return 'scoop';
  }
  static get PLOP() {
    return 'plop';
  }
  static get QUICK_FALL() {
    return 'quickFall';
  }
  static get DOIT() {
    return 'doit';
  }
  static get PRE_EFFECT() {
    return 'preEffect';
  }
  static get POST_EFFECT() {
    return 'postEffect';
  }
  static get ASCENT_TYPES() {
    return EffectNotation.ascent_types;
  }
  static get PLACEMENT_BY_TYPE() {
    return EffectNotation.placement_by_type;
  }
  static get DEFAULT_ASCENT() {
    return 2;
  }
  static get DEFAULT_SHIFT() {
    return 2;
  }
  get ascent() {
    return this._ascent;
  }
  set ascent(v) {
    this._ascent = v;
  }
  get shift() {
    return this._shift;
  }
  set shift(v) {
    this._shift = v;
  }
  get type() {
    return this._type;
  }
  set type(v) {
    this._type = v;
  }
  get rotation() {
    return this.calculateRotation();
  }
  get length() {
    return this.calculateLength();
  }
  get movable() {
    return true;
  }
  get wavyType() {
    return this.type === EffectNotation.RIP1 || this.type === EffectNotation.FALL1;
  }
  get lineType() {
    return this.type === EffectNotation.RIP2 || this.type === EffectNotation.FALL2;
  }
  get isPreEffect() {
    return EffectNotation.PLACEMENT_BY_TYPE[this.type] === EffectNotation.PRE_EFFECT;
  }
  constructor(type, ascent, shift) {
    super(0);
    this.ascent = ascent;
    this.shift = shift;
    this.type = type;
  }
  calculateRotation() {
    return this.wavyType ? Math.atan2(this.ascent, this.shift) : 0;
  }
  calculateLength() {
    return this.wavyType || this.lineType ? Math.sqrt(Math.pow(this.shift, 2) + Math.pow(this.ascent, 2)) : 0;
  }
  static defaultShift(type) {
    if (EffectNotation.ASCENT_TYPES.indexOf(type) < 0) {
      return 0;
    } else if (EffectNotation.PLACEMENT_BY_TYPE[type] === EffectNotation.PRE_EFFECT) {
      return -EffectNotation.DEFAULT_SHIFT;
    } else {
      return EffectNotation.DEFAULT_SHIFT;
    }
  }
  static defaultAscent(type) {
    if (EffectNotation.ASCENT_TYPES.indexOf(type) < 0) {
      return 0;
    } else {
      return EffectNotation.DEFAULT_ASCENT;
    }
  }
  clone() {
    const effectNotation = super.clone(EffectNotation);
    effectNotation.type = this.type;
    effectNotation.ascent = this.ascent;
    effectNotation.shift = this.shift;
    return effectNotation;
  }
}
EffectNotation.ascent_types = [EffectNotation.RIP1, EffectNotation.RIP2, EffectNotation.FALL1, EffectNotation.FALL2];
EffectNotation.placement_by_type = {
  scoop: 'preEffect',
  plop: 'preEffect',
  rip1: 'preEffect',
  rip2: 'preEffect',
  quickFall: 'postEffect',
  doit: 'postEffect',
  fall1: 'postEffect',
  fall2: 'postEffect'
};

/***/ }),

/***/ 9674:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/models/expression-text.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExpressionText)
/* harmony export */ });
/* harmony import */ var _performance_metrics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./performance-metrics */ 29398);
/* harmony import */ var _text_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./text-notation */ 70240);


class ExpressionText extends _text_notation__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get velocity() {
    return _performance_metrics__WEBPACK_IMPORTED_MODULE_0__["default"].dynamicVelocity(this.text);
  }
  get belowStaff() {
    return this.measure && this.measure.effectiveClef && this.dy < this.measure.effectiveClef.numLines;
  }
  get paddingY() {
    return this.score.effectiveStaffMetrics.expressionTextPadding.y;
  }
  constructor(rhythmPosition = 0, text = null, dy = 0) {
    super(rhythmPosition, text, dy);
  }
}

/***/ }),

/***/ 64917:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/formal-element.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FormalElement)
/* harmony export */ });
class FormalElement {
  constructor(formalElementName, rhythmElement) {
    this.formalElementName = formalElementName;
    this.rhythmElement = rhythmElement;
  }
}

/***/ }),

/***/ 42920:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/fretboard-note.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FretboardNote)
/* harmony export */ });
class FretboardNote {
  constructor() {
    this.string = 0;
    this.fret = 0;
    this.hasFingering = false;
    this.fingering = null;
    this.hasBarre = false;
    this.barre = null;
  }
}

/***/ }),

/***/ 24217:
/*!*************************************************!*\
  !*** ./src/app/note-editor/models/fretboard.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Fretboard)
/* harmony export */ });
/* harmony import */ var _fretboard_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fretboard-note */ 42920);

class Fretboard {
  constructor() {
    this.strings = 0;
    this.frets = 0;
    this.firstFret = 0;
    this.firstFretLocation = null;
    this.firstFretText = null;
    this.notes = [];
  }
  static get FIRST_FRET_LOCATION_RIGHT() {
    return 'right';
  }
  static get FIRST_FRET_LOCATION_LEFT() {
    return 'left';
  }
  get effectiveFirstFretText() {
    let firstFretText = this.firstFretText;
    if (firstFretText === '') {
      firstFretText = null;
    }
    if (firstFretText == null && this.firstFret > 0) {
      firstFretText = this.firstFret.toString() + 'fr';
    }
    return firstFretText;
  }
  static fromChordSymbol(chordsymbol, fretboardMap) {
    const fretboardInfo = fretboardMap[Fretboard.normalizeChordText(chordsymbol.text)];
    const fretboard = new Fretboard();
    Fretboard._MAPPED_NOTE_PROPS.forEach(mapped_prop => {
      fretboard[mapped_prop] = fretboardInfo[mapped_prop] || fretboard[mapped_prop];
    });
    fretboardInfo.notes.forEach(note => {
      const fretboardNote = new _fretboard_note__WEBPACK_IMPORTED_MODULE_0__["default"]();
      Fretboard._MAPPED_NOTE_PROPS.forEach(mapped_note_prop => {
        fretboardNote[mapped_note_prop] = note[mapped_note_prop] || fretboardNote[mapped_note_prop];
      });
      if (note.fingering != null) {
        fretboardNote.hasFingering = true;
      }
      if (note.barre != null) {
        fretboardNote.hasBarre = true;
      }
      fretboard.notes.push(fretboardNote);
    });
    return fretboard;
  }
  static normalizeChordText(text) {
    text = text.chartAt(0).toUpperCase() + text.slice(1);
    return text.replace(/\s/g, '').replace(/7sus/g, '7(4,no3)').replace(/(minor|min)/g, 'm').replace(/major/g, 'maj');
  }
}
Fretboard._MAPPED_PROPS = ['strings', 'frets', 'firstFret', 'firstFretLocation'];
Fretboard._MAPPED_NOTE_PROPS = ['string', 'fret', 'fingering', 'hasBarre', 'barre'];

/***/ }),

/***/ 76088:
/*!***********************************************!*\
  !*** ./src/app/note-editor/models/hairpin.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Hairpin)
/* harmony export */ });
/* harmony import */ var _span_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./span-notation */ 43586);

class Hairpin extends _span_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get CRESCENDO() {
    return 'crescendo';
  }
  static get DIMINUENDO() {
    return 'diminuendo';
  }
  constructor(rhythmPosition = 0, includeGrace, span = 0, type = Hairpin.CRESCENDO, endX = 0, ascent = 0) {
    super(rhythmPosition, includeGrace, span, endX, ascent);
    this.type = type;
  }
  static createHairpin(type, staffMetrics) {
    const hairpin = new Hairpin(0, true, 0, type, 0, 0);
    hairpin.dy = staffMetrics.hairpinPadding.y;
    return hairpin;
  }
  setDefaultInfo(info) {
    if (!info.empty) {
      this.dx = info.startNoteWidth;
      this.endX = info.endNoteWidth;
    }
  }
  clone() {
    const hairpin = super.clone(Hairpin);
    hairpin.type = this.type;
    return hairpin;
  }
}

/***/ }),

/***/ 56250:
/*!************************************************!*\
  !*** ./src/app/note-editor/models/interval.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Interval)
/* harmony export */ });
/* harmony import */ var _utils_note_const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/note-const */ 28490);

class Interval {
  get steps() {
    return this._steps;
  }
  get pitches() {
    return this._pitches;
  }
  get unison() {
    return this._steps === 0 && this.pitches === 0;
  }
  get octaveMultiple() {
    return Math.abs(this._steps) % 7 === 0 && Math.abs(this._pitches) % 12 === 0;
  }
  get fifths() {
    const normalizedAbsInterval = this.abs().normalize();
    let least_fifth = _utils_note_const__WEBPACK_IMPORTED_MODULE_0__.LEAST_FIFTHS[normalizedAbsInterval.pitches];
    let steps = normalizedAbsInterval.steps - _utils_note_const__WEBPACK_IMPORTED_MODULE_0__.LEAST_FIFTHS_STEPS[normalizedAbsInterval.pitches];
    while (steps > 3) {
      steps -= 7;
    }
    while (steps < -3) {
      steps += 7;
    }
    least_fifth -= 12 * steps;
    if (this._pitches >= 0 && this._steps >= 0) {
      return least_fifth;
    } else {
      return -least_fifth;
    }
  }
  get stepClass() {
    let steps = this.steps;
    while (steps < 0) {
      steps += 7;
    }
    while (steps >= 7) {
      steps -= 7;
    }
    return steps;
  }
  get intervalClass() {
    let pitches = this.pitches;
    while (pitches < 0) {
      pitches += 12;
    }
    while (pitches >= 12) {
      pitches -= 12;
    }
    return pitches;
  }
  constructor(steps = 0, pitches = 0) {
    this._steps = steps;
    this._pitches = pitches;
  }
  static fromPitches(pitches) {
    const octave = Math.floor(Math.abs(pitches) / 12);
    const semitone = Math.abs(pitches) % 12;
    let steps = _utils_note_const__WEBPACK_IMPORTED_MODULE_0__.LEAST_FIFTHS_STEPS[semitone] + 7 * octave;
    if (pitches < 0) {
      steps -= steps;
    }
    return new Interval(steps, pitches);
  }
  add(interval) {
    return new Interval(this.steps + interval.steps, this.pitches + interval.pitches);
  }
  normalize() {
    return new Interval(this.stepClass, this.intervalClass);
  }
  normalizeTritone() {
    if (this.intervalClass === 6 && this.stepClass === 4) {
      return new Interval(this.steps - 1, this.pitches);
    } else {
      return this;
    }
  }
  abs() {
    return new Interval(Math.abs(this.steps), Math.abs(this.pitches));
  }
  inverse() {
    return new Interval(-this.steps, -this.pitches);
  }
  static fromString(intervalStr) {
    const segments = intervalStr.split(':');
    return new Interval(segments[0], segments[1]);
  }
  toString() {
    return this.steps.toString() + ':' + this.pitches.toString();
  }
}

/***/ }),

/***/ 48050:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/keysignature.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ KeySignature)
/* harmony export */ });
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./noteset */ 46605);




class KeySignature extends _notation__WEBPACK_IMPORTED_MODULE_1__.Notation {
  static get MODE_FIFTHS() {
    return KeySignature.mode_fifths;
  }
  static get SHARP_KEY_NAMES() {
    return KeySignature.sharp_key_names;
  }
  static get FLAT_KEY_NAMES() {
    return KeySignature.flat_key_names;
  }
  static get SHARP_FIFTHS() {
    return KeySignature.sharp_fifths;
  }
  static get SIX_ACCIDENTALS() {
    return KeySignature.six_accidentals;
  }
  static get SEVEN_ACCIDENTALS() {
    return KeySignature.seven_accidentals;
  }
  static get ENHARMONIC_PAIRS() {
    return KeySignature.enharmonic_pairs;
  }
  get fifths() {
    return this._fifths;
  }
  set fifths(v) {
    this._fifths = v;
  }
  get cancel() {
    return this._cancel;
  }
  set cancel(v) {
    this._cancel = v;
  }
  get atonal() {
    return this._atonal;
  }
  set atonal(v) {
    this._atonal = v;
  }
  get mode() {
    return this._mode;
  }
  set mode(v) {
    this._mode = v;
  }
  get tonic() {
    if (this.mode == null) {
      return null;
    } else {
      return this.extractTonic(this.fifths - KeySignature.MODE_FIFTHS[this.mode]);
    }
  }
  get majorTonic() {
    return this.extractTonic(this.fifths);
  }
  get enharmonicDistance() {
    return this._enharmonicDistance;
  }
  set enharmonicDistance(v) {
    this._enharmonicDistance = v;
  }
  constructor(fifths = 0, cancel = 0, atonal, mode = null) {
    super(0);
    this._fifths = 0;
    this._cancel = 0;
    this._atonal = false;
    this._mode = null;
    this._enharmonicDistance = 0;
    this.fifths = parseFloat(fifths);
    this.cancel = parseFloat(cancel);
    this.atonal = atonal;
    this.mode = mode;
  }
  equals(keySignature) {
    return keySignature === this || this.fifths === keySignature.fifths;
  }
  getAlteration(step) {
    if (this.fifths > 0) {
      if (KeySignature.SHARP_FIFTHS[step] <= this.fifths) {
        return 1;
      } else {
        return 0;
      }
    } else {
      if (this.fifths < 0 && KeySignature.SHARP_FIFTHS[step] - 8 >= this.fifths) {
        return -1;
      } else {
        return 0;
      }
    }
  }
  extractTonic(fifths) {
    if (fifths >= 0) {
      return KeySignature.SHARP_KEY_NAMES[fifths];
    } else {
      return KeySignature.FLAT_KEY_NAMES[-fifths];
    }
  }
  getTranspositions() {
    const transpositions = [];
    for (let pitch = 0; pitch < 12; pitch++) {
      transpositions.push(this.transposeFifths(_interval__WEBPACK_IMPORTED_MODULE_0__["default"].fromPitches(pitch).normalizeTritone().fifths));
    }
  }
  getNoteForPitch(pitch, closestMatchingPitch = null) {
    const note = new _note__WEBPACK_IMPORTED_MODULE_2__.Note(pitch);
    if (closestMatchingPitch != null && pitch.ordinal === closestMatchingPitch.pitch.ordinal) {
      note.step = closestMatchingPitch.step;
      return note;
    }
    if (note.alteration == this.getAlteration(note.step)) {
      return note;
    }
    const step = note.step;
    if (this.fifths < 0) {
      note.step = (note.step + 1) % 7;
      if (note.alteration === this.getAlteration(note.step)) {
        return note;
      }
    } else {
      note.step = (note.step - 1 + 7) % 7;
      if (this.fifths > 0 && note.alteration === this.getAlteration(note.step)) {
        return note;
      }
    }
    note.step = step;
    if (closestMatchingPitch != null) {
      const ordinalDiff = pitch.ordinal - closestMatchingPitch.pitch.ordinal;
      if (ordinalDiff === -1 || ordinalDiff === 1) {
        const alteration = Math.abs(note.alteration);
        const noteStep = note.step;
        note.step = (closestMatchingPitch.step + ordinalDiff + 7) % 7;
        const o = Math.abs(note.alteration);
        if (note.alteration !== this.getAlteration(note.step) && alteration < o) {
          note.step = noteStep;
          note.normalizeAlteration(1);
        }
      } else {
        const noteCopy = note.clone();
        const closestCopy = closestMatchingPitch.clone();
        const noteSet = new _noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet();
        noteSet.addNote(noteCopy);
        noteSet.addNote(closestCopy);
        noteSet.normalizeSpelling(this);
        if (closestCopy.step === closestMatchingPitch.step) {
          note.step = noteCopy.step;
        } else if (closestCopy.alteration <= -1 && noteCopy.alteration <= -1 && (closestCopy.step + 6) % 7 === closestMatchingPitch.step) {
          note.step = (noteCopy.step + 6) % 7;
        } else if (closestCopy.alteration >= 1 && noteCopy.alteration >= 1 && (closestCopy.step + 1) % 7 === closestMatchingPitch.step) {
          note.step = (noteCopy.step + 1) % 7;
        }
      }
      return note;
    }
  }
  transposeFifths(fifths) {
    if (this.atonal || fifths === 0) return this;
    const keySignature = this.clone();
    keySignature.fifths += fifths;
    while (keySignature.fifths > 7) {
      keySignature.fifths -= 12;
      keySignature.enharmonicDistance += 1;
    }
    while (keySignature.fifths < -7) {
      keySignature.fifths += 12;
      keySignature.enharmonicDistance -= 1;
    }
    keySignature.cancel += fifths;
    while (keySignature.cancel > 7) {
      keySignature.cancel -= 12;
    }
    while (keySignature.cancel < -7) {
      keySignature.cancel += 12;
    }
    return keySignature;
  }
  transposeByInterval(interval) {
    const fifth = 7 * interval % 12;
    return this.transposeFifths(fifth);
  }
  minimize() {
    if (this.fifths === -7) {
      return this.transposeFifths(12);
    } else if (this.fifths === 7) {
      return this.transposeFifths(-12);
    } else {
      return this;
    }
  }
  maximize() {
    if (this.fifths === 5) {
      return this.transposeFifths(-12);
    } else if (this.fifths === -5) {
      return this.transposeFifths(12);
    } else {
      return this;
    }
  }
  getAlternateSix() {
    if (Math.abs(this.fifths) !== 6) {
      return this;
    } else {
      return new KeySignature(-this.fifths, this.cancel, this.atonal, this.mode);
    }
  }
  isEnharmonicTone(enharmonic_pair) {
    return KeySignature.ENHARMONIC_PAIRS[this.tonic] === enharmonic_pair;
  }
  clone() {
    const keySignature = super.clone(KeySignature);
    keySignature.fifths = this.fifths;
    keySignature.cancel = this.cancel;
    keySignature.atonal = this.atonal;
    keySignature.mode = this.mode;
    return keySignature;
  }
}
KeySignature.mode_fifths = {
  major: 0,
  minor: -3,
  ionian: 0,
  dorian: -2,
  phrygian: -4,
  lydian: 1,
  mixolydian: -1,
  aeolian: -3,
  locrian: -5
};
KeySignature.sharp_key_names = ['C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'G#', 'D#', 'A#', 'E#', 'B#' //13
];

KeySignature.flat_key_names = ['C', 'F', 'Bb', 'Eb', 'Ab', 'Db', 'Gb', 'Cb', 'Fb', 'Bbb', 'Ebb', 'Abb' //12
];

KeySignature.sharp_fifths = [2, 4, 6, 1, 3, 5, 7];
KeySignature.six_accidentals = ['Gb', 'F#', 'Eb', 'D#'];
KeySignature.seven_accidentals = ['C#', 'Cb', 'A#', 'Ab'];
KeySignature.enharmonic_pairs = {
  Gb: 'F#',
  Db: 'C#',
  B: 'Cb',
  'D#': 'Eb',
  Bb: 'A#',
  'G#': 'Ab',
  'F#': 'Gb',
  'C#': 'Db',
  Cb: 'B',
  Eb: 'D#',
  'A#': 'Bb',
  Ab: 'G#'
};

/***/ }),

/***/ 9213:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/label-notation.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LabelNotation)
/* harmony export */ });
/* harmony import */ var _text_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-notation */ 70240);

class LabelNotation extends _text_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(rhythmPosition = 0, text = null, dy = 0) {
    super(rhythmPosition, text, dy);
    this.alignToLeftEdge = false;
    this.enabled = false;
  }
  get alignToStaffTop() {
    return true;
  }
}

/***/ }),

/***/ 48903:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/models/layout-position.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LayoutPosition)
/* harmony export */ });
/* harmony import */ var _barline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barline */ 24728);
/* harmony import */ var _lyric__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lyric */ 10914);


class LayoutPosition {
  constructor(notationLayout) {
    this.constraint = null;
    this.leftConstraint = null;
    this.position = NaN;
    this.duration = NaN;
    this.barline = false;
    this.staffIndex = 0;
    this.voiceNumber = 0;
    this.includeInPositioning = false;
    this.constraint = notationLayout.constraint;
    this.leftConstraint = notationLayout.leftConstraint;
    const notation = notationLayout.notation;
    this.voiceNumber = notation.voiceNumber;
    this.staffIndex = notation.measure.staff ? notation.measure.staff.index : -1;
    this.position = notation.position;
    this.duration = notation.duration;
    this.barline = notation instanceof _barline__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.includeInPositioning = !(notation.excludeFromPositioning || notation instanceof _lyric__WEBPACK_IMPORTED_MODULE_1__["default"]);
  }
  get x() {
    return this.constraint.layoutVector.length;
  }
}

/***/ }),

/***/ 31253:
/*!***********************************************!*\
  !*** ./src/app/note-editor/models/liaison.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Liaison": () => (/* binding */ Liaison)
/* harmony export */ });
var Liaison;
(function (Liaison) {
  Liaison["TIE_LIAISON"] = "tie";
  Liaison["BEND_LIAISON"] = "bend";
  Liaison["PRE_BEND_LIAISON"] = "preBend";
  Liaison["SLIDE_LIAISON"] = "slide";
  Liaison["GLISSANDO_LIAISON"] = "glissando";
})(Liaison || (Liaison = {}));

/***/ }),

/***/ 93207:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/line-notation.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineNotation)
/* harmony export */ });
/* harmony import */ var _span_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./span-notation */ 43586);

// import Trill from './trill';
class LineNotation extends _span_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get TYPE_DEFAULT() {
    return 'default';
  }
  static get TYPE_OCTAVE_UP() {
    return 'octaveUp';
  }
  static get TYPE_OCTAVE_DOWN() {
    return 'octaveDown';
  }
  static get TYPE_TWO_OCTAVES_UP() {
    return 'twoOctavesUp';
  }
  static get TYPE_LET_VIBRATE() {
    return 'letVibrate';
  }
  static get TYPE_NON_VIBRATO() {
    return 'nonVibrato';
  }
  static get TYPE_CRESCENDO() {
    return 'crescendo';
  }
  static get TYPE_VIBRATO() {
    return 'vibrato';
  }
  static get TYPE_DIMINUENDO() {
    return 'diminuendo';
  }
  static get TYPE_TRILL() {
    return 'trill';
  }
  static get TYPE_PALM_MUTE() {
    return 'palmMute';
  }
  static get TYPE_RITARDANDO() {
    return 'ritardando';
  }
  static get TYPE_ACCELERANDO() {
    return 'accelerando';
  }
  static get TYPE_PEDAL() {
    return 'pedal';
  }
  static get TYPE_SOLID() {
    return 'solid';
  }
  static get TYPE_SOLID_BRACKET_DOWN() {
    return 'solidBracketDown';
  }
  static get TYPE_SOLID_BRACKET_MIDDLE() {
    return 'solidBracketMiddle';
  }
  static get TYPE_SOLID_BRACKET_UP() {
    return 'solidBracketUp';
  }
  static get TYPE_DASHED() {
    return 'dashed';
  }
  static get TYPE_DASHED_FINAL_DOWN() {
    return 'dashedFinalDown';
  }
  static get TYPE_DASHED_FINAL_MIDDLE() {
    return 'dashedFinalMiddle';
  }
  static get TYPE_DASHED_FINAL_UP() {
    return 'dashedFinalUp';
  }
  static get TYPE_MULTIREST() {
    return 'multirest';
  }
  static get LV_TYPES() {
    return LineNotation.lv_types;
  }
  static get ITALIC_TEXT() {
    return LineNotation.italic_text;
  }
  static get ALLOW_ASCENT() {
    return LineNotation.allow_ascent;
  }
  static get DEFAULT_POSITION_BELLOW_STAFF() {
    return LineNotation.default_position_bellow_staff;
  }
  static get VOCAL_STAFF_ABOVE_STAFF() {
    return this.vocal_staff_above_staff;
  }
  static get DEFAULT_DX() {
    return LineNotation.default_dx;
  }
  static get DEFAULT_ENDX() {
    return LineNotation.default_endx;
  }
  static get BOTTOM_PADDING() {
    return LineNotation.bottom_padding;
  }
  static get STARTING_TEXT_TO_TYPE_TABLE() {
    return LineNotation.starting_text_to_type_table;
  }
  get startingText() {
    return this._startingText;
  }
  set startingText(v) {
    this._startingText = v;
  }
  get bracketLength() {
    return this._bracketLength;
  }
  set bracketLength(v) {
    this._bracketLength = v;
  }
  get affectEntirePart() {
    return this.type === LineNotation.TYPE_PEDAL;
  }
  get allowAscent() {
    return LineNotation.allow_ascent.indexOf(this.type) >= 0;
  }
  get isBold() {
    return true;
  }
  get isItalic() {
    return LineNotation.italic_text.indexOf(this.type) >= 0;
  }
  get top() {
    return this.allowAscent ? 0 : super.top;
  }
  get bottom() {
    if (LineNotation.bottom_padding[this.type] != null) {
      return super.bottom - LineNotation.bottom_padding[this.type];
    } else if (this.allowAscent) {
      return 0;
    } else {
      return super.bottom;
    }
  }
  get canStartAtBarline() {
    return false;
  }
  get canEndAtBarline() {
    return true;
  }
  constructor(rhythmPosition = 0, includeGrace = true, span = 0, type = LineNotation.TYPE_DEFAULT, endX = 0, ascent = 0, startingText = '', bracketLength = 0) {
    super(rhythmPosition, includeGrace, span, endX, ascent);
    this.type = type;
    this.startingText = startingText;
    this.bracketLength = bracketLength;
  }
  // static createLineNotation(type, startingText = null) {
  //   let lineNotation;
  //   if (type === LineNotation.TYPE_TRILL) {
  //     lineNotation = new Trill(0, 0, type);
  //   } else {
  //     lineNotation = new LineNotation(0, true, 0, type);
  //   }
  //   if (startingText) {
  //     lineNotation.startingText = startingText;
  //   }
  //   return lineNotation;
  // }
  static mapStartingTextToType(startingText) {
    for (const key in LineNotation.STARTING_TEXT_TO_TYPE_TABLE) {
      const regex = LineNotation.STARTING_TEXT_TO_TYPE_TABLE[key];
      if (startingText.match(regex)) {
        return key;
      }
    }
    return LineNotation.TYPE_DEFAULT;
  }
  defaultPositionAboveStaff(staff) {
    return !!(LineNotation.VOCAL_STAFF_ABOVE_STAFF.indexOf(this.type) > -1 && staff.part.directionsAboveStaff) || LineNotation.DEFAULT_POSITION_BELLOW_STAFF.indexOf(this.type) === -1;
  }
  setDefaultInfo(info) {
    if (!info.empty) {
      if (LineNotation.DEFAULT_DX.hasOwnProperty(this.type)) {
        this.dx = LineNotation.DEFAULT_DX[this.type];
      } else {
        this.dx = info.startNoteWidth;
      }
      if (LineNotation.DEFAULT_ENDX.hasOwnProperty(this.type)) {
        this.endX = LineNotation.DEFAULT_ENDX[this.type];
      } else {
        this.endX = 0;
      }
      this.span = info.startEndSpan;
    }
  }
  clone(type = LineNotation) {
    const lineNotation = super.clone(type);
    lineNotation.type = this.type;
    lineNotation.startingText = this.startingText;
    lineNotation.bracketLength = this.bracketLength;
    return lineNotation;
  }
  static _staticInitializer() {
    LineNotation.DEFAULT_DX[LineNotation.TYPE_OCTAVE_UP] = -0.75;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_OCTAVE_UP] = 1;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_OCTAVE_DOWN] = -0.75;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_OCTAVE_DOWN] = 1;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_LET_VIBRATE] = -0.5;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_LET_VIBRATE] = 1;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_TRILL] = -0.4;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_TRILL] = 0;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_VIBRATO] = -0.25;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_VIBRATO] = 2;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_CRESCENDO] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_CRESCENDO] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_DIMINUENDO] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_DIMINUENDO] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_ACCELERANDO] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_ACCELERANDO] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_RITARDANDO] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_RITARDANDO] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_PEDAL] = -1;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_PEDAL] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_SOLID] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_SOLID] = 1.5;
    LineNotation.DEFAULT_DX[LineNotation.TYPE_DASHED] = 0;
    LineNotation.DEFAULT_ENDX[LineNotation.TYPE_DASHED] = 2;
    LineNotation.BOTTOM_PADDING[LineNotation.TYPE_PEDAL] = 1.5;
  }
}
LineNotation.lv_types = [LineNotation.TYPE_LET_VIBRATE, LineNotation.TYPE_PEDAL];
LineNotation.italic_text = [LineNotation.TYPE_LET_VIBRATE, LineNotation.TYPE_PALM_MUTE, LineNotation.TYPE_CRESCENDO, LineNotation.TYPE_DIMINUENDO];
LineNotation.allow_ascent = [LineNotation.TYPE_SOLID, LineNotation.TYPE_SOLID_BRACKET_DOWN, LineNotation.TYPE_SOLID_BRACKET_UP, LineNotation.TYPE_DASHED];
LineNotation.default_position_bellow_staff = [LineNotation.TYPE_PEDAL, LineNotation.TYPE_OCTAVE_DOWN, LineNotation.TYPE_CRESCENDO, LineNotation.TYPE_DIMINUENDO];
LineNotation.vocal_staff_above_staff = [LineNotation.TYPE_CRESCENDO, LineNotation.TYPE_DIMINUENDO, LineNotation.TYPE_LET_VIBRATE];
LineNotation.default_dx = {};
LineNotation.default_endx = {};
LineNotation.bottom_padding = {};
LineNotation.starting_text_to_type_table = {
  octaveUp: /^8|8va/i,
  twoOctavesUp: /^15ma|15/i,
  octaveDown: /^8|8vb|8va bassa/i,
  trill: /^tr.?/i,
  diminuendo: /^dim.*/i,
  crescendo: /^cresc.*/i,
  letVibrate: /^lv|l\.v\.|let ring/i,
  nonVibrato: /^nv|n\.v\.|non vib.*/i,
  palmMute: /^pm|p\.m\.|palm mute.*/i,
  ritardando: /^rit.*/i,
  accelerando: /^accel.*/i
};
LineNotation._staticInitializer();

/***/ }),

/***/ 10914:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/lyric.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Lyric)
/* harmony export */ });
/* harmony import */ var _note_set_child__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./note-set-child */ 40073);

class Lyric extends _note_set_child__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
  }
  get line() {
    return this._line;
  }
  set line(v) {
    this._line = v;
  }
  get continued() {
    return this._continued;
  }
  set continued(v) {
    this._continued = v;
  }
  get noninitial() {
    return this._noninitial;
  }
  set noninitial(v) {
    this._noninitial = v;
  }
  get extend() {
    return this._extend;
  }
  set extend(v) {
    this._extend = v;
  }
  get metrical() {
    return true;
  }
  constructor(text = '', line = 0, continued, extend, noninitial, direction = null) {
    super();
    this._text = '';
    this._line = 0;
    this._continued = false;
    this._noninitial = false;
    this._extend = false;
    this.text = text;
    this.line = line;
    this.continued = continued;
    this.extend = extend;
    this.noninitial = noninitial;
    this.direction = direction;
  }
  equals(lyric) {
    return this.text === lyric.text && this.line === lyric.line && this.continued === lyric.continued && this.extend === lyric.extend && this.noninitial === lyric.noninitial && this.direction === lyric.direction;
  }
  clone() {
    const lyric = super.clone(Lyric);
    lyric.text = this.text;
    lyric.line = this.line;
    lyric.continued = this.continued;
    lyric.extend = this.extend;
    lyric.noninitial = this.noninitial;
    return lyric;
  }
}

/***/ }),

/***/ 1181:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/measure-info.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureInfo)
/* harmony export */ });
class MeasureInfo {
  constructor() {
    this._timeSignature = null;
    this._keySignature = null;
    this._tempo = null;
  }
  get timeSignature() {
    return this._timeSignature;
  }
  set timeSignature(v) {
    this._timeSignature = v;
  }
  get keySignature() {
    return this._keySignature;
  }
  set keySignature(v) {
    this._keySignature = v;
  }
  get tempo() {
    return this._tempo;
  }
  set tempo(v) {
    this._tempo = v;
  }
  equals(measureInfo) {
    return this.timeSignature.equals(measureInfo.timesignature) && this.keySignature.equals(measureInfo.keySignature) && this.tempo.equals(measureInfo.tempo);
  }
  clone() {
    const measureInfo = new MeasureInfo();
    measureInfo.tempo = this.tempo.clone();
    measureInfo.timeSignature = this.timeSignature.clone();
    measureInfo.keySignature = this.keySignature.clone();
    return measureInfo;
  }
}

/***/ }),

/***/ 36987:
/*!***************************************************************!*\
  !*** ./src/app/note-editor/models/measure-number-notation.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureNumberNotation)
/* harmony export */ });
/* harmony import */ var _label_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-notation */ 9213);

class MeasureNumberNotation extends _label_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(rhythmPosition, measure, options = {}) {
    super(rhythmPosition, measure.measureNumber.toString(), 0);
    this._measure = measure;
    this.enabled = true;
    this.invisibleText = options.invisible || false;
  }
  get text() {
    if (this.invisibleText) {
      return '';
    } else {
      return this._measure.measureNumber.toString();
    }
  }
  set text(val) {
    this._text = val;
    if (val === '') {
      this.invisibleText = true;
    }
  }
}

/***/ }),

/***/ 83067:
/*!********************************************************!*\
  !*** ./src/app/note-editor/models/measure-position.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasurePosition)
/* harmony export */ });
class MeasurePosition {
  static get MAX_POSITION() {
    return MeasurePosition.max_position;
  }
  static get MIN_POSITION() {
    return MeasurePosition.min_position;
  }
  get measureIndex() {
    return this._measureIndex;
  }
  get position() {
    return this._position;
  }
  constructor(measureIndex, position) {
    this._measureIndex = 0;
    this._position = NaN;
    this._measureIndex = measureIndex;
    this._position = position;
  }
  isGreaterThan(measurePosition) {
    return this.compareTo(measurePosition) > 0;
  }
  compareTo(measurePosition) {
    return this.measureIndex < measurePosition.measureIndex ? -1 : this.measureIndex > measurePosition.measureIndex ? 1 : this.position < measurePosition.position ? -1 : this.position > measurePosition.position ? 1 : 0;
  }
  toString() {
    return `[measure: ${this.measureIndex}, pos: ${this.position}]`;
  }
}
MeasurePosition.max_position = new MeasurePosition(4294967295, 0);
MeasurePosition.min_position = new MeasurePosition(0, 0);

/***/ }),

/***/ 27506:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/measure-repeat.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureRepeat)
/* harmony export */ });
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./noteset */ 46605);


class MeasureRepeat extends _noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet {
  static get MEASURE_REPEAT_SIGN() {
    return 'measureRepeat';
  }
  get rhythmDuration() {
    if (this.measure == null) {
      if (super.rhythmDuration !== 0) {
        return super.rhythmDuration;
      } else {
        return 0;
      }
    } else {
      return this.measure.duration;
    }
  }
  set rhythmDuration(v) {
    super.rhythmDuration = v;
  }
  constructor() {
    super(0, null, 0, 0);
  }
  clone() {
    return super.clone(MeasureRepeat);
  }
  static setMeasureToMeasureRepeat(measure) {
    measure.removePositionRange(0, measure.duration, _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__.VoiceNumber.UNKNOWN_VOICE_NUMBER);
    measure.removeEmptyVoices();
    const voiceNumber = measure.getVoiceNumber(0, true);
    const measureRepeat = new MeasureRepeat();
    voiceNumber.addElement(measureRepeat);
    return measureRepeat;
  }
}

/***/ }),

/***/ 29839:
/*!***********************************************!*\
  !*** ./src/app/note-editor/models/measure.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Measure)
/* harmony export */ });
/* harmony import */ var _processing_accidental_processor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../processing/accidental-processor */ 77357);
/* harmony import */ var _processing_liaison_processor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../processing/liaison-processor */ 51799);
/* harmony import */ var _processing_remove_position_range_options__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../processing/remove-position-range-options */ 93781);
/* harmony import */ var _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../processing/rhythm-processor */ 29722);
/* harmony import */ var _processing_string_assignment_processor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../processing/string-assignment-processor */ 1755);
/* harmony import */ var _utils_rhythm_element__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/rhythm-element */ 54131);
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/uuid */ 1275);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./articulation */ 78859);
/* harmony import */ var _barline__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./barline */ 24728);
/* harmony import */ var _chord_symbol__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./chord-symbol */ 72410);
/* harmony import */ var _clef__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./clef */ 87690);
/* harmony import */ var _coda__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./coda */ 32229);
/* harmony import */ var _formal_element__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./formal-element */ 64917);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _keysignature__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./keysignature */ 48050);
/* harmony import */ var _liaison__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./liaison */ 31253);
/* harmony import */ var _line_notation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./line-notation */ 93207);
/* harmony import */ var _measure_info__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./measure-info */ 1181);
/* harmony import */ var _measure_repeat__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./measure-repeat */ 27506);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _model_event_kind__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./model-event-kind */ 21151);
/* harmony import */ var _multi_rest__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./multi-rest */ 92488);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _notation_direction__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./notation-direction */ 66420);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./noteset */ 46605);
/* harmony import */ var _performance_text__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./performance-text */ 92946);
/* harmony import */ var _repeat_ending__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./repeat-ending */ 10195);
/* harmony import */ var _repeat_info__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./repeat-info */ 85742);
/* harmony import */ var _slur__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./slur */ 85888);
/* harmony import */ var _span_notation__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./span-notation */ 43586);
/* harmony import */ var _staff__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./staff */ 35126);
/* harmony import */ var _system_symbol__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./system-symbol */ 93093);
/* harmony import */ var _tablature_clef__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./tablature-clef */ 20511);
/* harmony import */ var _tacet__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./tacet */ 51744);
/* harmony import */ var _tempo__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./tempo */ 72620);
/* harmony import */ var _text_notation__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./text-notation */ 70240);
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./timesignature */ 67379);
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./tuplet */ 69519);
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./voice */ 38445);









































class Measure extends _model__WEBPACK_IMPORTED_MODULE_20__["default"] {
  static get PAGE_BREAK_TYPE() {
    return 'page';
  }
  static get SYSTEM_BREAK_TYPE() {
    return 'system';
  }
  static get KEEP_WITH_NEXT_TYPE() {
    return 'keepWithNext';
  }
  static get FORCE_NO_BREAK() {
    return 'noBreak';
  }
  static get MULTI_REST_NONE() {
    return 0;
  }
  static get MULTI_REST_BODY() {
    return -1;
  }
  static get MULTI_REST_END() {
    return -2;
  }
  static get FORM_DS() {
    return 'ds';
  }
  static get FORM_DC() {
    return 'dc';
  }
  static get FORM_DS_AL_FINE() {
    return 'dsfine';
  }
  static get FORM_DC_AL_FINE() {
    return 'dcfine';
  }
  static get FORM_DS_AL_CODA() {
    return 'dscoda';
  }
  static get FORM_DC_AL_CODA() {
    return 'dccoda';
  }
  static get FORM_DS_AL_SEGNO() {
    return 'dssegno';
  }
  static get FORM_DC_AL_SEGNO() {
    return 'dcsegno';
  }
  static get FORM_SEGNO() {
    return 'segno';
  }
  static get FORM_TO_CODA() {
    return 'tocoda';
  }
  static get FORM_CODA() {
    return 'coda';
  }
  static get FORM_FINE() {
    return 'fine';
  }
  static get FORMAL_ELEMENTS() {
    return Measure.formal_elements;
  }
  static get STARTING_FORMAL_ELEMENTS() {
    return Measure.starting_formal_elements;
  }
  get isMeasureNumberCustomized() {
    return this._isMeasureNumberCustomized;
  }
  set isMeasureNumberCustomized(v) {
    this._isMeasureNumberCustomized = v;
  }
  get measureNumber() {
    if (!this.isSystemMeasure) {
      if (this.systemMeasure) {
        return this.systemMeasure.measureNumber;
      } else {
        return -1;
      }
    }
    if (this.isMeasureNumberCustomized) {
      return this._measureNumber;
    }
    if (this._cachedMeasureNumber !== -1) {
      return this._cachedMeasureNumber;
    }
    if (this.previousMeasure) {
      const previousMeasureNumber = this.previousMeasure.measureNumber;
      this._cachedMeasureNumber = previousMeasureNumber + 1;
      return this._cachedMeasureNumber;
    }
    if (this.timeSignatureNotation && !this.timeSignatureNotation.sameTimeProperties(this.timeSignature)) {
      return this.index;
    } else {
      return this.index + 1;
    }
  }
  set measureNumber(v) {
    if (!this.isSystemMeasure) {
      this.systemMeasure.measureNumber = v;
      this.isMeasureNumberCustomized = !!v;
    }
    if (v !== this._measureNumber) {
      this.clearMeasureNumberCache();
    }
    this._measureNumber = v;
  }
  get customizedMeasureNumber() {
    return this._measureNumber;
  }
  get timeSignature() {
    return this._timeSignature;
  }
  set timeSignature(v) {
    this._timeSignature = v;
  }
  get keySignature() {
    return this._keySignature;
  }
  set keySignature(v) {
    this._keySignature = v;
  }
  get effectiveKeySignature() {
    return this.keySignature.transposeFifths(this.scoreInterval.fifths);
  }
  get tempo() {
    return this._tempo;
  }
  set tempo(v) {
    this._tempo = v;
  }
  get clef() {
    return this._clef;
  }
  set clef(v) {
    this._clef = v;
  }
  get breakType() {
    return this._breakType;
  }
  set breakType(v) {
    this._breakType = v;
  }
  get startRepeat() {
    return this._startRepeat;
  }
  set startRepeat(v) {
    this._startRepeat = v;
  }
  get endRepeat() {
    return this._endRepeat;
  }
  set endRepeat(v) {
    this._endRepeat = v;
  }
  get layoutWeight() {
    return this._layoutWeight;
  }
  set layoutWeight(v) {
    this._layoutWeight = v;
  }
  get canHideStaff() {
    return this._canHideStaff;
  }
  set canHideStaff(v) {
    this._canHideStaff = v;
  }
  get disableCautionaries() {
    return this._disableCautionaries;
  }
  set disableCautionaries(v) {
    this._disableCautionaries = v;
  }
  get leftMargin() {
    return this._leftMargin;
  }
  set leftMargin(v) {
    this._leftMargin = v;
  }
  get rightMargin() {
    return this._rightMargin;
  }
  set rightMargin(v) {
    this._rightMargin = v;
  }
  get systemGap() {
    return this._systemGap;
  }
  set systemGap(v) {
    this._systemGap = v;
  }
  get systemMeasure() {
    return this._systemMeasure;
  }
  set systemMeasure(v) {
    this._systemMeasure = v;
  }
  get isSystemMeasure() {
    return this.staff != null && this.systemMeasure == null;
  }
  get measureInfo() {
    const measureInfo = new _measure_info__WEBPACK_IMPORTED_MODULE_18__["default"]();
    measureInfo.tempo = this.tempo;
    measureInfo.timeSignature = this.timeSignature;
    measureInfo.keySignature = this.keySignature;
    return measureInfo;
  }
  set measureInfo(measureInfo) {
    this.tempo = measureInfo.tempo;
    this.timeSignature = measureInfo.timeSignature;
    this.keySignature = measureInfo.keySignature;
  }
  get effectiveSystemMeasure() {
    return this.isSystemMeasure ? this : this.systemMeasure;
  }
  get duration() {
    return this.timeSignature.meterDuration;
  }
  get durationInSeconds() {
    return this.measureInfo.tempo.timeScale * this.duration;
  }
  get scorePosition() {
    if (this.staff == null) {
      return 0;
    }
    let prevTotalDuration = 0;
    for (let i = 0; i < this.index; i++) {
      prevTotalDuration += this.staff.getMeasureAt(i).duration;
    }
    return prevTotalDuration;
  }
  get seenLyrics() {
    return this._seenLyrics;
  }
  get effectiveLeftMargin() {
    if (this.staff && this.staff.score.effectiveStaffMetrics.indentationSpacing > 0 && (this.index === 0 && this.staff.isSystemStaff || this.isFirstMeasureOfCoda)) {
      return this.staff.score.effectiveStaffMetrics.indentationSpacing;
    } else {
      return this.leftMargin;
    }
  }
  get isTacet() {
    return this.getVoiceNumber(0).noteSetAtPosition(0) instanceof _tacet__WEBPACK_IMPORTED_MODULE_35__["default"];
  }
  get blocks() {
    return this._blocks;
  }
  set blocks(blocks) {
    blocks = blocks || [];
    for (let i = 0; i < blocks.length; i++) {
      const block = blocks[i];
      block.measure = this;
    }
    this._blocks = blocks;
  }
  get blocksPositionedBeforeSystem() {
    const blocksPositionBeforeSystem = [];
    for (let i = 0; i < this.blocks.length; i++) {
      const block = this.blocks[i];
      if (block.hasColumnPositionedBeforeSystem) {
        blocksPositionBeforeSystem.push(block);
      }
    }
    return blocksPositionBeforeSystem;
  }
  get blocksPositionedAfterSystem() {
    const blocksPositionAfterSystem = [];
    for (let i = 0; i < this.blocks.length; i++) {
      const block = this.blocks[i];
      if (block.hasColumnPositionedAfterSystem) {
        blocksPositionAfterSystem.push(block);
      }
    }
    return blocksPositionAfterSystem;
  }
  get hasBlockPositionedBeforeSystem() {
    return this.blocksPositionedBeforeSystem.length > 0;
  }
  get hasBlockPositionedAfterSystem() {
    return this.blocksPositionedAfterSystem.length > 0;
  }
  get numVoices() {
    return this.numChildren - 1;
  }
  get voices() {
    return this.children;
  }
  get staff() {
    const parent = this.parent;
    return parent;
  }
  get part() {
    if (this.parent) {
      return this.staff.part;
    } else {
      return null;
    }
  }
  get measureNotations() {
    return this._measureNotations;
  }
  get spanNotations() {
    return this._spanNotations;
  }
  get overrideClef() {
    return this.staff ? this.staff.overrideClef : null;
  }
  get effectiveClef() {
    return this.overrideClef || this.clef;
  }
  get beats() {
    return this.timeSignature.beats;
  }
  get numNotations() {
    return this._measureNotations.length;
  }
  get measureElements() {
    let voiceElements = [];
    for (let i = 0; i < this.voices.length; i++) {
      const voice = this.voices[i];
      voiceElements = voiceElements.concat(voice.elements.slice());
    }
    voiceElements.sort(_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_5__.comparePosition);
    return voiceElements;
  }
  get allNonMetricalElements() {
    let nonMetricalElements = this.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER).elements.slice();
    if (this.systemMeasure) {
      nonMetricalElements = nonMetricalElements.concat(this.systemMeasure.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER).elements.slice());
    }
    return nonMetricalElements;
  }
  get timeSignatureNotation() {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      const notation = measureNotation;
      if (notation instanceof _timesignature__WEBPACK_IMPORTED_MODULE_38__["default"]) {
        return notation;
      }
    }
    return null;
  }
  get baseTimeSignature() {
    return this.timeSignatureNotation ? this.timeSignatureNotation : this.timeSignature;
  }
  get keySignatureNotation() {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      const notation = measureNotation;
      if (notation instanceof _keysignature__WEBPACK_IMPORTED_MODULE_15__["default"]) {
        return notation;
      }
    }
    return null;
  }
  get tempoNotation() {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      const notation = measureNotation;
      if (notation instanceof _tempo__WEBPACK_IMPORTED_MODULE_36__["default"]) {
        return notation;
      }
    }
    return null;
  }
  get barlineNotation() {
    const count = this.measureNotations.length;
    for (let i = count - 1; i >= 0; i--) {
      const barline = this.getNotationAt(i);
      if (barline && barline instanceof _barline__WEBPACK_IMPORTED_MODULE_9__["default"]) {
        return barline;
      }
    }
    return null;
  }
  get repeatEndingNotation() {
    const count = this.measureNotations.length;
    for (let i = count - 1; i >= 0; i--) {
      const repeatEnding = this.getNotationAt(i);
      if (repeatEnding) {
        return repeatEnding;
      }
    }
    return null;
  }
  get finalClefNotation() {
    for (let i = this.measureNotations.length - 1; i >= 0; i--) {
      const clef = this.getNotationAt(i);
      if (clef && clef instanceof _clef__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        if (clef.position === this.timeSignature.meterDuration) {
          return clef;
        } else {
          return null;
        }
      }
    }
    return null;
  }
  get scoreInterval() {
    if (this.isSystemMeasure || !this.staff) {
      return new _interval__WEBPACK_IMPORTED_MODULE_14__["default"]();
    }
    const interval = this.staff.score.transposeParts ? this.staff.part.transposingInterval : this.staff.part.concertInterval;
    let alternateKey = this.staff.part.alternateKey;
    if (interval.octaveMultiple && !alternateKey) {
      return interval;
    }
    const transposedFifthsKeySignature = this.keySignature.transposeFifths(interval.fifths);
    let enharmonicDistance = transposedFifthsKeySignature.enharmonicDistance;
    const firstMeasure = this.staff.getMeasureAt(0);
    if ((transposedFifthsKeySignature.fifths <= -5 || transposedFifthsKeySignature.fifths >= 5) && !this.keySignature.equals(firstMeasure.keySignature)) {
      const keySignature = firstMeasure.keySignature.transposeFifths(firstMeasure.scoreInterval.fifths);
      const a = transposedFifthsKeySignature.fifths > 0 ? 12 - transposedFifthsKeySignature.fifths : 12 + transposedFifthsKeySignature.fifths;
      alternateKey = Math.abs(keySignature.fifths - transposedFifthsKeySignature.fifths) > Math.abs(keySignature.fifths - a);
    }
    if (alternateKey) {
      if (transposedFifthsKeySignature.fifths <= -5) {
        enharmonicDistance--;
      } else if (transposedFifthsKeySignature.fifths >= 5) {
        enharmonicDistance++;
      }
    }
    return interval.add(new _interval__WEBPACK_IMPORTED_MODULE_14__["default"](enharmonicDistance, 0));
  }
  get transposingInterval() {
    if (this.isSystemMeasure) {
      return new _interval__WEBPACK_IMPORTED_MODULE_14__["default"]();
    }
    const transposingInterval = this.staff.part.transposingInterval;
    if (transposingInterval.octaveMultiple) {
      return transposingInterval;
    } else {
      return transposingInterval.add(new _interval__WEBPACK_IMPORTED_MODULE_14__["default"](this.keySignature.transposeFifths(transposingInterval.fifths).enharmonicDistance, 0));
    }
  }
  get isAtonalKeySignature() {
    return this.keySignature.atonal;
  }
  get isFirstMeasureOfCoda() {
    if ((this.systemMeasure || this).hasStartCoda) {
      return true;
    }
    const staves = this.staff.score.staves;
    for (let i = 0; i < staves.length; i++) {
      const staff = staves[i];
      if (staff.numChildren > this.index && staff.getMeasureAt(this.index).hasStartCoda) {
        return true;
      }
    }
    return false;
  }
  get hasStartCoda() {
    const formalElements = this.getFormalElements();
    for (let i = 0; i < formalElements.length; i++) {
      const formalElement = formalElements[i];
      if (formalElement.formalElementName === Measure.FORM_CODA && formalElement.rhythmElement.position <= this.duration / 2) {
        return true;
      }
    }
    return false;
  }
  get flowsToNextMeasure() {
    if (this.index >= this.staff.score.numMeasures - 1) {
      return false;
    }
    const barlineNotation = this.systemMeasure.barlineNotation;
    if (barlineNotation && barlineNotation.type === _barline__WEBPACK_IMPORTED_MODULE_9__["default"].DOUBLE) {
      const scoreMeasure = this.staff.score.getStaffAt(0).getMeasureAt(this.index);
      const measures = [this.systemMeasure, scoreMeasure];
      for (let idx = 0; idx < measures.length; idx++) {
        const measure = measures[idx];
        const formalElements = measure.getFormalElements();
        for (let i = 0; i < formalElements.length; i++) {
          const formalElement = formalElements[i];
          if (Measure.STARTING_FORMAL_ELEMENTS.indexOf(formalElement.formalElementName) >= 0) {
            return false;
          }
        }
      }
    }
    if (this.systemMeasure.endRepeat && this.staff.numChildren > this.index + 1) {
      const repeatInfo = this.staff.getMeasureAt(this.index + 1).getRepeatInfo();
      if (repeatInfo.endings && repeatInfo.endings.length > 0) {
        return false;
      }
    }
    return true;
  }
  get previousMeasure() {
    if (this.index <= 0) {
      return null;
    } else {
      return this.staff.getMeasureAt(this.index - 1);
    }
  }
  get nextMeasure() {
    if (this.index + 1 >= this.staff.totalMeasures) {
      return null;
    } else {
      return this.staff.getMeasureAt(this.index + 1);
    }
  }
  get flowFromPreviousMeasure() {
    return !!this.previousMeasure && !this.previousMeasure.canHideStaff && this.previousMeasure.flowsToNextMeasure;
  }
  get allowIncomingLiaisons() {
    return !this.flowFromPreviousMeasure || this.systemMeasure.startRepeat || this.isFirstMeasureOfCoda;
  }
  get lastLyricLine() {
    const lastLyricLines = this.measureNotations.map(t => {
      const notation = t;
      return notation.lastLyricLine;
    });
    return lastLyricLines.length ? Math.max(...lastLyricLines) : null;
  }
  get aboveNotesY() {
    let staffHeight = this.effectiveClef.staffHeight;
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      const notation = measureNotation;
      if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        const noteSet = notation;
        if (noteSet.notes.length > 0) {
          let scoreNoteY = this.getScoreNoteY(noteSet.getChildAt(noteSet.notes.length - 1));
          if (this.numVoices > 1) {
            scoreNoteY += this.staff.score.effectiveStaffMetrics.normalStemLength;
            staffHeight = Math.max(staffHeight, scoreNoteY);
          }
        }
      }
    }
    return staffHeight + 2.5;
  }
  get belowNotesY() {
    let minNoteY = 0;
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      const notation = measureNotation;
      if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        const noteSet = notation;
        if (noteSet.notes.length > 0) {
          let scoreNoteY = this.getScoreNoteY(noteSet.getNoteAt(noteSet.notes.length - 1));
          if (this.numVoices > 1) {
            scoreNoteY -= this.staff.score.effectiveStaffMetrics.normalStemLength;
            minNoteY = Math.min(minNoteY, scoreNoteY);
          }
        }
      }
    }
    return minNoteY - 4;
  }
  get staffHidingChange() {
    let index = this.index;
    return index >= 0 && index + 1 < this.staff.measures.length && this.staff.getMeasureAt(index + 1).canHideStaff !== this.canHideStaff;
  }
  get isAutoMultiRestCandidate() {
    if (this.staff && this.staff.score.effectiveStaffMetrics.autoMultiMeasureRestCreation) {
      const noteSet = this.getVoiceNumber(0).noteSetAtPosition(0);
      return noteSet && this.multiRest === Measure.MULTI_REST_NONE && this.numVoices === 1 && !noteSet.hasArticulation(_articulation__WEBPACK_IMPORTED_MODULE_8__.Articulation.FERMATA) && !noteSet.hasArticulation(_articulation__WEBPACK_IMPORTED_MODULE_8__.Articulation.CAESURA) && this.systemMeasure.getFormalElements().length;
    }
    return false;
  }
  get breaksMultiRestBefore() {
    return !this.isAutoMultiRestCandidate || this.systemMeasure.timeSignatureNotation || this.systemMeasure.tempoNotation || this.systemMeasure.startRepeat || this.systemMeasure.getVoiceAt(0).hasRehearsalLetter || this.getRepeatInfo().endings != null || this.measureNotations.length > 1;
  }
  get breaksMultiRestAfter() {
    return !this.isAutoMultiRestCandidate || this.systemMeasure.barlineNotation && this.systemMeasure.barlineNotation.breaksMultiMeasureRest || this.systemMeasure.endRepeat || this.systemMeasure.breakType;
  }
  get autoMultiRestFirstMeasure() {
    return this.isAutoMultiRestCandidate && (!this.previousMeasure || !this.previousMeasure.isAutoMultiRestCandidate || this.previousMeasure.breaksMultiRestAfter || this.breaksMultiRestBefore) && this.numberAutoMultiMeasureRests(false) > 2;
  }
  get autoMultiRestNotFirstMeasure() {
    return this.isAutoMultiRestCandidate && !this.breaksMultiRestBefore && this.previousMeasure != null && !this.previousMeasure.breaksMultiRestAfter && !this.previousMeasure.autoMultiRestLastMeasure;
  }
  get autoMultiRestLastMeasure() {
    return this.autoMultiRestNotFirstMeasure && !this.breaksMultiRestBefore && (this.breaksMultiRestAfter || !this.nextMeasure || !this.nextMeasure.isAutoMultiRestCandidate || this.nextMeasure.breaksMultiRestBefore);
  }
  get durationAutoMultiMeasureRests() {
    if (!this.isAutoMultiRestCandidate || this.breaksMultiRestAfter) {
      return 0;
    }
    let duration = this.duration;
    let nextMeasure = this.nextMeasure;
    while (nextMeasure && nextMeasure.breaksMultiRestBefore) {
      duration += nextMeasure.duration;
      if (!nextMeasure.breaksMultiRestAfter) {
        nextMeasure = nextMeasure.nextMeasure;
      } else {
        break;
      }
    }
    return duration;
  }
  get multiRest() {
    if (this.staff == null) {
      return Measure.MULTI_REST_NONE;
    }
    for (let i = 0; i < this.spanNotations.length; i++) {
      const spanNotation = this.spanNotations[i];
      if (spanNotation instanceof _multi_rest__WEBPACK_IMPORTED_MODULE_22__["default"]) {
        return spanNotation.bars;
      }
    }
    const spanNotations = this.staff.getSpanNotations(this.index);
    for (let i = 0; i < spanNotations.length; i++) {
      const spanNotation = spanNotations[i];
      if (spanNotation instanceof _multi_rest__WEBPACK_IMPORTED_MODULE_22__["default"]) {
        if (this.index === spanNotation.endPosition.measureIndex) {
          return Measure.MULTI_REST_END;
        } else {
          Measure.MULTI_REST_BODY;
        }
      }
    }
    return Measure.MULTI_REST_NONE;
  }
  get anyMultiRestType() {
    const multiRest = this.multiRest;
    if (multiRest !== Measure.MULTI_REST_NONE) {
      return multiRest;
    } else {
      return this.autoMultiRest(false);
    }
  }
  get measureRepeatNotation() {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      if (measureNotation instanceof _measure_repeat__WEBPACK_IMPORTED_MODULE_19__["default"]) {
        return measureNotation;
      }
    }
    return null;
  }
  get isMeasure() {
    return true;
  }
  constructor() {
    super();
    this._isMeasureNumberCustomized = false;
    this._cachedMeasureNumber = -1;
    this._measureNumber = 0;
    this._timeSignature = null;
    this._keySignature = null;
    this._tempo = null;
    this._clef = null;
    this._breakType = null;
    this._startRepeat = false;
    this._endRepeat = false;
    this._layoutWeight = 1;
    this._canHideStaff = false;
    this._disableCautionaries = false;
    this._leftMargin = 0;
    this._rightMargin = 0;
    this._systemGap = false;
    this._systemMeasure = null;
    this._accidentalCleanup = 2147483647;
    this._clefCleanup = false;
    this._liaisonCleanup = false;
    this._restCleanup = false;
    this._stringAssignmentCleanup = false;
    this._seenLyrics = false;
    this._mmrInitialized = false;
    this._cachedAutoMMRCandidate = false;
    this._blocks = [];
    this._measureNotations = [];
    this._spanNotations = [];
    this.id = (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_6__.generateUUID)();
    this.addChild(new _voice__WEBPACK_IMPORTED_MODULE_40__["default"]());
    this.addChild(new _voice__WEBPACK_IMPORTED_MODULE_40__["default"]());
  }
  clearMeasureNumberCache() {
    this._cachedMeasureNumber = -1;
    if (this.nextMeasure) {
      this.nextMeasure.clearMeasureNumberCache();
    }
  }
  resetMeasureNumber() {
    this._cachedMeasureNumber = -1;
    this._isMeasureNumberCustomized = false;
    this._measureNumber = 0;
    if (this.nextMeasure) {
      this.nextMeasure.resetMeasureNumber();
    }
  }
  getMeasureIndexAfterSpan(duration) {
    if (duration > this.duration && this.nextMeasure) {
      return this.nextMeasure.getMeasureIndexAfterSpan(duration - this.duration);
    } else {
      return this.index;
    }
  }
  addBlock(block) {
    const blocksCopy = this.blocks.slice();
    blocksCopy.push(block);
    this.blocks = blocksCopy;
  }
  getBlockAt(idx) {
    if (this.blocks.length - 1 >= idx) {
      return this.blocks[idx];
    } else {
      return null;
    }
  }
  removeBlock(block) {
    const blocksCopy = this.blocks.slice();
    const idx = blocksCopy.findIndex(b => b.uuid === block.uuid);
    if (idx >= 0) {
      blocksCopy.splice(idx, 1);
    }
    this.blocks = blocksCopy;
  }
  getVoiceAt(idx) {
    return this.getChildAt(idx);
  }
  getVoiceNumber(numVoices, fillVoice) {
    while (this.numVoices <= numVoices && fillVoice) {
      this.addChild(new _voice__WEBPACK_IMPORTED_MODULE_40__["default"]());
    }
    return this.getChildAt(numVoices + 1);
  }
  removeVoiceNumber(voiceNumber) {
    this.removeChildAt(parseFloat(voiceNumber) + 1);
  }
  removeRedundancies() {
    if (this.isSystemMeasure) {
      const measure = this.staff.getMeasureAt(this.index - 1);
      if (measure) {
        if (this.tempoNotation && this.tempo.equals(measure.tempo)) {
          this.removeElement(this.tempoNotation);
        }
        if (this.timeSignatureNotation && this.timeSignature.equals(measure.timeSignature)) {
          this.removeElement(this.timeSignatureNotation);
        }
      }
    }
  }
  updateBarline() {
    if (this.index !== this.staff.lastMeasureIndex && this.barlineNotation && this.barlineNotation.type === _barline__WEBPACK_IMPORTED_MODULE_9__["default"].FINAL) {
      this.barlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_9__["default"].SINGLE;
    }
  }
  removeRepeats() {
    this.startRepeat = false;
    this.endRepeat = false;
    this.getFormalElements().forEach(formalElement => {
      this.removeElement(formalElement.rhythmElement);
    });
    if (this.repeatEndingNotation) {
      this.removeElement(this.repeatEndingNotation);
    }
  }
  hasRepeats() {
    return this.getFormalElements().length > 0 || this.startRepeat || this.endRepeat;
  }
  addChildAt(child, idx) {
    super.addChildAt(child, idx);
    this.initializeDerivedState();
  }
  doRemoveChildAt(idx) {
    super.doRemoveChildAt(idx);
    this.initializeDerivedState();
  }
  addElement(element, voiceNumber) {
    this.getVoiceNumber(voiceNumber, true).addElement(element);
  }
  removeElement(element) {
    element.rhythmContext.removeElement(element);
  }
  defaultTransposableSpans(fromStaff) {
    const spanNotations = fromStaff && this.staff != null ? this.staff.getSpanNotations(this.index) : this.spanNotations;
    for (let i = 0; i < spanNotations.length; i++) {
      const spanNotation = spanNotations[i];
      if (spanNotation.transposable) {
        spanNotation.requiresDefaultInfo = true;
      }
    }
  }
  convertDanglingSlursToTies() {
    const spanNotations = this.spanNotations.slice();
    for (let i = 0; i < spanNotations.length; i++) {
      const spanNotation = spanNotations[i];
      if (spanNotation instanceof _slur__WEBPACK_IMPORTED_MODULE_30__["default"]) {
        const slur = spanNotation;
        const noteSet = slur.voice.noteSetAtPosition(slur.position);
        if (noteSet != null && !noteSet.grace) {
          const that = this;
          const changeLiaisonToTie = function (note, propertyName) {
            if (note.getModelProperty(propertyName) == null) {
              slur.parent.removeChild(slur);
              note.setModelProperty(propertyName, _liaison__WEBPACK_IMPORTED_MODULE_16__.Liaison.TIE_LIAISON);
            } else {
              slur.preventDurationDefault = true;
            }
          };
          // TODO
        }
      }
    }
  }

  getNotationAt(idx) {
    return this._measureNotations[idx];
  }
  hasArticulation(articulation) {
    for (let i = 0; i < this.followingNoteSets(0).length; i++) {
      const noteset = this.followingNoteSets(0)[i];
      if (noteset.hasArticulation(articulation)) {
        return true;
      }
    }
    return false;
  }
  notationAtPosition(position, notationClass, voiceNumber = 2147483647) {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      if (measureNotation.position > position) return;
      if (measureNotation instanceof notationClass && measureNotation.position === position && (voiceNumber === 2147483647 || voiceNumber === measureNotation.voiceNumber)) {
        return measureNotation;
      }
    }
    return null;
  }
  previousNotationInMeasure(position, measure = null, filter = null) {
    const that = measure || this;
    for (let i = that.measureNotations.length - 1; i >= 0; i--) {
      const notation = that.getNotationAt(i);
      if (notation.position < position && (filter == null || filter(notation))) {
        return notation;
      }
    }
    return null;
  }
  previousNotation(position, filter = null, isNotFirstMeasure) {
    for (let index = this.index; index >= 0; index--) {
      const measure = this.staff.getMeasureAt(index);
      if (index < this.index) {
        position = measure.duration + 1;
      }
      const prevNotation = this.previousNotationInMeasure(position, measure, filter);
      if (prevNotation) {
        return prevNotation;
      }
      if (!isNotFirstMeasure) {
        break;
      }
    }
    return null;
  }
  nextNotation(position, filter = null, greedy) {
    for (let index = this.index; index < this.staff.measures.length; index++) {
      const measure = this.staff.getMeasureAt(index);
      if (index > this.index) {
        position = -1;
      }
      for (let i = 0; i < measure.measureNotations.length; i++) {
        const notation = measure.getNotationAt(i);
        if (notation.position > position && (filter == null || filter(notation))) {
          return notation;
        }
      }
      if (!greedy) {
        break;
      }
    }
    return null;
  }
  precedingNoteSets(position) {
    const noteSets = [];
    let that = this;
    if (position === 0) {
      if (this.index === 0) {
        return noteSets;
      }
      that = this.staff.getMeasureAt(this.index - 1);
      position = that.duration;
    }
    for (let voiceNumber = 0; voiceNumber < parseFloat(that.numVoices); voiceNumber++) {
      for (let notationIdx = that.measureNotations.length - 1; notationIdx >= 0; notationIdx--) {
        const noteSet = that.getNotationAt(notationIdx);
        if (noteSet && parseFloat(noteSet.voiceNumber) === voiceNumber) {
          if (noteSet.endsAtPosition(position)) {
            noteSets.push(noteSet);
          } else if (noteSet.position + noteSet.duration < position) {
            break;
          }
        }
      }
    }
    return noteSets;
  }
  followingNoteSets(position) {
    const noteSets = [];
    let that = this;
    if (that.duration === position) {
      if (this.index === this.staff.measures.length - 1) {
        return noteSets;
      }
      that = this.staff.getMeasureAt(this.index + 1);
      position = 0;
    }
    for (let voiceNumber = 0; voiceNumber < parseFloat(that.numVoices); voiceNumber++) {
      for (let notationIdx = 0; notationIdx < that.measureNotations.length; notationIdx++) {
        const noteSet = that.getNotationAt(notationIdx);
        if (noteSet && parseFloat(noteSet.voiceNumber) === voiceNumber) {
          if (noteSet.startsAtPosition(position)) {
            noteSets.push(noteSet);
          } else if (noteSet.position > position) {
            break;
          }
        }
      }
    }
    return noteSets;
  }
  getNotatedClefAtMeasurePosition(position) {
    let clef = this.clef;
    for (let i = 0; i < this.measureNotations.length; i++) {
      const notation = this.getNotationAt(i);
      if (notation.position > position) {
        break;
      }
      if (notation instanceof _clef__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        clef = notation;
      }
    }
    return clef;
  }
  getEffectiveClefAtMeasurePosition(position) {
    return this.overrideClef || this.getNotatedClefAtMeasurePosition(position);
  }
  getLiaisonStart(position, note, voiceNumber = -1) {
    if (parseFloat(voiceNumber) < 0) {
      voiceNumber = note.voiceNumber;
    }
    const precedingNoteSets = this.precedingNoteSets(position);
    if (parseFloat(voiceNumber) > 0) {
      for (let i = 0; i < precedingNoteSets.length; i++) {
        const noteSet = precedingNoteSets[i];
        if (parseFloat(noteSet.voiceNumber) === voiceNumber) {
          const liaisonStartNote = this.liaisonStartNote(noteSet, note);
          if (liaisonStartNote) {
            return liaisonStartNote;
          }
        }
      }
    }
    for (let i = 0; i < precedingNoteSets.length; i++) {
      const noteSet = precedingNoteSets[i];
      if (noteSet.voiceNumber !== voiceNumber) {
        const liaisonStartNote = this.liaisonStartNote(noteSet, note);
        if (liaisonStartNote) {
          return liaisonStartNote;
        }
      }
    }
    return null;
  }
  liaisonStartNote(noteSet, note) {
    let startNote = this.findTieMatch(noteSet, note);
    if (startNote && startNote.tied) {
      return startNote;
    }
    if (note.stringIndex >= 0) {
      startNote = noteSet.noteOnString(note.stringIndex);
    } else {
      const noteIndex = note.noteIndex;
      if (noteIndex < 0 || noteIndex >= noteSet.notes.length) {
        return null;
      }
      startNote = noteSet.getNoteAt(noteIndex);
    }
    if (startNote && startNote.hasIndexLiaison) {
      return startNote;
    } else {
      return null;
    }
  }
  getLiaisonEnd(note) {
    const position = note.noteSet.position + note.noteSet.duration;
    const voiceNumber = parseFloat(note.voiceNumber);
    const followingNoteSets = this.followingNoteSets(position);
    if (voiceNumber > 0) {
      for (let i = 0; i < followingNoteSets.length; i++) {
        const noteSet = followingNoteSets[i];
        if (parseFloat(noteSet.voiceNumber) === voiceNumber) {
          const liaisonEndNote = this.liaisonEndNote(noteSet, note);
          if (liaisonEndNote) {
            return liaisonEndNote;
          }
        }
      }
    }
    for (let i = 0; i < followingNoteSets.length; i++) {
      const noteSet = followingNoteSets[i];
      if (noteSet.voiceNumber !== voiceNumber) {
        const liaisonEndNote = this.liaisonEndNote(noteSet, note);
        if (liaisonEndNote) {
          return liaisonEndNote;
        }
      }
    }
    return null;
  }
  liaisonEndNote(noteSet, note) {
    if (note.tied) {
      return this.findTieMatch(noteSet, note);
    }
    if (note.hasIndexLiaison) {
      if (note.stringIndex > 0) {
        return noteSet.noteOnString(note.stringIndex);
      }
      const noteIndex = note.noteIndex;
      if (noteIndex >= 0 && noteIndex < noteSet.notes.length) {
        return noteSet.getNoteAt(noteIndex);
      }
    }
    return null;
  }
  findTieMatch(noteSet, note) {
    if (this.effectiveClef instanceof _tablature_clef__WEBPACK_IMPORTED_MODULE_34__["default"]) {
      return noteSet.findChromaticOrdinal(note.pitch.ordinal);
    } else {
      return noteSet.findDiatonicOrdinal(note.diatonicOrdinal);
    }
  }
  effectiveScoreAlteration(position, note, voiceNumber) {
    let effectiveAlteration = this.effectiveAlteration(position, note, voiceNumber);
    if (this.keySignature.atonal && effectiveAlteration === 0) {
      effectiveAlteration -= this.getScoreNote(note).alteration - note.alteration;
    }
    return effectiveAlteration;
  }
  effectiveAlteration(position, note, voiceNumber) {
    const accidentalProcessor = new _processing_accidental_processor__WEBPACK_IMPORTED_MODULE_0__["default"](this);
    for (let i = 0; i < this.measureNotations.length; i++) {
      const measureNotation = this.measureNotations[i];
      if (measureNotation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        const noteSet = measureNotation;
        if (noteSet.position >= position) {
          break;
        }
        accidentalProcessor.processNoteSet(noteSet);
      }
    }
    return accidentalProcessor.getDefaultAlteration(position, note, voiceNumber);
  }
  cleanUpAccidentals() {
    if (this._accidentalCleanup < 2147483647) {
      const accidentalProcessor = new _processing_accidental_processor__WEBPACK_IMPORTED_MODULE_0__["default"](this);
      for (let i = 0; i < this.measureNotations.length; i++) {
        const measureNotation = this.measureNotations[i];
        if (measureNotation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
          const noteSet = measureNotation;
          if (noteSet.position >= this._accidentalCleanup) {
            for (let j = 0; j < noteSet.notes.length; j++) {
              const note = noteSet.notes[j];
              if (note.accidental == null || !note.explicitAccidental) {
                note.accidental = accidentalProcessor.getAccidental(note);
              }
            }
          }
          accidentalProcessor.processNoteSet(noteSet);
        }
      }
      this._accidentalCleanup = 2147483647;
    }
  }
  addRests(hide) {
    for (let i = 0; i < this.numVoices; i++) {
      new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__["default"](this.getVoiceNumber(i)).addRests(hide);
    }
  }
  removeEmptyVoices() {
    for (let voiceNumber = this.numVoices - 1; voiceNumber >= 0; voiceNumber--) {
      if (this.getVoiceNumber(voiceNumber).numChildren === 0 && this.numVoices > 1) {
        this.removeVoiceNumber(voiceNumber);
      }
    }
  }
  combineSameStemVoices() {
    throw new Error('Method not implemented');
  }
  addValueNotationWithDuration(notation, position, durations, setAllTies, keepLyric) {
    const voiceNumber = this.getVoiceNumber(notation.lastVoiceNumber, true);
    return new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__["default"](voiceNumber).addValueNotationWithDuration(notation, position, durations, setAllTies, keepLyric);
  }
  removePositionRange(rhythmPosition, rhythmDuration, voiceNumber, filter = null, cropElements) {
    for (let numVoice = _utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER; numVoice < this.numVoices; numVoice++) {
      if (parseFloat(voiceNumber) === _utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.UNKNOWN_VOICE_NUMBER || numVoice === voiceNumber) {
        const option = new _processing_remove_position_range_options__WEBPACK_IMPORTED_MODULE_2__["default"]();
        option.filter = filter;
        option.cropElements = cropElements;
        new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__["default"](this.getVoiceNumber(numVoice)).removePositionRange(rhythmPosition, rhythmDuration, option);
      }
    }
  }
  cleanUpClefs() {
    // if (this._clefCleanup) {
    let clef = this.clef;
    for (let i = 0; i < this.measureNotations.length; i++) {
      const notation = this.measureNotations[i];
      if (notation instanceof _clef__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        if (clef.sameAs(notation)) {
          this.removeElement(notation);
        } else if ((clef = notation).position === 0) {
          this.removeElement(notation);
          this.clef = clef;
        }
      }
    }
    // this._clefCleanup = false;
    // }
  }

  cleanUpLiaisons(forceCleanUp) {
    if (this._liaisonCleanup || forceCleanUp) {
      new _processing_liaison_processor__WEBPACK_IMPORTED_MODULE_1__["default"](this).processMeasure();
      this._liaisonCleanup = false;
    }
  }
  cleanUpStringAssignments(forceClean) {
    if (this.effectiveClef instanceof _tablature_clef__WEBPACK_IMPORTED_MODULE_34__["default"] && (this._stringAssignmentCleanup || forceClean)) {
      new _processing_string_assignment_processor__WEBPACK_IMPORTED_MODULE_4__["default"](this).processMeasure();
      this._stringAssignmentCleanup = false;
    }
  }
  calculateDerived(forceClean) {
    this.cleanUpLiaisons(forceClean);
    this.cleanUpStringAssignments(forceClean);
  }
  initializeDerivedState() {
    this._measureNotations = [];
    this._spanNotations = [];
    for (let i = 0; i < this.voices.length; i++) {
      const voice = this.voices[i];
      const notations = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__["default"](voice).getNotations();
      for (let j = 0; j < notations.length; j++) {
        const notation = notations[j];
        this.addDescendantNotation(notation);
      }
    }
  }
  handleChildModelChange(evt) {
    if (this.parent && this.parent.handleChildModelChange) {
      this.parent.handleChildModelChange(evt);
    }
    if (evt.parent instanceof _tuplet__WEBPACK_IMPORTED_MODULE_39__["default"] || evt.parent instanceof _voice__WEBPACK_IMPORTED_MODULE_40__["default"]) {
      if (evt.child instanceof _notation__WEBPACK_IMPORTED_MODULE_23__.Notation) {
        const notation = evt.child;
        if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_21__.ModelEventKind.ADD_CHILD_MODEL) {
          this.addDescendantNotation(notation);
        } else if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_21__.ModelEventKind.REMOVE_CHILD_MODEL) {
          this.removeDescendantNotation(notation);
        }
      } else if (evt.child instanceof _tuplet__WEBPACK_IMPORTED_MODULE_39__["default"] || evt.child instanceof _voice__WEBPACK_IMPORTED_MODULE_40__["default"]) {
        const notations = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_3__["default"](evt.child).getNotations();
        if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_21__.ModelEventKind.ADD_CHILD_MODEL) {
          for (let i = 0; i < notations.length; i++) {
            const notation = notations[i];
            this.addDescendantNotation(notation);
          }
        } else if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_21__.ModelEventKind.REMOVE_CHILD_MODEL) {
          for (let i = 0; i < notations.length; i++) {
            const notation = notations[i];
            this.removeDescendantNotation(notation);
          }
        }
      }
    }
  }
  turnOnSeenLyrics() {
    this._seenLyrics = true;
    if (this.parent && this.parent instanceof _staff__WEBPACK_IMPORTED_MODULE_32__["default"]) {
      this.parent.seenLyrics = true;
    }
  }
  addDescendantNotation(notation) {
    if (notation instanceof _span_notation__WEBPACK_IMPORTED_MODULE_31__["default"]) {
      this._spanNotations.push(notation);
    }
    if (!this.seenLyrics && notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && notation.hasLyrics) {
      this.turnOnSeenLyrics();
    }
    for (let i = 0; i < this._measureNotations.length; i++) {
      if ((0,_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_5__.compareScorePosition)(notation, this.getNotationAt(i)) < 0) {
        this._measureNotations.splice(i, 0, notation);
        return;
      }
    }
    this._measureNotations.push(notation);
  }
  removeDescendantNotation(notation) {
    let idx = this._measureNotations.indexOf(notation);
    if (idx >= 0) {
      this._measureNotations.splice(idx, 1);
    }
    if (notation instanceof _span_notation__WEBPACK_IMPORTED_MODULE_31__["default"]) {
      idx = this._spanNotations.indexOf(notation);
      if (idx >= 0) {
        this._spanNotations.splice(idx, 1);
      }
    }
  }
  dispatchModelEvent(evt) {
    throw new Error('Not implemented');
  }
  dispatchModelUpdateEvent(evt) {
    throw new Error('Not implemented');
  }
  invalidateAccidentals() {
    this._accidentalCleanup = 0;
  }
  defaultBeaming() {
    for (let i = 0; i < this.measureNotations.length; i++) {
      const notation = this.measureNotations[i];
      if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
        notation.defaultBeamStart();
      }
    }
  }
  getScoreNote(note, interval = null) {
    if (!note.playable) {
      return this.effectiveClef.getLineNote(this.effectiveClef.centerLine, this, false);
    }
    interval = interval || this.scoreInterval;
    if (interval.unison || !this.effectiveClef.showKey) {
      return note;
    }
    const transposedInterval = note.transposeInterval(interval);
    if (note.accidental) {
      transposedInterval.accidental = _note__WEBPACK_IMPORTED_MODULE_25__.Note.alterationToAccidental(transposedInterval.alteration);
    }
    return transposedInterval;
  }
  getScoreNoteY(note) {
    return this.effectiveClef.getPitchLine(this.getScoreNote(note)) * this.effectiveClef.lineSpacing;
  }
  transposeInterval(interval) {
    if (!interval.unison) {
      for (let i = 0; i < this.measureNotations.length; i++) {
        const notation = this.measureNotations[i];
        if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet) {
          const noteSet = notation;
          for (let j = 0; j < noteSet.notes.length; j++) {
            const note = noteSet.notes[j];
            const transposedInterval = note.transposeInterval(interval);
            note.pitch = transposedInterval.pitch;
            note.step = transposedInterval.step;
          }
        } else if (notation instanceof _chord_symbol__WEBPACK_IMPORTED_MODULE_10__["default"]) {
          const chordSymbol = notation;
          const transposedInterval = chordSymbol.transposeInterval(interval);
          chordSymbol.text = transposedInterval.text;
        }
      }
    }
  }
  getFormalElements() {
    const formalElements = [];
    const non_metrical_voice = this.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    for (let i = 0; i < non_metrical_voice.numElements;) {
      const rhythmElement = non_metrical_voice.getElementAt(i++);
      const textNotation = rhythmElement;
      const segno = rhythmElement;
      const coda = rhythmElement;
      if (textNotation == null || textNotation instanceof _performance_text__WEBPACK_IMPORTED_MODULE_27__["default"]) {
        if (textNotation != null) {
          const formalElementName = this.matchFormalElement(textNotation.text);
          if (formalElementName) {
            formalElements.push(new _formal_element__WEBPACK_IMPORTED_MODULE_13__["default"](formalElementName, rhythmElement));
          }
        } else {
          if (segno) {
            formalElements.push(new _formal_element__WEBPACK_IMPORTED_MODULE_13__["default"](Measure.FORM_SEGNO, rhythmElement));
          } else if (coda) {
            formalElements.push(new _formal_element__WEBPACK_IMPORTED_MODULE_13__["default"](Measure.FORM_CODA, rhythmElement));
          }
        }
      }
    }
    return formalElements;
  }
  matchFormalElement(text) {
    let txt = text.toLowerCase().replace(/[ \n\r]+/g, '').replace(/coda\{coda\}/g, 'coda').replace(/\{coda\}coda/g, 'coda').replace(/al/, '').replace(/2ndtime/, '').replace(/lasttime/, '').replace(/[\.\(\)\{\}]/g, '');
    for (let i = 0; i < Measure.FORMAL_ELEMENTS.length; i++) {
      const formalElement = Measure.FORMAL_ELEMENTS[i];
      if (formalElement === txt) {
        return formalElement;
      }
    }
    return null;
  }
  getRepeatInfo() {
    let reachEnding = false;
    const repeatInfo = new _repeat_info__WEBPACK_IMPORTED_MODULE_29__["default"]();
    const measures = [this, this.systemMeasure];
    for (let i = 0; i < measures.length; i++) {
      const measure = measures[i];
      const non_metrical_voice = measure.getVoiceNumber(_utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
      let voiceIdx = 0;
      while (voiceIdx < non_metrical_voice.numElements) {
        const element = non_metrical_voice.getElementAt(voiceIdx++);
        let text = null;
        if (element instanceof _text_notation__WEBPACK_IMPORTED_MODULE_37__["default"]) {
          text = element.text;
        } else if (element instanceof _line_notation__WEBPACK_IMPORTED_MODULE_17__["default"]) {
          text = element.startingText;
          if (element.span) {
            repeatInfo.endingsDuration = element.span;
          }
        }
        if (text) {
          if (element.position === 0 && element instanceof _repeat_ending__WEBPACK_IMPORTED_MODULE_28__["default"]) {
            const repeatEndingNumbers = element.numbers;
            if (!reachEnding) {
              repeatInfo.endings = [];
              reachEnding = true;
            }
            for (let j = 0; j < repeatEndingNumbers.length; j++) {
              const repeatEndingNumber = repeatEndingNumbers[j];
              const endings = repeatEndingNumber.split('-');
              if (endings.length === 1) {
                repeatInfo.endings.push(+endings[0].trim() - 1);
              } else if (endings.length >= 2) {
                const start = +endings[0].trim() - 1;
                const end = +endings[1].trim() - 1;
                for (let k = start; k < end; k++) {
                  repeatInfo.endings.push(k);
                }
              }
            }
            break;
          }
          const info = /((play|repeat) +)?([0-9]+)( +times|x)( .*)?$/i.exec(text);
          if (info) {
            let repeatCount = +info[3];
            const repeatOrPlay = info[2];
            if (repeatOrPlay && repeatOrPlay.toLowerCase() === 'repeat') {
              repeatCount++;
            }
            if (repeatCount >= 1) {
              repeatInfo.repeatCount = repeatCount;
            }
            break;
          }
        }
      }
    }
    return repeatInfo;
  }
  addTempoNotation() {
    if (this.tempoNotation == null) {
      this.addElement(this.tempo.clone(), _utils_voice_number__WEBPACK_IMPORTED_MODULE_7__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    }
  }
  defaultAboveBelow() {
    let tempoNotation = null;
    if (this.staff) {
      if (this.systemMeasure) {
        tempoNotation = this.systemMeasure.tempoNotation;
        if (tempoNotation && tempoNotation.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_ABOVE) {
          tempoNotation.dy = 0;
          tempoNotation.implicitDy = true;
        }
        if (this.systemMeasure.tempo.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_ABOVE) {
          this.systemMeasure.tempo.dy = 0;
        }
      }
      const spanNotations = this.staff.getSpanNotations(this.index);
      for (let i = 0; i < spanNotations.length; i++) {
        const spanNotation = spanNotations[i];
        if (spanNotation.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_ABOVE) {
          spanNotation.y = this.aboveNotesY;
          spanNotation.defaultDirection = _notation_direction__WEBPACK_IMPORTED_MODULE_24__.Notation_Direction.DIRECTION_UP;
        } else if (spanNotation.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_BELOW) {
          spanNotation.y = this.belowNotesY;
          spanNotation.defaultDirection = _notation_direction__WEBPACK_IMPORTED_MODULE_24__.Notation_Direction.DIRECTION_DOWN;
        }
      }
      const allNonMetricalElements = this.allNonMetricalElements;
      for (let i = 0; i < allNonMetricalElements.length; i++) {
        const nonMetricalElement = allNonMetricalElements[i];
        const notation = nonMetricalElement;
        if (notation.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_ABOVE) {
          notation.y = this.aboveNotesY;
          notation.implicitDy = true;
          if (notation.position === 0 && tempoNotation) {
            notation.y = Math.max(notation.y, tempoNotation.y + 3.5);
          }
        } else if (notation.dy === _notation__WEBPACK_IMPORTED_MODULE_23__.Notation.PLACEMENT_BELOW) {
          notation.y = this.belowNotesY;
          notation.implicitDy = true;
        }
      }
    }
  }
  defaultTextPositions() {
    let staffHeight,
      aboveNotesY = this.aboveNotesY,
      hasChordSymbol = false,
      hasFretboard = false,
      hasPerformanceTextOrSystemSymbol = false,
      effectiveStaffMetrics = this.staff.score.effectiveStaffMetrics,
      allMetricalElements = this.allNonMetricalElements,
      tempoNotation = null;
    if (this.index >= 0 && this.systemMeasure) {
      tempoNotation = this.systemMeasure.tempoNotation;
    }
    staffHeight = this.effectiveClef.staffHeight;
    for (let i = 0; i < allMetricalElements.length; i++) {
      const metricalElement = allMetricalElements[i];
      const notation = metricalElement;
      if (notation instanceof _chord_symbol__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        hasChordSymbol = true;
        hasFretboard = hasFretboard || notation.fretboard != null;
        staffHeight = Math.max(staffHeight, notation.y);
      }
    }
    if (hasChordSymbol) {
      aboveNotesY = Math.max(aboveNotesY, staffHeight + (hasFretboard ? effectiveStaffMetrics.spaceAboveChordFrames : effectiveStaffMetrics.spaceAboveChords));
      if (tempoNotation) {
        tempoNotation.dx = effectiveStaffMetrics.tempoFirstMeasureXOffset;
      }
    }
    staffHeight = 0;
    let coda = null;
    let performanceText = null;
    for (let i = 0; i < allMetricalElements.length; i++) {
      const metricalElement = allMetricalElements[i];
      const notation = metricalElement;
      if (notation instanceof _performance_text__WEBPACK_IMPORTED_MODULE_27__["default"] || notation instanceof _system_symbol__WEBPACK_IMPORTED_MODULE_33__["default"]) {
        if (notation instanceof _performance_text__WEBPACK_IMPORTED_MODULE_27__["default"]) {
          if (notation.text.match(/coda/i)) {
            performanceText = notation;
          } else if (notation instanceof _coda__WEBPACK_IMPORTED_MODULE_12__["default"]) {
            coda = notation;
          }
        }
        hasPerformanceTextOrSystemSymbol = true;
        staffHeight = Math.max(staffHeight, notation.y);
        if (Math.abs(notation.dy) < 1 || notation.implicitDy && notation.y >= this.effectiveClef.staffHeight && notation.y < aboveNotesY) {
          notation.y = aboveNotesY;
        }
      }
    }
    if (hasPerformanceTextOrSystemSymbol) {
      aboveNotesY = Math.max(aboveNotesY, staffHeight + effectiveStaffMetrics.spaceAbovePerformanceText);
      if (coda != null && performanceText != null) {
        const voice = performanceText.parent;
        if (coda.position > performanceText.position || coda.position === performanceText.position && coda.dx > performanceText.dx) {
          performanceText.text += ' {coda}';
        } else {
          performanceText.text = '{coda} ' + performanceText.text;
        }
        coda.parent.removeChild(coda);
        voice.removeChild(performanceText);
        performanceText.rhythmPosition = coda.rhythmPosition;
        performanceText.dx = coda.dx;
        performanceText.dy = coda.dy;
        voice.addElement(performanceText);
      }
    }
  }
  cleanUpRestPositions(forceClean) {
    if (this._restCleanup || forceClean) {
      this._restCleanup = false;
      if (!(this.numVoices < 2)) {
        let notationPosition = -1;
        let notations = [];
        for (let i = 0; i < this.measureNotations.length; i++) {
          const measureNotation = this.measureNotations[i];
          const notation = measureNotation;
          if (notation.position !== notationPosition) {
            if (notations.length > 1) {
              this.adjustRestPositions(notations);
              notationPosition = notation.position;
              notations = [];
            }
          }
          if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_26__.NoteSet && !notation.invisible) {
            notations.push(notation);
          }
        }
        if (notations.length > 1) {
          this.adjustRestPositions(notations);
        }
      }
    }
  }
  adjustRestPositions(notations) {
    const pitchLineRange = [-100, 100];
    let multiNotesNoteSetExists = false;
    let noteSet;
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      noteSet = notation;
      if (noteSet.notes.length > 0) {
        if (parseFloat(noteSet.voiceNumber) === 0) {
          pitchLineRange[1] = Math.min(pitchLineRange[1], this.effectiveClef.getPitchLine(noteSet.getNoteAt(0)));
        } else {
          pitchLineRange[0] = Math.max(pitchLineRange[0], this.effectiveClef.getPitchLine(noteSet.notes.length - 1) - (this.effectiveClef.numLines - 1));
        }
        multiNotesNoteSetExists = true;
      }
    }
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      noteSet = notation;
      if (multiNotesNoteSetExists && noteSet.notes.length === 0 && !noteSet.explicitRestY) {
        if (parseFloat(noteSet.voiceNumber) === 0) {
          noteSet.dy = Math.max(noteSet.dy, Math.max(pitchLineRange[0] + this.staff.score.effectiveStaffMetrics.upperVoiceRestOffset + 0.5, 0));
        } else if (parseFloat(noteSet.voiceNumber) === 1) {
          noteSet.dy = Math.min(noteSet.dy, Math.min(pitchLineRange[1] + this.staff.score.effectiveStaffMetrics.lowerVoiceRestOffset - 0.5, 0));
        } else {
          noteSet.dy = Math.min(noteSet.dy, Math.min(pitchLineRange[1] + 2 * (this.staff.score.effectiveStaffMetrics.lowerVoiceRestOffset - 0.5), 0));
        }
      }
    }
  }
  numberAutoMultiMeasureRests(t) {
    // TODO
    throw new Error('not implemented');
  }
  autoMultiRest(t) {
    if (this.isAutoMultiRestCandidate) {
      if (this.autoMultiRestLastMeasure) {
        return Measure.MULTI_REST_END;
      } else if (this.breaksMultiRestAfter) {
        return Measure.MULTI_REST_NONE;
      } else if (this.autoMultiRestFirstMeasure) {
        return this.numberAutoMultiMeasureRests(t);
      } else if (this.autoMultiRestNotFirstMeasure) {
        return Measure.MULTI_REST_BODY;
      } else {
        return Measure.MULTI_REST_NONE;
      }
    } else {
      return Measure.MULTI_REST_NONE;
    }
  }
  clone() {
    const measure = super.clone(Measure);
    measure.tempo = this.tempo.clone();
    measure.timeSignature = this.timeSignature.clone();
    measure.keySignature = this.keySignature.clone();
    if (this.clef) {
      measure.clef = this.clef.clone();
    }
    measure.breakType = this.breakType;
    measure.startRepeat = this.startRepeat;
    measure.endRepeat = this.endRepeat;
    measure.canHideStaff = this.canHideStaff;
    measure.initializeDerivedState();
    return measure;
  }
}
Measure.formal_elements = [Measure.FORM_DC, Measure.FORM_DS, Measure.FORM_DS_AL_FINE, Measure.FORM_DC_AL_FINE, Measure.FORM_DS_AL_CODA, Measure.FORM_DC_AL_CODA, Measure.FORM_DS_AL_SEGNO, Measure.FORM_DC_AL_SEGNO, Measure.FORM_SEGNO, Measure.FORM_TO_CODA, Measure.FORM_CODA, Measure.FORM_FINE];
Measure.starting_formal_elements = [Measure.FORM_DC, Measure.FORM_DS, Measure.FORM_DS_AL_FINE, Measure.FORM_DC_AL_FINE, Measure.FORM_DS_AL_CODA, Measure.FORM_DC_AL_CODA, Measure.FORM_DS_AL_SEGNO, Measure.FORM_DC_AL_SEGNO];

/***/ }),

/***/ 32981:
/*!************************************************!*\
  !*** ./src/app/note-editor/models/metermap.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeterMap)
/* harmony export */ });
class MeterMap {
  static get IDENTITY_TYPE() {
    return 'none';
  }
  static get SWING_TYPE() {
    return 'swing';
  }
  static get IDENTITY() {
    return MeterMap.identity;
  }
  get type() {
    return this._type;
  }
  constructor(type) {
    this._type = type;
  }
  equals(meterMap) {
    return this.type === meterMap.type;
  }
  transformPosition(notation) {
    return notation.position;
  }
  transformDuration(notation) {
    return notation.duration;
  }
}
MeterMap.identity = new MeterMap(MeterMap.IDENTITY_TYPE);

/***/ }),

/***/ 21151:
/*!********************************************************!*\
  !*** ./src/app/note-editor/models/model-event-kind.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ModelEventKind": () => (/* binding */ ModelEventKind)
/* harmony export */ });
var ModelEventKind;
(function (ModelEventKind) {
  ModelEventKind["MODEL_CHANGE"] = "modelChange";
  ModelEventKind["ADD_CHILD_MODEL"] = "addChildModel";
  ModelEventKind["REMOVING_CHILD_MODEL"] = "removingChildModel";
  ModelEventKind["REMOVE_CHILD_MODEL"] = "removeChildModel";
  ModelEventKind["ADD_ANNOTATION"] = "addAnnotation";
  ModelEventKind["REMOVING_ANNOTATION"] = "removingAnnotation";
  ModelEventKind["REMOVE_ANNOTATION"] = "removeAnnotation";
  ModelEventKind["EDIT_ANNOTATION"] = "editAnnotation";
  ModelEventKind["ERROR_LOADING_INSTRUMENT"] = "errorLoadingInstrument";
})(ModelEventKind || (ModelEventKind = {}));

/***/ }),

/***/ 10924:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/model.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Model)
/* harmony export */ });
/* harmony import */ var _model_event_kind__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model-event-kind */ 21151);

class Model {
  constructor() {
    this._parent = null;
    this._children = [];
    this._annotations = [];
  }
  get parent() {
    return this._parent;
  }
  set parent(v) {
    this._parent = v;
  }
  get children() {
    return this._children;
  }
  set children(v) {
    this._children = v;
  }
  get index() {
    if (this._parent == null) {
      return -1;
    } else {
      return this._parent.children.indexOf(this);
    }
  }
  get numChildren() {
    return this._children.length;
  }
  get descendants() {
    let descendants = [];
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      descendants.push(child);
      descendants = descendants.concat(child.descendants);
    }
    // TODO Annotations
    return descendants;
  }
  get ancestors() {
    const ancestors = [];
    let parent = this.parent;
    while (parent) {
      ancestors.push(parent);
      parent = parent.parent;
    }
    return ancestors;
  }
  get annotations() {
    return this._annotations;
  }
  get allAnnotations() {
    const allAnnotations = [];
    this.getAllAnnotations(allAnnotations);
    return allAnnotations;
  }
  get numAnnotations() {
    return this._annotations.length;
  }
  // noteEditorService: NoteEditorService;
  // constructor(noteEidtorService: NoteEditorService) {
  //   this.noteEditorService = noteEidtorService;
  // }
  getAllAnnotations(annotations) {
    for (let i = 0; i < this._annotations.length; i++) {
      const annotation = this._annotations[i];
      annotations.push(annotation);
      annotation.getAllAnnotations(annotations);
    }
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      child.getAllAnnotations(annotations);
    }
  }
  addChild(child) {
    this.addChildAt(child, this._children.length);
  }
  addChildAt(child, index) {
    child.parent = this;
    //TODO MODEL_CHANGE events ...
    this._children.splice(index, 0, child);
    if (this.parent) {
      this.parent.handleChildModelChange({
        kind: _model_event_kind__WEBPACK_IMPORTED_MODULE_0__.ModelEventKind.ADD_CHILD_MODEL,
        child,
        parent: this,
        index
      });
    }
  }
  getChildAt(index) {
    if (index < this._children.length) {
      return this._children[index];
    } else {
      return null;
    }
  }
  removeChild(child) {
    const index = this._children.indexOf(child);
    if (index >= 0) {
      this.removeChildAt(index);
    }
  }
  removeChildAt(index) {
    const child = this.getChildAt(index);
    // MODEL_CHANGE events...
    if (this.parent) {
      this.parent.handleChildModelChange({
        kind: _model_event_kind__WEBPACK_IMPORTED_MODULE_0__.ModelEventKind.REMOVING_CHILD_MODEL,
        child,
        parent: this,
        index
      });
    }
    this.doRemoveChildAt(index);
    if (this.parent) {
      this.parent.handleChildModelChange({
        kind: _model_event_kind__WEBPACK_IMPORTED_MODULE_0__.ModelEventKind.REMOVE_CHILD_MODEL,
        child,
        parent: this,
        index
      });
    }
  }
  doRemoveChildAt(index) {
    const child = this.getChildAt(index);
    if (child) {
      child.parent = null;
      this._children.splice(index, 1);
    }
  }
  removeAllChildren() {
    while (this.numChildren > 0) {
      this.removeChildAt(this.numChildren - 1);
    }
  }
  addAnnotation(annotation) {
    this.addAnnotationAt(annotation, this._annotations.length);
  }
  addAnnotationAt(annotation, index) {
    annotation.parent = this;
    // annotation.addEventListener(
    //   ModelEvent.MODEL_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleChildModelChange)
    // );
    // annotation.addEventListener(
    //   ModelUpdateEvent.MODEL_UPDATE,
    //   RumtimeHelper.bindMethod(this, this.handleChildModelUpdate)
    // );
    this._annotations.splice(index, 0, annotation);
    // this.dispatchModelEvent(
    //   new ModelEvent(
    //     ModelEvent.MODEL_CHANGE,
    //     ModelEvent.ADD_ANNOTATION,
    //     this,
    //     annotation,
    //     idx
    //   )
    // );
  }

  getAncestorOfType(type) {
    let parent = this.parent;
    while (parent && !(parent instanceof type)) {
      parent = parent.parent;
    }
    return parent;
  }
  getRhythmContext() {
    let parent = this.parent;
    while (parent && !parent.is_rhythmContext) {
      parent = parent.parent;
    }
    return parent;
  }
  getMeasure() {
    let parent = this.parent;
    while (parent && !parent.isMeasure) {
      parent = parent.parent;
    }
    return parent;
  }
  getVoice() {
    let parent = this.parent;
    while (parent && !parent.isVoice) {
      parent = parent.parent;
    }
    return parent;
  }
  getScore() {
    let parent = this.parent;
    while (parent && !parent.isScore) {
      parent = parent.parent;
    }
    return parent;
  }
  clone(type = Model) {
    const model = new type();
    model.removeAllChildren();
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      model.addChild(child.clone());
    }
    // TODO Annotations
    for (let i = 0; i < this._annotations.length; i++) {
      const annotation = this._annotations[i];
      model.addAnnotation(annotation.clone());
    }
    return model;
  }
  static cloneArr(arr) {
    if (arr == null) return null;
    const arrClone = [];
    for (let i = 0; i < arr.length; i++) {
      arrClone[i] = arr[i];
    }
    return arrClone;
  }
  getModelProperty(property) {
    return this[property];
  }
  setModelProperty(property, val) {
    this[property] = val;
  }
  layoutPropertyChange(t) {
    return true;
  }
  handleChildModelChange(evt) {}
  removeAllAnnotations() {
    while (this.numAnnotations > 0) {
      this.removeAnnotationAt(this.numAnnotations - 1);
    }
  }
  removeAnnotationAt(idx) {
    const annotation = this.getAnnotationAt(idx);
    if (annotation != null) {
      // this.dispatchModelEvent(
      //   new ModelEvent(
      //     ModelEvent.MODEL_CHANGE,
      //     ModelEvent.REMOVING_ANNOTATION,
      //     this,
      //     annotation,
      //     idx
      //   )
      // );
      annotation.parent = null;
      // annotation.removeEventListener(
      //   ModelEvent.MODEL_CHANGE,
      //   RumtimeHelper.bindMethod(this, this.handleChildModelChange)
      // );
      // annotation.removeEventListener(
      //   ModelUpdateEvent.MODEL_UPDATE,
      //   RumtimeHelper.bindMethod(this, this.handleChildModelUpdate)
      // );
      this._annotations.splice(idx, 1);
      // this.dispatchModelEvent(
      //   new ModelEvent(
      //     ModelEvent.MODEL_CHANGE,
      //     ModelEvent.REMOVE_ANNOTATION,
      //     this,
      //     annotation,
      //     idx
      //   )
      // );
    }
  }

  getAnnotationAt(idx) {
    if (idx < this._annotations.length) {
      return this._annotations[idx];
    } else {
      return null;
    }
  }
}

/***/ }),

/***/ 92488:
/*!**************************************************!*\
  !*** ./src/app/note-editor/models/multi-rest.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MultiRest)
/* harmony export */ });
/* harmony import */ var _line_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./line-notation */ 93207);

class MultiRest extends _line_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get bars() {
    return this._bars;
  }
  set bars(v) {
    this._bars = v;
  }
  get brackLength() {
    return this._brackLength;
  }
  constructor(bars = 1, rhythmPosition = 0, span = 0) {
    super(rhythmPosition, true, span, _line_notation__WEBPACK_IMPORTED_MODULE_0__["default"].TYPE_MULTIREST);
    this._brackLength = 2;
    this.bars = bars;
  }
  static createMultiRest(bars) {
    return new MultiRest(bars, 0, 0);
  }
  clone() {
    const multiRest = super.clone(MultiRest);
    multiRest.bars = this.bars;
    return multiRest;
  }
}

/***/ }),

/***/ 66420:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/models/notation-direction.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Notation_Direction": () => (/* binding */ Notation_Direction)
/* harmony export */ });
var Notation_Direction;
(function (Notation_Direction) {
  Notation_Direction["DIRECTION_UP"] = "up";
  Notation_Direction["DIRECTION_DOWN"] = "down";
  Notation_Direction["DIRECTION_LEFT"] = "left";
  Notation_Direction["DIRECTION_RIGHT"] = "right";
})(Notation_Direction || (Notation_Direction = {}));

/***/ }),

/***/ 57485:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/notation-value.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotationValue": () => (/* binding */ NotationValue)
/* harmony export */ });
var NotationValue;
(function (NotationValue) {
  NotationValue[NotationValue["TWO_HUNDRED_FIFTY_SIXTH"] = 0] = "TWO_HUNDRED_FIFTY_SIXTH";
  NotationValue[NotationValue["ONE_HUNDERD_TWENTY_EIGHTH"] = 1] = "ONE_HUNDERD_TWENTY_EIGHTH";
  NotationValue[NotationValue["SIXTY_FOURTH"] = 2] = "SIXTY_FOURTH";
  NotationValue[NotationValue["THIRTY_SECOND"] = 3] = "THIRTY_SECOND";
  NotationValue[NotationValue["SIXTEENTH"] = 4] = "SIXTEENTH";
  NotationValue[NotationValue["EIGHTH"] = 5] = "EIGHTH";
  NotationValue[NotationValue["QUARTER"] = 6] = "QUARTER";
  NotationValue[NotationValue["HALF"] = 7] = "HALF";
  NotationValue[NotationValue["WHOLE"] = 8] = "WHOLE";
  NotationValue[NotationValue["BREVE"] = 9] = "BREVE";
  NotationValue[NotationValue["LONGA"] = 10] = "LONGA";
})(NotationValue || (NotationValue = {}));

/***/ }),

/***/ 83658:
/*!************************************************!*\
  !*** ./src/app/note-editor/models/notation.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Notation": () => (/* binding */ Notation)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _rhythm_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rhythm-element */ 60828);


// import ValueNotation from './value-notation';
class Notation extends _rhythm_element__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get HIDDEN_COLOR() {
    return 0xffffff;
  }
  static get PLACEMENT_ABOVE() {
    return 999;
  }
  static get PLACEMENT_BELOW() {
    return -999;
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(v) {
    this._enabled = v;
  }
  get dx() {
    return this._dx;
  }
  set dx(v) {
    this._dx = v;
  }
  get dy() {
    return this._dy;
  }
  set dy(v) {
    this._dy = v;
  }
  get color() {
    return this._color;
  }
  set color(v) {
    this._color = v;
  }
  get privateDx() {
    return this._dx;
  }
  get privateDy() {
    return this._dy;
  }
  get privateColor() {
    return this._color;
  }
  get cue() {
    return this._cue;
  }
  set cue(v) {
    this._cue = v;
  }
  get direction() {
    return this._direction;
  }
  set direction(v) {
    this._direction = v;
  }
  // public get valueNotation() {
  //   // const that: any = this;
  //   // return that as ValueNotation;
  //   return this;
  // }
  get metrical() {
    return false;
  }
  get movable() {
    return false;
  }
  get symbol() {
    return false;
  }
  get showOnlyOnSystemStaff() {
    return false;
  }
  get affectsParentLayout() {
    return true;
  }
  get hasValueConstraint() {
    return this.metrical;
  }
  get units() {
    return 0;
  }
  get excludeFromPositioning() {
    return this._excludeFromPositioning;
  }
  set excludeFromPositioning(v) {
    this._excludeFromPositioning = v;
  }
  get implicitDy() {
    return this._implicitDy;
  }
  set implicitDy(v) {
    this._implicitDy = v;
  }
  get effectiveColor() {
    return this.color;
  }
  set effectiveColor(v) {
    this.color = v;
  }
  get invisible() {
    return this.effectiveColor === Notation.HIDDEN_COLOR;
  }
  get effectiveCue() {
    return this.cue;
  }
  set effectiveCue(v) {
    this.cue = v;
  }
  get marking() {
    return false;
  }
  get y() {
    if (this.score == null) {
      return 0;
    }
    let y = this.dy - this.paddingY;
    if (this.alignToStaffTop) {
      y += this.measure.effectiveClef.staffHeight;
    }
    return y;
  }
  set y(v) {
    if (this.score != null) {
      this.dy = v + this.paddingY;
      if (this.alignToStaffTop) {
        this.dy -= this.measure.effectiveClef.staffHeight;
      }
    }
  }
  get alignToStaffTop() {
    return false;
  }
  get paddingY() {
    return 0;
  }
  get is_rhythmContext() {
    return false;
  }
  constructor(rhythmPosition) {
    super(rhythmPosition);
    this.onSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this._enabled = true;
    this._dx = 0;
    this._dy = 0;
    this._color = 0;
    this._cue = false;
    // public get unitValue() {
    //   // return ValueNotation.TWO_HUNDRED_FIFTY_SIXTH;
    //   return null;
    // }
    this._excludeFromPositioning = false;
    this._implicitDy = false;
  }
  sameVoiceAs(notation) {
    return notation.measure === this.measure && parseFloat(notation.voiceNumber) === this.voiceNumber;
  }
  clone(type = Notation) {
    const notation = super.clone(type);
    notation.enabled = this.enabled;
    notation.dx = this.dx;
    notation.dy = this.dy;
    notation.direction = this.direction;
    notation.cue = this.cue;
    notation.color = this.color;
    return notation;
  }
  requestValidation() {}
}

/***/ }),

/***/ 80160:
/*!*************************************************!*\
  !*** ./src/app/note-editor/models/note-head.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteHead": () => (/* binding */ NoteHead)
/* harmony export */ });
var NoteHead;
(function (NoteHead) {
  NoteHead["NORMAL_NOTE_HEAD"] = "normal";
  NoteHead["STEMLESS_NOTE_HEAD"] = "stemless";
  NoteHead["SLASH_NOTE_HEAD"] = "slash";
  NoteHead["HIT_NOTE_HEAD"] = "hit";
  NoteHead["CROSS_NOTE_HEAD"] = "cross";
  NoteHead["SQUARE_NOTE_HEAD"] = "square";
  NoteHead["DIAMOND_NOTE_HEAD"] = "diamond";
  NoteHead["TRIANGLE_NOTE_HEAD"] = "triangle";
  NoteHead["HARMONIC_NOTE_HEAD"] = "harmonic";
  NoteHead["CROSS_CIRCLE_NOTE_HEAD"] = "crossCircle";
  NoteHead["NAMED_NOTE_HEAD"] = "named";
  NoteHead["BACKGROUND_NOTE_HEAD"] = "background";
})(NoteHead || (NoteHead = {}));

/***/ }),

/***/ 40073:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/note-set-child.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteSetChild)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);

class NoteSetChild extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  get noteSet() {
    return this.parent;
  }
  get position() {
    return this.noteSet ? this.noteSet.position : 0;
  }
  get measure() {
    return this.noteSet ? this.noteSet.measure : null;
  }
  get rhythmPosition() {
    return this.noteSet ? this.noteSet.rhythmPosition : 0;
  }
  set rhythmPosition(position) {
    super.rhythmPosition = +position;
  }
  get voiceNumber() {
    return this.noteSet ? this.noteSet.voiceNumber : 0;
  }
  get valueNotation() {
    return this.noteSet;
  }
  constructor() {
    super(0);
  }
}

/***/ }),

/***/ 14816:
/*!********************************************!*\
  !*** ./src/app/note-editor/models/note.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Note": () => (/* binding */ Note)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _accidental__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accidental */ 18659);
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./articulation */ 78859);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _liaison__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./liaison */ 31253);
/* harmony import */ var _notation_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notation-value */ 57485);
/* harmony import */ var _note_head__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note-head */ 80160);
/* harmony import */ var _note_set_child__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./note-set-child */ 40073);








class Note extends _note_set_child__WEBPACK_IMPORTED_MODULE_7__["default"] {
  static get C() {
    return 0;
  }
  static get D() {
    return 1;
  }
  static get E() {
    return 2;
  }
  static get F() {
    return 3;
  }
  static get G() {
    return 4;
  }
  static get A() {
    return 5;
  }
  static get B() {
    return 6;
  }
  // private static least_fifths_steps = [0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];
  // private static least_fifths = [0, -5, 2, -3, 4, -1, 6, 1, -4, 3, -2, 5];
  static get STEP_PITCHES() {
    return Note.step_pitches;
  }
  static get STEP_INTERVALS() {
    return Note.step_intervals;
  }
  static get DEFAULT_STEPS() {
    return Note.default_steps;
  }
  static get DEFAULT_SHARP_STEPS() {
    return Note.default_sharp_steps;
  }
  // static get LEAST_FIFTHS_STEPS() {
  //   return Note.least_fifths_steps;
  // }
  // static get LEAST_FIFTHS() {
  //   return Note.least_fifths;
  // }

  static get ACCIDENTAL_TABLE() {
    return Note.accidental_table;
  }
  static get ALTERATION_TABLE() {
    return Note.alteration_table;
  }
  get pitch() {
    return this._pitch;
  }
  set pitch(v) {
    this._pitch = v;
    this.updateAccidentalCleanup();
  }
  get step() {
    return this._step;
  }
  set step(v) {
    this._step = v;
    this.updateAccidentalCleanup();
  }
  get accidental() {
    return this._accidental;
  }
  set accidental(v) {
    this._accidental = v;
    this.updateAccidentalCleanup();
  }
  get explicitAccidental() {
    return this._explicitAccidental;
  }
  set explicitAccidental(v) {
    this._explicitAccidental = v;
  }
  get courtesyAccidental() {
    return this._courtesyAccidental;
  }
  set courtesyAccidental(v) {
    this._courtesyAccidental = v;
  }
  get liaison() {
    return this._liaison;
  }
  set liaison(v) {
    this._liaison = v;
    this.updateAccidentalCleanup();
  }
  get incomingLiaison() {
    return this._incomingLiaison;
  }
  set incomingLiaison(v) {
    this._incomingLiaison = v;
  }
  get preEffect() {
    return this._preEffect;
  }
  set preEffect(v) {
    this._preEffect = v;
  }
  get postEffect() {
    return this._postEffect;
  }
  set postEffect(v) {
    this._postEffect = v;
  }
  get noteHead() {
    return this._noteHead;
  }
  set noteHead(v) {
    this._noteHead = v;
  }
  get tuning() {
    return this._tuning;
  }
  set tuning(v) {
    this._tuning = v;
  }
  get stringIndex() {
    return this._stringIndex;
  }
  set stringIndex(v) {
    this._stringIndex = v;
  }
  get fret() {
    return this._fret;
  }
  set fret(v) {
    this._fret = v;
  }
  get parentheses() {
    return this._parentheses;
  }
  set parentheses(v) {
    this._parentheses = v;
  }
  get liaisonStartNote() {
    return this._liaisonStartNote;
  }
  set liaisonStartNote(v) {
    this._liaisonStartNote = v;
  }
  get liaisonEndNote() {
    return this._liaisonEndNote;
  }
  set liaisonEndNote(v) {
    this._liaisonEndNote = v;
  }
  get silent() {
    return this._silent;
  }
  set silent(v) {
    this._silent = v;
  }
  get movable() {
    return true;
  }
  get diatonicPitch() {
    return this.pitch.transpose(-this.alteration);
  }
  get notatedOctave() {
    return this.diatonicPitch.octave;
  }
  get diatonicOrdinal() {
    return this.step + 7 * this.notatedOctave;
  }
  get stemless() {
    return this.noteHead === _note_head__WEBPACK_IMPORTED_MODULE_6__.NoteHead.STEMLESS_NOTE_HEAD && (this.noteSet == null || this.noteSet.value >= _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.QUARTER);
  }
  get alteration() {
    let alteration = this.pitch.pitchClass - Note.STEP_PITCHES[this.step];
    if (alteration > 6) {
      alteration -= 12;
    } else if (alteration < -6) {
      alteration += 12;
    }
    return alteration;
  }
  get playable() {
    return this.noteHead !== _note_head__WEBPACK_IMPORTED_MODULE_6__.NoteHead.SLASH_NOTE_HEAD && this.noteHead !== _note_head__WEBPACK_IMPORTED_MODULE_6__.NoteHead.HIT_NOTE_HEAD;
  }
  get tunedOrdinal() {
    return this.pitch.ordinal + this.tuning / 100;
  }
  get tied() {
    return this.liaison === _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON;
  }
  set tied(t) {
    if (t) {
      this.liaison = _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON;
    } else {
      this.liaison = null;
    }
  }
  get bent() {
    return this.liaison === _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.BEND_LIAISON || this.liaison === _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.PRE_BEND_LIAISON;
  }
  get slide() {
    return this.liaison = _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.SLIDE_LIAISON;
  }
  get glissando() {
    return this.liaison == _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.GLISSANDO_LIAISON;
  }
  get tieEnd() {
    return null != this.liaisonStartNote && this.liaisonStartNote.tied;
  }
  get cumulativeBend() {
    let cumulativeBend = 0;
    let that = this;
    while (that.liaisonStartNote != null && (that.liaisonStartNote.bent || that.liaisonStartNote.liaison === _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.BEND_LIAISON)) {
      cumulativeBend += that.tunedOrdinal - that.liaisonStartNote.tunedOrdinal;
      that = that.liaisonStartNote;
    }
    return cumulativeBend;
  }
  get relativeBend() {
    if (this.liaisonStartNote != null || !this.liaisonStartNote.bent && this.liaisonStartNote.liaison !== _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON) {
      return 0;
    } else {
      return this.tunedOrdinal - this.liaisonStartNote.tunedOrdinal;
    }
  }
  get noteIndex() {
    if (this.noteSet) {
      return this.noteSet.notes.indexOf(this);
    } else {
      return -1;
    }
  }
  get hasIndexLiaison() {
    return this.liaison && this.liaison !== _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON;
  }
  get hasPreEffect() {
    return this.preEffect != null;
  }
  get hasPostEffect() {
    return this.postEffect != null;
  }
  get hasEffect() {
    return this.hasPreEffect || this.hasPostEffect;
  }
  get effectiveColor() {
    if (this.color === 0 && this.noteSet != null) {
      return this.noteSet.color;
    } else {
      return this.color;
    }
  }
  set effectiveColor(v) {
    this.color = v;
    if (this.noteSet != null) {
      if (this.noteSet.children.length === 1) {
        this.color = 0;
        this.noteSet.color = v;
      } else {
        this.noteSet.color = 0;
      }
    }
  }
  get effectiveCue() {
    if (this.cue || !this.noteSet) {
      return this.cue;
    } else {
      return this.noteSet.cue;
    }
  }
  set effectiveCue(v) {
    this.cue = v;
    if (this.noteSet) {
      if (this.noteSet.children.length === 1) {
        this.cue = false;
        this.noteSet.cue = v;
      } else {
        this.noteSet.cue = false;
      }
    }
  }
  constructor(pitch, step, accidental, liaison, noteHead) {
    super();
    this._pitch = null;
    this._step = 0;
    this._tuning = 0;
    this._fret = -1;
    this._parentheses = false;
    this.pitch = pitch;
    this.step = step >= 0 || pitch == null ? step : Note.DEFAULT_STEPS[pitch.pitchClass];
    this.accidental = accidental;
    this.liaison = liaison ? _liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON : null;
    this.noteHead = noteHead;
  }
  static fromString(noteStr) {
    const pitchStepIndex = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].STEP_NAMES.indexOf(noteStr.charAt(0));
    if (pitchStepIndex >= 0) {
      let stepPitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].STEP_PITCH_CLASSES[pitchStepIndex];
      let accidental = null;
      noteStr = noteStr.substring(1);
      if (noteStr.charAt(0) === '#') {
        stepPitch++;
        noteStr = noteStr.substring(1);
        if (noteStr.length > 0 && noteStr.charAt(0) == '#') {
          stepPitch++;
          noteStr = noteStr.substring(1);
          accidental = _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.DOUBLE_SHARP;
        } else {
          accidental = _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.SHARP;
        }
      } else if (noteStr.charAt(0) === 'b') {
        stepPitch--;
        noteStr = noteStr.substring(1);
        if (noteStr.length > 0 && noteStr.charAt(0) === 'b') {
          stepPitch--;
          noteStr = noteStr.substring(1);
          accidental = _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.DOUBLE_FLAT;
        } else {
          accidental = _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.FLAT;
        }
      }
      const octave = parseInt(noteStr);
      if (!isNaN(octave)) {
        stepPitch += 12 * octave;
      }
      return new Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].getPitch(stepPitch), pitchStepIndex, accidental);
    } else {
      throw new Error('Unrecognized pitch step ' + noteStr);
    }
  }
  static noteAt(pitch, octave, step = -1, accidental = null) {
    return new Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(pitch, octave), step, accidental);
  }
  alter(effectiveAlteration) {
    return new Note(this.pitch.transpose(effectiveAlteration), this.step);
  }
  transposeDiatonic(step) {
    let newStep = this.step + step,
      octave = this.notatedOctave;
    while (newStep >= 7) {
      newStep -= 7;
      octave++;
    }
    while (newStep < 0) {
      newStep += 7;
      octave--;
    }
    const pitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchAt(Note.STEP_PITCHES[newStep], octave);
    return new Note(pitch, newStep);
  }
  transposeInterval(interval) {
    if (interval.unison) return this;
    let step = +this.step + +interval.steps;
    while (step >= 7) {
      step -= 7;
    }
    while (step < 0) {
      step += 7;
    }
    const pitch = _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].getPitch(this.pitch.ordinal + +interval.pitches);
    const note = new Note(pitch, step);
    note.normalizeAlteration();
    if (this.accidental) {
      note.accidental = Note.alterationToAccidental(note.alteration);
      note.courtesyAccidental = this.courtesyAccidental;
    }
    return note;
  }
  enharmonicShiftInterval() {
    let interval = new _interval__WEBPACK_IMPORTED_MODULE_3__["default"](1, 0);
    let transposedInterval = this.transposeInterval(interval);
    if (transposedInterval.step === (this.step + 1) % 7 && (transposedInterval.alteration != -2 || transposedInterval.step !== Note.C && transposedInterval.step !== Note.F)) {} else {
      interval = new _interval__WEBPACK_IMPORTED_MODULE_3__["default"](-2, 0);
      transposedInterval = this.transposeInterval(interval);
      if (transposedInterval.step == (this.step + 5) % 7 && (transposedInterval.alteration != 2 || transposedInterval.step !== Note.B && transposedInterval.step !== Note.E)) {} else {
        interval = new _interval__WEBPACK_IMPORTED_MODULE_3__["default"](-1, 0);
      }
    }
    return interval;
  }
  normalizeAlteration(alteration = 2) {
    while (this.alteration > alteration) {
      this.step = (this.step + 1) % 7;
    }
    while (this.alteration < -alteration) {
      this.step = (this.step + 7 - 1) % 7;
    }
  }
  intervalFrom(note) {
    return new _interval__WEBPACK_IMPORTED_MODULE_3__["default"](this.diatonicOrdinal - note.diatonicOrdinal, this.pitch.ordinal - note.pitch.ordinal);
  }
  sameAs(note) {
    return note == this || this.pitch.ordinal === note.pitch.ordinal && this.step === note.step;
  }
  static alterationToAccidental(alteration) {
    if (alteration < -2 || alteration > 2) {
      return null;
    } else {
      return Note.ACCIDENTAL_TABLE[alteration - -2];
    }
  }
  static accidentalToAlteration(accidental) {
    if (accidental != null && accidental in Note.ALTERATION_TABLE) {
      return Note.ALTERATION_TABLE[accidental];
    } else {
      return 0;
    }
  }
  static compareNotePitch(note1, note2) {
    return note1.diatonicPitch.ordinal < note2.diatonicPitch.ordinal ? -1 : note1.diatonicPitch.ordinal > note2.diatonicPitch.ordinal ? 1 : note1.pitch.ordinal < note2.pitch.ordinal ? -1 : note1.pitch.ordinal > note2.pitch.ordinal ? 1 : 0;
  }
  setLiaison(liaison) {
    this.noteSet.removeArticulation(_articulation__WEBPACK_IMPORTED_MODULE_2__.Articulation.LV_TIE);
    this.liaison = liaison;
  }
  clearLiaison(liaison) {
    if (this.liaison === liaison) {
      this.liaison = null;
    }
  }
  canonicalIntervalFrom(note) {
    const noteCopy = this.clone();
    const interval = _interval__WEBPACK_IMPORTED_MODULE_3__["default"].fromPitches(this.pitch.ordinal - note.pitch.ordinal);
    if (interval.intervalClass === 6) {
      return null;
    } else {
      noteCopy.step = (note.step + interval.stepClass) % 7;
      return noteCopy;
    }
  }
  getAlteredness(keySignature) {
    return Math.abs(keySignature.getAlteration(this.step) - this.alteration);
  }
  addPreEffect(preEffect) {
    this.preEffect = preEffect;
    this.addChild(preEffect);
  }
  addPostEffect(postEffect) {
    this.postEffect = postEffect;
    this.addChild(postEffect);
  }
  removePreEffect() {
    this.removeChild(this.preEffect);
    this.preEffect = null;
  }
  removePostEffect() {
    this.removeChild(this.postEffect);
    this.postEffect = null;
  }
  // static getEnharmonicWithMinimumAlterations(note: Note, keySignature) {
  //   note = note.clone();
  //   let noteSet = new NoteSet(0, [note]);
  //   let normalizeSpelling = noteSet.normalizeSpelling(keySignature);
  //   let enharmonic = note;
  //   let shiftInterval = note.enharmonicShiftInterval();
  //   let transposedNote = note.transposeInterval(shiftInterval);
  //   while (!enharmonic.equals(transposedNote)) {
  //     noteSet = new NoteSet(0, [transposedNote]);
  //     const transposedNormalizeSpelling =
  //       noteSet.normalizeSpelling(keySignature);
  //     if (Math.abs(transposedNormalizeSpelling) < Math.abs(normalizeSpelling)) {
  //       normalizeSpelling = transposedNormalizeSpelling;
  //       enharmonic = transposedNote;
  //     }
  //     shiftInterval = transposedNote.enharmonicShiftInterval();
  //     transposedNote = transposedNote.transposeInterval(shiftInterval);
  //   }
  //   return enharmonic;
  // }
  equals(note) {
    return note === this || this.pitch.equals(note.pitch) && note.alteration === this.alteration;
  }
  updateAccidentalCleanup() {
    const measure = this.getMeasure();
    if (measure) {
      measure._accidentalCleanup = Math.min(measure._accidentalCleanup, this.position);
    }
  }
  clone() {
    const note = super.clone(Note);
    note.pitch = this.pitch;
    note.step = this.step;
    note.accidental = this.accidental;
    note.explicitAccidental = this.explicitAccidental;
    note.courtesyAccidental = this.courtesyAccidental;
    note.liaison = this.liaison;
    note.incomingLiaison = this.incomingLiaison;
    note.noteHead = this.noteHead;
    note.parentheses = this.parentheses;
    note.tuning = this.tuning;
    note.stringIndex = this.stringIndex;
    note.fret = this.fret;
    if (this.preEffect) {
      note.addPreEffect(this.preEffect.clone());
    }
    if (this.postEffect) {
      note.addPostEffect(this.postEffect.clone());
    }
    return note;
  }
}
Note.step_pitches = [0, 2, 4, 5, 7, 9, 11];
// C  D  E  F  G  A  B
Note.step_intervals = [2, 2, 1, 2, 2, 2, 1];
// W W H W W W H
Note.default_steps = [0, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6];
// C Db D Eb E F Gb G Ab A Bb B
Note.default_sharp_steps = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];
Note.accidental_table = [_accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.DOUBLE_FLAT, _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.FLAT, _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.NATURAL, _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.SHARP, _accidental__WEBPACK_IMPORTED_MODULE_1__.Accidental.DOUBLE_SHARP];
Note.alteration_table = {
  doubleFlat: -2,
  flat: -1,
  natural: 0,
  sharp: 1,
  doubleSharp: 2
};

/***/ }),

/***/ 46605:
/*!***********************************************!*\
  !*** ./src/app/note-editor/models/noteset.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteSet": () => (/* binding */ NoteSet)
/* harmony export */ });
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./articulation */ 78859);
/* harmony import */ var _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./articulation-attribute */ 9349);
/* harmony import */ var _liaison__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./liaison */ 31253);
/* harmony import */ var _lyric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lyric */ 10914);
/* harmony import */ var _notation_direction__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./notation-direction */ 66420);
/* harmony import */ var _notation_value__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notation-value */ 57485);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _tablature_clef__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tablature-clef */ 20511);
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./timesignature */ 67379);
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./tuplet */ 69519);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./value-notation */ 56170);











class NoteSet extends _value_notation__WEBPACK_IMPORTED_MODULE_10__["default"] {
  get grace() {
    return this._grace;
  }
  set grace(v) {
    this._grace = v;
  }
  get previousGraceNote() {
    if (this.rhythmContext == null) return null;
    for (let i = this.index; --i >= 0;) {
      const noteSet = this.rhythmContext.getElementAt(i);
      if (noteSet) {
        return noteSet.grace ? noteSet : null;
      }
    }
  }
  get nextGraceNote() {
    if (this.rhythmContext == null) return null;
    for (let i = this.index; i < this.rhythmContext.numElements.length; i++) {
      const noteSet = this.rhythmContext.getElementAt(i);
      if (noteSet) {
        return noteSet.grace ? noteSet : null;
      }
    }
    return null;
  }
  get numFollowingGraceNotes() {
    let graceNotesNum = 0;
    const that = this;
    let noteSet = that;
    while (noteSet && noteSet.grace) {
      graceNotesNum++;
      noteSet = noteSet.nextGraceNote;
    }
    return graceNotesNum;
  }
  get rhythmDuration() {
    if (this.grace) {
      return 0;
    } else {
      return _value_notation__WEBPACK_IMPORTED_MODULE_10__["default"].valueToDuration(this.value, this.dots);
    }
  }
  set rhythmDuration(v) {
    super.rhythmDuration = v;
  }
  get metrical() {
    return !this.grace || this.marking;
  }
  get marking() {
    if (!this.grace) {
      return false;
    }
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.liaison === _liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.PRE_BEND_LIAISON && note.measure && note.measure.effectiveClef instanceof _tablature_clef__WEBPACK_IMPORTED_MODULE_7__["default"] && note.liaisonEndNote && note.liaisonEndNote.relativeBend > 0) {
        return true;
      }
    }
    return false;
  }
  get tied() {
    return this.tieCount > 0;
  }
  get tieCount() {
    return this.getLiaisonTypeCount(_liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.TIE_LIAISON);
  }
  get liaisonStart() {
    return this.liaisonCount > 0;
  }
  get liaisonCount() {
    let count = 0;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.liaison) {
        count++;
      }
    }
    return count;
  }
  get liaisonEnd() {
    return this.liaisonEndCount > 0;
  }
  get liaisonEndCount() {
    let count = 0;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.liaisonStartNote || note.incomingLiaison) {
        count++;
      }
    }
    return count;
  }
  get hasEffects() {
    return this.effectCount > 0;
  }
  get effectCount() {
    let count = 0;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.preEffect || note.postEffect) {
        count++;
      }
    }
    return count;
  }
  get defaultBeamEnabled() {
    return this.value <= _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.EIGHTH && this.numNonLyricChildren > 0;
  }
  get numNonLyricChildren() {
    return this.children.reduce((sum, note) => sum + (note instanceof _lyric__WEBPACK_IMPORTED_MODULE_3__["default"] ? 0 : 1), 0);
  }
  get effectiveColor() {
    return super.effectiveColor;
  }
  set effectiveColor(color) {
    this.color = color;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      note.color = 0;
    }
    for (let i = 0; i < this.lyrics.length; i++) {
      const lyric = this.lyrics[i];
      lyric.color = color;
    }
  }
  get effectiveCue() {
    return super.effectiveCue;
  }
  set effectiveCue(cue) {
    this.cue = cue;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      note.cue = false;
    }
  }
  get tremoloDyad() {
    return this.rhythmContext instanceof _tuplet__WEBPACK_IMPORTED_MODULE_9__["default"] && this.rhythmContext.tremolo;
  }
  get beamLevel() {
    if (this.tremoloDyad) {
      return this.tremolo - 1;
    } else {
      return _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.EIGHTH - this.value;
    }
  }
  get canShowBeam() {
    return this.value <= _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.EIGHTH || this.tremoloDyad;
  }
  get hasLyrics() {
    return this.lyrics.length > 0;
  }
  get notes() {
    // if (this._notes == null) {
    this.computeNotesAndLyrics();
    // }
    if (!this._notes) {
      throw new Error('this._notes should not be null');
    }
    return this._notes;
  }
  get lyrics() {
    if (this._lyrics == null) {
      this.computeNotesAndLyrics();
      if (!this._lyrics) {
        throw new Error('this._lyrics should be non-null');
      }
    }
    return this._lyrics;
  }
  static get ARTICULATION_ATTRIBUTES() {
    return NoteSet.articulation_attributes;
  }
  static get ARTICULATION_ORDER() {
    return NoteSet.articulation_order;
  }
  static get DELAYED_ARTICULATIONS() {
    return NoteSet.delayed_articulations;
  }
  static get SUPPORTED_ARTICULATIONS() {
    return NoteSet.supported_articulations;
  }
  get beam() {
    return this._beam;
  }
  set beam(v) {
    this._beam = v;
  }
  get topLevelBeam() {
    return this._topLevelBeam;
  }
  set topLevelBeam(v) {
    this._topLevelBeam = v;
  }
  get appoggiatura() {
    return this._appoggiatura;
  }
  set appoggiatura(v) {
    this._appoggiatura = v;
  }
  get articulations() {
    return this._articulations;
  }
  set articulations(v) {
    this._articulations = v;
  }
  get tremolo() {
    return this._tremolo;
  }
  set tremolo(v) {
    this._tremolo = v;
  }
  get arpeggio() {
    return this._arpeggio;
  }
  set arpeggio(v) {
    this._arpeggio = v;
  }
  get explicitRestY() {
    return this._explicitRestY;
  }
  set explicitRestY(v) {
    this._explicitRestY = v;
  }
  get children() {
    return this._children;
  }
  get lyricLines() {
    return Array.from(new Set(this.lyrics.map(t => t.line)));
  }
  get lastLyricLine() {
    if (this.lyricLines.length > 0) {
      return Math.max(...this.lyricLines);
    } else {
      return null;
    }
  }
  constructor(rhythmPosition = 0, noteOrNotes = null, value = 0, dots = 0) {
    super(rhythmPosition, value, dots);
    this._grace = false;
    this._notes = null;
    this._beam = false;
    this._topLevelBeam = false;
    this._appoggiatura = false;
    this._articulations = [];
    // 颤音
    this._tremolo = 0;
    // 分解和弦 琶音
    this._arpeggio = null;
    this._explicitRestY = false;
    if (noteOrNotes instanceof _note__WEBPACK_IMPORTED_MODULE_6__.Note) {
      this.addNote(noteOrNotes);
    } else if (noteOrNotes instanceof Array) {
      for (let i = 0; i < noteOrNotes.length; i++) {
        const note = noteOrNotes[i];
        this.addNote(note);
      }
    } else if (noteOrNotes != null) {
      throw new Error('Unexpected type for NoteSet notes: ' + noteOrNotes.toString());
    }
  }
  computeNotesAndLyrics() {
    const notes = [],
      lyrics = [];
    this._notes = notes;
    this._lyrics = lyrics;
    for (let i = 0; i < this._children.length; i++) {
      const child = this._children[i];
      if (child instanceof _note__WEBPACK_IMPORTED_MODULE_6__.Note) {
        notes.push(child);
      } else if (child instanceof _lyric__WEBPACK_IMPORTED_MODULE_3__["default"]) {
        lyrics.push(child);
      }
    }
    notes.sort(_note__WEBPACK_IMPORTED_MODULE_6__.Note.compareNotePitch);
  }
  setLyricsDirection(direction) {
    for (let i = 0; i < this.lyrics.length; i++) {
      const lyric = this.lyrics[i];
      lyric.direction = direction;
    }
  }
  clearLyric() {
    this.lyrics.forEach(this.removeLyric.bind(this));
  }
  isRest() {
    return this.notes.length === 0;
  }
  getNoteAt(idx) {
    return this.notes[idx];
  }
  addNote(note) {
    if (this.notes.length === 0) {
      this.color = note.color;
      note.color = 0;
    } else if (this.notes.length === 1 && this.color !== 0) {
      this.notes[0].color = this.color;
      this.color = 0;
    }
    this.addChild(note);
  }
  mergeNoteSet(noteSet) {
    for (let i = 0; i < noteSet.notes.length; i++) {
      const note = noteSet.notes[i];
      this.addNote(note);
    }
  }
  removeNote(note, removeArticulation) {
    this.removeChild(note);
    if (this.notes.length === 0) {
      const articulations = this.articulations.slice();
      for (let i = 0; i < articulations.length; i++) {
        const articulation = articulations[i];
        if (removeArticulation || NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST) {
          this.removeArticulation(articulation);
        }
      }
    }
    this.measure._accidentalCleanup = Math.min(this.measure._accidentalCleanup, this.position);
  }
  removeNotes() {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      this.removeChild(note);
    }
  }
  addArticulation(articulation) {
    if (this.numChildren !== 0 || (NoteSet.ARTICULATION_ATTRIBUTES[articulation] & _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST) !== 0) {
      if (NoteSet.ARTICULATION_ATTRIBUTES[articulation] === _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ARTICULATION_LIAISON) {
        for (let i = 0; i < this.notes.length; i++) {
          const note = this.notes[i];
          note.clearLiaison(_liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.TIE_LIAISON);
        }
      }
      const articulations = this.articulations.slice();
      for (let i = 0; i < articulations.length; i++) {
        const art = articulations[i];
        if (NoteSet.ARTICULATION_ORDER[art] > NoteSet.ARTICULATION_ORDER[articulation]) {
          articulations.splice(i, 0, articulation);
          return void (this.articulations = articulations);
        }
        if (art == articulation) {
          return;
        }
      }
      articulations.push(articulation);
      this.articulations = articulations;
    }
  }
  removeArticulation(articulation) {
    const articulations = this.articulations.slice();
    let idx = articulations.indexOf(articulation);
    if (idx >= 0) {
      articulations.splice(idx, 1);
      this.articulations = articulations;
    }
  }
  hasArticulation(articulation) {
    return this.articulations.indexOf(articulation) >= 0;
  }
  hasArticulationWithAttribute(attribute) {
    for (let i = 0; i < this.articulations.length; i++) {
      const articulation = this.articulations[i];
      if (NoteSet.ARTICULATION_ATTRIBUTES[articulation] === attribute) {
        return true;
      }
    }
    return false;
  }
  addLyric(lyric) {
    this.addChild(lyric);
  }
  removeLyric(lyric) {
    this.removeChild(lyric);
  }
  getLyricAtLine(line, direction = null) {
    for (let i = 0; i < this.lyrics.length; i++) {
      const lyric = this.lyrics[i];
      if (lyric.line == line && (!direction || direction == _notation_direction__WEBPACK_IMPORTED_MODULE_4__.Notation_Direction.DIRECTION_DOWN || lyric.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_4__.Notation_Direction.DIRECTION_UP)) {
        return lyric;
      }
    }
    return null;
  }
  previousNoteSet(greedy, ignoreGrace) {
    if (this.measure == null) {
      return null;
    }
    if (ignoreGrace && this.previousGraceNote) {
      return this.previousGraceNote;
    }
    const that = this;
    return this.measure.previousNotation(this.position, function (notation) {
      const noteSet = notation;
      return noteSet && parseFloat(noteSet.voiceNumber) == that.voiceNumber && (ignoreGrace || !noteSet.grace);
    }, greedy);
  }
  previousNoteSetAnyVoice(greedy) {
    if (this.measure) {
      return this.measure.previousNotation(this.position, function (notation) {
        return notation instanceof NoteSet && !notation.grace;
      }, greedy);
    } else {
      return null;
    }
  }
  nextNoteSet(greedy, ignoreGrace) {
    if (this.measure) {
      if (ignoreGrace) {
        const measureNotations = this.measure.measureNotations;
        for (let i = measureNotations.indexOf(this); ++i < measureNotations.length;) {
          const measureNotation = measureNotations[i];
          const nextNoteSet = measureNotation;
          if (nextNoteSet && parseFloat(nextNoteSet.voiceNumber) === this.voiceNumber) {
            return nextNoteSet;
          }
        }
      }
      const that = this;
      return this.measure.nextNotation(this.position, function (notation) {
        const noteSet = notation;
        return noteSet && parseFloat(noteSet.voiceNumber) === that.voiceNumber && (ignoreGrace || !noteSet.grace);
      }, greedy);
    } else {
      return null;
    }
  }
  nextNoteSetAnyVoice(greedy) {
    if (this.measure) {
      return this.measure.nextNotation(this.position, function (notation) {
        return notation instanceof NoteSet && !notation.grace;
      }, greedy);
    } else {
      return null;
    }
  }
  findSameAs(targetNote) {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.sameAs(targetNote)) {
        return note;
      }
    }
    return null;
  }
  findDiatonicOrdinal(diatonicOrdinal) {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.diatonicOrdinal === diatonicOrdinal) {
        return note;
      }
    }
    return null;
  }
  findChromaticOrdinal(chromaticOrdinal) {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.pitch.ordinal === chromaticOrdinal) {
        return note;
      }
    }
    return null;
  }
  getLiaisonTypeCount(liaisonType) {
    let count = 0;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.liaison === liaisonType) {
        count++;
      }
    }
    return count;
  }
  setAllTies() {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      note.setLiaison(_liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.TIE_LIAISON);
    }
  }
  clearTies() {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      note.clearLiaison(_liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.TIE_LIAISON);
    }
  }
  normalizeSpelling(keySignature) {
    if (this.notes.length === 0) {
      return 0;
    } else {
      let alterednessSum = 0,
        pitchStepMap = {},
        canonicalNotes = [],
        nonCanonicalNotes = [];
      for (let i = 0; i < this.notes.length; i++) {
        const note = this.notes[i];
        if (note.canonicalIntervalFrom(this.getNoteAt(0)) == null) {
          canonicalNotes.push(note);
        } else {
          nonCanonicalNotes.push(note);
        }
      }
      const notes = nonCanonicalNotes.concat(canonicalNotes);
      for (let i = 0; i < notes.length; i++) {
        const note = notes[i];
        if (i > 0) {
          if (note.pitch.pitchClass in pitchStepMap) {
            note.step = pitchStepMap[note.pitch.pitchClass];
          } else {
            let canonicalNote = null;
            let minAlteredness = 100;
            for (let j = i - 1; j >= 0; j--) {
              canonicalNote = note.canonicalIntervalFrom(nonCanonicalNotes[j]);
              if (canonicalNote) {
                const alteredness = canonicalNote.getAlteredness(keySignature);
                if (alteredness < minAlteredness) {
                  note.step = canonicalNote.step;
                  if (canonicalNote.accidental != null) {
                    note.accidental = _note__WEBPACK_IMPORTED_MODULE_6__.Note.alterationToAccidental(canonicalNote.alteration);
                  }
                  minAlteredness = alteredness;
                }
              }
            }
          }
        }
        pitchStepMap[note.pitch.pitchClass] = note.step;
        alterednessSum += note.getAlteredness(keySignature);
      }
      return alterednessSum;
    }
  }
  hasDiatonicPitch(step, octave) {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.step === step && note.notatedOctave === octave) {
        return true;
      }
    }
    return false;
  }
  noteOnString(stringIndex) {
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      if (note.stringIndex === stringIndex) {
        return note;
      }
    }
    return null;
  }
  findClosestMatchingPitch(ordinal) {
    let pitch = null;
    let maxDistance = 9999;
    for (let i = 0; i < this.notes.length; i++) {
      const note = this.notes[i];
      const distance = Math.abs(note.pitch.ordinal - ordinal);
      if (distance < maxDistance) {
        pitch = note;
        maxDistance = distance;
      }
    }
    return pitch;
  }
  defaultBeamStart() {
    if (this.grace) {
      if (!this.appoggiatura) {
        const nextGraceNote = this.nextGraceNote;
        if (nextGraceNote) {
          this.beam = true;
          nextGraceNote.value = this.value = _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.SIXTEENTH;
        } else {
          this.beam = false;
          this.value = this.previousGraceNote == null ? _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.EIGHTH : _notation_value__WEBPACK_IMPORTED_MODULE_5__.NotationValue.SIXTEENTH;
        }
      }
    } else {
      const nextNoteSet = this.nextNoteSet();
      if (this.defaultBeamEnabled && nextNoteSet && nextNoteSet.defaultBeamEnabled) {
        if (this.rhythmContext instanceof _tuplet__WEBPACK_IMPORTED_MODULE_9__["default"] || nextNoteSet.rhythmContext instanceof _tuplet__WEBPACK_IMPORTED_MODULE_9__["default"]) {
          this.beam = nextNoteSet.rhythmContext === this.rhythmContext;
        } else {
          this.beam = _timesignature__WEBPACK_IMPORTED_MODULE_8__["default"].inSameGroup(this.rhythmContext.timeSignature.beamEnds, this.rhythmPosition, nextNoteSet.rhythmPosition);
        }
      } else {
        this.beam = false;
      }
      this.topLevelBeam = false;
    }
  }
  defaultBeaming() {
    this.defaultBeamStart();
    const prevNoteSet = this.previousNoteSet();
    if (prevNoteSet) {
      prevNoteSet.defaultBeamStart();
    }
  }
  addChildAt(child, idx) {
    super.addChildAt(child, idx);
    this._notes = null;
    this._lyrics = null;
  }
  doRemoveChildAt(idx) {
    this._notes = null;
    this._lyrics = null;
    super.doRemoveChildAt(idx);
  }
  handleChildModelUpdate(evt) {
    throw new Error('Not implemented');
  }
  hasLyricWithText(line) {
    for (let i = 0; i < this.lyrics.length; i++) {
      const lyric = this.lyrics[i];
      if (lyric.line === line && lyric.text) {
        return true;
      }
    }
    return false;
  }
  clone(type = NoteSet) {
    const noteSet = super.clone(type);
    noteSet.beam = this.beam;
    noteSet.topLevelBeam = this.topLevelBeam;
    noteSet.grace = this.grace;
    noteSet.appoggiatura = this.appoggiatura;
    noteSet.articulations = this.articulations.slice();
    noteSet.tremolo = this.tremolo;
    noteSet.arpeggio = this.arpeggio;
    noteSet.explicitRestY = this.explicitRestY;
    return noteSet;
  }
}
NoteSet.articulation_attributes = {
  staccato: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_IN_STAFF,
  staccatissimo: 0,
  tenuto: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_IN_STAFF,
  marcato: 0,
  martellato: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  open: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  closed: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  breath: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT,
  caesura: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT,
  upBow: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  downBow: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  fermata: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALLOWED_ON_REST | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.AFFECTS_WIDTH,
  mordent: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  invertedMordent: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  turn: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  invertedTurn: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF,
  delayedTurn: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT,
  delayedInvertedTurn: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF | _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.PLACE_TO_RIGHT,
  buzz: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.STEM_DECORATION,
  lvTie: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ARTICULATION_LIAISON,
  bendJazz: _articulation_attribute__WEBPACK_IMPORTED_MODULE_1__.ArticulationAttribute.ALWAYS_ABOVE_STAFF
};
NoteSet.articulation_order = {
  staccato: 0,
  staccatissimo: 1,
  tenuto: 2,
  marcato: 3,
  martellato: 4,
  open: 5,
  closed: 6,
  upBow: 7,
  downBow: 8,
  caesura: 9,
  breath: 10,
  bendJazz: 11,
  fermata: 12,
  mordent: 12,
  invertedMordent: 12,
  turn: 12,
  invertedTurn: 12,
  delayedTurn: 12,
  delayedInvertedTurn: 12
};
NoteSet.delayed_articulations = {
  turn: _articulation__WEBPACK_IMPORTED_MODULE_0__.Articulation.DELAYED_TURN,
  invertedTurn: _articulation__WEBPACK_IMPORTED_MODULE_0__.Articulation.DELAYED_INVERTED_TURN
};
NoteSet.supported_articulations = ['staccato', 'staccatissimo', 'tenuto', 'marcato', 'martellato', 'open', 'closed', 'breath', 'upBow', 'downBow', 'caesura', 'bendJazz', 'fermata', 'mordent', 'invertedMordent', 'turn', 'invertedTurn', 'delayedTurn', 'delayedInvertedTurn', 'buzz', 'lvTie', 'bendJazz'];

/***/ }),

/***/ 93323:
/*!**************************************************!*\
  !*** ./src/app/note-editor/models/page-chunk.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageChunk)
/* harmony export */ });
/* harmony import */ var _chunk_element_identifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-element-identifier */ 69552);

class PageChunk {
  get lastChunkLayout() {
    if (this.pageLayout) {
      return this.pageLayout.lastChunkLayout;
    } else {
      return null;
    }
  }
  constructor(startPosition, endPosition, breakWidth) {
    this.startPosition = null;
    this.endPosition = null;
    this.chunkLayout = null;
    this.pageLayout = null;
    this.pageChunkIndex = 0;
    this.invalid = false;
    this.breakWidth = NaN;
    this.isSystem = true;
    this.startPosition = startPosition;
    this.endPosition = endPosition;
    this.breakWidth = breakWidth;
  }
  static createPageChunkWithMeasureIndices(startMeasure, endMeasure, breakWidth) {
    return new PageChunk(new _chunk_element_identifier__WEBPACK_IMPORTED_MODULE_0__["default"](startMeasure), new _chunk_element_identifier__WEBPACK_IMPORTED_MODULE_0__["default"](endMeasure), breakWidth);
  }
  containsAnyMeasure(measureIndices) {
    for (let i = 0; i < measureIndices.length; i++) {
      const measureIdx = measureIndices[i];
      if (this.startPosition.measureIndex <= measureIdx && measureIdx <= this.endPosition.measureIndex) {
        return true;
      }
    }
    return false;
  }
}

/***/ }),

/***/ 24092:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/page-metrics.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageMetrics)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);

class PageMetrics extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this._orientation = PageMetrics.PORTRAIT;
    this._width = 612;
    this._height = 792;
    this._justify = true;
    this._pageMarginLeft = 18;
    this._pageMarginTop = 16;
    this._pageMarginRight = 18;
    this._pageMarginBottom = 16;
    this._staffMarginLeft = 16;
    this._staffMarginTop = 32;
    this._staffMarginRight = 16;
    this._staffMarginBottom = 32;
    this.verticalScoreShadowSize = 14;
    this.horizontalScoreShadowSize = 14;
    this.customPageWidth = null;
    this.customPageHeight = null;
    this.customPageUnits = null;
    this._pageViewSpacing = 32;
    this.upcomingPageBackgroundColor = 0xffffff;
    this.upcomingPageBackgroundOpacity = 1;
    // upcomingPageTextFont = EditorFonts.helveticaFont
    this.upcomingPageTextSize = 18;
    this.upcomingPageTextColor = 0xbab9a6;
    this.trackFlagX = 0;
    this.trackFlagY = 0;
    // previewTextFont = EditorFonts.helveticaFont
    this.previewTextSize = 10;
    this.previewTextColor = 0x979687;
    this.previewTextGap = 30;
    this.previewTextBold = true;
    this._name = 'US Letter';
    this._flashName = 'letter';
    this._upcomingPageTextFont = 'SourceSerifPro';
    this._previewTextFont = 'SourceSerifPro';
  }
  static get LANDSCAPE() {
    return 'Landscape';
  }
  static get PORTRAIT() {
    return 'Portrait';
  }
  static get CENTIMETERS() {
    return 'Centimeters';
  }
  static get INCHES() {
    return 'Inches';
  }
  static get MIN_PAGESIZE() {
    return 282;
  }
  get height() {
    return this._height;
  }
  set height(v) {
    this._height = v;
  }
  get width() {
    return this._width;
  }
  set width(v) {
    this._width = v;
  }
  get pageMarginLeft() {
    return this._pageMarginLeft;
  }
  set pageMarginLeft(v) {
    this._pageMarginLeft = v;
  }
  get pageMarginRight() {
    return this._pageMarginRight;
  }
  set pageMarginRight(v) {
    this._pageMarginRight = v;
  }
  get pageMarginTop() {
    return this._pageMarginTop;
  }
  set pageMarginTop(v) {
    this._pageMarginTop = v;
  }
  get pageMarginBottom() {
    return this._pageMarginBottom;
  }
  set pageMarginBottom(v) {
    this._pageMarginBottom = v;
  }
  get staffMarginTop() {
    return this._staffMarginTop;
  }
  set staffMarginTop(v) {
    this._staffMarginTop = v;
  }
  get staffMarginBottom() {
    return this._staffMarginBottom;
  }
  set staffMarginBottom(v) {
    this._staffMarginBottom = v;
  }
  get staffMarginLeft() {
    return this._staffMarginLeft;
  }
  set staffMarginLeft(v) {
    this._staffMarginLeft = v;
  }
  get staffMarginRight() {
    return this._staffMarginRight;
  }
  set staffMarginRight(v) {
    this._staffMarginRight = v;
  }
  get contentWidth() {
    return this.width - (this.pageMarginLeft + this.pageMarginRight + this.staffMarginLeft + this.staffMarginRight);
  }
  get contentHeight() {
    return this.height - (this.pageMarginTop + this.pageMarginBottom + this.staffMarginTop + this.staffMarginBottom);
  }
  get bottomVisiblePageYPosition() {
    return this.height - (this.pageMarginTop + this.pageMarginBottom + this.staffMarginTop);
  }
  get pageY() {
    return this.pageMarginTop + this.staffMarginTop;
  }
  get pageViewSpacing() {
    return this._pageViewSpacing;
  }
  set pageViewSpacing(v) {
    this._pageViewSpacing = v;
  }
  get name() {
    return this._name;
  }
  set name(v) {
    this._name = v;
  }
  get flashName() {
    return this._flashName;
  }
  set flashName(v) {
    this._flashName = v;
  }
  get upcomingPageTextFont() {
    return this._upcomingPageTextFont;
  }
  set upcomingPageTextFont(v) {
    this._upcomingPageTextFont = v;
  }
  get previewTextFont() {
    return this._previewTextFont;
  }
  set previewTextFont(v) {
    this._previewTextFont = v;
  }
  withDimensions(name, width, height, flashName) {
    const pageMetrics = this.clone(PageMetrics);
    pageMetrics.updateDimensions(name, width, height, flashName);
    return pageMetrics;
  }
  updateDimensions(name, width, height, flashName) {
    this.name = name;
    this.width = width;
    this.height = height;
    this.flashName = flashName;
    this._orientation = PageMetrics.PORTRAIT;
  }
}
PageMetrics.orientation = 'Portrait';
PageMetrics.flashName = 'letter';
PageMetrics.width = 612;
PageMetrics.height = 792;
PageMetrics.justify = true;
PageMetrics.pageMarginLeft = 18;
PageMetrics.pageMarginTop = 16;
PageMetrics.pageMarginRight = 18;
PageMetrics.pageMarginBottom = 16;
PageMetrics.staffMarginLeft = 16;
PageMetrics.staffMarginTop = 32;
PageMetrics.staffMarginRight = 16;
PageMetrics.staffMarginBottom = 32;
PageMetrics.verticalScoreShadowSize = 14;
PageMetrics.horizontalScoreShadowSize = 14;
PageMetrics.pageViewSpacing = 32;
PageMetrics.upcomingPageTextSize = 18;
PageMetrics.trackFlagX = 0;
PageMetrics.trackFlagY = 0;

/***/ }),

/***/ 83765:
/*!**************************************************!*\
  !*** ./src/app/note-editor/models/part-label.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PartLabel)
/* harmony export */ });
class PartLabel {
  constructor(field, start, end, staffStartIndex) {
    this.field = null;
    this.start = 0;
    this.end = 0;
    this.staffStartIndex = 0;
    this.field = field;
    this.start = start;
    this.end = end;
    this.staffStartIndex = staffStartIndex;
  }
}

/***/ }),

/***/ 389:
/*!********************************************!*\
  !*** ./src/app/note-editor/models/part.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Part)
/* harmony export */ });
/* harmony import */ var _utils_fretboart_maps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/fretboart-maps */ 80872);
/* harmony import */ var _utils_rhythm_element__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/rhythm-element */ 54131);
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uuid */ 1275);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure */ 29839);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _recorded_autio_track__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./recorded-autio-track */ 87694);







class Part extends _model__WEBPACK_IMPORTED_MODULE_5__["default"] {
  static get NON_LAYOUT_PROPERTIES() {
    return Part.non_layout_properties;
  }
  get id() {
    return this._id;
  }
  set id(v) {
    this._id = v;
  }
  get name() {
    return this._name;
  }
  set name(v) {
    this._name = v;
  }
  get shortName() {
    return this._shortName;
  }
  set shortName(v) {
    this._shortName = v;
  }
  get fretboardType() {
    if (!this._fretboardType) {
      this._fretboardType = this.defaultFretboardType();
    }
    return this._fretboardType;
  }
  set fretboardType(v) {
    this._fretboardType = v;
  }
  get transpositionInterval() {
    return this._transpositionInterval;
  }
  set transpositionInterval(v) {
    this._transpositionInterval = v;
  }
  get octaveShift() {
    return this._octaveShift;
  }
  set octaveShift(v) {
    this._octaveShift = v;
  }
  get alternateKey() {
    return this._alternateKey;
  }
  set alternateKey(v) {
    this._alternateKey = v;
  }
  get instrumentUri() {
    return this._instrumentUri;
  }
  set instrumentUri(v) {
    this._instrumentUri = v;
  }
  get libraryLocation() {
    return this._libraryLocation;
  }
  set libraryLocation(v) {
    this._libraryLocation = v;
  }
  get visible() {
    return this._visible;
  }
  set visible(v) {
    this._visible = v;
  }
  get gain() {
    return this._gain;
  }
  set gain(v) {
    this._gain = v;
  }
  get pan() {
    return this._pan;
  }
  set pan(v) {
    this._pan = v;
  }
  get muted() {
    return this._muted;
  }
  set muted(v) {
    this._muted = v;
  }
  get noteflightTrackMuted() {
    return this._noteflightTrackMuted;
  }
  set noteflightTrackMuted(v) {
    this._noteflightTrackMuted = v;
  }
  get barlineBreak() {
    return this._barlineBreak;
  }
  set barlineBreak(v) {
    this._barlineBreak = v;
  }
  get showAudioWaveform() {
    return this._showAudioWaveform;
  }
  set showAudioWaveform(v) {
    this._showAudioWaveform = v;
  }
  get directionsAboveStaff() {
    return this._directionsAboveStaff;
  }
  set directionsAboveStaff(v) {
    this._directionsAboveStaff = v;
  }
  get staffMetrics() {
    return this._staffMetrics;
  }
  set staffMetrics(v) {
    this._staffMetrics = v;
  }
  get pageMetrics() {
    return this._pageMetrics;
  }
  set pageMetrics(v) {
    this._pageMetrics = v;
  }
  get nameToShow() {
    if (this.name) {
      return this.name;
    }
    // else if (this.synthesizer) {
    //   return this.synthesizer.instrumentName;
    // }
    else {
      return '';
    }
  }
  get transposition() {
    return -this.transpositionInterval.pitches;
  }
  set transposition(v) {
    this.transpositionInterval = _interval__WEBPACK_IMPORTED_MODULE_3__["default"].fromPitches(-v).normalizeTritone();
  }
  get transposingInterval() {
    let interval = this.transpositionInterval;
    if (this.pitchShift !== 0) {
      interval = _interval__WEBPACK_IMPORTED_MODULE_3__["default"].fromPitches(interval.pitches + this.pitchShift).normalizeTritone();
    }
    if (this.octaveShift !== 0) {
      interval = new _interval__WEBPACK_IMPORTED_MODULE_3__["default"](interval.steps + 7 * this.octaveShift, interval.pitches + 12 * this.octaveShift);
    }
    return interval;
  }
  get score() {
    if (this.staves.length > 0) {
      return this.staves[0].score;
    } else {
      return null;
    }
  }
  get staffIndices() {
    const staffIndices = [];
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      staffIndices.push(staff.index);
    }
    return staffIndices;
  }
  get concertInterval() {
    return _interval__WEBPACK_IMPORTED_MODULE_3__["default"].fromPitches(12 * this.octaveShift);
  }
  get audioTracks() {
    return this._children;
  }
  get hasTracks() {
    return this.recordedAudioTracks.length > 0;
  }
  get recordedAudioTracks() {
    const recordedAudioTracks = [];
    for (let i = 0; i < this.audioTracks.length; i++) {
      const audioTrack = this.audioTracks[i];
      if (audioTrack instanceof _recorded_autio_track__WEBPACK_IMPORTED_MODULE_6__["default"]) {
        recordedAudioTracks.push(audioTrack);
      }
    }
    return recordedAudioTracks;
  }
  get firstRecordedAudioTrackForPlayback() {
    for (let i = 0; i < this.audioTracks.length; i++) {
      const audioTrack = this.audioTracks[i];
      if (audioTrack instanceof _recorded_autio_track__WEBPACK_IMPORTED_MODULE_6__["default"] && audioTrack.playbackEnabled) {
        return audioTrack;
      }
    }
    return null;
  }
  get fretboardMap() {
    if (this.fretboardType === 'ukulele') {
      return _utils_fretboart_maps__WEBPACK_IMPORTED_MODULE_0__.UkeFretboardMap;
    } else {
      return _utils_fretboart_maps__WEBPACK_IMPORTED_MODULE_0__.FretboardMap;
    }
  }
  get isPitched() {
    return !this.instrumentUri.startsWith('percussion') || this.instrumentUri.startsWith('percussion/pitched');
  }
  get staves() {
    return this._staves;
  }
  set staves(v) {
    this._staves = v;
  }
  get hasPedal() {
    return this._hasPedal;
  }
  set hasPedal(v) {
    this._hasPedal = v;
  }
  constructor(id) {
    super();
    this.hideChordSymbols = false;
    this.hideFretboards = false;
    this._name = '';
    this._shortName = '';
    this._fretboardType = null;
    this._transpositionInterval = new _interval__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this._octaveShift = 0;
    this._alternateKey = false;
    this.instrument = null;
    this._instrumentUri = '';
    this._libraryLocation = null;
    this._visible = true;
    this._gain = 0;
    this._pan = 0;
    this._muted = false;
    this._noteflightTrackMuted = false;
    this._barlineBreak = false;
    this._showAudioWaveform = false;
    this._directionsAboveStaff = false;
    this.pitchShift = 0;
    this._hasPedal = false;
    this.midiPatch = 0;
    this._id = id;
  }
  multiMeasureRestAt(measureIdx) {
    let multi_rest = _measure__WEBPACK_IMPORTED_MODULE_4__["default"].MULTI_REST_NONE;
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      const multiRest = staff.getMeasureAt(measureIdx).multiRest;
      if (multiRest > 0 && multiRest > multi_rest) {
        multi_rest = multi_rest;
      }
    }
    return multi_rest;
  }
  getNotationsInMeasure(measureIdx) {
    let notations = [];
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      notations = notations.concat(staff.getMeasureAt(measureIdx).measureNotations);
    }
    notations.sort(_utils_rhythm_element__WEBPACK_IMPORTED_MODULE_1__.compareScorePosition);
    return notations;
  }
  addAudioTrack(audioTrack) {
    this.addChild(audioTrack);
  }
  muteRecordedTracks() {
    for (let i = 0; i < this.recordedAudioTracks.length; i++) {
      const recordedTrack = this.recordedAudioTracks[i];
      recordedTrack.playbackEnabled = false;
    }
  }
  muteTracksForPart() {
    this.noteflightTrackMuted = true;
    this.muteRecordedTracks();
  }
  layoutPropertyChange(changes) {
    return !(changes.property.toString() in Part.NON_LAYOUT_PROPERTIES);
  }
  defaultFretboardType() {
    if (this.instrumentUri.includes('ukulele')) {
      return 'ukulele';
    } else {
      return 'guitar';
    }
  }
  static createPart() {
    return new Part((0,_utils_uuid__WEBPACK_IMPORTED_MODULE_2__.generateRandomString)(6));
  }
  clone() {
    const part = super.clone();
    part.id = (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_2__.generateUUID)();
    part.name = this.name;
    part.shortName = this.shortName;
    part.transpositionInterval = this.transpositionInterval;
    part.octaveShift = this.octaveShift;
    part.directionsAboveStaff = this.directionsAboveStaff;
    part.instrumentUri = this.instrumentUri;
    part.libraryLocation = this.libraryLocation;
    // part.midiPitch = this.midiPitch;
    part.gain = this.gain;
    part.pan = this.pan;
    part.muted = this.muted;
    part.hasPedal = this.hasPedal;
    return part;
  }
}
Part.non_layout_properties = {
  staves: true,
  instrument: true,
  midiPatch: true,
  gain: true,
  pan: true,
  muted: true
};

/***/ }),

/***/ 29398:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/models/performance-metrics.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PerformanceMetrics)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);

class PerformanceMetrics extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this._unslurredDurationFactor = 0.9;
    this._maxUnslurredPause = 0.1;
  }
  static get DYNAMIC_VELOCITY_MAP() {
    return PerformanceMetrics.dynamica_velocity_map;
  }
  static get TEMPO_LINE_STAY_AT_NEW_TEMPO() {
    return 'tempoLineStay';
  }
  static get TEMPO_LINE_RETURN_TO_OLD_TEMPO() {
    return 'tempoLineReturn';
  }
  static get TEMPO_LINE_RETURN_AT_A_TEMPO() {
    return 'tempoLineReturnATempo';
  }
  static get FERMATA_NO_RITARD() {
    return 'fermNoRit';
  }
  static get FERMATA_RITARD_TIME_BASED() {
    return 'fermTimeRit';
  }
  static get FERMATA_RITARD_BEAT_BASED() {
    return 'fermBeatRit';
  }
  static get CAESURA_TIME_BASED() {
    return 'caesuraTimeBased';
  }
  static get CAESURA_BEAT_BASED() {
    return 'caesuraBeatBased';
  }
  static get TEMPO_LINE_STATE_DEFAULT() {
    return PerformanceMetrics.tempo_line_state_default;
  }
  static get TEMPO_RITARD_PERCENT_DEFAULT() {
    return 50;
  }
  static get TEMPO_ACCEL_PERCENT_DEFAULT() {
    return 200;
  }
  static get FERMATA_STATE_DEFAULT() {
    return PerformanceMetrics.fermata_state_default;
  }
  static get FERMATA_PERCENT_DEFAULT() {
    return 240;
  }
  static get FERMATA_RITARD_LENGTH_BEATS_DEFAULT() {
    return 1;
  }
  static get FERMATA_RITARD_LENGTH_TIME_DEFAULT() {
    return 2;
  }
  static get FERMATA_RITARD_PERCENT_DEFAULT() {
    return 160;
  }
  static get CAESURA_STATE_DEFAULT() {
    return PerformanceMetrics.caesura_state_default;
  }
  static get CAESURA_LENGTH_BEATS_DEFAULT() {
    return 1;
  }
  static get CAESURA_LENGTH_TIME_DEFAULT() {
    return 1;
  }
  static get tempoLineState() {
    return PerformanceMetrics._tempoLineState;
  }
  static set tempoLineState(t) {
    PerformanceMetrics._tempoLineState = t;
  }
  static get tempoLineRitPercent() {
    return PerformanceMetrics._tempoLineRitPercent;
  }
  static set tempoLineRitPercent(t) {
    PerformanceMetrics._tempoLineRitPercent = t;
  }
  static get tempoLineAccelPercent() {
    return PerformanceMetrics._tempoLineAccelPercent;
  }
  static set tempoLineAccelPercent(t) {
    PerformanceMetrics._tempoLineAccelPercent = t;
  }
  static get fermataState() {
    return PerformanceMetrics._fernataState;
  }
  static set fermataState(t) {
    PerformanceMetrics._fernataState = t;
  }
  static get fermataPercent() {
    return PerformanceMetrics._fermata_ercent;
  }
  static set fermataPercent(t) {
    PerformanceMetrics._fermata_ercent = t;
  }
  static get fermataRitLengthBeats() {
    return PerformanceMetrics._fermataRitLengthBeats;
  }
  static set fermataRitLengthBeats(t) {
    PerformanceMetrics._fermataRitLengthBeats = t;
  }
  static get fermataRitLengthTime() {
    return PerformanceMetrics._fermataRitLengthTime;
  }
  static set fermataRitLengthTime(t) {
    PerformanceMetrics._fermataRitLengthTime = t;
  }
  static get fermataRitPercent() {
    return PerformanceMetrics._fermataRitPercent;
  }
  static set fermataRitPercent(t) {
    PerformanceMetrics._fermataRitPercent = t;
  }
  static get caesuraState() {
    return PerformanceMetrics._caesuraState;
  }
  static set caesuraState(t) {
    PerformanceMetrics._caesuraState = t;
  }
  static get caesuraLengthBeats() {
    return PerformanceMetrics._caesuraLengthBeats;
  }
  static set caesuraLengthBeats(t) {
    PerformanceMetrics._caesuraLengthBeats = t;
  }
  static get caesuraLengthTime() {
    return PerformanceMetrics._caesuraLengthTime;
  }
  static set caesuraLengthTime(t) {
    PerformanceMetrics._caesuraLengthTime = t;
  }
  get unslurredDurationFactor() {
    return this._unslurredDurationFactor;
  }
  set unslurredDurationFactor(v) {
    this._unslurredDurationFactor = v;
  }
  get maxUnslurredPause() {
    return this._maxUnslurredPause;
  }
  set maxUnslurredPause(v) {
    this._maxUnslurredPause = v;
  }
  static dynamicVelocity(key) {
    if (key in PerformanceMetrics.DYNAMIC_VELOCITY_MAP) {
      return PerformanceMetrics.DYNAMIC_VELOCITY_MAP[key];
    } else {
      return -1;
    }
  }
}
PerformanceMetrics.dynamica_velocity_map = {
  ppp: 15,
  pp: 31,
  p: 47,
  mp: 63,
  mf: 79,
  f: 95,
  ff: 111,
  fff: 127
};
PerformanceMetrics.tempo_line_state_default = PerformanceMetrics.TEMPO_LINE_RETURN_AT_A_TEMPO;
PerformanceMetrics.fermata_state_default = PerformanceMetrics.FERMATA_NO_RITARD;
PerformanceMetrics.caesura_state_default = PerformanceMetrics.CAESURA_TIME_BASED;
PerformanceMetrics._tempoLineState = PerformanceMetrics.TEMPO_LINE_STATE_DEFAULT;
PerformanceMetrics._tempoLineRitPercent = PerformanceMetrics.TEMPO_RITARD_PERCENT_DEFAULT;
PerformanceMetrics._tempoLineAccelPercent = PerformanceMetrics.TEMPO_ACCEL_PERCENT_DEFAULT;
PerformanceMetrics._fernataState = PerformanceMetrics.FERMATA_STATE_DEFAULT;
PerformanceMetrics._fermata_ercent = PerformanceMetrics.FERMATA_PERCENT_DEFAULT;
PerformanceMetrics._fermataRitLengthBeats = PerformanceMetrics.FERMATA_RITARD_LENGTH_BEATS_DEFAULT;
PerformanceMetrics._fermataRitLengthTime = PerformanceMetrics.FERMATA_RITARD_LENGTH_TIME_DEFAULT;
PerformanceMetrics._fermataRitPercent = PerformanceMetrics.FERMATA_RITARD_PERCENT_DEFAULT;
PerformanceMetrics._caesuraState = PerformanceMetrics.CAESURA_STATE_DEFAULT;
PerformanceMetrics._caesuraLengthBeats = PerformanceMetrics.CAESURA_LENGTH_BEATS_DEFAULT;
PerformanceMetrics._caesuraLengthTime = PerformanceMetrics.CAESURA_LENGTH_TIME_DEFAULT;

/***/ }),

/***/ 92946:
/*!********************************************************!*\
  !*** ./src/app/note-editor/models/performance-text.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PerformanceText)
/* harmony export */ });
/* harmony import */ var _text_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-notation */ 70240);

class PerformanceText extends _text_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get alignToStaffTop() {
    return true;
  }
  get paddingY() {
    return this.score.effectiveStaffMetrics.performanceTextPadding.y;
  }
  constructor(rhythmPosition = 0, text = null, dy = 0) {
    super(rhythmPosition, text, dy);
  }
}

/***/ }),

/***/ 88853:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/placback-mode.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PlaybackMode": () => (/* binding */ PlaybackMode)
/* harmony export */ });
var PlaybackMode;
(function (PlaybackMode) {
  PlaybackMode["normal"] = "normal";
  PlaybackMode["silent"] = "silent";
  PlaybackMode["echo"] = "echo";
})(PlaybackMode || (PlaybackMode = {}));

/***/ }),

/***/ 87694:
/*!************************************************************!*\
  !*** ./src/app/note-editor/models/recorded-autio-track.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RecordedAudioTrack)
/* harmony export */ });
/* harmony import */ var _audio_track__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./audio-track */ 32655);

class RecordedAudioTrack extends _audio_track__WEBPACK_IMPORTED_MODULE_0__["default"] {}

/***/ }),

/***/ 10195:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/repeat-ending.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RepeatEnding)
/* harmony export */ });
/* harmony import */ var _line_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./line-notation */ 93207);

class RepeatEnding extends _line_notation__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get TYPE_INITIAL() {
    return 'endingInitial';
  }
  static get TYPE_FINAL() {
    return 'endingFinal';
  }
  static get LEGACY_REPEAT_ENDING_REGEXP() {
    return RepeatEnding.legacy_repeat_ending_regexp;
  }
  static get REPEAT_ENDING_REGEXP() {
    return RepeatEnding.repeat_ending_regexp;
  }
  get affectsParentLayout() {
    return true;
  }
  get canStartAtBarline() {
    return true;
  }
  get isBold() {
    return this.bold;
  }
  get numbers() {
    const startingText = RepeatEnding.normalizeText(this.startingText);
    if (RepeatEnding.isValidText(startingText)) {
      return RepeatEnding.normalizeText(startingText).split('.');
    } else if (this.type === RepeatEnding.TYPE_INITIAL) {
      return ['1'];
    } else {
      return ['2'];
    }
  }
  constructor(rhythmPosition = 0, span = 0, type = RepeatEnding.TYPE_INITIAL, endX = 0, startingText = '', bracketLength = 0, bold = false) {
    super(rhythmPosition, false, span, type, endX, 0, startingText, bracketLength);
    this.bold = bold;
  }
  static isValidText(text) {
    return RepeatEnding.normalizeText(text).match(RepeatEnding.repeat_ending_regexp);
  }
  static normalizeText(text) {
    return text.replace(/[, ]/g, '.').replace(/\.+/g, '.').replace(/\.$/, '');
  }
}
RepeatEnding.legacy_repeat_ending_regexp = /^(([0-9\- ]+)\.?(, *[0-9\- ]+)*)\.$/;
RepeatEnding.repeat_ending_regexp = /^(([0-9\-]+)\.?)+\.?$/g;

/***/ }),

/***/ 85742:
/*!***************************************************!*\
  !*** ./src/app/note-editor/models/repeat-info.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RepeatInfo)
/* harmony export */ });
class RepeatInfo {
  constructor() {
    this.repeatCount = 0;
    this.endings = null;
    this.endingsDuration = 0;
    this.endMeasureIndex = -1;
  }
}

/***/ }),

/***/ 40793:
/*!********************************************************!*\
  !*** ./src/app/note-editor/models/rhythm-container.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RhythmContainer)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./noteset */ 46605);


class RhythmContainer extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get elements() {
    return this.children;
  }
  get numElements() {
    return this.children.length;
  }
  get timeSignature() {
    throw new Error('get timeSignature() not overriden');
  }
  get duration() {
    return this.timeSignature.meterDuration;
  }
  get is_rhythmContext() {
    return true;
  }
  constructor() {
    super();
  }
  getElementAt(idx) {
    return this.getChildAt(idx);
  }
  addElementAt(model, idx) {
    this.addChildAt(model, idx);
  }
  addElement(model) {
    for (let i = 0; i < this.elements.length; i++) {
      if (model.rhythmPosition < this.getElementAt(i).rhythmPosition) {
        this.addChildAt(model, i);
        return;
      }
    }
    this.addChild(model);
  }
  removeElement(model) {
    this.removeChild(model);
  }
  noteSetAtPosition(position) {
    for (let i = 0; i < this.elements.length; i++) {
      const element = this.elements[i];
      if (element.rhythmPosition > position) break;
      if (element instanceof _noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && element.rhythmPosition == position) {
        return element;
      }
    }
    return null;
  }
}

/***/ }),

/***/ 60828:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/rhythm-element.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RhythmElement)
/* harmony export */ });
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _measure_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measure-position */ 83067);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model */ 10924);

// import Hairpin from './hairpin';
// import Measure from './measure';


// import { NoteSet } from './noteset';
// import RhythmContainer from './rhythm-container';
// import Score from './score';
// import Tuplet from './tuplet';
// import Voice from './voice';
class RhythmElement extends _model__WEBPACK_IMPORTED_MODULE_2__["default"] {
  static get RHYTHM_COMPARISON_THRESHOLD() {
    return 0.01;
  }
  get rhythmPosition() {
    return this._rhythmPosition;
  }
  set rhythmPosition(v) {
    this._rhythmPosition = v;
  }
  get rhythmContext() {
    // return (
    //   this.getAncestorOfType(RhythmContainer) ||
    //   this.getAncestorOfType(RhythmElement) ||
    //   this.getAncestorOfType(Voice) ||
    //   this.getAncestorOfType(Tuplet)
    // );
    return this.getRhythmContext();
  }
  get measure() {
    // return this.getAncestorOfType(Measure);
    return this.getMeasure();
  }
  get voice() {
    // return this.getAncestorOfType(Voice);
    return this.getVoice();
  }
  get score() {
    // return this.getAncestorOfType(Score);
    return this.getScore();
  }
  get measurePosition() {
    return new _measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this.measure.index, this.position);
  }
  get endPosition() {
    return new _measure_position__WEBPACK_IMPORTED_MODULE_1__["default"](this.measure.index, this.position + this.duration);
  }
  get voiceNumber() {
    if (this.voice) {
      return this.voice.voiceNumber;
    } else {
      return null;
    }
  }
  get lastVoiceNumber() {
    if (this.voiceNumber !== _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__.VoiceNumber.UNKNOWN_VOICE_NUMBER) {
      return this.voiceNumber;
    } else {
      return this._lastVoiceNumber;
    }
  }
  set lastVoiceNumber(v) {
    this._lastVoiceNumber = v;
  }
  get parent() {
    return super.parent;
  }
  set parent(v) {
    if (parent == null) {
      this._lastVoiceNumber = this.voiceNumber;
    }
    this._parent = v;
  }
  get position() {
    if (this.rhythmContext) {
      return this.rhythmContext.getPosition(this.rhythmPosition);
    } else {
      return 0;
    }
  }
  get rhythmDuration() {
    return 0;
  }
  get duration() {
    return this.rhythmContext.getDuration(this.rhythmDuration);
  }
  get inSystemStaff() {
    return this.measure && this.measure.isSystemMeasure;
  }
  get is_rhythmContext() {
    return false;
  }
  constructor(rhythmPosition) {
    super();
    this._rhythmPosition = 0;
    this._lastVoiceNumber = 0;
    this.rhythmPosition = rhythmPosition;
  }
  isRhythmContext(tuplet) {
    let parent = this.parent;
    while (parent && parent !== tuplet) {
      parent = parent.parent;
    }
    return parent === tuplet;
  }
  // static compareScorePosition(notation1, notation2) {
  //   let diff;
  //   if (notation1.measure && notation2.measure) {
  //     diff = notation1.measure.index - notation2.measure.index;
  //     if (diff !== 0) {
  //       return diff < 0 ? -1 : 1;
  //     }
  //     diff = notation1.position - notation2.position;
  //     if (diff !== 0) {
  //       return diff < 0 ? -1 : 1;
  //     }
  //     if (notation1.measure.staff && notation2.measure.staff) {
  //       diff = notation1.measure.staff.index - notation2.measure.staff.index;
  //       if (diff !== 0) {
  //         return diff < 0 ? -1 : 1;
  //       }
  //     }
  //   } else if (
  //     0 != (diff = notation1.rhythmPosition - notation2.rhythmPosition)
  //   ) {
  //     return diff < 0 ? -1 : 1;
  //   }
  //   if (0 != (diff = notation1.voiceNumber - notation2.voiceNumber)) {
  //     return diff < 0 ? -1 : 1;
  //   }
  //   // if (notation1 instanceof NoteSet && notation2 instanceof NoteSet) {
  //   //   if (
  //   //     notation1.grace &&
  //   //     notation2.grace &&
  //   //     notation1 === notation2.previousGraceNote
  //   //   ) {
  //   //     return -1;
  //   //   }
  //   //   const prevGrace = notation1.grace ? 1 : 0;
  //   //   const nextGrace = notation2.grace ? 1 : 0;
  //   //   return nextGrace - prevGrace;
  //   // }
  //   // return notation1 instanceof NoteSet && notation2 instanceof Hairpin ? 1 : 0;
  //   return null;
  // }
  // static comparePosition(voiceEl1, voiceEl2) {
  //   let diff = voiceEl1.position - voiceEl2.position;
  //   if (diff === 0) {
  //     diff = voiceEl1.voiceNumber - voiceEl2.voiceNumber;
  //     if (diff === 0) {
  //       diff = voiceEl1.index - voiceEl2.index;
  //     }
  //   }
  //   if (diff !== 0) {
  //     return diff < 0 ? -1 : 1;
  //   } else {
  //     return 0;
  //   }
  // }
  startsAtPosition(position) {
    return Math.abs(this.position - position) < RhythmElement.RHYTHM_COMPARISON_THRESHOLD;
  }
  endsAtPosition(position) {
    return Math.abs(this.position + this.duration - position) < RhythmElement.RHYTHM_COMPARISON_THRESHOLD;
  }
  clone(type = RhythmElement) {
    const rhythmElement = super.clone(type);
    rhythmElement.rhythmPosition = this.rhythmPosition;
    rhythmElement._lastVoiceNumber = this.lastVoiceNumber;
    return rhythmElement;
  }
}

/***/ }),

/***/ 68511:
/*!*************************************************!*\
  !*** ./src/app/note-editor/models/score-mix.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreMix)
/* harmony export */ });
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./model */ 10924);

class ScoreMix extends _model__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this._masterGain = 0;
    this._reverbLevel = -7;
    this._reverbType = ScoreMix.DEFAULT_REVERB_TYPE;
  }
  static get DEFAULT_REVERB_TYPE() {
    return 'Medium';
  }
  get masterGain() {
    return this._masterGain;
  }
  set masterGain(v) {
    this._masterGain = v;
  }
  get reverbLevel() {
    return this._reverbLevel;
  }
  set reverbLevel(v) {
    this._reverbLevel = v;
  }
  get reverbType() {
    return this._reverbType;
  }
  set reverbType(v) {
    this._reverbType = v;
  }
  equals(scoreMix) {
    scoreMix = scoreMix;
    return scoreMix && this.masterGain === scoreMix.masterGain && this.reverbLevel === scoreMix.reverbLevel && this.reverbType === scoreMix.reverbType;
  }
}

/***/ }),

/***/ 17784:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/score.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Score)
/* harmony export */ });
/* harmony import */ var _utils_staff_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/staff-type */ 35628);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _barline__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./barline */ 24728);
/* harmony import */ var _display_mode__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./display-mode */ 90384);
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure */ 29839);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _page_metrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./page-metrics */ 24092);
/* harmony import */ var _performance_metrics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./performance-metrics */ 29398);
/* harmony import */ var _placback_mode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./placback-mode */ 88853);
/* harmony import */ var _staff__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./staff */ 35126);
/* harmony import */ var _staff_metrics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./staff-metrics */ 26032);
/* harmony import */ var _tacet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./tacet */ 51744);
/* harmony import */ var _tempo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./tempo */ 72620);
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./timesignature */ 67379);
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./voice */ 38445);















class Score extends _model__WEBPACK_IMPORTED_MODULE_5__["default"] {
  static get PLAYBACK_MODE_NORMAL() {
    return 'normal';
  }
  static get PLAYBACK_MODE_SILENT() {
    return 'silent';
  }
  static get PLAYBACK_MODE_ECHO() {
    return 'echo';
  }
  static get PAGINATED_DISPLAY() {
    return 'paginated';
  }
  static get FLOW_DISPLAY() {
    return 'flow';
  }
  static get STRIP_DISPLAY() {
    return 'strip';
  }
  static get PERFORM_DISPLAY() {
    return 'perform';
  }
  static get SYSTEM_STAFF_PATH_PREFIX() {
    return 's';
  }
  static get STAFF_METRICS_PATH_PREFIX() {
    return 'm';
  }
  static get PAGE_METRICS_PATH_PREFIX() {
    return 'p';
  }
  static get PERFORMANCE_METRICS_PATH_PREFIX() {
    return 'r';
  }
  static get SCORE_MIX_PATH_PREFIX() {
    return 'x';
  }
  get staffMetrics() {
    return this._staffMetrics;
  }
  set staffMetrics(v) {
    this._staffMetrics = v;
    const that = this;
    this.staffMetrics.parent = that;
  }
  get mix() {
    return this._mix;
  }
  set mix(v) {
    this._mix = v;
  }
  get systemStaff() {
    return this._systemStaff;
  }
  set systemStaff(v) {
    this._systemStaff = v;
  }
  get title() {
    return this._title;
  }
  set title(v) {
    this._title = v;
  }
  get lockTitle() {
    return this._lockTitle;
  }
  set lockTitle(v) {
    this._lockTitle = v;
  }
  get subtitle() {
    return this._subtitle;
  }
  set subtitle(v) {
    this._subtitle = v;
  }
  get supertitle() {
    return this._supertitle;
  }
  set supertitle(v) {
    this._supertitle = v;
  }
  get composer() {
    return this._composer;
  }
  set composer(v) {
    this._composer = v;
  }
  get lockComposer() {
    return this._lockComposer;
  }
  set lockComposer(v) {
    this._lockComposer = v;
  }
  get lyricist() {
    return this._lyricist;
  }
  set lyricist(v) {
    this._lyricist = v;
  }
  get lockLyricist() {
    return this._lockLyricist;
  }
  set lockLyricist(v) {
    this._lockLyricist = v;
  }
  get arranger() {
    return this._arranger;
  }
  set arranger(v) {
    this._arranger = v;
  }
  get showArranger() {
    return this._showArranger;
  }
  set showArranger(v) {
    this._showArranger = v;
  }
  get copyright() {
    return this._copyright;
  }
  set copyright(v) {
    this._copyright = v;
  }
  get lockCopyright() {
    return this._lockCopyright;
  }
  set lockCopyright(v) {
    this._lockCopyright = v;
  }
  get prompt() {
    return this._prompt;
  }
  set prompt(v) {
    this._prompt = v;
  }
  get footer() {
    return this._footer;
  }
  set footer(v) {
    this._footer = v;
  }
  get lockFooter() {
    return this._lockFooter;
  }
  set lockFooter(v) {
    this._lockFooter = v;
  }
  get transposeParts() {
    return this._transposeParts;
  }
  set transposeParts(v) {
    this._transposeParts = v;
  }
  get defaultSlurs() {
    return this._defaultSlurs;
  }
  set defaultSlurs(v) {
    this._defaultSlurs = v;
  }
  get playbackMode() {
    return this._playbackMode;
  }
  set playbackMode(v) {
    this._playbackMode = v;
  }
  get displayMode() {
    return this._displayMode;
  }
  set displayMode(v) {
    this._displayMode = v;
  }
  get viewScale() {
    return this._viewScale;
  }
  set viewScale(v) {
    this._viewScale = v;
  }
  get mediaSyncPlayerFullScreen() {
    return this._mediaSyncPlayerFullScreen;
  }
  set mediaSyncPlayerFullScreen(v) {
    this._mediaSyncPlayerFullScreen = v;
  }
  get synchorizedTrack() {
    return this._synchorizedTrack;
  }
  set synchorizedTrack(v) {
    this._synchorizedTrack = v;
  }
  get pageMetrics() {
    return this._pageMetrics;
  }
  set pageMetrics(v) {
    this._pageMetrics = v;
    const that = this;
    this._pageMetrics.parent = that;
  }
  get effectiveStaffMetrics() {
    if (this.numVisibleParts === 1 && this.parts.length > 1) {
      const firstVisiblePart = this.visibleParts[0];
      if (firstVisiblePart) {
        return firstVisiblePart.staffMetrics;
      }
    }
    return this.staffMetrics;
  }
  get effectivePageMetrics() {
    if (this.numVisibleParts === 1 && this.parts.length > 1) {
      const firstVisiblePart = this.visibleParts[0];
      if (firstVisiblePart.pageMetrics) {
        return firstVisiblePart.pageMetrics;
      }
    }
    return this._pageMetrics;
  }
  set effectivePageMetrics(v) {
    if (this.numVisibleParts === 1 && this.parts.length > 1) {
      const firstVisiblePart = this.visibleParts[0];
      firstVisiblePart.pageMetrics = v;
    }
    this.pageMetrics = v;
  }
  get performanceMetrics() {
    return this._performanceMetrics;
  }
  set performanceMetrics(v) {
    this._performanceMetrics = v;
  }
  get lastLyricLine() {
    const lastLyricLines = this.staves.map(t => t.lastLyricLine);
    if (lastLyricLines.length > 0) {
      return Math.max(...lastLyricLines);
    } else {
      return null;
    }
  }
  get altonalKeySignatureMeasures() {
    const altonalKeySignatureMeasures = [];
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      for (let j = 0; j < staff.measures.length; j++) {
        const measure = staff.measures[j];
        if (measure.isAtonalKeySignature) {
          altonalKeySignatureMeasures.push(measure);
        }
      }
    }
    return altonalKeySignatureMeasures;
  }
  get staves() {
    return this._children;
  }
  get visibleStaves() {
    const visibleStaves = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (part.visible) {
        for (let j = 0; j < part.staves.length; j++) {
          const staff = part.staves[j];
          visibleStaves.push(staff);
        }
      }
    }
    return visibleStaves;
  }
  get numVisibleStaves() {
    return this.visibleStaves.length;
  }
  get parts() {
    const parts = [];
    for (let i = 0; i < this.staves.length; i++) {
      const stave = this.staves[i];
      const staff = stave;
      if (parts.indexOf(staff.part) < 0) {
        parts.push(staff.part);
        staff.part.staves = [staff];
      } else {
        staff.part.staves.push(staff);
      }
    }
    return parts;
  }
  get numVisibleParts() {
    let num = 0;
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (part.visible) {
        num++;
      }
    }
    return num;
  }
  get visibleParts() {
    const visibleParts = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (part.visible) {
        visibleParts.push(part);
      }
    }
    return visibleParts;
  }
  get firstVisiblePartAtFirstMeasure() {
    const staff = this.visibleStavesAtMeasure(0)[0];
    if (staff) {
      return staff.part;
    } else {
      return null;
    }
  }
  get audibleStaves() {
    const audibleStaves = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (!part.muted) {
        let audible = false;
        for (let j = 0; j < part.audioTracks.length; j++) {
          const audioTrack = part.audioTracks[j];
          if (audioTrack.playbackEnabled) {
            audible = true;
            break;
          }
        }
        if (!part.noteflightTrackMuted || audible) {
          for (let j = 0; j < part.staves.length; j++) {
            const staff = part.staves[j];
            audibleStaves.push(staff);
          }
        }
      }
    }
    return audibleStaves;
  }
  get totalInvibleParts() {
    return this.parts.length - this.numVisibleParts;
  }
  get totalParts() {
    return this.parts.length;
  }
  get complete() {
    if (this._forceComplete) return true;
    if (this.playbackMode === _placback_mode__WEBPACK_IMPORTED_MODULE_8__.PlaybackMode.normal) {
      for (let i = 0; i < this.parts.length; i++) {
        const part = this.parts[i];
        if (part.instrument == null || !part.instrument.complete) {
          return false;
        }
      }
    }
    return !(this.synchorizedTrack && !this.synchorizedTrack.complete);
  }
  get numMeasures() {
    return this.systemStaff.numChildren;
  }
  get numStaves() {
    return this.numChildren;
  }
  get isAudioTrackDisplayable() {
    return false;
  }
  get isPageinatedMode() {
    return this.displayMode === _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.paginated;
  }
  get isFlowMode() {
    return this.displayMode === _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.flow;
  }
  get isStripMode() {
    return this.displayMode === _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.strip;
  }
  get isPerformMode() {
    return this.displayMode === _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.perform;
  }
  get displayModeHasPages() {
    return this.isPageinatedMode || this.isFlowMode || this.isPerformMode;
  }
  get hasSlurs() {
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      if (staff.hasSlurs) {
        return true;
      }
    }
    return false;
  }
  get initialTempo() {
    const tempo = this.systemStaff.getMeasureAt(0).tempo;
    if (tempo) {
      return tempo;
    } else {
      return new _tempo__WEBPACK_IMPORTED_MODULE_12__["default"]();
    }
  }
  set initialTempo(v) {
    this.setTempoAtMeasure(v, 0);
  }
  get partsPageOrientations() {
    const orientations = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      let orientation = _page_metrics__WEBPACK_IMPORTED_MODULE_6__["default"].orientation;
      // if (part.pageMetrics) {
      //   orientation = part.pageMetrics.orientation;
      // } else {
      //   orientation = this.pageMetrics.orientation;
      // }
      orientations.push(orientation);
    }
    return orientations;
  }
  get isAnyPartHidden() {
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (!part.visible) {
        return true;
      }
    }
    return false;
  }
  get initialKey() {
    return this.systemStaff.getMeasureAt(0).keySignature;
  }
  get partsWithAudioMedias() {
    const partsWithAudioMedias = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (part.hasTracks) {
        partsWithAudioMedias.push(part);
      }
    }
    return partsWithAudioMedias;
  }
  get hasTracks() {
    // throw new Error('not implement');
    return this.partsWithAudioMedias.length > 0;
  }
  get audioWaveformsShown() {
    throw new Error('not implement');
    // for (let i = 0; i < this.partsWithAudioMedias.length; i++) {
    //   const part: Part = this.partsWithAudioMedias[i];
    // }
  }

  get audioMedias() {
    throw new Error('not implement');
  }
  get isScore() {
    return true;
  }
  get atonalKeySignatureMeasures() {
    const atonalKeySignatureMeasures = [];
    (this.staves || []).forEach(staff => {
      (staff.measures || []).forEach(measure => {
        if (measure.isAtonalKeySignature) {
          atonalKeySignatureMeasures.push(measure);
        }
      });
    });
    return atonalKeySignatureMeasures;
  }
  constructor() {
    super();
    this.useIndividualPartInfo = null;
    this._mix = null;
    this._systemStaff = new _staff__WEBPACK_IMPORTED_MODULE_9__["default"]();
    this._title = '';
    this._lockTitle = false;
    this._subtitle = '';
    this._supertitle = null;
    this._composer = '';
    this._lockComposer = false;
    this._lyricist = '';
    this._lockLyricist = false;
    this._arranger = '';
    this._showArranger = false;
    this._copyright = '';
    this._lockCopyright = false;
    this._prompt = null;
    this._footer = null;
    this._lockFooter = false;
    this._transposeParts = false;
    this._defaultSlurs = false;
    this._playbackMode = _placback_mode__WEBPACK_IMPORTED_MODULE_8__.PlaybackMode.normal;
    this._displayMode = _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.paginated;
    this._viewScale = 1.5;
    this._mediaSyncPlayerFullScreen = false;
    this._synchorizedTrack = null; // TODO
    this._performanceMetrics = new _performance_metrics__WEBPACK_IMPORTED_MODULE_7__["default"]();
    this._forceComplete = false;
    this.systemStaff;
    this.systemStaff.parent = this;
    this.initializeStaffMetrics();
    this.initializePageMetrics();
    this.performanceMetrics.parent = this;
  }
  initializeStaffMetrics() {
    this._staffMetrics = new _staff_metrics__WEBPACK_IMPORTED_MODULE_10__["default"]();
  }
  initializePageMetrics() {
    this.pageMetrics = new _page_metrics__WEBPACK_IMPORTED_MODULE_6__["default"](); //.fromPageSize('US Letter',); TODO
  }

  systemMeasureByIndex(index) {
    return this.systemStaff.getMeasureAt(index);
  }
  visibleStavesAtMeasure(measureIndex) {
    const visibleStaves = [];
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (part.visible) {
        for (let j = 0; j < part.staves.length; j++) {
          const staff = part.staves[j];
          if (!(staff.getMeasureAt(measureIndex).canHideStaff && this.displayMode !== _display_mode__WEBPACK_IMPORTED_MODULE_3__.DisplayMode.strip)) {
            visibleStaves.push(staff);
          }
        }
      }
    }
    return visibleStaves;
  }
  getMeasureIdsInSystemMeasure(measureId, staffId) {
    let index = -1;
    const staves = this.staves.concat(this.systemStaff);
    for (let i = 0; i < staves.length; i++) {
      const staff = staves[i];
      if (staff.id === staffId) {
        for (let j = 0; j < staff.measures.length; j++) {
          const measure = staff.measures[j];
          if (measure.id === measureId) {
            index = measure.index;
            break;
          }
        }
      }
    }
    if (index === -1) {
      return [];
    } else {
      return staves.map(staff => {
        for (let i = 0; i < staff.measures.length; i++) {
          const measure = staff.measures[i];
          if (measure.index === index) {
            return measure.id;
          }
        }
      });
    }
  }
  getMeasureByIndexAndStaffIndex(measureIdx, staffIdx) {
    return this.staves[staffIdx].getMeasureAt(measureIdx);
  }
  getStaffById(staffId) {
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      if (staff.id === staffId) {
        return staff;
      }
    }
    return null;
  }
  getStaffIndex(partIdx) {
    let staffIdx = 0;
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      if (i === partIdx) {
        return staffIdx;
      }
      staffIdx += part.staves.length;
    }
    return staffIdx;
  }
  playAll() {
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      part.muted = false;
    }
  }
  getSystemStaffMeasureAt(measureIdx) {
    return this.systemStaff.getMeasureAt(measureIdx);
  }
  showAllParts() {
    for (let i = 0; i < this.parts.length; i++) {
      const part = this.parts[i];
      part.visible = true;
    }
  }
  getMeasureForBreakInfo(measureIdx) {
    if (!this.staffMetrics.scoreDisplayRespectSystemBreaks) {
      return null;
    }
    let staff = this.visibleStaves[0];
    if (this.useIndividualPartInfo && this.totalParts > 1) {
      staff = this.useIndividualPartInfo.staves[0];
    }
    const visiblePartsCount = this.visibleParts.length;
    const partDisplayRespectSystemBreak = this.effectiveStaffMetrics.partDisplayRespectSystemBreak;
    if (visiblePartsCount > 1 && !this.useIndividualPartInfo || this.useIndividualPartInfo && partDisplayRespectSystemBreak || this.totalParts === 1 || visiblePartsCount === 1 && partDisplayRespectSystemBreak) {
      staff = this.systemStaff;
    }
    if (staff) {
      return staff.getMeasureAt(measureIdx);
    } else {
      return null;
    }
  }
  getBreak(measureIndex) {
    const measure = this.getMeasureForBreakInfo(measureIndex);
    if (measure) {
      return measure.breakType;
    } else {
      return null;
    }
  }
  setBreak(measureIndex, breakType) {
    const measure = this.getMeasureForBreakInfo(measureIndex);
    if (measure) {
      measure.breakType = breakType;
    }
  }
  applyBreak(measureIndex, breakType) {
    const measure = this.getMeasureForBreakInfo(measureIndex);
    if (measure) {
      if (measure.breakType === breakType) {
        measure.breakType = null;
        measure.disableCautionaries = false;
      } else {
        measure.breakType = breakType;
      }
    }
  }
  forceCompletion() {
    this._forceComplete = true;
  }
  addChildAt(child, idx) {
    super.addChildAt(child, idx);
    const staff = child;
    //TODO span change event
    const part = staff.part;
    if (part) {
      this.registerPart(part);
    }
  }
  removeChildAt(idx) {
    const staff = this.getChildAt(idx);
    const part = staff.part;
    if (part && !this.isPartReferencedByAnotherStaff(part, staff)) {
      //TODO part remove listeners
    }
    super.removeChildAt(idx);
  }
  removeRepeats() {
    this.systemStaff.removeRepeats();
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      staff.removeRepeats();
    }
  }
  hasRepeats() {
    if (this.systemStaff.hasRepeats()) {
      return true;
    }
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      if (staff.hasRepeats()) {
        return true;
      }
    }
    return false;
  }
  isPartReferencedByAnotherStaff(part, staff) {
    for (let i = 0; i < this.staves.length; i++) {
      const stave = this.staves[i];
      if (stave !== staff && stave.part === part) {
        return true;
      }
    }
    return false;
  }
  registerPart(part) {
    if (part.parent !== this) {
      part.parent = this;
      //TODO add listeners
    }
  }

  addStaff(staff) {
    this.addChild(staff);
    return staff;
  }
  addStaffAt(staff, idx) {
    this.addChildAt(staff, idx);
    return staff;
  }
  getStaffAt(idx) {
    return this.getChildAt(idx);
  }
  movePart(prevPartIdx, targetPartIdx) {
    const staves = this.parts[prevPartIdx].staves;
    const prevStaffIdx = this.getStaffIndex(prevPartIdx);
    for (let i = 0; i < staves.length; i++) {
      this.removeChildAt(prevStaffIdx);
    }
    const targetStaffIdx = this.getStaffIndex(targetPartIdx);
    for (let i = 0; i < staves.length; i++) {
      this.addChildAt(staves[i], targetStaffIdx + i);
    }
  }
  insertBlankStaffAt(blankStaff, idx, clef) {
    this.addChildAt(blankStaff, idx);
    for (let measureIdx = 0; measureIdx < this.numMeasures; measureIdx++) {
      const measure = new _measure__WEBPACK_IMPORTED_MODULE_4__["default"]();
      const systemMeasure = this.systemStaff.getMeasureAt(measureIdx);
      measure.clef = clef.clone();
      clef.parent = measure;
      measure.measureInfo = systemMeasure.measureInfo.clone();
      blankStaff.addMeasureAt(measure, measureIdx);
      measure.addElement(new _tacet__WEBPACK_IMPORTED_MODULE_11__["default"](), 0);
    }
  }
  insertBlankMeasureAt(measureIdx, measureInfo = null, r = null) {
    const prevMeasureIdx = Math.max(0, measureIdx - 1);
    if (this.numVisibleParts === 1 && this.visibleParts[0].multiMeasureRestAt(prevMeasureIdx) !== _measure__WEBPACK_IMPORTED_MODULE_4__["default"].MULTI_REST_NONE) {
      measureIdx += this.visibleParts[0].multiMeasureRestAt(prevMeasureIdx) - 1;
    }
    const measure = new _measure__WEBPACK_IMPORTED_MODULE_4__["default"]();
    const prevMeasure = this.systemStaff.getMeasureAt(prevMeasureIdx);
    if (measureInfo) {
      measure.measureInfo = measureInfo;
    } else {
      const prevMeasureInfo = prevMeasure.measureInfo.clone();
      prevMeasureInfo.timeSignature = prevMeasure.baseTimeSignature;
      measure.measureInfo = prevMeasureInfo;
    }
    this.systemStaff.addMeasureAt(measure, measureIdx);
    const barline = new _barline__WEBPACK_IMPORTED_MODULE_2__["default"](measure.duration);
    if (measureIdx === this.numMeasures - 1) {
      barline.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].FINAL;
      const prevBarlineNotation = prevMeasure.barlineNotation;
      if (prevBarlineNotation && prevBarlineNotation.type === _barline__WEBPACK_IMPORTED_MODULE_2__["default"].FINAL) {
        prevBarlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].SINGLE;
      }
    }
    measure.addElement(barline, _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      let multiVoice = false;
      if (r) {
        for (let p = r[1]; p > r[0]; p--) {
          multiVoice = 2 === staff.getMeasureAt(p).numVoices;
          if (multiVoice) {
            break;
          }
        }
      }
      staff.insertBlankMeasureAt(measureIdx, measure.measureInfo, multiVoice);
    }
    return measure;
  }
  insertScoreMeasureAt(score, measureIdx, globalIdx) {
    let measure = score.systemStaff.getMeasureAt(measureIdx).clone();
    if (globalIdx === this.numMeasures) {
      const lastBarlineNotation = this.systemStaff.getMeasureAt(globalIdx - 1).barlineNotation;
      const currBarlineNotation = measure.barlineNotation;
      if (currBarlineNotation) {
        currBarlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].FINAL;
        if (lastBarlineNotation && lastBarlineNotation.type === _barline__WEBPACK_IMPORTED_MODULE_2__["default"].FINAL) {
          lastBarlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].SINGLE;
        }
      }
    }
    this.systemStaff.addMeasureAt(measure, globalIdx);
    for (let i = 0; i < this.staves.length; i++) {
      const staffIdx = Math.min(i, score.staves.length);
      measure = score.getStaffAt(staffIdx).getMeasureAt(measureIdx).clone();
      if (i < score.staves.length) {
        this.getStaffAt(i).addMeasureAt(measure, globalIdx);
        measure.calculateDerived(true);
      } else {
        this.getStaffAt(i).insertBlankMeasureAt(globalIdx, measure.measureInfo);
      }
    }
  }
  insertMeasureAfter(notation) {
    if (notation.measure.index + 1 >= this.numMeasures) {
      this.insertBlankMeasureAt(notation.measure.index + 1);
    }
    const measure = notation.measure.staff.getMeasureAt(notation.measure.index + 1);
    if (parseFloat(notation.voiceNumber) >= measure.numVoices) {
      const voice = new _voice__WEBPACK_IMPORTED_MODULE_14__["default"]();
      measure.addChildAt(voice, parseFloat(notation.voiceNumber) + 1);
      const tacet = new _tacet__WEBPACK_IMPORTED_MODULE_11__["default"]();
      voice.addElement(tacet);
    }
  }
  insertScoreAt(score, index) {
    for (let measureIdx = 0; measureIdx < score.numMeasures; measureIdx++) {
      this.insertScoreMeasureAt(score, measureIdx, index + measureIdx);
    }
  }
  ensureDuration(measureIdx, position, duration) {
    while (measureIdx < this.numMeasures && duration > 0) {
      duration -= this.systemStaff.getMeasureAt(measureIdx).duration - position;
      position = 0;
      measureIdx++;
    }
    while (duration > 0) {
      this.insertBlankMeasureAt(measureIdx);
      duration -= this.systemStaff.getMeasureAt(measureIdx).duration;
      measureIdx++;
    }
  }
  resetMeasureNumbers() {
    this.systemStaff.getMeasureAt(0).resetMeasureNumber();
  }
  setTempoAtMeasure(tempo, measureIdx, systemIndex = 4294967295) {
    const systemTempo = this.systemStaff.getMeasureAt(measureIdx).tempo;
    for (let i = measureIdx; i < this.numMeasures; i++) {
      const measure = this.systemStaff.getMeasureAt(i);
      if (systemIndex !== 4294967295 ? i === systemIndex : !measure.tempo.equals(systemTempo)) {
        this.defaultSystemMeasureNotations(i);
        return;
      }
      measure.tempo = tempo;
      if (measure.tempoNotation) {
        measure.removeElement(measure.tempoNotation);
      }
      if (measureIdx === i) {
        this.defaultSystemMeasureNotations(i);
      }
      for (let j = 0; j < this.staves.length; j++) {
        const staff = this.staves[j];
        staff.getMeasureAt(i).tempo = tempo;
      }
    }
  }
  defaultMeasureBoundary(measureIdx, option = {}) {
    const showtimechange = option.showTimeChange;
    const showTimeChange = showtimechange === undefined || showtimechange;
    const addtemponotation = option.addTempoNotation;
    const addTempoNotation = addtemponotation === undefined || addtemponotation;
    this.defaultSystemMeasureNotations(measureIdx, {
      showTimeChange,
      addTempoNotation
    });
    for (let i = 0; i < this.staves.length; i++) {
      const staff = this.staves[i];
      staff.defaultClefChanges(measureIdx);
      if (measureIdx < this.numMeasures) {
        staff.getMeasureAt(measureIdx).cleanUpLiaisons();
      }
    }
  }
  defaultSystemMeasureNotations(measureIdx, option = {}) {
    const showtimechange = option.showTimeChange;
    const showTimeChange = showtimechange === undefined || showtimechange;
    const addtemponotation = option.addTempoNotation;
    const addTempoNotation = addtemponotation === undefined || addtemponotation;
    if (measureIdx <= this.numMeasures) {
      let systemMeasure;
      if (measureIdx !== this.numMeasures) {
        const measure = this.systemStaff.getMeasureAt(measureIdx);
        if (measureIdx === 0) {
          if (showTimeChange) {
            if (measure.timeSignature.visibility !== _timesignature__WEBPACK_IMPORTED_MODULE_13__["default"].HIDDEN_VISIBILITY && measure.timeSignatureNotation == null) {
              measure.addElement(measure.timeSignature.clone(), _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
            } else {
              const timeSignatureNotation = measure.timeSignatureNotation;
              if (measure.timeSignature.visibility === _timesignature__WEBPACK_IMPORTED_MODULE_13__["default"].HIDDEN_VISIBILITY && timeSignatureNotation != null) {
                measure.removeElement(timeSignatureNotation);
              }
            }
          }
          if (addTempoNotation) {
            measure.addTempoNotation();
          }
        } else {
          systemMeasure = this.systemStaff.getMeasureAt(measureIdx - 1);
          const timeSignatureNotation = systemMeasure.timeSignatureNotation;
          if (showTimeChange) {
            const non_metric_or_show = !measure.timeSignature.equals(systemMeasure.timeSignature) && (timeSignatureNotation == null || !measure.timeSignature.equals(timeSignatureNotation)) && measure.timeSignature.visibility !== _timesignature__WEBPACK_IMPORTED_MODULE_13__["default"].HIDDEN_VISIBILITY || measure.timeSignature.visibility === _timesignature__WEBPACK_IMPORTED_MODULE_13__["default"].SHOWN_VISIBILITY;
            if (non_metric_or_show && measure.timeSignatureNotation == null) {
              measure.addElement(measure.timeSignature.clone(), _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
            } else {
              if (!non_metric_or_show && measure.timeSignatureNotation != null) {
                measure.removeElement(measure.timeSignatureNotation);
              }
            }
          }
          if (!measure.tempo.equals(systemMeasure.tempo)) {
            if (addTempoNotation) {
              measure.addTempoNotation();
            }
          } else {
            if (measure.tempoNotation != null) {
              measure.removeElement(measure.tempoNotation);
            }
          }
          if (measure.keySignature.equals(systemMeasure.keySignature)) {
            if (systemMeasure.keySignatureNotation != null) {
              systemMeasure.removeElement(systemMeasure.keySignatureNotation);
              if (systemMeasure.barlineNotation) {
                systemMeasure.barlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].SINGLE;
              }
            }
          } else {
            const keySignature = measure.keySignature.clone();
            keySignature.cancel = systemMeasure.keySignature.fifths;
            keySignature.rhythmPosition = systemMeasure.duration;
            if (systemMeasure.keySignatureNotation) {
              systemMeasure.removeElement(systemMeasure.keySignatureNotation);
            }
            systemMeasure.addElement(keySignature, _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
            if (systemMeasure.barlineNotation) {
              systemMeasure.barlineNotation.type = _barline__WEBPACK_IMPORTED_MODULE_2__["default"].DOUBLE;
            }
          }
        }
      } else {
        systemMeasure = this.systemStaff.getMeasureAt(measureIdx - 1);
        if (systemMeasure.keySignatureNotation) {
          systemMeasure.removeElement(systemMeasure.keySignatureNotation);
        }
      }
    }
  }
  rangeDuration(start, end) {
    return this.systemStaff.rangeDuration(start, end);
  }
  offsetPosition(measure, duration, r) {
    return this.systemStaff.offsetPosition(measure, duration, r);
  }
  showPartNameNextToStaff(startMeasureIndex) {
    return this.effectiveStaffMetrics.showPartNames && (this.parts.length > 1 && (this.numVisibleParts == 1 || this.useIndividualPartInfo) && this.effectiveStaffMetrics.partNamePosition === _staff_metrics__WEBPACK_IMPORTED_MODULE_10__["default"].PART_NAME_POSITION_STAFF || this.parts.length > 1 && this.numVisibleParts > 1 && this.useIndividualPartInfo == null || this.parts.length === 1 && this.effectiveStaffMetrics.partNamePosition === _staff_metrics__WEBPACK_IMPORTED_MODULE_10__["default"].PART_NAME_POSITION_STAFF) && (startMeasureIndex === 0 || this.numVisibleParts > 1 && this.useIndividualPartInfo == null);
  }
  showPartNameAtTopLeftOfThePage(layoutIdx) {
    return this.effectiveStaffMetrics.showPartNames && (this.numVisibleParts === 1 || this.useIndividualPartInfo) && this.effectiveStaffMetrics.partNamePosition === _staff_metrics__WEBPACK_IMPORTED_MODULE_10__["default"].PART_NAME_POSITION_TOP_LEFT_OF_THE_PAGE && (layoutIdx === 0 || this.effectiveStaffMetrics.showPartNameOnEveryPage);
  }
  findPartWithId(partId) {
    for (let i = 0; i < this.staves.length; i++) {
      const stave = this.staves[i];
      const part = stave.part;
      if (part && part.id === partId) {
        return part;
      }
    }
    return null;
  }
  clearMeasureNumberCache() {
    this.systemStaff.getMeasureAt(0).clearMeasureNumberCache();
  }
  addPart(staffIndex, partInfo) {
    const part = partInfo.part;
    const clefs = partInfo.clefs || [];
    clefs.forEach((clef, idx) => {
      const staff = new _staff__WEBPACK_IMPORTED_MODULE_9__["default"]();
      staff.part = part;
      staff.type = (0,_utils_staff_type__WEBPACK_IMPORTED_MODULE_0__.createTypeFromClef)(clef);
      this.insertBlankStaffAt(staff, staffIndex + idx, clef);
    });
    return part;
  }
}

/***/ }),

/***/ 66000:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/segno.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Segno)
/* harmony export */ });
/* harmony import */ var _system_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./system-symbol */ 93093);

class Segno extends _system_symbol__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(rhythmPosition = 0) {
    super(rhythmPosition);
  }
}

/***/ }),

/***/ 69686:
/*!************************************************!*\
  !*** ./src/app/note-editor/models/sequence.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Sequence)
/* harmony export */ });
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _measure_repeat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./measure-repeat */ 27506);


class Sequence {
  constructor() {
    this._elements = [];
    this._duration = 0;
    this._singleVoice = true;
  }
  get elements() {
    return this._elements;
  }
  get singleVoiceNumber() {
    if (this._singleVoice && this._elements.length > 0) {
      return this.elements[0].lastVoiceNumber;
    } else {
      return _utils_voice_number__WEBPACK_IMPORTED_MODULE_0__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
    }
  }
  get duration() {
    return this._duration;
  }
  set duration(d) {
    this._duration = d;
  }
  addElement(el) {
    if (this._singleVoice && this._elements.length > 0 && el.lastVoiceNumber != this._elements[this._elements.length - 1].lastVoiceNumber) {
      this._singleVoice = false;
    }
    this._duration = Math.max(this._duration, el.rhythmPosition + el.rhythmDuration);
    for (let i = 0; i < this._elements.length; i++) {
      if (el.rhythmPosition < this._elements[i].rhythmPosition) {
        this._elements.splice(i, 0, el);
        return;
      }
    }
    this._elements.push(el);
  }
  mergeToStaff(staff, measurePosition, voiceNumber) {
    let prevRhythmPosition = 0;
    for (let i = 0; i < this.elements.length; i++) {
      const el = this.elements[i];
      measurePosition = staff.offsetPosition(measurePosition, el.rhythmPosition - prevRhythmPosition, false);
      if (!(el instanceof _measure_repeat__WEBPACK_IMPORTED_MODULE_1__["default"]) || measurePosition.position === 0) {
        staff.mergeElement(el, measurePosition, voiceNumber);
        prevRhythmPosition = el.rhythmPosition;
      }
    }
  }
}

/***/ }),

/***/ 85888:
/*!********************************************!*\
  !*** ./src/app/note-editor/models/slur.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Slur)
/* harmony export */ });
/* harmony import */ var _utils_geometry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/geometry */ 57533);
/* harmony import */ var _articulation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./articulation */ 78859);
/* harmony import */ var _notation_direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./notation-direction */ 66420);
/* harmony import */ var _span_notation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./span-notation */ 43586);
/* harmony import */ var _tablature_clef__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tablature-clef */ 20511);





class Slur extends _span_notation__WEBPACK_IMPORTED_MODULE_3__["default"] {
  static get ARTICULATION_FRIENDLY_NAMES() {
    return Slur.articulation_friendly_names;
  }
  get cx1() {
    return this._cx1;
  }
  set cx1(v) {
    this._cx1 = v;
  }
  get cy1() {
    return this._cy1;
  }
  set cy1(v) {
    this._cy1 = v;
  }
  get cx2() {
    return this._cx2;
  }
  set cx2(v) {
    this._cx2 = v;
  }
  get cy2() {
    return this._cy2;
  }
  set cy2(v) {
    this._cy2 = v;
  }
  get slurHeight() {
    return this._slurHeight;
  }
  set slurHeight(v) {
    this._slurHeight = v;
  }
  get slurArticulation() {
    return this._slurArticulation;
  }
  set slurArticulation(v) {
    this._slurArticulation = v;
  }
  get transposable() {
    return true;
  }
  get top() {
    return Math.max(this.dy, this.dy + this.ascent, this.dy + (this.cy1 + this.cy2 + this.ascent) / 2, this.dy + this.slurHeight);
  }
  get bottom() {
    return Math.min(this.dy, this.dy + this.ascent, this.dy + (this.cy1 + this.cy2 + this.ascent) / 2, this.dy + this.slurHeight);
  }
  get noteY() {
    return this.dy + this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN ? 1 : -1;
  }
  get preventDurationDefault() {
    return this._preventDurationDefault;
  }
  set preventDurationDefault(v) {
    this._preventDurationDefault = v;
  }
  constructor(rhythmPosition = 0, includeGrace = true, span = 0, endX = 0, ascent = 0) {
    super(rhythmPosition, includeGrace, span, endX, ascent);
    this._cx1 = 0;
    this._cy1 = 0;
    this._cx2 = 0;
    this._cy2 = 0;
    this._slurHeight = 0;
    this._slurArticulation = null;
    this._preventDurationDefault = false;
    this.direction = _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP;
  }
  setDefaultInfo(info) {
    let isDirectionDown,
      width,
      peakY,
      slurScale,
      grace = info.grace && this.span === 0,
      tablatureClef = this.measure.effectiveClef instanceof _tablature_clef__WEBPACK_IMPORTED_MODULE_4__["default"];
    if (info.staffMetrics.ignoreSlurDirection || this.defaultDirection == null) {
      if (info.multiVoice) {
        isDirectionDown = info.multiVoiceDown;
        grace = false;
      } else {
        isDirectionDown = !(!grace || tablatureClef) || !info.notesDown;
      }
    } else {
      isDirectionDown = this.defaultDirection == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN;
    }
    this.direction = isDirectionDown ? _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN : _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP;
    if (info.empty) {
      this.dx = this.dy = this.endX = this.ascent = 0;
    } else {
      if (this.dy >= 0) {
        this.dx = info.startNoteWidth * (tablatureClef ? 0.75 : 0.5);
      }
      const firstNotePlacement = info.notePlacements[0];
      const lastNotePlacement = info.notePlacements[info.notePlacements.length - 1];
      if (grace && !tablatureClef && info.notesDown && lastNotePlacement.hasStem === true) {
        this.endX = 0.25 * -info.endNoteWidth;
        this.dy = firstNotePlacement.bottom;
        this.ascent = 0.25 * (lastNotePlacement.bottom - this.dy);
      } else if (isDirectionDown) {
        if (this.endX <= info.endNoteWidth) {
          this.endX = info.endNoteWidth * (tablatureClef ? 0.25 : 0.5);
        }
        this.dy = firstNotePlacement.bottom - (tablatureClef ? 0.3 : 0);
        this.ascent = tablatureClef ? 0 : lastNotePlacement.bottom - this.dy;
        width = lastNotePlacement.x - firstNotePlacement.x;
        if (width > 0) {
          let slurHeight = 0;
          for (let i = 0; i < info.notePlacements.length; i++) {
            const notePlacement = info.notePlacements[i];
            peakY = this.dy + this.ascent * (notePlacement.x - firstNotePlacement.x) / width;
            slurScale = this.getSlurScaleAtOffset(width, +notePlacement.x);
            if (slurScale !== 0) {
              slurScale = Math.max(info.staffMetrics.slurMinNormalizedHeight, slurScale);
              slurHeight = Math.min(slurHeight, (notePlacement.bottom - peakY) / slurScale);
            }
          }
          this.slurHeight = slurHeight;
        }
      } else if (this.endX <= info.endNoteWidth && (this.endX = info.endNoteWidth * (tablatureClef ? 0.25 : 0.5)), this.dy = firstNotePlacement.top + (tablatureClef ? 0.3 : 0), this.ascent = tablatureClef ? 0 : lastNotePlacement.top - this.dy, (width = lastNotePlacement.x - firstNotePlacement.x) > 0) {
        let slurHeight = 0;
        for (let i = 0; i < info.notePlacements.length; i++) {
          const notePlacement = info.notePlacements[i];
          peakY = this.dy + this.ascent * (notePlacement.x - firstNotePlacement.x) / width;
          slurScale = this.getSlurScaleAtOffset(width, +notePlacement.x);
          if (slurScale !== 0) {
            slurScale = Math.max(info.staffMetrics.slurMinNormalizedHeight, slurScale);
            slurHeight = Math.max(slurHeight, (notePlacement.top - peakY) / slurScale);
          }
        }
        this.slurHeight = slurHeight;
      }
      if (!this.preventDurationDefault) {
        this.span = info.startEndSpan;
      }
    }
    this.cx1 = 0;
    this.cx2 = 0;
    this.cy1 = 0;
    this.cy2 = 0;
  }
  getSlurScaleAtOffset(width, offsetX) {
    offsetX = Math.max(0, Math.min(1, Math.abs(offsetX - 0.5 * width) / (0.5 * width)));
    return Math.sqrt(1 - offsetX * offsetX);
  }
  slurHeightAtPointWithBezierApproximation(point) {
    const dy = this.dy;
    const top = this.dy + this.ascent;
    const s = dy + 4 / 3 * this.slurHeight;
    const i = s + this.ascent;
    const n = point / this.span;
    return _utils_geometry__WEBPACK_IMPORTED_MODULE_0__["default"].cubicBezierCurve(n, dy, s, i, top);
  }
  slurRiseRate(t) {
    const dy = this.dy,
      top = dy + this.ascent,
      s = dy + 4 / 3 * this.slurHeight,
      i = s + this.ascent,
      n = t / this.span;
    return _utils_geometry__WEBPACK_IMPORTED_MODULE_0__["default"].cubicBezierCurveDerivativeCoord(n, dy, s, i, top);
  }
  getMaxHeightInSegment(start, end) {
    if (start === 0 && end === this.span) {
      if (this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP) {
        return this.top;
      } else {
        return this.bottom;
      }
    }
    const slurStartHeight = this.slurHeightAtPointWithBezierApproximation(start);
    const slurEndHeight = this.slurHeightAtPointWithBezierApproximation(end);
    if (start === 0) {
      const slurRiseRate = this.slurRiseRate(end);
      return this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP && slurRiseRate <= 0 ? this.top : this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN && slurRiseRate >= 0 ? this.bottom : slurEndHeight;
    }
    if (0 !== start && end == this.span) {
      const slurRiseRate = this.slurRiseRate(start);
      return this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP && slurRiseRate >= 0 ? this.top : this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN && slurRiseRate <= 0 ? this.bottom : slurStartHeight;
    }
    if (0 !== start && end != this.span) {
      var slurStartRiseRate = this.slurRiseRate(start),
        slurEndRiseRate = this.slurRiseRate(end),
        rateNotEqual = slurStartRiseRate / Math.abs(slurStartRiseRate) != slurEndRiseRate / Math.abs(slurEndRiseRate);
      if (this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP) return rateNotEqual ? this.top : Math.max(slurStartHeight, slurEndHeight);
      if (this.direction == _notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_DOWN) return rateNotEqual ? this.bottom : Math.min(slurStartHeight, slurEndHeight);
    }
  }
  clone() {
    const slur = super.clone(Slur);
    slur.cx1 = this.cx1;
    slur.cy1 = this.cy1;
    slur.cx2 = this.cx2;
    slur.cy2 = this.cy2;
    slur.slurArticulation = this.slurArticulation;
    return slur;
  }
  static _staticInitializer() {
    Slur.ARTICULATION_FRIENDLY_NAMES[_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.HAMMER_ON] = 'Hammer-on';
    Slur.ARTICULATION_FRIENDLY_NAMES[_articulation__WEBPACK_IMPORTED_MODULE_1__.Articulation.PULL_OFF] = 'Pull-off';
  }
}
Slur.articulation_friendly_names = {};
Slur._staticInitializer();

/***/ }),

/***/ 43586:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/span-notation.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpanNotation)
/* harmony export */ });
/* harmony import */ var _measure_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measure-position */ 83067);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation */ 83658);


class SpanNotation extends _notation__WEBPACK_IMPORTED_MODULE_1__.Notation {
  static get HAIRPIN_TYPE() {
    return 'hairpin';
  }
  static get SLUR_TYPE() {
    return 'slur';
  }
  static get LINE_TYPE() {
    return 'line';
  }
  get endX() {
    return this._endX;
  }
  set endX(v) {
    this._endX = v;
  }
  get ascent() {
    return this._ascent;
  }
  set ascent(v) {
    this._ascent = v;
  }
  get includeGrace() {
    return this._includeGrace;
  }
  set includeGrace(v) {
    this._includeGrace = v;
  }
  get requiresDefaultInfo() {
    return this._requiresDefaultInfo;
  }
  set requiresDefaultInfo(v) {
    this._requiresDefaultInfo = v;
  }
  get requestValidate() {
    return this._requestValidate;
  }
  set requestValidate(v) {
    this._requestValidate = v;
  }
  get type() {
    return this._type;
  }
  set type(v) {
    this._type = v;
  }
  get span() {
    return this._span;
  }
  set span(v) {
    this._span = v;
  }
  get metrical() {
    return true;
  }
  get movable() {
    return true;
  }
  get affectsParentLayout() {
    return false;
  }
  get transposable() {
    return false;
  }
  get affectsEntirePart() {
    return false;
  }
  get canStartAtBarline() {
    return false;
  }
  get canEndAtBarline() {
    return false;
  }
  get endPosition() {
    const score = this.measure.staff.score;
    if (score) {
      return score.offsetPosition(this.measurePosition, this.span, this.canEndAtBarline);
    } else {
      return new _measure_position__WEBPACK_IMPORTED_MODULE_0__["default"](this.measure.index, 0);
    }
  }
  get top() {
    return Math.max(this.dy, this.dy + this.ascent);
  }
  get bottom() {
    return Math.min(this.dy, this.dy + this.ascent);
  }
  get belowStaff() {
    return this.measure && this.measure.effectiveClef && this.dy < this.measure.effectiveClef.numLines;
  }
  get defaultDirection() {
    return this._defaultDirection;
  }
  set defaultDirection(v) {
    this._defaultDirection = v;
  }
  constructor(rhythmPosition, includeGrace, span, endx, ascent) {
    super(rhythmPosition);
    this._requiresDefaultInfo = false;
    this._requestValidate = 0;
    this._type = null;
    this._defaultDirection = null;
    this.includeGrace = includeGrace;
    this.span = span;
    this.endX = endx;
    this.ascent = ascent;
  }
  adjustSpan(amount) {
    this.span += amount;
  }
  setDefaultInfo(info) {}
  requestValidation() {
    this.requestValidate++;
  }
  clone(type = SpanNotation) {
    const spanNotation = super.clone(type);
    spanNotation.span = this.span;
    spanNotation.endX = this.endX;
    spanNotation.ascent = this.ascent;
    spanNotation.includeGrace = this.includeGrace;
    return spanNotation;
  }
}

/***/ }),

/***/ 26032:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/staff-metrics.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffMetrics)
/* harmony export */ });
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _glyph_foundry_metrics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyph/foundry-metrics */ 3765);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./value-notation */ 56170);




class StaffMetrics extends _model__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor() {
    super(...arguments);
    this._glyphFamily = 'Sonata';
    this._lineSpacing = StaffMetrics.DEFAULT_LINE_SPACING;
    this._scoreLineSpacing = StaffMetrics.DEFAULT_LINE_SPACING;
    this._creditLineSpacing = 0;
    this._scoreDisplayRespectSystemBreaks = true;
    this._partDisplayRespectSystemBreaks = false;
    this._lineThickness = 0.1;
    this._clefPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.5, 0, 0.75, 0);
    this._clefChangePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, 0.5, 0);
    this._timeSignaturePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, 1, 0);
    this._keySignaturePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.75, 0, 1.25, 0);
    this._notePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.25, 0, 0.5, 0);
    this._initialGracePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.5, 0, 0.75, 0);
    this._noteLiaisonPadding = 0.75;
    this._liaisonHorizontalPadding = 0.125;
    this._liaisonVerticalPadding = 0.5;
    this._maxLvTieWidth = 0.5;
    this._bendIncreasePadding = 4;
    this._barlinePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.5, 0, 0.5, 0);
    this._repeatEndingBracketEndX = -0.25;
    this._repeatEndingBracketHeight = 1.75;
    this._repeatEndingBracketTextYOffset = 2;
    this._repeatEndingBracketBold = true;
    this._repeatEndingDistanceAboveStaff = 8;
    this._autoMultiMeasureRestCreation = false;
    this._initialBarlinePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 0, 1, 0);
    this._repeatWings = true;
    this._chordSymbolPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, -2, 1, 0);
    this._chordFramePadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 4.5, 1, 0);
    this._expressionTextPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 3.75, 1, 0);
    this._expressionTextTopPadding = 9;
    this._performanceTextPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, -3, 1, 0);
    this._lyricsPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](-0.5, 0, 0.5, 0);
    this._lyricsNotePadding = 0.5;
    this._blockSidesPadding = 60;
    this._blockLeftMargin = 30;
    this._blockVerticalPadding = 10;
    this._blockBeforeBuffer = 3;
    this._blockAfterBuffer = -3;
    this._blockColumnPadding = 2;
    this._numberOfColumnPerBlock = 1;
    this._symbolOffset = 4;
    this._symbolScale = 1;
    this._symbolFirstMeasureXOffset = -0.5;
    this._indentationSpacing = 0;
    this._lyricsAboveStaffBottom = 6;
    this._lyricsBelowStaffTop = -2;
    this._lyricsLineSpacing = 2;
    this._directionsAboveStaff = true;
    this._lyricExtensionPadding = 0.5;
    this._lyricExtensionLength = 1;
    this._lyricExtensionThickness = 0.5;
    this._useLyricsDefaultDirection = true;
    this._barStartPaddingLeft = 1;
    this._staffSpacing = 5.5;
    this._legerLineRatio = 0.325;
    this._legerLineThickness = 0.125;
    this._systemSpacing = 9.25;
    this._measureHandlePadding = 4.625;
    this._systemLineThickness = 0.125;
    this._smallClefScale = 0.875;
    this._accidentalSpacing = 0.28;
    this._accidentalSpread = 0.2;
    this._accidentalClearance = 3;
    this._parenthesisSpacing = 0.2;
    this._accidentalKeySignatureSpacing = 1;
    this._glyphEffectSpacing = 0.28;
    this._arpeggioWidth = 0.5;
    this._arpeggioSpacing = 0.75;
    this._normalStemLength = 3.5;
    this._nullStemLength = 0.5;
    this._beamingStemLength = 3;
    this._multiVoiceBeamingStemLength = 2.5;
    this._stemMultiVoiceCutback = 0.5;
    this._beamMultiVoiceCutback = 0.5;
    this._lowerVoiceRestOffset = -2;
    this._upperVoiceRestOffset = 2;
    this._stemThickness = 0.175;
    this._dotSpacing = 0.25;
    this._multipleDotGap = 0.5;
    this._spacings = [1.41, 1.41, 1.41, 1.41, 1.94, 2.5, 3.5, 6, 8.2];
    this._minInterVoiceSpacing = 1.41;
    this._barTacetWidth = 7;
    this._barNumberBoxed = false;
    this._ripHorizontalSpacing = 0.28;
    this._fallHorizontalSpacing = 0.05;
    this._preEffectVerticalPaddingOffLine = 0.1;
    this._postEffectVerticalPaddingOffLine = 0.15;
    this._preEffectVerticalSpacing = 0.1;
    this._postEffectVerticalSpacing = 0.25;
    this._effectAdjustDelta = 0.5;
    this._tieEffectVerticalPadding = 0.5;
    this._tieHorizontalPadding = 0.35;
    this._tieHorizontalPaddingDotted = 0.6;
    this._slideHorizontalPadding = 0.3;
    this._tieVerticalPaddingOnLine = 0.25;
    this._tieHalfMaxHeightWidth = 16;
    this._tieHalfMaxShoulderWidth = 5;
    this._tieMaxShoulder = 0.2;
    this._tieMaxStroke = 0.125;
    this._slideStrokeBias = 0.25;
    this._slideThickness = 0.125;
    this._bendArrowHeight = 1;
    this._bendArrowWidth = 0.75;
    this._tieSingleNoteEnabled = true;
    this._tieSingleNoteBelowSpacing = 0.5;
    this._tieSingleNoteCenterPadding = 0.125;
    this._tieStaffLineDither = 0.25;
    this._tieMinimumVerticalSpacing = 0.75;
    this._tieHeight = 2;
    this._slurHalfMaxHeightWidth = 5;
    this._slurHeight = 1.5;
    this._slurTolerance = 2;
    this._slurArticulationPadding = 1.25;
    this._slurPadding = 1;
    this._slurMinNormalizedHeight = 0;
    this._hairpinThickness = 0.1;
    this._hairpinLongThreshold = 8;
    this._hairpinShortEndGap = 1;
    this._hairpinLongEndGap = 1.5;
    this._hairpinBreakGap = 0.75;
    this._hairpinPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](1.5, -2.75, 1, 0);
    this._hairpinEndExpressionPadding = 1;
    this._hairpinStartExpressionPadding = 0.3;
    this._hairpinExpressionPaddingTop = 6;
    this._hairpinMinimumWidth = 0.5;
    this._trillAccidentalScale = 0.8;
    this._trillAccidentalYSpacing = -0.5;
    this._trillAccidentalXSpacing = 0.25;
    this._beamThickness = 0.5;
    this._beamSpacing = 0.25;
    this._nearCrossoverOffset = 1;
    this._crossoverOffset = 1.5;
    this._wholeCrossoverOffset = 2;
    this._articulationPadding = 0.5;
    this._articulationSpacing = 0.25;
    this._rightArticulationPadding = 2;
    this._annotationIconHeight = 1.75;
    this._tupletBracketHeight = 0.5;
    this._tupletHeight = 1.25;
    this._tupletNumberPadding = 0.5;
    this._fractionalBeamLength = 1.25;
    this._tremoloInsertLength = 1.25;
    this._splitCodaByDefault = false;
    this._splitSystemGap = 10;
    this._titleY = 1;
    this._titleSize = 0.6;
    this._titleBold = false;
    this._subtitleSize = 0.3;
    this._supertitleSize = 0.3;
    this._subtitleBold = false;
    this._supertitleBold = false;
    this._composerBold = false;
    this._lyricistBold = false;
    this._lyricsBold = false;
    this._lyricsItalic = false;
    this._copyrightBold = false;
    this._footerBold = false;
    this._composerY = 6;
    this._composerSize = 0.4;
    this._composerBottomPadding = 2;
    this._arrangerBottomPadding = 2;
    this._arrangerPlaceholderBottomPadding = 0.5;
    this._pageNumberY = 0;
    this._pageNumberSize = 0.3;
    this._pageNumberIncludesTitle = false;
    this._copyrightSize = 0.24;
    this._showCopyrightOnAllPages = false;
    this._textProportional = true;
    this._footerSize = 0.24;
    this._footerColor = 0;
    this._titlePageTopPadding = 10;
    this._titlePageSubtitlePadding = 0.5;
    this._titlePageSupertitlePadding = 0.5;
    this._pageTopPadding = 0;
    this._titlePageFirstStaffPadding = 0;
    this._titlePagePromptSize = 0.3;
    this._titlePagePromptPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](0, 5, 0, 0);
    this._staffLabelPadding = 1.75;
    this._grandStaffPadding = 0.5;
    this._pageNameSize = 0.3;
    this._tempoSymbolSize = 0.22;
    this._tempoSymbolScale = 0.75;
    this._tempoFirstMeasureXOffset = -4;
    this._tempoTimeSignatureXOffset = -3;
    this._tempoTimeSignatureXOffsetFirstMeasure = -3;
    this._tempoXOffset = -1;
    this._tempoXOffsetFirstMeasure = -2;
    this._tempoUnitOffset = 3.78;
    this._tempoTextOffset = 2;
    this._tempoBold = false;
    this._chordSymbolSize = 0.32;
    this._repeatEndingFontSize = 0.25;
    this._keepChordSymbolsApart = false;
    this._centerChordSymbols = false;
    this._chordBelowStaffOffset = -10;
    this._chordBelowStaffOffsetTab = -14;
    this._expressionTextSize = 0.3;
    this._expressionTextSpacing = -2;
    this._performanceTextSize = 0.3;
    this._labelTextSize = 0.25;
    this._performanceTextSpacing = -2.5;
    this._lyricsSize = 0.275;
    this._lyricsDescent = 0.25;
    this._lyricsAscent = 1 - this.lyricsDescent;
    this._blockSize = 0.275;
    this._blockHeaderWeight = 2;
    this._blockColumnWeight = 10;
    this._mouseNotationPadding = 0.5;
    this._mouseNoteEntryStemMargin = 0.5;
    this._mouseNoteEntrySlopWidth = 3.5;
    this._mouseNoteEntrySlopHeight = 3.75;
    this._partDisplayRespectSystemBreak = false;
    this._showPartNames = StaffMetrics.SHOW_PART_NAMES_DEFAULT;
    this._partNamePosition = StaffMetrics.PART_NAME_POSITION_STAFF;
    this._showPartNameOnEveryPage = false;
    this._spaceAbovePerformanceText = 3;
    this._spaceAboveChordFrames = 8.5;
    this._spaceAboveChords = 2;
    this._showChordDiagrams = StaffMetrics.SHOW_CHORD_DIAGRAMS_DEFAULT;
    this._cueScale = 0.75;
    this._tabFretWidth = 2.25;
    this._tabFretBackgroundPadding = 0.1;
    this._stemDecorationVerticalStemOffset = 1;
    this._stemDecorationVerticalNoteOffset = 2;
    this._tremoloVerticalStemOffset = 1.4;
    this._tremoloVerticalNoteOffset = 1.7;
    this._ignoreSystemMargins = false;
    this._minVerticalGap = 0.5;
    this._systemStretch = 5;
    this._topStaffGap = 5;
    this._showBarNumbersOnEachMeasure = false;
    this._showBarNumbers = true;
    this._chordFrameStringSpacing = 0.75;
    this._chordFrameFretSpacing = 1;
    this._lineNotationPadding = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_0__["default"](1.5, 0, 1, 0);
    this._lineNotationThickness = 0.1;
    this._lineNotationYPosition = 6;
    this._lineNotationBracketHeight = 1;
    this._lineNotationFontSize = 0.275;
    this._lyricsNotesPadding = 0.5;
    this._verticalAutoSpace = false;
    this._partNameSize = 0.3;
    this._partNameAtTheTopOffset = -2;
    this._tabGraceScale = 0.8;
    this._graceScale = 0.6;
    this._layoutSpacing = 0;
    this._chordSymbolFont = 'SourceSansPro';
    this._staffTextFont = 'SourceSerifPro';
    this._lyricsFont = 'SourceSerifPro';
    this._tempoFont = 'SourceSerifPro';
    this._copyrightFont = 'SourceSerifPro';
    this._footerFont = 'SourceSerifPro';
    this._textFont = 'SourceSerifPro';
    this._supertitleFont = 'SourceSerifPro';
    this._titleFont = 'SourceSerifPro';
    this._subtitleFont = 'SourceSerifPro';
    this._composerFont = 'SourceSerifPro';
    this._lyricistFont = 'SourceSerifPro';
    this._arrangerFont = 'SourceSerifPro';
    this._lineNotationDistanceAboveStaff = 2;
    this._lineNotationDistanceBelowStaff = -2;
    this._showTabRhythm = true;
    this._ignoreStemDirection = false;
  }
  static get MIN_LINE_SPACING() {
    return 2;
  }
  static get MAX_LINE_SPACING() {
    return 12;
  }
  static get MIN_STAFF_SPACING() {
    return 0;
  }
  static get MAX_STAFF_SPACING() {
    return 25;
  }
  static get MIN_SYSTEM_SPACING() {
    return 0;
  }
  static get MAX_SYSTEM_SPACING() {
    return 25;
  }
  static get DEFAULT_LINE_SPACING() {
    return 6;
  }
  static get DEFAULT_STAFF_HEIGHT() {
    return 40;
  }
  static get DEFAULT_GLYPH_FAMILY() {
    return 'Sonata';
  }
  static get STYLE_DEFAULT() {
    return 'default';
  }
  static get STYLE_PVG() {
    return 'pvg';
  }
  static get STYLE_CCLI() {
    return 'ccli';
  }
  static get STYLE_CCLI_MULTI() {
    return 'ccliMulti';
  }
  static get STYLE_CCLI_SINGLE() {
    return 'ccliSingle';
  }
  static get STYLE_CCLI_MULTI_HANGUL() {
    return 'ccliMultiHangul';
  }
  static get STYLE_CCLI_SINGLE_HANGUL() {
    return 'ccliSingleHangul';
  }
  static get STYLE_JAZZ_ASH() {
    return 'jazzAsh';
  }
  static get STYLE_YCJ() {
    return 'ycj';
  }
  static get STYLE_HLC_ACCORDION() {
    return 'hlcAccordion';
  }
  static get STYLE_HLC_INSTRUMENTAL_SOLO() {
    return 'hlcInstrumentalSolo';
  }
  static get STYLE_HLC_BIG_NOTE() {
    return 'hlcBigNote';
  }
  static get STYLE_HLC_CHORAL() {
    return 'hlcChoral';
  }
  static get STYLE_HLC_EASY_PIANO() {
    return 'hlcEasyPiano';
  }
  static get STYLE_HLC_EDUCATIONAL_PIANO() {
    return 'hlcEducationalPiano';
  }
  static get STYLE_HLC_FAKEBOOK() {
    return 'hlcFakebook';
  }
  static get STYLE_HLC_GUITAR() {
    return 'hlcGuitar';
  }
  static get STYLE_HLC_PIANO_SOLO() {
    return 'hlcPianoSolo';
  }
  static get STYLE_HLC_UKULELE() {
    return 'hlcUkulele';
  }
  static get STYLE_HLC_PVG() {
    return 'hlcPvg';
  }
  static get STYLE_CL_JAZZ() {
    return 'clJazz';
  }
  static get STYLE_MS_PVG() {
    return 'msPvg';
  }
  static get STYLE_MS_EASY_PIANO() {
    return 'msEasyPiano';
  }
  static get STYLE_EEMC() {
    return 'eemc';
  }
  static get STYLE_CONCERT_BAND() {
    return 'concertBand';
  }
  static get SHOW_PART_NAMES_DEFAULT() {
    return false;
  }
  static get SHOW_CHORD_DIAGRAMS_DEFAULT() {
    return false;
  }
  static get PART_NAME_POSITION_STAFF() {
    return 'staff';
  }
  static get PART_NAME_POSITION_TOP_LEFT_OF_THE_PAGE() {
    return 'topLeftOfThePage';
  }
  get glyphFamily() {
    return this._glyphFamily;
  }
  set glyphFamily(v) {
    this._glyphFamily = v;
  }
  get lineSpacing() {
    return this._lineSpacing;
  }
  set lineSpacing(v) {
    this._lineSpacing = v;
  }
  get scoreLineSpacing() {
    return this._scoreLineSpacing;
  }
  set scoreLineSpacing(v) {
    this._scoreLineSpacing = v;
  }
  get creditLineSpacing() {
    return this._creditLineSpacing;
  }
  set creditLineSpacing(v) {
    this._creditLineSpacing = v;
  }
  get scoreDisplayRespectSystemBreaks() {
    return this._scoreDisplayRespectSystemBreaks;
  }
  set scoreDisplayRespectSystemBreaks(v) {
    this._scoreDisplayRespectSystemBreaks = v;
  }
  get partDisplayRespectSystemBreaks() {
    return this._partDisplayRespectSystemBreaks;
  }
  set partDisplayRespectSystemBreaks(v) {
    this._partDisplayRespectSystemBreaks = v;
  }
  get lineThickness() {
    return this._lineThickness;
  }
  set lineThickness(v) {
    this._lineThickness = v;
  }
  get clefPadding() {
    return this._clefPadding;
  }
  set clefPadding(v) {
    this._clefPadding = v;
  }
  get clefChangePadding() {
    return this._clefChangePadding;
  }
  set clefChangePadding(v) {
    this._clefChangePadding = v;
  }
  get timeSignaturePadding() {
    return this._timeSignaturePadding;
  }
  set timeSignaturePadding(v) {
    this._timeSignaturePadding = v;
  }
  get keySignaturePadding() {
    return this._keySignaturePadding;
  }
  set keySignaturePadding(v) {
    this._keySignaturePadding = v;
  }
  get notePadding() {
    return this._notePadding;
  }
  set notePadding(v) {
    this._notePadding = v;
  }
  get initialGracePadding() {
    return this._initialGracePadding;
  }
  set initialGracePadding(v) {
    this._initialGracePadding = v;
  }
  get noteLiaisonPadding() {
    return this._noteLiaisonPadding;
  }
  set noteLiaisonPadding(v) {
    this._noteLiaisonPadding = v;
  }
  get liaisonHorizontalPadding() {
    return this._liaisonHorizontalPadding;
  }
  set liaisonHorizontalPadding(v) {
    this._liaisonHorizontalPadding = v;
  }
  get liaisonVerticalPadding() {
    return this._liaisonVerticalPadding;
  }
  set liaisonVerticalPadding(v) {
    this._liaisonVerticalPadding = v;
  }
  get maxLvTieWidth() {
    return this._maxLvTieWidth;
  }
  set maxLvTieWidth(v) {
    this._maxLvTieWidth = v;
  }
  get bendIncreasePadding() {
    return this._bendIncreasePadding;
  }
  set bendIncreasePadding(v) {
    this._bendIncreasePadding = v;
  }
  get barlinePadding() {
    return this._barlinePadding;
  }
  set barlinePadding(v) {
    this._barlinePadding = v;
  }
  get repeatEndingBracketEndX() {
    return this._repeatEndingBracketEndX;
  }
  set repeatEndingBracketEndX(v) {
    this._repeatEndingBracketEndX = v;
  }
  get repeatEndingBracketHeight() {
    return this._repeatEndingBracketHeight;
  }
  set repeatEndingBracketHeight(v) {
    this._repeatEndingBracketHeight = v;
  }
  get repeatEndingBracketTextYOffset() {
    return this._repeatEndingBracketTextYOffset;
  }
  set repeatEndingBracketTextYOffset(v) {
    this._repeatEndingBracketTextYOffset = v;
  }
  get repeatEndingBracketBold() {
    return this._repeatEndingBracketBold;
  }
  set repeatEndingBracketBold(v) {
    this._repeatEndingBracketBold = v;
  }
  get repeatEndingDistanceAboveStaff() {
    return this._repeatEndingDistanceAboveStaff;
  }
  set repeatEndingDistanceAboveStaff(v) {
    this._repeatEndingDistanceAboveStaff = v;
  }
  get autoMultiMeasureRestCreation() {
    return this._autoMultiMeasureRestCreation;
  }
  set autoMultiMeasureRestCreation(v) {
    this._autoMultiMeasureRestCreation = v;
  }
  get initialBarlinePadding() {
    return this._initialBarlinePadding;
  }
  set initialBarlinePadding(v) {
    this._initialBarlinePadding = v;
  }
  get repeatWings() {
    return this._repeatWings;
  }
  set repeatWings(v) {
    this._repeatWings = v;
  }
  get chordSymbolPadding() {
    return this._chordSymbolPadding;
  }
  set chordSymbolPadding(v) {
    this._chordSymbolPadding = v;
  }
  get chordFramePadding() {
    return this._chordFramePadding;
  }
  set chordFramePadding(v) {
    this._chordFramePadding = v;
  }
  get expressionTextPadding() {
    return this._expressionTextPadding;
  }
  set expressionTextPadding(v) {
    this._expressionTextPadding = v;
  }
  get expressionTextTopPadding() {
    return this._expressionTextTopPadding;
  }
  set expressionTextTopPadding(v) {
    this._expressionTextTopPadding = v;
  }
  get performanceTextPadding() {
    return this._performanceTextPadding;
  }
  set performanceTextPadding(v) {
    this._performanceTextPadding = v;
  }
  get lyricsPadding() {
    return this._lyricsPadding;
  }
  set lyricsPadding(v) {
    this._lyricsPadding = v;
  }
  get lyricsNotePadding() {
    return this._lyricsNotePadding;
  }
  set lyricsNotePadding(v) {
    this._lyricsNotePadding = v;
  }
  get blockSidesPadding() {
    return this._blockSidesPadding;
  }
  set blockSidesPadding(v) {
    this._blockSidesPadding = v;
  }
  get blockLeftMargin() {
    return this._blockLeftMargin;
  }
  set blockLeftMargin(v) {
    this._blockLeftMargin = v;
  }
  get blockVerticalPadding() {
    return this._blockVerticalPadding;
  }
  set blockVerticalPadding(v) {
    this._blockVerticalPadding = v;
  }
  get blockBeforeBuffer() {
    return this._blockBeforeBuffer;
  }
  set blockBeforeBuffer(v) {
    this._blockBeforeBuffer = v;
  }
  get blockAfterBuffer() {
    return this._blockAfterBuffer;
  }
  set blockAfterBuffer(v) {
    this._blockAfterBuffer = v;
  }
  get blockColumnPadding() {
    return this._blockColumnPadding;
  }
  set blockColumnPadding(v) {
    this._blockColumnPadding = v;
  }
  get numberOfColumnPerBlock() {
    return this._numberOfColumnPerBlock;
  }
  set numberOfColumnPerBlock(v) {
    this._numberOfColumnPerBlock = v;
  }
  get symbolOffset() {
    return this._symbolOffset;
  }
  set symbolOffset(v) {
    this._symbolOffset = v;
  }
  get symbolScale() {
    return this._symbolScale;
  }
  set symbolScale(v) {
    this._symbolScale = v;
  }
  get symbolFirstMeasureXOffset() {
    return this._symbolFirstMeasureXOffset;
  }
  set symbolFirstMeasureXOffset(v) {
    this._symbolFirstMeasureXOffset = v;
  }
  get indentationSpacing() {
    return this._indentationSpacing;
  }
  set indentationSpacing(v) {
    this._indentationSpacing = v;
  }
  get lyricsAboveStaffBottom() {
    return this._lyricsAboveStaffBottom;
  }
  set lyricsAboveStaffBottom(v) {
    this._lyricsAboveStaffBottom = v;
  }
  get lyricsBelowStaffTop() {
    return this._lyricsBelowStaffTop;
  }
  set lyricsBelowStaffTop(v) {
    this._lyricsBelowStaffTop = v;
  }
  get lyricsLineSpacing() {
    return this._lyricsLineSpacing;
  }
  set lyricsLineSpacing(v) {
    this._lyricsLineSpacing = v;
  }
  get directionsAboveStaff() {
    return this._directionsAboveStaff;
  }
  set directionsAboveStaff(v) {
    this._directionsAboveStaff = v;
  }
  get lyricExtensionPadding() {
    return this._lyricExtensionPadding;
  }
  set lyricExtensionPadding(v) {
    this._lyricExtensionPadding = v;
  }
  get lyricExtensionLength() {
    return this._lyricExtensionLength;
  }
  set lyricExtensionLength(v) {
    this._lyricExtensionLength = v;
  }
  get lyricExtensionThickness() {
    return this._lyricExtensionThickness;
  }
  set lyricExtensionThickness(v) {
    this._lyricExtensionThickness = v;
  }
  get useLyricDsefaultDirection() {
    return this._useLyricsDefaultDirection;
  }
  set useLyricDsefaultDirection(v) {
    this._useLyricsDefaultDirection = v;
  }
  get barStartPaddingLeft() {
    return this._barStartPaddingLeft;
  }
  set barStartPaddingLeft(v) {
    this._barStartPaddingLeft = v;
  }
  get staffSpacing() {
    return this._staffSpacing;
  }
  set staffSpacing(v) {
    this._staffSpacing = v;
  }
  get legerLineRatio() {
    return this._legerLineRatio;
  }
  set legerLineRatio(v) {
    this._legerLineRatio = v;
  }
  get legerLineThickness() {
    return this._legerLineThickness;
  }
  set legerLineThickness(v) {
    this._legerLineThickness = v;
  }
  get systemSpacing() {
    return this._systemSpacing;
  }
  set systemSpacing(v) {
    this._systemSpacing = v;
  }
  get measureHandlePadding() {
    return this._measureHandlePadding;
  }
  set measureHandlePadding(v) {
    this._measureHandlePadding = v;
  }
  get systemLineThickness() {
    return this._systemLineThickness;
  }
  set systemLineThickness(v) {
    this._systemLineThickness = v;
  }
  get smallClefScale() {
    return this._smallClefScale;
  }
  set smallClefScale(v) {
    this._smallClefScale = v;
  }
  get accidentalSpacing() {
    return this._accidentalSpacing;
  }
  set accidentalSpacing(v) {
    this._accidentalSpacing = v;
  }
  get accidentalSpread() {
    return this._accidentalSpread;
  }
  set accidentalSpread(v) {
    this._accidentalSpread = v;
  }
  get accidentalClearance() {
    return this._accidentalClearance;
  }
  set accidentalClearance(v) {
    this._accidentalClearance = v;
  }
  get parenthesisSpacing() {
    return this._parenthesisSpacing;
  }
  set parenthesisSpacing(v) {
    this._parenthesisSpacing = v;
  }
  get accidentalKeySignatureSpacing() {
    return this._accidentalKeySignatureSpacing;
  }
  set accidentalKeySignatureSpacing(v) {
    this._accidentalKeySignatureSpacing = v;
  }
  get glyphEffectSpacing() {
    return this._glyphEffectSpacing;
  }
  set glyphEffectSpacing(v) {
    this._glyphEffectSpacing = v;
  }
  get arpeggioWidth() {
    return this._arpeggioWidth;
  }
  set arpeggioWidth(v) {
    this._arpeggioWidth = v;
  }
  get arpeggioSpacing() {
    return this._arpeggioSpacing;
  }
  set arpeggioSpacing(v) {
    this._arpeggioSpacing = v;
  }
  get normalStemLength() {
    return this._normalStemLength;
  }
  set normalStemLength(v) {
    this._normalStemLength = v;
  }
  get nullStemLength() {
    return this._nullStemLength;
  }
  set nullStemLength(v) {
    this._nullStemLength = v;
  }
  get beamingStemLength() {
    return this._beamingStemLength;
  }
  set beamingStemLength(v) {
    this._beamingStemLength = v;
  }
  get multiVoiceBeamingStemLength() {
    return this._multiVoiceBeamingStemLength;
  }
  set multiVoiceBeamingStemLength(v) {
    this._multiVoiceBeamingStemLength = v;
  }
  get stemMultiVoiceCutback() {
    return this._stemMultiVoiceCutback;
  }
  set stemMultiVoiceCutback(v) {
    this._stemMultiVoiceCutback = v;
  }
  get beamMultiVoiceCutback() {
    return this._beamMultiVoiceCutback;
  }
  set beamMultiVoiceCutback(v) {
    this._beamMultiVoiceCutback = v;
  }
  get lowerVoiceRestOffset() {
    return this._lowerVoiceRestOffset;
  }
  set lowerVoiceRestOffset(v) {
    this._lowerVoiceRestOffset = v;
  }
  get upperVoiceRestOffset() {
    return this._upperVoiceRestOffset;
  }
  set upperVoiceRestOffset(v) {
    this._upperVoiceRestOffset = v;
  }
  get stemThickness() {
    return this._stemThickness;
  }
  set stemThickness(v) {
    this._stemThickness = v;
  }
  get dotSpacing() {
    return this._dotSpacing;
  }
  set dotSpacing(v) {
    this._dotSpacing = v;
  }
  get multipleDotGap() {
    return this._multipleDotGap;
  }
  set multipleDotGap(v) {
    this._multipleDotGap = v;
  }
  get spacings() {
    return this._spacings;
  }
  set spacings(v) {
    this._spacings = v;
  }
  get minInterVoiceSpacing() {
    return this._minInterVoiceSpacing;
  }
  set minInterVoiceSpacing(v) {
    this._minInterVoiceSpacing = v;
  }
  get barTacetWidth() {
    return this._barTacetWidth;
  }
  set barTacetWidth(v) {
    this._barTacetWidth = v;
  }
  get barNumberBoxed() {
    return this._barNumberBoxed;
  }
  set barNumberBoxed(v) {
    this._barNumberBoxed = v;
  }
  get ripHorizontalSpacing() {
    return this._ripHorizontalSpacing;
  }
  set ripHorizontalSpacing(v) {
    this._ripHorizontalSpacing = v;
  }
  get fallHorizontalSpacing() {
    return this._fallHorizontalSpacing;
  }
  set fallHorizontalSpacing(v) {
    this._fallHorizontalSpacing = v;
  }
  get preEffectVerticalPaddingOffLine() {
    return this._preEffectVerticalPaddingOffLine;
  }
  set preEffectVerticalPaddingOffLine(v) {
    this._preEffectVerticalPaddingOffLine = v;
  }
  get postEffectVerticalPaddingOffLine() {
    return this._postEffectVerticalPaddingOffLine;
  }
  set postEffectVerticalPaddingOffLine(v) {
    this._postEffectVerticalPaddingOffLine = v;
  }
  get preEffectVerticalSpacing() {
    return this._preEffectVerticalSpacing;
  }
  set preEffectVerticalSpacing(v) {
    this._preEffectVerticalSpacing = v;
  }
  get postEffectVerticalSpacing() {
    return this._postEffectVerticalSpacing;
  }
  set postEffectVerticalSpacing(v) {
    this._postEffectVerticalSpacing = v;
  }
  get effectAdjustDelta() {
    return this._effectAdjustDelta;
  }
  set effectAdjustDelta(v) {
    this._effectAdjustDelta = v;
  }
  get tieEffectVerticalPadding() {
    return this._tieEffectVerticalPadding;
  }
  set tieEffectVerticalPadding(v) {
    this._tieEffectVerticalPadding = v;
  }
  get tieHorizontalPadding() {
    return this._tieHorizontalPadding;
  }
  set tieHorizontalPadding(v) {
    this._tieHorizontalPadding = v;
  }
  get tieHorizontalPaddingDotted() {
    return this._tieHorizontalPaddingDotted;
  }
  set tieHorizontalPaddingDotted(v) {
    this._tieHorizontalPaddingDotted = v;
  }
  get slideHorizontalPadding() {
    return this._slideHorizontalPadding;
  }
  set slideHorizontalPadding(v) {
    this._slideHorizontalPadding = v;
  }
  get tieVerticalPaddingOnLine() {
    return this._tieVerticalPaddingOnLine;
  }
  set tieVerticalPaddingOnLine(v) {
    this._tieVerticalPaddingOnLine = v;
  }
  get tieHalfMaxHeightWidth() {
    return this._tieHalfMaxHeightWidth;
  }
  set tieHalfMaxHeightWidth(v) {
    this._tieHalfMaxHeightWidth = v;
  }
  get tieHalfMaxShoulderWidth() {
    return this._tieHalfMaxShoulderWidth;
  }
  set tieHalfMaxShoulderWidth(v) {
    this._tieHalfMaxShoulderWidth = v;
  }
  get tieMaxShoulder() {
    return this._tieMaxShoulder;
  }
  set tieMaxShoulder(v) {
    this._tieMaxShoulder = v;
  }
  get tieMaxStroke() {
    return this._tieMaxStroke;
  }
  set tieMaxStroke(v) {
    this._tieMaxStroke = v;
  }
  get slideStrokeBias() {
    return this._slideStrokeBias;
  }
  set slideStrokeBias(v) {
    this._slideStrokeBias = v;
  }
  get slideThickness() {
    return this._slideThickness;
  }
  set slideThickness(v) {
    this._slideThickness = v;
  }
  get bendArrowHeight() {
    return this._bendArrowHeight;
  }
  set bendArrowHeight(v) {
    this._bendArrowHeight = v;
  }
  get bendArrowWidth() {
    return this._bendArrowWidth;
  }
  set bendArrowWidth(v) {
    this._bendArrowWidth = v;
  }
  get tieSingleNoteEnabled() {
    return this._tieSingleNoteEnabled;
  }
  set tieSingleNoteEnabled(v) {
    this._tieSingleNoteEnabled = v;
  }
  get tieSingleNoteBelowSpacing() {
    return this._tieSingleNoteBelowSpacing;
  }
  set tieSingleNoteBelowSpacing(v) {
    this._tieSingleNoteBelowSpacing = v;
  }
  get tieSingleNoteCenterPadding() {
    return this._tieSingleNoteCenterPadding;
  }
  set tieSingleNoteCenterPadding(v) {
    this._tieSingleNoteCenterPadding = v;
  }
  get tieStaffLineDither() {
    return this._tieStaffLineDither;
  }
  set tieStaffLineDither(v) {
    this._tieStaffLineDither = v;
  }
  get tieMinimumVerticalSpacing() {
    return this._tieMinimumVerticalSpacing;
  }
  set tieMinimumVerticalSpacing(v) {
    this._tieMinimumVerticalSpacing = v;
  }
  get tieHeight() {
    return this._tieHeight;
  }
  set tieHeight(v) {
    this._tieHeight = v;
  }
  get slurHalfMaxHeightWidth() {
    return this._slurHalfMaxHeightWidth;
  }
  set slurHalfMaxHeightWidth(v) {
    this._slurHalfMaxHeightWidth = v;
  }
  get slurHeight() {
    return this._slurHeight;
  }
  set slurHeight(v) {
    this._slurHeight = v;
  }
  get slurTolerance() {
    return this._slurTolerance;
  }
  set slurTolerance(v) {
    this._slurTolerance = v;
  }
  get slurArticulationPadding() {
    return this._slurArticulationPadding;
  }
  set slurArticulationPadding(v) {
    this._slurArticulationPadding = v;
  }
  get slurPadding() {
    return this._slurPadding;
  }
  set slurPadding(v) {
    this._slurPadding = v;
  }
  get slurMinNormalizedHeight() {
    return this._slurMinNormalizedHeight;
  }
  set slurMinNormalizedHeight(v) {
    this._slurMinNormalizedHeight = v;
  }
  get hairpinThickness() {
    return this._hairpinThickness;
  }
  set hairpinThickness(v) {
    this._hairpinThickness = v;
  }
  get hairpinLongThreshold() {
    return this._hairpinLongThreshold;
  }
  set hairpinLongThreshold(v) {
    this._hairpinLongThreshold = v;
  }
  get hairpinShortEndGap() {
    return this._hairpinShortEndGap;
  }
  set hairpinShortEndGap(v) {
    this._hairpinShortEndGap = v;
  }
  get hairpinLongEndGap() {
    return this._hairpinLongEndGap;
  }
  set hairpinLongEndGap(v) {
    this._hairpinLongEndGap = v;
  }
  get hairpinBreakGap() {
    return this._hairpinBreakGap;
  }
  set hairpinBreakGap(v) {
    this._hairpinBreakGap = v;
  }
  get hairpinPadding() {
    return this._hairpinPadding;
  }
  set hairpinPadding(v) {
    this._hairpinPadding = v;
  }
  get hairpinEndExpressionPadding() {
    return this._hairpinEndExpressionPadding;
  }
  set hairpinEndExpressionPadding(v) {
    this._hairpinEndExpressionPadding = v;
  }
  get hairpinStartExpressionPadding() {
    return this._hairpinStartExpressionPadding;
  }
  set hairpinStartExpressionPadding(v) {
    this._hairpinStartExpressionPadding = v;
  }
  get hairpinExpressionPaddingTop() {
    return this._hairpinExpressionPaddingTop;
  }
  set hairpinExpressionPaddingTop(v) {
    this._hairpinExpressionPaddingTop = v;
  }
  get hairpinMinimumWidth() {
    return this._hairpinMinimumWidth;
  }
  set hairpinMinimumWidth(v) {
    this._hairpinMinimumWidth = v;
  }
  get trillAccidentalScale() {
    return this._trillAccidentalScale;
  }
  set trillAccidentalScale(v) {
    this._trillAccidentalScale = v;
  }
  get trillAccidentalYSpacing() {
    return this._trillAccidentalYSpacing;
  }
  set trillAccidentalYSpacing(v) {
    this._trillAccidentalYSpacing = v;
  }
  get trillAccidentalXSpacing() {
    return this._trillAccidentalXSpacing;
  }
  set trillAccidentalXSpacing(v) {
    this._trillAccidentalXSpacing = v;
  }
  get beamThickness() {
    return this._beamThickness;
  }
  set beamThickness(v) {
    this._beamThickness = v;
  }
  get beamSpacing() {
    return this._beamSpacing;
  }
  set beamSpacing(v) {
    this._beamSpacing = v;
  }
  get nearCrossoverOffset() {
    return this._nearCrossoverOffset;
  }
  set nearCrossoverOffset(v) {
    this._nearCrossoverOffset = v;
  }
  get crossoverOffset() {
    return this._crossoverOffset;
  }
  set crossoverOffset(v) {
    this._crossoverOffset = v;
  }
  get wholeCrossoverOffset() {
    return this._wholeCrossoverOffset;
  }
  set wholeCrossoverOffset(v) {
    this._wholeCrossoverOffset = v;
  }
  get articulationPadding() {
    return this._articulationPadding;
  }
  set articulationPadding(v) {
    this._articulationPadding = v;
  }
  get articulationSpacing() {
    return this._articulationSpacing;
  }
  set articulationSpacing(v) {
    this._articulationSpacing = v;
  }
  get rightArticulationPadding() {
    return this._rightArticulationPadding;
  }
  set rightArticulationPadding(v) {
    this._rightArticulationPadding = v;
  }
  get annotationIconHeight() {
    return this._annotationIconHeight;
  }
  set annotationIconHeight(v) {
    this._annotationIconHeight = v;
  }
  get tupletBracketHeight() {
    return this._tupletBracketHeight;
  }
  set tupletBracketHeight(v) {
    this._tupletBracketHeight = v;
  }
  get tupletHeight() {
    return this._tupletHeight;
  }
  set tupletHeight(v) {
    this._tupletHeight = v;
  }
  get tupletNumberPadding() {
    return this._tupletNumberPadding;
  }
  set tupletNumberPadding(v) {
    this._tupletNumberPadding = v;
  }
  get fractionalBeamLength() {
    return this._fractionalBeamLength;
  }
  set fractionalBeamLength(v) {
    this._fractionalBeamLength = v;
  }
  get tremoloInsertLength() {
    return this._tremoloInsertLength;
  }
  set tremoloInsertLength(v) {
    this._tremoloInsertLength = v;
  }
  get splitCodaByDefault() {
    return this._splitCodaByDefault;
  }
  set splitCodaByDefault(v) {
    this._splitCodaByDefault = v;
  }
  get splitSystemGap() {
    return this._splitSystemGap;
  }
  set splitSystemGap(v) {
    this._splitSystemGap = v;
  }
  get titleY() {
    return this._titleY;
  }
  set titleY(v) {
    this._titleY = v;
  }
  get titleSize() {
    return this._titleSize;
  }
  set titleSize(v) {
    this._titleSize = v;
  }
  get titleBold() {
    return this._titleBold;
  }
  set titleBold(v) {
    this._titleBold = v;
  }
  get subtitleSize() {
    return this._subtitleSize;
  }
  set subtitleSize(v) {
    this._subtitleSize = v;
  }
  get supertitleSize() {
    return this._supertitleSize;
  }
  set supertitleSize(v) {
    this._supertitleSize = v;
  }
  get subtitleBold() {
    return this._subtitleBold;
  }
  set subtitleBold(v) {
    this._subtitleBold = v;
  }
  get supertitleBold() {
    return this._supertitleBold;
  }
  set supertitleBold(v) {
    this._supertitleBold = v;
  }
  get composerBold() {
    return this._composerBold;
  }
  set composerBold(v) {
    this._composerBold = v;
  }
  get lyricistBold() {
    return this._lyricistBold;
  }
  set lyricistBold(v) {
    this._lyricistBold = v;
  }
  get lyricsBold() {
    return this._lyricsBold;
  }
  set lyricsBold(v) {
    this._lyricsBold = v;
  }
  get lyricsItalic() {
    return this._lyricsItalic;
  }
  set lyricsItalic(v) {
    this._lyricsItalic = v;
  }
  get copyrightBold() {
    return this._copyrightBold;
  }
  set copyrightBold(v) {
    this._copyrightBold = v;
  }
  get footerBold() {
    return this._footerBold;
  }
  set footerBold(v) {
    this._footerBold = v;
  }
  get composerY() {
    return this._composerY;
  }
  set composerY(v) {
    this._composerY = v;
  }
  get composerSize() {
    return this._composerSize;
  }
  set composerSize(v) {
    this._composerSize = v;
  }
  get composerBottomPadding() {
    return this._composerBottomPadding;
  }
  set composerBottomPadding(v) {
    this._composerBottomPadding = v;
  }
  get arrangerBottomPadding() {
    return this._arrangerBottomPadding;
  }
  set arrangerBottomPadding(v) {
    this._arrangerBottomPadding = v;
  }
  get arrangerPlaceholderBottomPadding() {
    return this._arrangerPlaceholderBottomPadding;
  }
  set arrangerPlaceholderBottomPadding(v) {
    this._arrangerPlaceholderBottomPadding = v;
  }
  get pageNumberY() {
    return this._pageNumberY;
  }
  set pageNumberY(v) {
    this._pageNumberY = v;
  }
  get pageNumberSize() {
    return this._pageNumberSize;
  }
  set pageNumberSize(v) {
    this._pageNumberSize = v;
  }
  get pageNumberIncludesTitle() {
    return this._pageNumberIncludesTitle;
  }
  set pageNumberIncludesTitle(v) {
    this._pageNumberIncludesTitle = v;
  }
  get copyrightSize() {
    return this._copyrightSize;
  }
  set copyrightSize(v) {
    this._copyrightSize = v;
  }
  get showCopyrightOnAllPages() {
    return this._showCopyrightOnAllPages;
  }
  set showCopyrightOnAllPages(v) {
    this._showCopyrightOnAllPages = v;
  }
  get textProportional() {
    return this._textProportional;
  }
  set textProportional(v) {
    this._textProportional = v;
  }
  get footerSize() {
    return this._footerSize;
  }
  set footerSize(v) {
    this._footerSize = v;
  }
  get footerColor() {
    return this._footerColor;
  }
  set footerColor(v) {
    this._footerColor = v;
  }
  get titlePageTopPadding() {
    return this._titlePageTopPadding;
  }
  set titlePageTopPadding(v) {
    this._titlePageTopPadding = v;
  }
  get titlePageSubtitlePadding() {
    return this._titlePageSubtitlePadding;
  }
  set titlePageSubtitlePadding(v) {
    this._titlePageSubtitlePadding = v;
  }
  get titlePageSupertitlePadding() {
    return this._titlePageSupertitlePadding;
  }
  set titlePageSupertitlePadding(v) {
    this._titlePageSupertitlePadding = v;
  }
  get pageTopPadding() {
    return this._pageTopPadding;
  }
  set pageTopPadding(v) {
    this._pageTopPadding = v;
  }
  get titlePageFirstStaffPadding() {
    return this._titlePageFirstStaffPadding;
  }
  set titlePageFirstStaffPadding(v) {
    this._titlePageFirstStaffPadding = v;
  }
  get titlePagePromptSize() {
    return this._titlePagePromptSize;
  }
  set titlePagePromptSize(v) {
    this._titlePagePromptSize = v;
  }
  get titlePagePromptPadding() {
    return this._titlePagePromptPadding;
  }
  set titlePagePromptPadding(v) {
    this._titlePagePromptPadding = v;
  }
  get staffLabelPadding() {
    return this._staffLabelPadding;
  }
  set staffLabelPadding(v) {
    this._staffLabelPadding = v;
  }
  get grandStaffPadding() {
    return this._grandStaffPadding;
  }
  set grandStaffPadding(v) {
    this._grandStaffPadding = v;
  }
  get pageNameSize() {
    return this._pageNameSize;
  }
  set pageNameSize(v) {
    this._pageNameSize = v;
  }
  get tempoSymbolSize() {
    return this._tempoSymbolSize;
  }
  set tempoSymbolSize(v) {
    this._tempoSymbolSize = v;
  }
  get tempoSymbolScale() {
    return this._tempoSymbolScale;
  }
  set tempoSymbolScale(v) {
    this._tempoSymbolScale = v;
  }
  get tempoFirstMeasureXOffset() {
    return this._tempoFirstMeasureXOffset;
  }
  set tempoFirstMeasureXOffset(v) {
    this._tempoFirstMeasureXOffset = v;
  }
  get tempoTimeSignatureXOffset() {
    return this._tempoTimeSignatureXOffset;
  }
  set tempoTimeSignatureXOffset(v) {
    this._tempoTimeSignatureXOffset = v;
  }
  get tempoTimeSignatureXOffsetFirstMeasure() {
    return this._tempoTimeSignatureXOffsetFirstMeasure;
  }
  set tempoTimeSignatureXOffsetFirstMeasure(v) {
    this._tempoTimeSignatureXOffsetFirstMeasure = v;
  }
  get tempoXOffset() {
    return this._tempoXOffset;
  }
  set tempoXOffset(v) {
    this._tempoXOffset = v;
  }
  get tempoXOffsetFirstMeasure() {
    return this._tempoXOffsetFirstMeasure;
  }
  set tempoXOffsetFirstMeasure(v) {
    this._tempoXOffsetFirstMeasure = v;
  }
  get tempoUnitOffset() {
    return this._tempoUnitOffset;
  }
  set tempoUnitOffset(v) {
    this._tempoUnitOffset = v;
  }
  get tempoTextOffset() {
    return this._tempoTextOffset;
  }
  set tempoTextOffset(v) {
    this._tempoTextOffset = v;
  }
  get tempoBold() {
    return this._tempoBold;
  }
  set tempoBold(v) {
    this._tempoBold = v;
  }
  get chordSymbolSize() {
    return this._chordSymbolSize;
  }
  set chordSymbolSize(v) {
    this._chordSymbolSize = v;
  }
  get repeatEndingFontSize() {
    return this._repeatEndingFontSize;
  }
  set repeatEndingFontSize(v) {
    this._repeatEndingFontSize = v;
  }
  get keepChordSymbolsApart() {
    return this._keepChordSymbolsApart;
  }
  set keepChordSymbolsApart(v) {
    this._keepChordSymbolsApart = v;
  }
  get centerChordSymbols() {
    return this._centerChordSymbols;
  }
  set centerChordSymbols(v) {
    this._centerChordSymbols = v;
  }
  get chordBelowStaffOffset() {
    return this._chordBelowStaffOffset;
  }
  set chordBelowStaffOffset(v) {
    this._chordBelowStaffOffset = v;
  }
  get chordBelowStaffOffsetTab() {
    return this._chordBelowStaffOffsetTab;
  }
  set chordBelowStaffOffsetTab(v) {
    this._chordBelowStaffOffsetTab = v;
  }
  get expressionTextSize() {
    return this._expressionTextSize;
  }
  set expressionTextSize(v) {
    this._expressionTextSize = v;
  }
  get expressionTextSpacing() {
    return this._expressionTextSpacing;
  }
  set expressionTextSpacing(v) {
    this._expressionTextSpacing = v;
  }
  get performanceTextSize() {
    return this._performanceTextSize;
  }
  set performanceTextSize(v) {
    this._performanceTextSize = v;
  }
  get labelTextSize() {
    return this._labelTextSize;
  }
  set labelTextSize(v) {
    this._labelTextSize = v;
  }
  get performanceTextSpacing() {
    return this._performanceTextSpacing;
  }
  set performanceTextSpacing(v) {
    this._performanceTextSpacing = v;
  }
  get lyricsSize() {
    return this._lyricsSize;
  }
  set lyricsSize(v) {
    this._lyricsSize = v;
  }
  get lyricsDescent() {
    return this._lyricsDescent;
  }
  set lyricsDescent(v) {
    this._lyricsDescent = v;
  }
  get lyricsAscent() {
    return this._lyricsAscent;
  }
  set lyricsAscent(v) {
    this._lyricsAscent = v;
  }
  get blockSize() {
    return this._blockSize;
  }
  set blockSize(v) {
    this._blockSize = v;
  }
  get blockHeaderWeight() {
    return this._blockHeaderWeight;
  }
  set blockHeaderWeight(v) {
    this._blockHeaderWeight = v;
  }
  get blockColumnWeight() {
    return this._blockColumnWeight;
  }
  set blockColumnWeight(v) {
    this._blockColumnWeight = v;
  }
  get mouseNotationPadding() {
    return this._mouseNotationPadding;
  }
  set mouseNotationPadding(v) {
    this._mouseNotationPadding = v;
  }
  get mouseNoteEntryStemMargin() {
    return this._mouseNoteEntryStemMargin;
  }
  set mouseNoteEntryStemMargin(v) {
    this._mouseNoteEntryStemMargin = v;
  }
  get mouseNoteEntrySlopWidth() {
    return this._mouseNoteEntrySlopWidth;
  }
  set mouseNoteEntrySlopWidth(v) {
    this._mouseNoteEntrySlopWidth = v;
  }
  get mouseNoteEntrySlopHeight() {
    return this._mouseNoteEntrySlopHeight;
  }
  set mouseNoteEntrySlopHeight(v) {
    this._mouseNoteEntrySlopHeight = v;
  }
  get effectiveCreditSize() {
    if (this.creditLineSpacing > 0) {
      return this.creditLineSpacing;
    } else {
      return this.lineSpacing;
    }
  }
  get creditFontSize() {
    if (this.textProportional) {
      return StaffMetrics.DEFAULT_STAFF_HEIGHT * this.effectiveCreditSize / StaffMetrics.DEFAULT_LINE_SPACING;
    } else {
      return StaffMetrics.DEFAULT_STAFF_HEIGHT / StaffMetrics.DEFAULT_LINE_SPACING;
    }
  }
  get baseFontSize() {
    return StaffMetrics.DEFAULT_STAFF_HEIGHT * this.lineSpacing / StaffMetrics.DEFAULT_LINE_SPACING;
  }
  get partDisplayRespectSystemBreak() {
    return this._partDisplayRespectSystemBreak;
  }
  set partDisplayRespectSystemBreak(v) {
    this._partDisplayRespectSystemBreak = v;
  }
  get showPartNames() {
    return this._showPartNames;
  }
  set showPartNames(v) {
    this._showPartNames = v;
  }
  get partNamePosition() {
    return this._partNamePosition;
  }
  set partNamePosition(v) {
    this._partNamePosition = v;
  }
  get showPartNameOnEveryPage() {
    return this._showPartNameOnEveryPage;
  }
  set showPartNameOnEveryPage(v) {
    this._showPartNameOnEveryPage = v;
  }
  get spaceAbovePerformanceText() {
    return this._spaceAbovePerformanceText;
  }
  set spaceAbovePerformanceText(v) {
    this._spaceAbovePerformanceText = v;
  }
  get spaceAboveChordFrames() {
    return this._spaceAboveChordFrames;
  }
  set spaceAboveChordFrames(v) {
    this._spaceAboveChordFrames = v;
  }
  get spaceAboveChords() {
    return this._spaceAboveChords;
  }
  set spaceAboveChords(v) {
    this._spaceAboveChords = v;
  }
  get showChordDiagrams() {
    return this._showChordDiagrams;
  }
  set showChordDiagrams(v) {
    this._showChordDiagrams = v;
  }
  get cueScale() {
    return this._cueScale;
  }
  set cueScale(v) {
    this._cueScale = v;
  }
  get tabFretWidth() {
    return this._tabFretWidth;
  }
  set tabFretWidth(v) {
    this._tabFretWidth = v;
  }
  get tabFretBackgroundPadding() {
    return this._tabFretBackgroundPadding;
  }
  set tabFretBackgroundPadding(v) {
    this._tabFretBackgroundPadding = v;
  }
  get stemDecorationVerticalStemOffset() {
    return this._stemDecorationVerticalStemOffset;
  }
  set stemDecorationVerticalStemOffset(v) {
    this._stemDecorationVerticalStemOffset = v;
  }
  get stemDecorationVerticalNoteOffset() {
    return this._stemDecorationVerticalNoteOffset;
  }
  set stemDecorationVerticalNoteOffset(v) {
    this._stemDecorationVerticalNoteOffset = v;
  }
  get tremoloVerticalStemOffset() {
    return this._tremoloVerticalStemOffset;
  }
  set tremoloVerticalStemOffset(v) {
    this._tremoloVerticalStemOffset = v;
  }
  get tremoloVerticalNoteOffset() {
    return this._tremoloVerticalNoteOffset;
  }
  set tremoloVerticalNoteOffset(v) {
    this._tremoloVerticalNoteOffset = v;
  }
  get ignoreSystemMargins() {
    return this._ignoreSystemMargins;
  }
  set ignoreSystemMargins(v) {
    this._ignoreSystemMargins = v;
  }
  get minVerticalGap() {
    return this._minVerticalGap;
  }
  set minVerticalGap(v) {
    this._minVerticalGap = v;
  }
  get systemStretch() {
    return this._systemStretch;
  }
  set systemStretch(v) {
    this._systemStretch = v;
  }
  get topStaffGap() {
    return this._topStaffGap;
  }
  set topStaffGap(v) {
    this._topStaffGap = v;
  }
  get showBarNumbersOnEachMeasure() {
    return this._showBarNumbersOnEachMeasure;
  }
  set showBarNumbersOnEachMeasure(v) {
    this._showBarNumbersOnEachMeasure = v;
  }
  get showBarNumbers() {
    return this._showBarNumbers;
  }
  set showBarNumbers(v) {
    this._showBarNumbers = v;
  }
  get chordFrameStringSpacing() {
    return this._chordFrameStringSpacing;
  }
  set chordFrameStringSpacing(v) {
    this._chordFrameStringSpacing = v;
  }
  get chordFrameFretSpacing() {
    return this._chordFrameFretSpacing;
  }
  set chordFrameFretSpacing(v) {
    this._chordFrameFretSpacing = v;
  }
  get lineNotationPadding() {
    return this._lineNotationPadding;
  }
  set lineNotationPadding(v) {
    this._lineNotationPadding = v;
  }
  get lineNotationThickness() {
    return this._lineNotationThickness;
  }
  set lineNotationThickness(v) {
    this._lineNotationThickness = v;
  }
  get lineNotationYPosition() {
    return this._lineNotationYPosition;
  }
  set lineNotationYPosition(v) {
    this._lineNotationYPosition = v;
  }
  get lineNotationBracketHeight() {
    return this._lineNotationBracketHeight;
  }
  set lineNotationBracketHeight(v) {
    this._lineNotationBracketHeight = v;
  }
  get lineNotationFontSize() {
    return this._lineNotationFontSize;
  }
  set lineNotationFontSize(v) {
    this._lineNotationFontSize = v;
  }
  get lyricsNotesPadding() {
    return this._lyricsNotesPadding;
  }
  set lyricsNotesPadding(v) {
    this._lyricsNotesPadding = v;
  }
  get verticalAutoSpace() {
    return this._verticalAutoSpace;
  }
  set verticalAutoSpace(v) {
    this._verticalAutoSpace = v;
  }
  get partNameSize() {
    return this._partNameSize;
  }
  set partNameSize(v) {
    this._partNameSize = v;
  }
  get partNameAtTheTopOffset() {
    return this._partNameAtTheTopOffset;
  }
  set partNameAtTheTopOffset(v) {
    this._partNameAtTheTopOffset = v;
  }
  get tabGraceScale() {
    return this._tabGraceScale;
  }
  set tabGraceScale(v) {
    this._tabGraceScale = v;
  }
  get graceScale() {
    return this._graceScale;
  }
  set graceScale(v) {
    this._graceScale = v;
  }
  get layoutSpacing() {
    return this._layoutSpacing;
  }
  set layoutSpacing(v) {
    this._layoutSpacing = v;
  }
  get chordSymbolFont() {
    return this._chordSymbolFont;
  }
  set chordSymbolFont(v) {
    this._chordSymbolFont = v;
  }
  get staffTextFont() {
    return this._staffTextFont;
  }
  set staffTextFont(v) {
    this._staffTextFont = v;
  }
  get lyricsFont() {
    return this._lyricsFont;
  }
  set lyricsFont(v) {
    this._lyricsFont = v;
  }
  get tempoFont() {
    return this._tempoFont;
  }
  set tempoFont(v) {
    this._tempoFont = v;
  }
  get copyrightFont() {
    return this._copyrightFont;
  }
  set copyrightFont(v) {
    this._copyrightFont = v;
  }
  get footerFont() {
    return this._footerFont;
  }
  set footerFont(v) {
    this._footerFont = v;
  }
  get textFont() {
    return this._textFont;
  }
  set textFont(v) {
    this._textFont = v;
  }
  get supertitleFont() {
    return this._supertitleFont;
  }
  set supertitleFont(v) {
    this._supertitleFont = v;
  }
  get titleFont() {
    return this._titleFont;
  }
  set titleFont(v) {
    this._titleFont = v;
  }
  get subtitleFont() {
    return this._subtitleFont;
  }
  set subtitleFont(v) {
    this._subtitleFont = v;
  }
  get composerFont() {
    return this._composerFont;
  }
  set composerFont(v) {
    this._composerFont = v;
  }
  get lyricistFont() {
    return this._lyricistFont;
  }
  set lyricistFont(v) {
    this._lyricistFont = v;
  }
  get arrangerFont() {
    return this._arrangerFont;
  }
  set arrangerFont(v) {
    this._arrangerFont = v;
  }
  get lineNotationDistanceAboveStaff() {
    return this._lineNotationDistanceAboveStaff;
  }
  set lineNotationDistanceAboveStaff(v) {
    this._lineNotationDistanceAboveStaff = v;
  }
  get lineNotationDistanceBelowStaff() {
    return this._lineNotationDistanceBelowStaff;
  }
  set lineNotationDistanceBelowStaff(v) {
    this._lineNotationDistanceBelowStaff = v;
  }
  get showTabRhythm() {
    return this._showTabRhythm;
  }
  set showTabRhythm(v) {
    this._showTabRhythm = v;
  }
  get ignoreStemDirection() {
    return this._ignoreStemDirection;
  }
  set ignoreStemDirection(v) {
    this._ignoreStemDirection = v;
  }
  getDurationWidth(duration) {
    if (duration === 0) return 0;
    const durationValue = Math.min(this.spacings.length - 1, _value_notation__WEBPACK_IMPORTED_MODULE_3__["default"].durationToValue(duration));
    if (duration === 1 << durationValue || durationValue === this.spacings.length - 1) {
      return this.spacings[durationValue];
    } else {
      return Math.sqrt(this.spacings[durationValue] * this.spacings[durationValue + 1]);
    }
  }
  tieStandardHeight(widthHeight) {
    return 0.25 + (2 / (1 + Math.exp(-Math.abs(widthHeight) / this.tieHalfMaxHeightWidth)) - 1) * this.tieHeight;
  }
  tieShoulder(offset) {
    return 0.25 - (2 / (1 + Math.exp(-Math.abs(offset) / this.tieHalfMaxShoulderWidth)) - 1) * this.tieMaxShoulder;
  }
  slurStandardHeight(widthHeight) {
    return (2 / (1 + Math.exp(-Math.abs(widthHeight) / this.slurHalfMaxHeightWidth)) - 1) * this.slurHeight;
  }
  createFoundryMetrics() {
    const foundryMetrics = new _glyph_foundry_metrics__WEBPACK_IMPORTED_MODULE_1__["default"]();
    foundryMetrics.sizeUnit = this.lineSpacing;
    foundryMetrics.lineSpacing = this.lineSpacing;
    foundryMetrics.stemThickness = this.stemThickness;
    return foundryMetrics;
  }
}

/***/ }),

/***/ 42605:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/staff-position.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffPosition)
/* harmony export */ });
/* harmony import */ var _measure_position__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./measure-position */ 83067);

class StaffPosition extends _measure_position__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get staffIndex() {
    return this._staffIndex;
  }
  get dx() {
    return this._dx;
  }
  get dy() {
    return this._dy;
  }
  constructor(staffIndex, measureIndex, position, dx = 0, dy = 0) {
    super(measureIndex, position);
    this._staffIndex = staffIndex;
    this._dx = dx;
    this._dy = dy;
  }
  toString() {
    return '[staff: ' + this.staffIndex + ', measure: ' + this.measureIndex + ', pos: ' + this.position + ', dx: ' + this._dx + ', dy: ' + this._dy + ']';
  }
}

/***/ }),

/***/ 34846:
/*!****************************************************!*\
  !*** ./src/app/note-editor/models/staff-tuning.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffTuning)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./note */ 14816);



class StaffTuning {
  constructor() {
    this._staffNotes = [];
    this._capo = 0;
  }
  get staffNotes() {
    return this._staffNotes;
  }
  get capo() {
    return this._capo;
  }
  setStaffNotesFromStrings(pitchStrings, capo = 0) {
    this._staffNotes = [];
    for (let i = 0; i < pitchStrings.length; i++) {
      const pitchString = pitchStrings[i];
      this._staffNotes.push(new _note__WEBPACK_IMPORTED_MODULE_2__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchFromString(pitchString)).transposeInterval(_interval__WEBPACK_IMPORTED_MODULE_1__["default"].fromPitches(capo)));
    }
    this._capo = capo;
  }
  static defaultGuitarTuning() {
    const staffTuning = new StaffTuning();
    staffTuning.setStaffNotesFromStrings(['E2', 'A2', 'D3', 'G3', 'B3', 'E4']);
    return staffTuning;
  }
  static defaultBassTuning() {
    const staffTuning = new StaffTuning();
    staffTuning.setStaffNotesFromStrings(['E1', 'A1', 'D2', 'G2']);
    return staffTuning;
  }
}

/***/ }),

/***/ 52472:
/*!**************************************************!*\
  !*** ./src/app/note-editor/models/staff-type.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffType)
/* harmony export */ });
// import TablatureClef from './tablature-clef';
class StaffType {
  static get DEFAULT_NUM_LINES() {
    return 5;
  }
  static get STANDARD_TYPE() {
    return 'standard';
  }
  static get NUM_LINES_STANDARD() {
    return 5;
  }
  static get GUITAR_TAB_TYPE() {
    return 'guitarTab';
  }
  static get NUM_LINES_GUITAR_TAB() {
    return 6;
  }
  static get BASS_TAB_TYPE() {
    return 'bassTab';
  }
  static get NUM_LINES_BASS_TAB() {
    return 4;
  }
  static get VALID_TYPES() {
    return StaffType.valid_types;
  }
  static get TAB_TYPES() {
    return StaffType.tab_types;
  }
  static get DEFAULT_LINE_SPACING() {
    return 1;
  }
  static get TAB_LINE_SPACING() {
    return 1.5;
  }
  get numLines() {
    return this._numLines;
  }
  set numLines(v) {
    this._numLines = v;
  }
  get lineSpacing() {
    return this._lineSpacing;
  }
  set lineSpacing(v) {
    this._lineSpacing = v;
  }
  get staffTuning() {
    return this._staffTuning;
  }
  set staffTuning(v) {
    this._staffTuning = v;
  }
  get type() {
    return this._type;
  }
  set type(v) {
    if (StaffType.VALID_TYPES.indexOf(v) >= 0) {
      this._type = v;
    }
  }
  get height() {
    return (this.numLines - 1) * this.lineSpacing;
  }
  constructor(numLines = 0, staffTuning = null) {
    // super();
    this._numLines = StaffType.DEFAULT_NUM_LINES;
    this._lineSpacing = StaffType.DEFAULT_LINE_SPACING;
    this._staffTuning = null;
    this._type = StaffType.STANDARD_TYPE;
    this.staffTuning = staffTuning;
    if (numLines > 0) {
      this.numLines = numLines;
    }
  }
  // static createTypeFromClef(clef: Clef) {
  //   let type;
  //   if (clef instanceof TablatureClef) {
  //     type = StaffType.GUITAR_TAB_TYPE;
  //   } else {
  //     type = StaffType.STANDARD_TYPE;
  //   }
  //   return StaffType.createType(type, clef.numLines);
  // }
  static createTypeFromLineCount(lineCount) {
    let type = StaffType.STANDARD_TYPE;
    if (lineCount === StaffType.NUM_LINES_BASS_TAB) {
      type = StaffType.BASS_TAB_TYPE;
    } else if (lineCount === StaffType.NUM_LINES_GUITAR_TAB) {
      type = StaffType.GUITAR_TAB_TYPE;
    }
    return StaffType.createType(type, lineCount);
  }
  static createType(type, numLines) {
    if (StaffType.VALID_TYPES.indexOf(type) < 0) {
      type = StaffType.STANDARD_TYPE;
    }
    const staffType = new StaffType();
    staffType.type = type;
    staffType.numLines = numLines;
    if (type === StaffType.GUITAR_TAB_TYPE || type === StaffType.BASS_TAB_TYPE) {
      staffType.lineSpacing = StaffType.TAB_LINE_SPACING;
    }
    return staffType;
  }
  isTablature() {
    return StaffType.TAB_TYPES.indexOf(this._type) >= 0;
  }
}
StaffType.valid_types = [StaffType.STANDARD_TYPE, StaffType.GUITAR_TAB_TYPE, StaffType.BASS_TAB_TYPE];
StaffType.tab_types = [StaffType.GUITAR_TAB_TYPE, StaffType.BASS_TAB_TYPE];

/***/ }),

/***/ 35126:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/staff.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Staff)
/* harmony export */ });
/* harmony import */ var _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../processing/rhythm-processor */ 29722);
/* harmony import */ var _utils_uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/uuid */ 1275);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _chord_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chord-symbol */ 72410);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _measure__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./measure */ 29839);
/* harmony import */ var _measure_position__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measure-position */ 83067);
/* harmony import */ var _measure_repeat__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./measure-repeat */ 27506);
/* harmony import */ var _model__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./model */ 10924);
/* harmony import */ var _model_event_kind__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./model-event-kind */ 21151);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./noteset */ 46605);
/* harmony import */ var _slur__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./slur */ 85888);
/* harmony import */ var _span_notation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./span-notation */ 43586);
/* harmony import */ var _staff_type__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./staff-type */ 52472);
/* harmony import */ var _tacet__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./tacet */ 51744);
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./tuplet */ 69519);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./value-notation */ 56170);
/* harmony import */ var _voice__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./voice */ 38445);



















class Staff extends _model__WEBPACK_IMPORTED_MODULE_8__["default"] {
  get type() {
    return this._type;
  }
  set type(v) {
    this._type = v;
  }
  get overrideClef() {
    return this._overrideClef;
  }
  set overrideClef(v) {
    this._overrideClef = v;
  }
  get score() {
    return this.parent;
  }
  get part() {
    return this._part;
  }
  set part(v) {
    this._part = v;
    if (this.score) {
      this.score.registerPart(this._part);
    }
  }
  get lastLyricLine() {
    const lastLyricLines = this.measures.map(measure => measure.lastLyricLine);
    if (lastLyricLines.length > 0) {
      return Math.max(...lastLyricLines);
    } else {
      return null;
    }
  }
  get isSystemStaff() {
    return this.score && this.score.systemStaff === this;
  }
  get totalMeasures() {
    return this.numChildren;
  }
  get lastMeasureIndex() {
    return this.totalMeasures - 1;
  }
  get measures() {
    return this._children;
  }
  get firstInPart() {
    return this.part.staves[0] === this;
  }
  get lastInPart() {
    return this.part.staves[this.part.staves.length - 1] === this;
  }
  get penultimateInPart() {
    return this.part.staves[this.part.staves.length - 2] === this;
  }
  get hasSlurs() {
    for (let i = 0; i < this._spanNotations.length; i++) {
      const spanNotation = this._spanNotations[i];
      for (let j = 0; j < spanNotation.length; j++) {
        const note = spanNotation[j];
        if (note instanceof _slur__WEBPACK_IMPORTED_MODULE_12__["default"]) {
          return true;
        }
      }
    }
    return false;
  }
  constructor() {
    super();
    this._type = new _staff_type__WEBPACK_IMPORTED_MODULE_14__["default"]();
    this._overrideClef = null;
    this._spanNotations = [];
    this.id = (0,_utils_uuid__WEBPACK_IMPORTED_MODULE_1__.generateUUID)();
    this.seenLyrics = false;
  }
  spanNotationsAt(idx) {
    return this._spanNotations[idx];
  }
  getMeasureAt(idx) {
    return this.getChildAt(idx);
  }
  addMeasure(measure) {
    this.addChild(measure);
  }
  addMeasureAt(measure, idx) {
    for (; this.numChildren < idx;) {
      this.addMeasure(new _measure__WEBPACK_IMPORTED_MODULE_5__["default"]());
    }
    this.addChildAt(measure, idx);
  }
  addChildAt(child, idx) {
    const measure = child;
    if (!(this.score == null || this.isSystemStaff)) {
      measure.systemMeasure = this.score.systemStaff.getMeasureAt(idx);
    }
    super.addChildAt(child, idx);
    if (idx === this.numChildren - 1) {
      this._spanNotations[idx] = [];
      if (idx > 0) {
        for (let i = 0; i < this._spanNotations[idx - 1].length; i++) {
          const spanNotation = this._spanNotations[idx - 1][i];
          if (spanNotation.endPosition.measureIndex >= idx) {
            this._spanNotations[idx].push(spanNotation);
          }
        }
      }
    } else {
      const notationsCopy = this._spanNotations[idx].slice();
      for (let i = 0; i < notationsCopy.length; i++) {
        const spanNotation = notationsCopy[i];
        if (spanNotation.measure.index < idx) {
          this.removeSpanNotation(spanNotation);
        }
      }
      this._spanNotations.splice(idx, 0, []);
      for (let i = 0; i < notationsCopy.length; i++) {
        const spanNotation = notationsCopy[i];
        if (spanNotation.measure.index < idx) {
          this.addSpanNotation(spanNotation);
        }
      }
    }
    for (let i = 0; i < measure.spanNotations.length; i++) {
      const spanNotation = measure.spanNotations[i];
      this.addSpanNotation(spanNotation);
    }
    if (measure.seenLyrics) {
      this.seenLyrics = true;
    }
  }
  doRemoveChildAt(idx) {
    const measure = this.getMeasureAt(idx);
    if (measure) {
      for (let i = 0; i < measure.spanNotations.length; i++) {
        const spanNotation = measure.spanNotations[i];
        this.removeSpanNotation(spanNotation);
      }
      super.doRemoveChildAt(idx);
      const notationsCopy = this._spanNotations[idx].slice();
      this._spanNotations.splice(idx, 1);
      for (let j = 0; j < notationsCopy.length; j++) {
        const spanNotation = notationsCopy[j];
        if (spanNotation.measure.index < idx) {
          this.removeSpanNotation(spanNotation);
          this.addSpanNotation(spanNotation);
        }
      }
    }
  }
  removeMeasure(measure) {
    this.removeChild(measure);
  }
  removeRepeats() {
    for (let i = 0; i < this.measures.length; i++) {
      const measure = this.measures[i];
      measure.removeRepeats();
    }
  }
  hasRepeats() {
    for (let i = 0; i < this.measures.length; i++) {
      const measure = this.measures[i];
      if (measure.hasRepeats()) {
        return true;
      }
    }
    return false;
  }
  addSpanNotation(spanNotation) {
    let measureIndex = spanNotation.measure.index;
    const endIndex = spanNotation.endPosition.measureIndex;
    while (measureIndex <= endIndex && measureIndex < this._spanNotations.length) {
      this._spanNotations[measureIndex].push(spanNotation);
      // this.dispatchSpanChange(measureIndex);// TODO
      measureIndex++;
    }
  }
  removeSpanNotation(spanNotation) {
    let measureIndex = spanNotation.measure.index;
    while (measureIndex < this._spanNotations.length) {
      const spanNotations = this._spanNotations[measureIndex];
      const index = spanNotations.indexOf(spanNotation);
      if (index < 0) {
        return;
      }
      spanNotations.splice(index, 1);
      // this.dispatchSpanChange(measureIndex);
      measureIndex++;
    }
  }
  getSpanNotations(measureIndex) {
    return this._spanNotations[measureIndex];
  }
  getPerformanceSpans(measureIndex) {
    let spanNotations = this.getSpanNotations(measureIndex);
    if (this.part == null || this.part.staves.length === 1) {
      return spanNotations;
    }
    spanNotations = spanNotations.slice();
    for (let i = 0; i < this.part.staves.length; i++) {
      const staff = this.part.staves[i];
      if (staff !== this) {
        for (let j = 0; j < staff.getSpanNotations(measureIndex).length; j++) {
          const spanNotation = staff.getSpanNotations(measureIndex)[j];
          if (spanNotation.affectsEntirePart) {
            spanNotations.push(spanNotation);
          }
        }
      }
    }
    return spanNotations;
  }
  getSpanNotationsInRange(start, end) {
    const map = new Map();
    const spanNotations = [];
    for (let measureIndex = start; measureIndex < end; measureIndex++) {
      for (let i = 0; i < this._spanNotations[measureIndex].length; i++) {
        const spanNotation = this._spanNotations[measureIndex][i];
        if (map.get(spanNotation) == null) {
          spanNotations.push(spanNotation);
          map.set(spanNotation, spanNotation);
        }
      }
    }
    return spanNotations;
  }
  mergeElement(element, measurePosition, voiceNumber) {
    let notation;
    if (element instanceof _value_notation__WEBPACK_IMPORTED_MODULE_17__["default"] && element.metrical) {
      if (element instanceof _noteset__WEBPACK_IMPORTED_MODULE_11__.NoteSet && element.notes.length === 0) {
        if (element instanceof _measure_repeat__WEBPACK_IMPORTED_MODULE_7__["default"]) {
          const measure = this.getMeasureAt(measurePosition.measureIndex);
          measure.removePositionRange(0, measure.duration, _utils_voice_number__WEBPACK_IMPORTED_MODULE_2__.VoiceNumber.UNKNOWN_VOICE_NUMBER);
          measure.removeEmptyVoices();
          notation = element.clone();
          notation.rhythmPosition = measurePosition.position;
          measure.addElement(notation, notation.lastVoiceNumber);
        }
        return;
      }
      const valueNotation = element.clone(_value_notation__WEBPACK_IMPORTED_MODULE_17__["default"]);
      if (voiceNumber !== _utils_voice_number__WEBPACK_IMPORTED_MODULE_2__.VoiceNumber.UNKNOWN_VOICE_NUMBER) {
        valueNotation.lastVoiceNumber = voiceNumber;
      }
      this.applyToMeasureRanges(measurePosition, valueNotation.rhythmDuration, function (measure, position, r, rhythmDuration, keepLyric) {
        measure.addValueNotationWithDuration(valueNotation, position, r, r < rhythmDuration, keepLyric);
      });
    } else if (element instanceof _tuplet__WEBPACK_IMPORTED_MODULE_16__["default"]) {
      const tuplet = element.clone();
      const measure = this.getMeasureAt(measurePosition.measureIndex);
      if (measurePosition.position + tuplet.rhythmDuration > measure.duration) {
        alert('A tuplet pasted across a bar line has been omitted');
      } else {
        tuplet.rhythmPosition = measurePosition.position;
        if (voiceNumber !== _utils_voice_number__WEBPACK_IMPORTED_MODULE_2__.VoiceNumber.UNKNOWN_VOICE_NUMBER) {
          tuplet.lastVoiceNumber = voiceNumber;
        }
        measure.addElement(tuplet, tuplet.lastVoiceNumber);
      }
    } else {
      notation = element.clone();
      notation.rhythmPosition = measurePosition.position;
      this.getMeasureAt(measurePosition.measureIndex).addElement(notation, notation.lastVoiceNumber);
    }
  }
  offsetPosition(measurePosition, duration, r) {
    let measureIndex = measurePosition.measureIndex;
    let position = measurePosition.position;
    while (true) {
      if (duration > 0) {
        const timeSignature = this.getMeasureAt(measureIndex).timeSignature;
        if (timeSignature == null) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measureIndex, 0);
        }
        const a = timeSignature.meterDuration - position;
        if (duration < a || r && duration === a) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measureIndex, position + duration);
        }
        if (++measureIndex > this.numChildren) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measureIndex - 1, this.getMeasureAt(measureIndex - 1).duration);
        }
        duration -= a;
        position = 0;
      } else {
        if (!(duration < 0)) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measureIndex, position);
        }
        if (-duration < position || !r && -duration === position) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](measureIndex, position + duration);
        }
        if (--measureIndex < 0) {
          return new _measure_position__WEBPACK_IMPORTED_MODULE_6__["default"](0, 0);
        }
        duration += position;
        position = this.getMeasureAt(measureIndex).duration;
      }
    }
  }
  rangeDuration(start, end) {
    const startCompareToEnd = start.compareTo(end);
    if (startCompareToEnd === 0) {
      return 0;
    }
    if (startCompareToEnd > 0) {
      const s = start;
      start = end;
      end = s;
    }
    let totalDuration = 0;
    for (let idx = start.measureIndex; idx < end.measureIndex; idx++) {
      totalDuration += this.getMeasureAt(idx).duration;
    }
    totalDuration += end.position - start.position;
    return startCompareToEnd > 0 ? -totalDuration : totalDuration;
  }
  clearStaffRange(measurePosition, rhythmDuration, option) {
    this.applyToMeasureRanges(measurePosition, rhythmDuration, function (measure, rhythmPosition, rhythmDuration) {
      measure.removePositionRange(rhythmPosition, rhythmDuration, option);
    });
  }
  addRests(measurePosition, rhythmDuration) {
    this.applyToMeasureRanges(measurePosition, rhythmDuration, function (measure) {
      measure.addRests();
    });
  }
  applyToMeasureRanges(measurePosition, rhythmDuration, applyToMeasure) {
    let measureIndex = measurePosition.measureIndex;
    let position = measurePosition.position;
    let n = true;
    while (rhythmDuration > 0) {
      const measure = this.getMeasureAt(measureIndex);
      const o = Math.min(rhythmDuration, measure.duration - position);
      applyToMeasure(measure, position, o, rhythmDuration, n);
      rhythmDuration -= o;
      position = 0;
      measureIndex++;
      n = false;
    }
  }
  defaultClefChanges(measureIdx) {
    let measure, prevMeasure;
    if (measureIdx <= this.score.numMeasures) {
      if (measureIdx !== this.score.numMeasures) {
        measure = this.getMeasureAt(measureIdx);
        if (measureIdx === 0) {} else {
          prevMeasure = this.getMeasureAt(measureIdx - 1);
          const notatedClef = prevMeasure.getNotatedClefAtMeasurePosition(prevMeasure.duration);
          if (!measure.clef.sameAs(notatedClef)) {
            if (prevMeasure.finalClefNotation != null) {
              prevMeasure.removeElement(prevMeasure.finalClefNotation);
            }
            const clef = measure.clef.clone();
            clef.rhythmPosition = prevMeasure.duration;
            prevMeasure.addElement(clef, _utils_voice_number__WEBPACK_IMPORTED_MODULE_2__.VoiceNumber.NON_METRICAL_VOICE_NUMBER);
            return clef;
          }
        }
      } else {
        prevMeasure = this.getMeasureAt(measureIdx - 1);
        const finalClefNotation = prevMeasure.finalClefNotation;
        if (finalClefNotation) {
          prevMeasure.removeElement(finalClefNotation);
          return finalClefNotation;
        }
      }
    }
  }
  insertBlankMeasureAt(measureIndex, measureInfo, multiVoices) {
    const prevIndex = Math.max(0, measureIndex - 1);
    const measure = new _measure__WEBPACK_IMPORTED_MODULE_5__["default"]();
    const prevMeasure = this.getMeasureAt(prevIndex);
    measure.clef = prevMeasure.getEffectiveClefAtMeasurePosition(prevMeasure.duration).clone();
    measure.measureInfo = measureInfo.clone();
    this.addMeasureAt(measure, measureIndex);
    measure.addElement(new _tacet__WEBPACK_IMPORTED_MODULE_15__["default"](), 0);
    if (multiVoices) {
      measure.addElement(new _tacet__WEBPACK_IMPORTED_MODULE_15__["default"](), 1);
    }
  }
  clone() {
    const staff = super.clone(Staff);
    staff.type = this.type;
    return staff;
  }
  getPreviousNoteSet(prevVoiceNumberElements) {
    let prevNoteSet = prevVoiceNumberElements[prevVoiceNumberElements.length - 1];
    while (prevNoteSet instanceof _tuplet__WEBPACK_IMPORTED_MODULE_16__["default"]) {
      const tuplet = prevNoteSet;
      prevNoteSet = tuplet.elements[tuplet.elements.length - 1];
    }
    return prevNoteSet;
  }
  transposeInterval(notes, nonNotes, intervalStr) {
    const interval = _interval__WEBPACK_IMPORTED_MODULE_4__["default"].fromString(intervalStr);
    this._applyToNotes(notes, note => {
      if (note.playable) {
        const transposedNote = note.transposeInterval(interval);
        note.pitch = transposedNote.pitch;
        note.step = transposedNote.step;
        note.accidental = transposedNote.accidental;
        note.fret = -1;
      }
    });
    this._applyToNonNotes(nonNotes, nonNote => {
      if (nonNote instanceof _chord_symbol__WEBPACK_IMPORTED_MODULE_3__["default"]) {
        const chordSymbol = nonNote;
        const transposedChordSymbol = chordSymbol.transposeInterval(interval);
        chordSymbol.text = transposedChordSymbol.text;
      }
    });
  }
  _applyToNotes(notes, fn, compareFn = null) {
    if (compareFn) {
      notes.sort(compareFn);
    }
    for (let i = 0; i < notes.length; i++) {
      const note = notes[i];
      fn(note);
    }
  }
  _applyToNonNotes(nonNotes, applyToNonNote) {
    for (let i = 0; i < nonNotes.length; i++) {
      const nonNote = nonNotes[i];
      applyToNonNote(this, nonNote);
    }
  }
  _enharmonicShift(notations) {
    let notation = null;
    let scoreNote;
    let interval;
    let notes = [];
    const nonNotes = [];
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      if (notation instanceof _note__WEBPACK_IMPORTED_MODULE_10__.Note) {
        notes.push(notation);
      } else if (notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_11__.NoteSet) {
        notes = notes.concat(notation.notes);
      }
    }
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      if (notation instanceof _measure_repeat__WEBPACK_IMPORTED_MODULE_7__["default"] || !(notation instanceof _note__WEBPACK_IMPORTED_MODULE_10__.Note) && !(notation instanceof _noteset__WEBPACK_IMPORTED_MODULE_11__.NoteSet)) {
        nonNotes.push(notation);
      }
    }
    if (notations.length === 1 && notations[0] instanceof _note__WEBPACK_IMPORTED_MODULE_10__.Note || notations[0] instanceof _noteset__WEBPACK_IMPORTED_MODULE_11__.NoteSet && notations[0].notes.length === 1) {
      if (notations[0] instanceof _note__WEBPACK_IMPORTED_MODULE_10__.Note) {
        scoreNote = notations[0];
      } else {
        scoreNote = notation.notes[0];
      }
      interval = scoreNote.enharmonicShiftInterval();
    } else {
      let totalAlteration = 0;
      this._applyToNotes(notes, note => {
        if (note.playable) {
          scoreNote = note.measure.getScoreNote(note, note.measure.scoreInterval);
          totalAlteration += scoreNote.alteration;
        }
      });
      interval = new _interval__WEBPACK_IMPORTED_MODULE_4__["default"](totalAlteration < 0 ? -1 : 1, 0);
    }
    this.transposeInterval(notes, nonNotes, interval.toString());
  }
  static extractNoteSets(elements) {
    let noteSets = [];
    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];
      if (element instanceof _tuplet__WEBPACK_IMPORTED_MODULE_16__["default"]) {
        noteSets.concat(Staff.extractNoteSets(element.elements));
      } else if (element instanceof _noteset__WEBPACK_IMPORTED_MODULE_11__.NoteSet) {
        noteSets.push(element);
      }
    }
    return noteSets;
  }
  copyMeasureTo(measureIdx, targetIdx, lyricTransfer) {
    const measure = this.getMeasureAt(measureIdx);
    measure.systemGap = false;
    const measureCopy = measure.clone();
    if (lyricTransfer) {
      lyricTransfer(measure, measureCopy);
    }
    this.addMeasureAt(measureCopy, targetIdx);
    measure.updateBarline();
    measureCopy.removeRedundancies();
    return measureCopy;
  }
  improveSpelling(measureIdx) {
    const measure = this.getMeasureAt(measureIdx);
    const keySignature = measure.keySignature;
    let prevNoteSet = null;
    const voiceNumberElements = measure.getVoiceNumber(0).elements;
    const noteSetHasNotes = function (notation) {
      const noteSet = notation;
      return noteSet && noteSet.notes.length > 0;
    };
    for (let i = 0; i < voiceNumberElements.length; i++) {
      const noteSets = Staff.extractNoteSets([voiceNumberElements[i]]);
      for (let j = 0; j < noteSets.length; j++) {
        const noteSet = noteSets[j];
        prevNoteSet = measure.previousNotation(noteSet.position, noteSetHasNotes, true);
        for (let k = 0; k < noteSet.notes.length; k++) {
          let closestMatchingPitch = null;
          if (prevNoteSet) {
            closestMatchingPitch = prevNoteSet.findClosestMatchingPitch(noteSet.notes[k].pitch.ordinal);
          }
          const note = keySignature.getNoteForPitch(noteSet.notes[k].pitch, closestMatchingPitch);
          noteSet.notes[k].step = note.step;
          noteSet.notes[k].pitch = note.pitch;
        }
        const normalizedSpelling = noteSet.normalizeSpelling(keySignature);
        if (Math.abs(normalizedSpelling) > noteSet.notes.length) {
          this._enharmonicShift([noteSet]);
        }
      }
    }
  }
  handleChildModelChange(evt) {
    if (evt.child instanceof _span_notation__WEBPACK_IMPORTED_MODULE_13__["default"]) {
      const spanNotation = evt.child;
      if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.ADD_CHILD_MODEL) {
        this.addSpanNotation(spanNotation);
      } else if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.REMOVING_CHILD_MODEL) {
        this.removeSpanNotation(spanNotation);
      }
    }
    // IRhythmContext
    if (evt.child instanceof _tuplet__WEBPACK_IMPORTED_MODULE_16__["default"] || evt.child instanceof _voice__WEBPACK_IMPORTED_MODULE_18__["default"]) {
      const notations = new _processing_rhythm_processor__WEBPACK_IMPORTED_MODULE_0__["default"](evt.child).getNotations();
      if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.ADD_CHILD_MODEL) {
        for (let i = 0; i < notations.length; i++) {
          const notation = notations[i];
          if (notation instanceof _span_notation__WEBPACK_IMPORTED_MODULE_13__["default"]) {
            this.addSpanNotation(notation);
          }
        }
      } else if (evt.kind === _model_event_kind__WEBPACK_IMPORTED_MODULE_9__.ModelEventKind.REMOVING_CHILD_MODEL) {
        for (let i = 0; i < notations.length; i++) {
          const notation = notations[i];
          if (notation instanceof _span_notation__WEBPACK_IMPORTED_MODULE_13__["default"]) {
            this.removeSpanNotation(notation);
          }
        }
      }
    }
  }
}

/***/ }),

/***/ 87806:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/strip-metrics.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StripMetrics)
/* harmony export */ });
class StripMetrics {
  constructor() {
    this._stripMarginLeft = 0;
    this._stripMarginTop = 48;
    this._stripMarginRight = 8;
    this._stripMarginBottom = 55;
    this._upcomingMeasureBackgroundColor = 0xffffff;
    this._upcomingMeasureBackgroundOpacity = 1;
    this._upcomingMeasureTextFont = null; //EditorFonts.helveticaFont;
    this._upcomingMeasureTextSize = 11;
    this._upcomingMeasureTextColor = 0xbab9a6;
    this._trackFlagX = 1;
    this._trackFlagY = 1;
    this._overlayOpacity = 0.9;
    this._overlayColor = 0xffffff;
  }
  get stripMarginLeft() {
    return this._stripMarginLeft;
  }
  set stripMarginLeft(v) {
    this._stripMarginLeft = v;
  }
  get stripMarginTop() {
    return this._stripMarginTop;
  }
  set stripMarginTop(v) {
    this._stripMarginTop = v;
  }
  get stripMarginRight() {
    return this._stripMarginRight;
  }
  set stripMarginRight(v) {
    this._stripMarginRight = v;
  }
  get stripMarginBottom() {
    return this._stripMarginBottom;
  }
  set stripMarginBottom(v) {
    this._stripMarginBottom = v;
  }
  get upcomingMeasureBackgroundColor() {
    return this._upcomingMeasureBackgroundColor;
  }
  set upcomingMeasureBackgroundColor(v) {
    this._upcomingMeasureBackgroundColor = v;
  }
  get upcomingMeasureBackgroundOpacity() {
    return this._upcomingMeasureBackgroundOpacity;
  }
  set upcomingMeasureBackgroundOpacity(v) {
    this._upcomingMeasureBackgroundOpacity = v;
  }
  get upcomingMeasureTextFont() {
    return this._upcomingMeasureTextFont;
  }
  set upcomingMeasureTextFont(v) {
    this._upcomingMeasureTextFont = v;
  }
  get upcomingMeasureTextSize() {
    return this._upcomingMeasureTextSize;
  }
  set upcomingMeasureTextSize(v) {
    this._upcomingMeasureTextSize = v;
  }
  get upcomingMeasureTextColor() {
    return this._upcomingMeasureTextColor;
  }
  set upcomingMeasureTextColor(v) {
    this._upcomingMeasureTextColor = v;
  }
  get trackFlagX() {
    return this._trackFlagX;
  }
  set trackFlagX(v) {
    this._trackFlagX = v;
  }
  get trackFlagY() {
    return this._trackFlagY;
  }
  set trackFlagY(v) {
    this._trackFlagY = v;
  }
  get overlayOpacity() {
    return this._overlayOpacity;
  }
  set overlayOpacity(v) {
    this._overlayOpacity = v;
  }
  get overlayColor() {
    return this._overlayColor;
  }
  set overlayColor(v) {
    this._overlayColor = v;
  }
}

/***/ }),

/***/ 48493:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/swing-metermap.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SwingMeterMap)
/* harmony export */ });
/* harmony import */ var _metermap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metermap */ 32981);
/* harmony import */ var _tuplet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tuplet */ 69519);


class SwingMeterMap extends _metermap__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get EIGHTH_SWING_TYPE() {
    return '8';
  }
  static get SIXTEENTH_SWING_TYPE() {
    return '16';
  }
  get swingType() {
    return this._swingType;
  }
  get swingDelta() {
    return this._swingDelta;
  }
  constructor(swingType, swingDelta = 0) {
    super(_metermap__WEBPACK_IMPORTED_MODULE_0__["default"].SWING_TYPE);
    this._swingType = swingType;
    this._swingDelta = swingDelta;
  }
  equals(meterMap) {
    return meterMap instanceof SwingMeterMap && meterMap.swingType === this.swingType && meterMap.swingDelta === this.swingDelta;
  }
  transformPosition(notation) {
    if (notation.rhythmContext instanceof _tuplet__WEBPACK_IMPORTED_MODULE_1__["default"] || this._swingType === SwingMeterMap.EIGHTH_SWING_TYPE && notation.duration < 32 || this.swingType === SwingMeterMap.SIXTEENTH_SWING_TYPE && notation.duration < 16) {
      return notation.position;
    } else {
      return this.swingPosition(notation.position);
    }
  }
  transformDuration(notation) {
    if (notation.rhythmContext instanceof _tuplet__WEBPACK_IMPORTED_MODULE_1__["default"] || this._swingType === SwingMeterMap.EIGHTH_SWING_TYPE && (notation.duration < 32 || notation.duration === 48) || this.swingType == SwingMeterMap.SIXTEENTH_SWING_TYPE && (notation.duration < 16 || notation.duration === 24)) {
      return notation.duration;
    } else {
      return this.swingPosition(notation.position + notation.duration) - this.swingPosition(notation.position);
    }
  }
  swingPosition(position) {
    if (this.swingType === SwingMeterMap.EIGHTH_SWING_TYPE && Math.round(position) % 64 === 32) {
      return position + 32 * this.swingDelta;
    } else if (this.swingType === SwingMeterMap.SIXTEENTH_SWING_TYPE && Math.round(position) % 32 === 16) {
      return position + 16 * this.swingDelta;
    } else {
      return position;
    }
  }
}

/***/ }),

/***/ 93093:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/system-symbol.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SystemSymbol)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);

class SystemSymbol extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  static get SYMBOL_HEIGHT() {
    return 2;
  }
  get metrical() {
    return true;
  }
  get movable() {
    return true;
  }
  get symbol() {
    return true;
  }
  get showOnlyOnSystemStaff() {
    return true;
  }
  get marking() {
    return true;
  }
  get alignToStaffTop() {
    return true;
  }
  get paddingY() {
    return -this.score.effectiveStaffMetrics.symbolOffset + this.score.effectiveStaffMetrics.symbolScale * SystemSymbol.SYMBOL_HEIGHT;
  }
  constructor(rhythmPosition = 0) {
    super(rhythmPosition);
  }
}

/***/ }),

/***/ 20511:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/tablature-clef.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TablatureClef)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _clef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./clef */ 87690);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _notation_direction__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./notation-direction */ 66420);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _staff_tuning__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staff-tuning */ 34846);
/* harmony import */ var _staff_type__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./staff-type */ 52472);







class TablatureClef extends _clef__WEBPACK_IMPORTED_MODULE_1__["default"] {
  static get STRING_NAMES() {
    return 'ABCDEFG';
  }
  static get BEND_NUMBER_OFFSET() {
    return 3;
  }
  get stringNotes() {
    return this._stringNotes;
  }
  set stringNotes(v) {
    this._stringNotes = v;
  }
  get capo() {
    return this._capo;
  }
  set capo(v) {
    this._capo = v;
  }
  get staffNotes() {
    return this.stringNotes.slice().reverse();
  }
  set staffNotes(v) {
    this.stringNotes = v.slice().reverse();
  }
  get clefScale() {
    return (this.numLines - 1) / (_staff_type__WEBPACK_IMPORTED_MODULE_6__["default"].NUM_LINES_GUITAR_TAB - 1);
  }
  get showKey() {
    return false;
  }
  get tabStemDirection() {
    return _notation_direction__WEBPACK_IMPORTED_MODULE_3__.Notation_Direction.DIRECTION_DOWN;
  }
  get showLegerLines() {
    return false;
  }
  get tuning() {
    const pitchStrings = [];
    const stringNotes = this.stringNotes.slice();
    for (let i = 0; i < stringNotes.length; i++) {
      const stringNote = stringNotes[i];
      pitchStrings.push(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].getPitch(stringNote.pitch.ordinal - this.capo).toString());
    }
    return pitchStrings;
  }
  set tuning(pitches) {
    const staffNotes = [];
    for (let i = 0; i < pitches.length; i++) {
      const pitch = pitches[i];
      staffNotes.push(new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchFromString(pitch)).transposeInterval(_interval__WEBPACK_IMPORTED_MODULE_2__["default"].fromPitches(this.capo)));
    }
    this.staffNotes = staffNotes;
  }
  get tuningNotes() {
    const notes = [];
    for (let i = 0; i < this.tuning.length; i++) {
      const tune = this.tuning[i];
      notes.push(new _note__WEBPACK_IMPORTED_MODULE_4__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].pitchFromString(tune)));
    }
    return notes.reverse();
  }
  constructor(rhythmPosition = 0, staff = null) {
    super(rhythmPosition, _clef__WEBPACK_IMPORTED_MODULE_1__["default"].TAB_CLEF_SIGN, _staff_type__WEBPACK_IMPORTED_MODULE_6__["default"].NUM_LINES_STANDARD, null, _staff_type__WEBPACK_IMPORTED_MODULE_6__["default"].NUM_LINES_GUITAR_TAB);
    this._capo = 0;
    if (staff) {
      if (staff.type.staffTuning) {
        this.staffNotes = staff.type.staffTuning.staffNotes;
        this.capo = staff.type.staffTuning.capo;
      } else {
        this.staffNotes = _staff_tuning__WEBPACK_IMPORTED_MODULE_5__["default"].defaultGuitarTuning().staffNotes;
      }
      this.numLines = this.displayLineCount = staff.type.numLines;
      this.lineSpacing = staff.type.lineSpacing;
    } else {
      this.staffNotes = _staff_tuning__WEBPACK_IMPORTED_MODULE_5__["default"].defaultGuitarTuning().staffNotes;
      this.numLines = this.displayLineCount = _staff_type__WEBPACK_IMPORTED_MODULE_6__["default"].NUM_LINES_GUITAR_TAB;
      this.lineSpacing = _staff_type__WEBPACK_IMPORTED_MODULE_6__["default"].TAB_LINE_SPACING;
    }
    this.note = this.stringNotes[0];
    this.line = this.numLines - 1;
  }
  static tabClef(rhythmPosition = 0, staff = null) {
    return new TablatureClef(rhythmPosition, staff);
  }
  getPitchLine(note) {
    if (note.stringIndex < 0) {
      return 0;
    } else if (note.cumulativeBend > 0) {
      return this.numLines - 1 + TablatureClef.BEND_NUMBER_OFFSET;
    } else {
      return this.numLines - 1 - note.stringIndex;
    }
  }
  getEffectiveFret(note) {
    if (note.fret >= 0) {
      return note.fret;
    }
    const stringNote = this.stringNotes[note.stringIndex];
    if (stringNote == null) {
      return -1;
    }
    const effectiveFret = note.pitch.ordinal - stringNote.pitch.ordinal;
    return effectiveFret >= 0 ? effectiveFret : -1;
  }
  getLineNote(line, measure, isSlash) {
    const stringIndex = Math.max(0, Math.min(this.numLines - 1, Math.round(this.numLines - 1 - line)));
    const stringNote = this.stringNotes[stringIndex];
    const note = new _note__WEBPACK_IMPORTED_MODULE_4__.Note(stringNote.pitch, stringNote.step, stringNote.accidental);
    note.stringIndex = stringIndex;
    note.fret = -1;
    return note;
  }
  showRhythm(score) {
    return score.effectiveStaffMetrics.showTabRhythm;
  }
  clone() {
    const tablatureClef = super.clone(TablatureClef);
    tablatureClef.stringNotes = this.stringNotes;
    tablatureClef.capo = this.capo;
    return tablatureClef;
  }
}

/***/ }),

/***/ 51744:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/tacet.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tacet)
/* harmony export */ });
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noteset */ 46605);

class Tacet extends _noteset__WEBPACK_IMPORTED_MODULE_0__.NoteSet {
  constructor() {
    super(0, null, 0, 0);
  }
  get rhythmDuration() {
    if (this.measure == null) {
      return 0;
    } else {
      return this.measure.duration;
    }
  }
  set rhythmDuration(v) {
    super.rhythmDuration = v;
  }
  clone() {
    return super.clone(Tacet);
  }
}

/***/ }),

/***/ 72620:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/tempo.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tempo)
/* harmony export */ });
/* harmony import */ var _metermap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metermap */ 32981);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./value-notation */ 56170);



class Tempo extends _notation__WEBPACK_IMPORTED_MODULE_1__.Notation {
  get value() {
    return this._value;
  }
  set value(v) {
    this._value = v;
  }
  get dots() {
    return this._dots;
  }
  set dots(v) {
    this._dots = v;
  }
  get bpm() {
    return this._bpm;
  }
  set bpm(v) {
    this._bpm = v;
  }
  get meterMap() {
    return this._meterMap;
  }
  set meterMap(v) {
    this._meterMap = v;
  }
  get showOnlyOnSystemStaff() {
    return true;
  }
  get timeScale() {
    return 60 / this.bpm / _value_notation__WEBPACK_IMPORTED_MODULE_2__["default"].valueToDuration(this.value, this.dots);
  }
  get movable() {
    return true;
  }
  get marking() {
    return true;
  }
  get metrical() {
    return true;
  }
  get alignToStaffTop() {
    return true;
  }
  get paddingY() {
    return -this.score.effectiveStaffMetrics.tempoTextOffset;
  }
  constructor(value = 6, dots = 0, bpm = 120) {
    super(0);
    this._value = 0;
    this._dots = 0;
    this._bpm = 0;
    this.value = value;
    this.dots = dots;
    this.bpm = bpm;
    this.meterMap = _metermap__WEBPACK_IMPORTED_MODULE_0__["default"].IDENTITY;
  }
  equals(tempo) {
    return this === tempo || tempo.value === this.value && tempo.dots === this.dots && tempo.bpm === this.bpm && tempo.meterMap.equals(this.meterMap);
  }
  clone() {
    const tempo = super.clone(Tempo);
    tempo.value = this.value;
    tempo.dots = this.dots;
    tempo.bpm = this.bpm;
    tempo.meterMap = this.meterMap;
    return tempo;
  }
}

/***/ }),

/***/ 70240:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/text-notation.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextNotation)
/* harmony export */ });
/* harmony import */ var _performance_performable_note_articulation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../performance/performable-note-articulation */ 26603);
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation */ 83658);


class TextNotation extends _notation__WEBPACK_IMPORTED_MODULE_1__.Notation {
  static get EXPRESSION_TYPE() {
    return 'expression';
  }
  static get PERFORMANCE_TYPE() {
    return 'performance';
  }
  static get SYSTEM_TEXT_TYPE() {
    return 'systemText';
  }
  static get STYLE_ITALIC() {
    return 'italic';
  }
  static get WEIGHT_BOLD() {
    return 'bold';
  }
  static get JUSTIFY_CENTER() {
    return 'center';
  }
  static get JUSTIFY_RIGHT() {
    return 'right';
  }
  static get STARTING_TEXT_TO_ARTICULATION_TABLE() {
    return TextNotation.starting_text_to_articulation_table;
  }
  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
  }
  get fontStyle() {
    return this._fontStyle;
  }
  set fontStyle(v) {
    this._fontStyle = v;
  }
  get fontWeight() {
    return this._fontWeight;
  }
  set fontWeight(v) {
    this._fontWeight = v;
  }
  get justify() {
    return this._justify;
  }
  set justify(v) {
    this._justify = v;
  }
  get textbox() {
    return this._textbox;
  }
  set textbox(v) {
    this._textbox = v;
  }
  get metrical() {
    return true;
  }
  get movable() {
    return true;
  }
  get symbol() {
    return true;
  }
  get showOnlyOnSystemStaff() {
    return this.measure && this.measure.isSystemMeasure || super.showOnlyOnSystemStaff;
  }
  get renderText() {
    return this.text;
  }
  get isEmpty() {
    return /^\s*$/.test(this.text);
  }
  get marking() {
    return true;
  }
  get articulation() {
    const articulation = TextNotation.mapStartingTextToArticulation(this.text);
    if (articulation) {
      return new _performance_performable_note_articulation__WEBPACK_IMPORTED_MODULE_0__["default"](articulation);
    } else {
      return null;
    }
  }
  get velocity() {
    return -1;
  }
  constructor(rhythmPosition = 0, text = null, dy = 0) {
    super(rhythmPosition);
    this._text = null;
    this._fontStyle = null;
    this._fontWeight = null;
    this._justify = null;
    this._textbox = false;
    this.text = text;
    this.dy = dy;
  }
  static mapStartingTextToArticulation(startingText) {
    if (startingText == null) return null;
    for (const key in TextNotation.STARTING_TEXT_TO_ARTICULATION_TABLE) {
      if (startingText.match(TextNotation.STARTING_TEXT_TO_ARTICULATION_TABLE[key])) {
        return key;
      }
    }
    return null;
  }
  clone(type = TextNotation) {
    const textNotation = super.clone(type);
    textNotation.text = this.text;
    textNotation.fontStyle = this.fontStyle;
    textNotation.fontWeight = this.fontWeight;
    textNotation.justify = this.justify;
    textNotation.textbox = this.textbox;
    return textNotation;
  }
}
TextNotation.starting_text_to_articulation_table = {
  normal: /^arco/i,
  pizzicato: /^pizz/i,
  spiccato: /^spic/i
};

/***/ }),

/***/ 67379:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/models/timesignature.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TimeSignature)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./value-notation */ 56170);


class TimeSignature extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  static get CUT_TIME_SYMBOL() {
    return 'cut';
  }
  static get COMMON_TIME_SYMBOL() {
    return 'common';
  }
  static get DEFAULT_VISIBILITY() {
    return 'default';
  }
  static get SHOWN_VISIBILITY() {
    return 'shown';
  }
  static get HIDDEN_VISIBILITY() {
    return 'hidden';
  }
  static get MODE_NORMAL() {
    return 'normal';
  }
  static get MODE_PICKUP() {
    return 'pickup';
  }
  get visibility() {
    return this._visibility;
  }
  set visibility(v) {
    this._visibility = v;
  }
  get mode() {
    return this._mode;
  }
  set mode(v) {
    this._mode = v;
  }
  get timeSymbol() {
    return this._timeSymbol;
  }
  set timeSymbol(v) {
    this._timeSymbol = v;
  }
  get beats() {
    return this._beats;
  }
  get beatType() {
    return this._beatType;
  }
  get meterDuration() {
    return this.beats * this.beatDuration;
  }
  get beatDuration() {
    return 256 / this._beatType;
  }
  get beatValue() {
    return _value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].durationToValue(this.beatDuration);
  }
  get simpleDuple() {
    let beats = this.beats;
    while ((1 & beats) === 0) {
      beats >>= 1;
    }
    return 1 === beats;
  }
  get triple() {
    return this.beats % 3 === 0;
  }
  get compound() {
    if (this.triple && this.beats > 3) {
      return 3;
    } else {
      return 0;
    }
  }
  get defaultBeatGroupDuration() {
    if (this.compound > 0) {
      return this.beatDuration * this.compound;
    } else {
      return this.beatDuration;
    }
  }
  get defaultBeamGroupDuration() {
    return this.defaultBeatGroupDuration;
  }
  get beamGroups() {
    const beamGroups = [];
    for (let i = 0; i < this.meterDuration / this.defaultBeamGroupDuration; i++) {
      beamGroups[i] = this.defaultBeamGroupDuration;
    }
    return beamGroups;
  }
  get beatGroups() {
    const beatGroups = [];
    for (let i = 0; i < this.meterDuration / this.defaultBeatGroupDuration; i++) {
      beatGroups[i] = this.defaultBeatGroupDuration;
    }
    return beatGroups;
  }
  get beamEnds() {
    return this._defaultBeamEnds;
  }
  constructor(beats = 4, beatType = 4, timeSignature = {}) {
    super(0);
    this._visibility = TimeSignature.DEFAULT_VISIBILITY;
    this._beats = 4;
    let timeSymbol = timeSignature.timeSymbol;
    timeSymbol = timeSymbol === undefined ? null : timeSymbol;
    let mode = timeSignature.mode;
    mode = mode === undefined ? TimeSignature.MODE_NORMAL : mode;
    let visibility = timeSignature.visibility;
    visibility = visibility === undefined ? TimeSignature.DEFAULT_VISIBILITY : visibility;
    this._beats = beats;
    this._beatType = beatType;
    this._timeSymbol = timeSymbol;
    this._mode = mode;
    this._visibility = visibility;
    this._defaultBeamEnds = this.beamGroups;
  }
  equals(timeSignature) {
    return timeSignature === this || timeSignature.beats == this.beats && timeSignature.beatType == this.beatType && timeSignature.visibility === this.visibility && timeSignature.mode === this.mode;
  }
  sameTimeProperties(timeSignature) {
    return timeSignature === this || timeSignature.beats === this._beats && timeSignature.beatType === this.beatType && timeSignature.timeSymbol === this.timeSymbol;
  }
  appendTimeSignature(timeSignature) {
    const copy = this.clone();
    let beats = timeSignature.beats;
    let beatType = timeSignature.beatType;
    while (beatType < copy.beatType) {
      beats *= 2;
      beatType *= 2;
    }
    while (copy.beatType < beatType) {
      copy._beats *= 2;
      copy._beatType *= 2;
    }
    copy._beats += beats;
    return copy;
  }
  static groupStartAt(beatGroups, rhythmPosition) {
    let beatGroupSum = 0;
    for (let i = 0; i < beatGroups.length; i++) {
      const beatGroup = beatGroups[i];
      if (rhythmPosition === beatGroupSum) {
        return true;
      }
      beatGroupSum += beatGroup;
    }
    return false;
  }
  static inSameGroup(beamEnds, rhythmPosition1, rhythmPosition2) {
    let prevBeamEndsSum = 0;
    for (let i = 0; i < beamEnds.length; i++) {
      const beamEnd = beamEnds[i];
      let beamEndsSum = prevBeamEndsSum + beamEnd;
      if (rhythmPosition1 >= prevBeamEndsSum && rhythmPosition1 < beamEndsSum) {
        return rhythmPosition2 < beamEndsSum;
      }
      prevBeamEndsSum = beamEndsSum;
    }
    return false;
  }
  getRangeDurations(start, duration, isNotRest) {
    let rangeDurations = [];
    let r;
    start = Math.floor(Math.min(this.meterDuration, start));
    duration = Math.floor(Math.min(this.meterDuration - start, duration));
    if (start % this.beatDuration > 0 && !isNotRest && (r = Math.floor(Math.min(duration, this.beatDuration - start % this.beatDuration))) > 0) {
      rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].ascendingValueDurations(r, isNotRest));
      duration -= r;
      start += r;
    }
    if (this.simpleDuple || isNotRest) {
      if (start > 0 && this.simpleDuple && !isNotRest) {
        const n = duration % this.beatDuration;
        duration -= n;
        rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].ascendingValueDurations(duration, isNotRest));
        rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].descendingValueDurations(n, isNotRest));
      } else {
        rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].descendingValueDurations(duration, isNotRest));
      }
    } else {
      const beamGroups = this.beamGroups || [];
      let o = 0;
      for (let idx = 0; idx < beamGroups.length && duration > 0; idx++) {
        const beamGroup = beamGroups[idx];
        o += beamGroup;
        if (start < o) {
          r = Math.floor(Math.min(duration, o - start));
          if (r == beamGroup) {
            rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].descendingValueDurations(r, true));
          } else {
            while (r >= this.beatDuration && !isNotRest) {
              rangeDurations.push(this.beatDuration);
              r -= this.beatDuration;
              duration -= this.beatDuration;
              start += this.beatDuration;
            }
            rangeDurations = rangeDurations.concat(_value_notation__WEBPACK_IMPORTED_MODULE_1__["default"].descendingValueDurations(r, isNotRest));
          }
          duration -= r;
          start += r;
        }
      }
    }
    return rangeDurations;
  }
  clone() {
    const timeSignature = super.clone(TimeSignature);
    timeSignature._beats = this.beats;
    timeSignature._beatType = this._beatType;
    timeSignature._defaultBeamEnds = this._defaultBeamEnds.slice();
    timeSignature.visibility = this.visibility;
    timeSignature.timeSymbol = this.timeSymbol;
    return timeSignature;
  }
}

/***/ }),

/***/ 42550:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/trill.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Trill)
/* harmony export */ });
/* harmony import */ var _pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../pitch/chromatic-pitch */ 62957);
/* harmony import */ var _interval__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./interval */ 56250);
/* harmony import */ var _line_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-notation */ 93207);
/* harmony import */ var _note__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./note */ 14816);
/* harmony import */ var _noteset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./noteset */ 46605);





class Trill extends _line_notation__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get accidental() {
    this.recalculate();
    return this._accidental;
  }
  set accidental(v) {
    this.recalculate();
    this._accidental = v;
    this._intervalInvalid = true;
  }
  get interval() {
    this.recalculateInterval();
    return this._interval;
  }
  set interval(v) {
    this._interval = v;
  }
  get scoreAccidental() {
    return this.measure.getScoreNote(this.dummyNeighbor).accidental;
  }
  get alteration() {
    if (this.accidental == null) {
      return 0;
    } else {
      _note__WEBPACK_IMPORTED_MODULE_3__.Note.accidentalToAlteration(this.accidental);
    }
  }
  get transposable() {
    return true;
  }
  get dummyNeighbor() {
    let note;
    const target = this.target;
    if (target) {
      note = target.transposeDiatonic(1);
      const alteration = this.accidental ? this.alteration : this.measure.effectiveAlteration(target.position, note, target.voiceNumber);
      note.pitch = note.diatonicPitch.transpose(alteration);
    } else {
      note = new _note__WEBPACK_IMPORTED_MODULE_3__.Note(_pitch_chromatic_pitch__WEBPACK_IMPORTED_MODULE_0__["default"].getPitch(0));
    }
    note.accidental = this.accidental;
    return note;
  }
  get target() {
    if (this.measure) {
      const noteSet = this.measure.notationAtPosition(this.position, _noteset__WEBPACK_IMPORTED_MODULE_4__.NoteSet, this.voiceNumber);
      if (noteSet == null) {
        return null;
      }
      let highestNote = null;
      for (let i = 0; i < noteSet.notes.length; i++) {
        const note = noteSet.notes[i];
        if (highestNote == null || note.pitch.ordinal > highestNote.pitch.ordinal) {
          highestNote = note;
        }
      }
      return highestNote;
    } else {
      return null;
    }
  }
  constructor(rhythmPosition = 0, span = 0, type = _line_notation__WEBPACK_IMPORTED_MODULE_2__["default"].TYPE_DEFAULT, endX = 0, ascent = 0, startingText = '') {
    super(rhythmPosition, false, span, type, endX, ascent, startingText);
    this._intervalInvalid = true;
    this._hadTarget = false;
    this._accidentalInvalid = true;
    this._accidental = null;
    this._interval = 2;
  }
  recalculate() {
    if (this._accidentalInvalid) {
      this._accidentalInvalid = false;
      if (this._hadTarget) {
        this.recalculateAccidental();
      } else if (this.target) {
        this._intervalInvalid = true;
      }
      this._hadTarget = this.target != null;
    }
  }
  recalculateInterval() {
    this.recalculate();
    if (this._intervalInvalid) {
      if (this.target == null) {
        return;
      }
      this._intervalInvalid = false;
      this._interval = this.dummyNeighbor.pitch.ordinal - this.target.pitch.ordinal;
    }
  }
  recalculateAccidental() {
    if (this.target) {
      const note = this.target.transposeInterval(new _interval__WEBPACK_IMPORTED_MODULE_1__["default"](1, this._interval));
      note.normalizeAlteration();
      if (note.alteration === this.measure.effectiveAlteration(this.position, note, this.voiceNumber)) {
        this.accidental = null;
      } else {
        this.accidental = _note__WEBPACK_IMPORTED_MODULE_3__.Note.alterationToAccidental(note.alteration);
      }
    }
  }
  recalculateTrill() {
    this._accidental = null;
    this._hadTarget = false;
    this._intervalInvalid = true;
    this.recalculateInterval();
  }
  setDefaultInfo() {
    this._accidentalInvalid = this._intervalInvalid = true;
  }
  clone() {
    const trill = super.clone(Trill);
    trill.accidental = this.accidental;
    trill._interval = this.interval;
    return trill;
  }
}

/***/ }),

/***/ 69519:
/*!**********************************************!*\
  !*** ./src/app/note-editor/models/tuplet.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Tuplet)
/* harmony export */ });
/* harmony import */ var _rhythm_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rhythm-element */ 60828);
/* harmony import */ var _timesignature__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./timesignature */ 67379);
/* harmony import */ var _value_notation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./value-notation */ 56170);
// import { NoteSet } from './noteset';



// import Voice from './voice';
class Tuplet extends _rhythm_element__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get timeSignature() {
    return this._timeSignature;
  }
  set timeSignature(v) {
    this._timeSignature = v;
  }
  get units() {
    return this._units;
  }
  set units(v) {
    this._units = v;
  }
  get unitValue() {
    return this._unitValue;
  }
  set unitValue(v) {
    this._unitValue = v;
  }
  get tremolo() {
    return this._tremolo;
  }
  set tremolo(v) {
    this._tremolo = v;
  }
  get showActualNumber() {
    return this._showActualNumber;
  }
  set showActualNumber(v) {
    this._showActualNumber = v;
  }
  get showNormalNumber() {
    return this._showNormalNumber;
  }
  set showNormalNumber(v) {
    this._showNormalNumber = v;
  }
  get showBracket() {
    return this._showBracket;
  }
  set showBracket(v) {
    this._showBracket = v;
  }
  get elements() {
    return this._children;
  }
  get numElements() {
    return this.children.length;
  }
  get validTuplet() {
    let totalDuration = 0;
    for (let i = 0; i < this.elements.length; i++) {
      const element = this.elements[i];
      const rhythmEl = element;
      totalDuration += rhythmEl.rhythmDuration;
    }
    return totalDuration === this.timeSignature.meterDuration;
  }
  get topLevelTuplet() {
    return this.rhythmContext; //&& this.rhythmContext instanceof Voice;
  }

  get hasChildTuplet() {
    for (let i = 0; i < this.descendants.length; i++) {
      const descendant = this.descendants[i];
      if (descendant instanceof Tuplet) {
        return true;
      }
    }
    return false;
  }
  // get containsRest() {
  //   for (let i = 0; i < this.elements.length; i++) {
  //     const element = this.elements[i];
  //     if (element instanceof NoteSet) {
  //       const noteSet = element as NoteSet;
  //       if (noteSet.isRest()) {
  //         return true;
  //       }
  //     }
  //   }
  //   return false;
  // }
  get show() {
    return this.showBracket || this.showActualNumber || this.showNormalNumber;
  }
  get rhythmDuration() {
    return this.units * _value_notation__WEBPACK_IMPORTED_MODULE_2__["default"].valueToDuration(this.unitValue);
  }
  get tupletRatio() {
    return this.timeSignature.meterDuration / this.duration;
  }
  get rhythmUnits() {
    return this.timeSignature.beats;
  }
  get rhythmValue() {
    return this.timeSignature.beatValue;
  }
  get measureNumerator() {
    const t = 1 << Math.max(0, this.unitValue - this.rhythmValue);
    return this.rhythmContext.measureNumerator * (this.units * t);
  }
  get measureDenominator() {
    return this.rhythmContext.measureDenominator * this.rhythmUnits;
  }
  get is_rhythmContext() {
    return true;
  }
  constructor(rhythmPosition = 0, units = 1, unitValue = 0, beats = 1, division = 1) {
    super(rhythmPosition);
    this._timeSignature = null;
    this._units = 0;
    this._unitValue = 0;
    this._tremolo = false;
    this._showActualNumber = true;
    this._showNormalNumber = false;
    this._showBracket = true;
    this.units = units;
    this.unitValue = unitValue;
    this.timeSignature = new _timesignature__WEBPACK_IMPORTED_MODULE_1__["default"](beats, 256 >> division);
  }
  getElementAt(idx) {
    return this.getChildAt(idx);
  }
  addElement(element) {
    for (let i = 0; i < this.elements.length; i++) {
      if (element.rhythmPosition < this.getElementAt(i).rhythmPosition) {
        this.addChildAt(element, i);
        return true;
      }
    }
    this.addChild(element);
    return true;
  }
  addElementAt(element, idx) {
    this.addChildAt(element, idx);
  }
  removeElement(element) {
    this.removeChild(element);
  }
  // noteSetAtPosition(position) {
  //   for (let i = 0; i < this.elements.length; i++) {
  //     const element = this.elements[i];
  //     const rhythmEl: RhythmElement = element as RhythmElement;
  //     if (rhythmEl.rhythmPosition > position) {
  //       break;
  //     }
  //     if (rhythmEl instanceof NoteSet && rhythmEl.rhythmPosition === position) {
  //       return rhythmEl as NoteSet;
  //     }
  //   }
  //   return null;
  // }
  getPosition(rhythmPosition) {
    return this.position + rhythmPosition / this.tupletRatio;
  }
  getDuration(rhythmDuration) {
    return rhythmDuration / this.tupletRatio;
  }
  getRhythmPosition(position) {
    return (position - this.position) * this.tupletRatio;
  }
  getRhythmDuration(duration) {
    return duration * this.tupletRatio;
  }
  clone() {
    const tuplet = super.clone(Tuplet);
    tuplet.units = this.units;
    tuplet.unitValue = this.unitValue;
    tuplet.timeSignature = this.timeSignature;
    tuplet.tremolo = this.tremolo;
    tuplet.showActualNumber = this.showActualNumber;
    tuplet.showNormalNumber = this.showNormalNumber;
    tuplet.showBracket = this.showBracket;
    return tuplet;
  }
}

/***/ }),

/***/ 56170:
/*!******************************************************!*\
  !*** ./src/app/note-editor/models/value-notation.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ValueNotation)
/* harmony export */ });
/* harmony import */ var _notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation */ 83658);
/* harmony import */ var _notation_value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation-value */ 57485);


class ValueNotation extends _notation__WEBPACK_IMPORTED_MODULE_0__.Notation {
  static get MIN_NOTATION_VALUE() {
    return ValueNotation.min_notated_value;
  }
  static get MAX_NOTATION_VALUE() {
    return ValueNotation.max_notated_value;
  }
  get value() {
    return this._value;
  }
  set value(v) {
    this._value = v;
  }
  get dots() {
    return this._dots;
  }
  set dots(v) {
    this._dots = v;
  }
  get rhythmDuration() {
    return ValueNotation.valueToDuration(this.value, this.dots);
  }
  set rhythmDuration(duration) {
    const durationValue = ValueNotation.durationToValue(duration);
    if (duration === 1 << durationValue) {
      this.value = durationValue; // intToUint
      this.dots = 0;
    } else if (duration === 3 << durationValue - 1) {
      this.value = durationValue;
      this.dots = 1;
    } else {
      if (duration !== 7 << durationValue - 2) {
        throw new Error('Attempt to set illegal duration: ' + duration);
      }
      this.value = durationValue;
      this.dots = 2;
    }
  }
  get units() {
    return (1 << this.dots + 1) - 1;
  }
  get unitValue() {
    return this.value - this.dots;
  }
  get metrical() {
    return true;
  }
  get movable() {
    return true;
  }
  constructor(rhythmPosition = 0, value = 0, dots = 0) {
    super(rhythmPosition);
    this._value = 0;
    this._dots = 0;
    this.value = value;
    this.dots = dots;
  }
  static isDurationValid(duration) {
    const durationValue = ValueNotation.durationToValue(duration);
    return duration === 1 << durationValue || duration === 3 << durationValue - 1 || duration === 7 << durationValue - 2;
  }
  static durationToValue(duration) {
    let durationValue = -1;
    while (duration > 0) {
      duration >>= 1;
      durationValue++;
    }
    return durationValue;
  }
  static valueToDuration(value, dots = 0) {
    return (1 << dots + 1) - 1 << value - dots;
  }
  static ascendingValueDurations(duration, isNotRest) {
    const valueDurations = [];
    let s = 1;
    let i = 2 << ValueNotation.MAX_NOTATION_VALUE - 1;
    while (duration > 0) {
      if (s == i) {
        valueDurations.push(s);
        duration--;
      } else if (isNotRest && 7 == (7 & duration)) {
        valueDurations.push(7 * s);
        duration >>= 3;
        s <<= 3;
      } else if (isNotRest && 3 == (3 & duration)) {
        valueDurations.push(3 * s);
        duration >>= 2;
        s <<= 2;
      } else {
        if (1 == (1 & duration)) {
          valueDurations.push(s);
        }
        duration >>= 1;
        s <<= 1;
      }
    }
    return valueDurations;
  }
  static descendingValueDurations(duration, isNotRest) {
    return ValueNotation.ascendingValueDurations(duration, isNotRest).reverse();
  }
  clone(type = ValueNotation) {
    const copy = super.clone(type);
    copy.value = this.value;
    copy.dots = this.dots;
    return copy;
  }
}
// static get TWO_HUNDRED_FIFTY_SIXTH() {
//   return 0;
// }
// static get ONE_HUNDERD_TWENTY_EIGHTH() {
//   return 1;
// }
// static get SIXTY_FOURTH() {
//   return 2;
// }
// static get THIRTY_SECOND() {
//   return 3;
// }
// static get SIXTEENTH() {
//   return 4;
// }
// static get EIGHTH() {
//   return 5;
// }
// static get QUARTER() {
//   return 6;
// }
// static get HALF() {
//   return 7;
// }
// static get WHOLE() {
//   return 8;
// }
// static get BREVE() {
//   return 9;
// }
// static get LONGA() {
//   return 10;
// }
ValueNotation.min_notated_value = _notation_value__WEBPACK_IMPORTED_MODULE_1__.NotationValue.TWO_HUNDRED_FIFTY_SIXTH;
ValueNotation.max_notated_value = _notation_value__WEBPACK_IMPORTED_MODULE_1__.NotationValue.WHOLE;

/***/ }),

/***/ 38445:
/*!*********************************************!*\
  !*** ./src/app/note-editor/models/voice.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Voice)
/* harmony export */ });
/* harmony import */ var _utils_voice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/voice */ 47422);
/* harmony import */ var _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/voice-number */ 12585);
/* harmony import */ var _performance_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./performance-text */ 92946);
/* harmony import */ var _rhythm_container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rhythm-container */ 40793);
// import { collision } from '../utils/voice';




// import RhythmElement from './rhythm-element';
// import SpanNotation from './span-notation';
// import TextNotation from './text-notation';
class Voice extends _rhythm_container__WEBPACK_IMPORTED_MODULE_3__["default"] {
  // static get NON_METRICAL_VOICE_NUMBER() {
  //   return -1;
  // }
  // static get UNKNOWN_VOICE_NUMBER() {
  //   return -999;
  // }
  // static get NORMAL_MAX_VOICES() {
  //   return 2;
  // }
  get timeSignature() {
    return this.measure.timeSignature;
  }
  get rhythmDuration() {
    return this.timeSignature.meterDuration;
  }
  get units() {
    return this.timeSignature.beats;
  }
  get unitValue() {
    return this.timeSignature.beatValue;
  }
  get voiceNumber() {
    if (this.index < 0) {
      return _utils_voice_number__WEBPACK_IMPORTED_MODULE_1__.VoiceNumber.UNKNOWN_VOICE_NUMBER;
    } else {
      return this.index - 1;
    }
  }
  get measure() {
    return this.parent;
  }
  get measureNumerator() {
    return 1;
  }
  get measureDenominator() {
    return 1;
  }
  get hasRehearsalLetter() {
    for (let i = 0; i < this.elements.length; i++) {
      const element = this.elements[i];
      const notation = element;
      if (notation instanceof _performance_text__WEBPACK_IMPORTED_MODULE_2__["default"] && notation.textbox) {
        return true;
      }
    }
    return false;
  }
  get is_rhythmContext() {
    return true;
  }
  get isVoice() {
    return true;
  }
  constructor() {
    super();
  }
  addElement(element) {
    for (let i = 0; i < this.elements.length; i++) {
      //as RhythmElement
      const el = this.elements[i];
      if (el.rhythmPosition === element.rhythmPosition && (0,_utils_voice__WEBPACK_IMPORTED_MODULE_0__.collision)(element, el)) {
        return false;
      }
    }
    super.addElement(element);
    return true;
  }
  getPosition(position) {
    return position;
  }
  getDuration(duration) {
    return duration;
  }
  getRhythmPosition(rhythmPosition) {
    return rhythmPosition;
  }
  getRhythmDuration(rhythmDuration) {
    return rhythmDuration;
  }
  clone() {
    return super.clone(Voice);
  }
  handleChildModelChange(evt) {
    if (this.parent) {
      this.parent.handleChildModelChange(evt);
    }
  }
}

/***/ }),

/***/ 33916:
/*!**********************************************************************!*\
  !*** ./src/app/note-editor/notation-view/notation-view.component.ts ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NotationViewComponent": () => (/* binding */ NotationViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

class NotationViewComponent {
  constructor() {}
  ngOnChanges(changes) {
    throw new Error('Method not implemented.');
  }
  ngOnInit() {}
}
NotationViewComponent.ɵfac = function NotationViewComponent_Factory(t) {
  return new (t || NotationViewComponent)();
};
NotationViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: NotationViewComponent,
  selectors: [["app-notation-view"]],
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]],
  decls: 2,
  vars: 0,
  template: function NotationViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "notation-view works!");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  }
});

/***/ }),

/***/ 13531:
/*!***************************************************!*\
  !*** ./src/app/note-editor/note-editor.module.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteEditorModule": () => (/* binding */ NoteEditorModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _editor_container_editor_container_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor-container/editor-container.component */ 90837);
/* harmony import */ var _page_view_page_view_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./page-view/page-view.component */ 38408);
/* harmony import */ var _system_view_system_view_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./system-view/system-view.component */ 45493);
/* harmony import */ var _staff_view_staff_view_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./staff-view/staff-view.component */ 87273);
/* harmony import */ var _measure_view_measure_view_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure-view/measure-view.component */ 22382);
/* harmony import */ var _notation_view_notation_view_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./notation-view/notation-view.component */ 33916);
/* harmony import */ var _sprit_sprit_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sprit/sprit.component */ 55151);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/common/http */ 80529);
/* harmony import */ var _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @fortawesome/angular-fontawesome */ 96920);
/* harmony import */ var _fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @fortawesome/free-solid-svg-icons */ 82687);
/* harmony import */ var _operation_overlay_operation_overlay_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./operation-overlay/operation-overlay.component */ 55062);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/cdk/overlay */ 98184);
/* harmony import */ var ng_zorro_antd_tooltip__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ng-zorro-antd/tooltip */ 37570);
/* harmony import */ var ng_zorro_antd_notification__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ng-zorro-antd/notification */ 60387);
/* harmony import */ var ng_zorro_antd_divider__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ng-zorro-antd/divider */ 2577);
/* harmony import */ var ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ng-zorro-antd/modal */ 50007);
/* harmony import */ var _operation_overlay_change_key_signature_change_key_signature_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./operation-overlay/change-key-signature/change-key-signature.component */ 65213);
/* harmony import */ var ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ng-zorro-antd/select */ 38231);
/* harmony import */ var ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ng-zorro-antd/button */ 66616);
/* harmony import */ var ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ng-zorro-antd/radio */ 48521);
/* harmony import */ var ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ng-zorro-antd/input-number */ 37096);
/* harmony import */ var ng_zorro_antd_dropdown__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ng-zorro-antd/dropdown */ 29562);
/* harmony import */ var ng_zorro_antd_menu__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ng-zorro-antd/menu */ 73325);
/* harmony import */ var ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ng-zorro-antd/input */ 35635);
/* harmony import */ var ng_zorro_antd_tree__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ng-zorro-antd/tree */ 26042);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/forms */ 24006);
/* harmony import */ var _operation_overlay_change_time_signature_change_time_signature_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./operation-overlay/change-time-signature/change-time-signature.component */ 54690);
/* harmony import */ var ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ng-zorro-antd/icon */ 54326);
/* harmony import */ var ng_zorro_antd_checkbox__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ng-zorro-antd/checkbox */ 6416);
/* harmony import */ var ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ng-zorro-antd/form */ 36704);
/* harmony import */ var _add_part_modal_add_part_modal_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./add-part-modal/add-part-modal.component */ 43865);
/* harmony import */ var _slim_scroll_slim_scroll_module__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./slim-scroll/slim-scroll.module */ 73714);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ng-zorro-antd/core/transition-patch */ 47044);












































class NoteEditorModule {
  constructor(library) {
    library.addIcons(_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_12__.faCloudArrowDown);
  }
}
NoteEditorModule.ɵfac = function NoteEditorModule_Factory(t) {
  return new (t || NoteEditorModule)(_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵinject"](_fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_14__.FaIconLibrary));
};
NoteEditorModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineNgModule"]({
  type: NoteEditorModule
});
NoteEditorModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵdefineInjector"]({
  providers: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_15__.Overlay],
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_16__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.ReactiveFormsModule, _slim_scroll_slim_scroll_module__WEBPACK_IMPORTED_MODULE_11__.SlimScrollModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_18__.HttpClientModule, _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_14__.FontAwesomeModule, ng_zorro_antd_tooltip__WEBPACK_IMPORTED_MODULE_19__.NzToolTipModule, ng_zorro_antd_notification__WEBPACK_IMPORTED_MODULE_20__.NzNotificationModule, ng_zorro_antd_divider__WEBPACK_IMPORTED_MODULE_21__.NzDividerModule, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_22__.NzModalModule, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_23__.NzSelectModule, ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_24__.NzButtonModule, ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_25__.NzRadioModule, ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_26__.NzInputNumberModule, ng_zorro_antd_dropdown__WEBPACK_IMPORTED_MODULE_27__.NzDropDownModule, ng_zorro_antd_menu__WEBPACK_IMPORTED_MODULE_28__.NzMenuModule, ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_29__.NzIconModule, ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_30__.NzInputModule, ng_zorro_antd_tree__WEBPACK_IMPORTED_MODULE_31__.NzTreeModule, ng_zorro_antd_checkbox__WEBPACK_IMPORTED_MODULE_32__.NzCheckboxModule, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_33__.NzFormModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵsetNgModuleScope"](NoteEditorModule, {
    declarations: [_editor_container_editor_container_component__WEBPACK_IMPORTED_MODULE_0__.EditorContainerComponent, _page_view_page_view_component__WEBPACK_IMPORTED_MODULE_1__.PageViewComponent, _system_view_system_view_component__WEBPACK_IMPORTED_MODULE_2__.SystemViewComponent, _staff_view_staff_view_component__WEBPACK_IMPORTED_MODULE_3__.StaffViewComponent, _measure_view_measure_view_component__WEBPACK_IMPORTED_MODULE_4__.MeasureViewComponent, _notation_view_notation_view_component__WEBPACK_IMPORTED_MODULE_5__.NotationViewComponent, _sprit_sprit_component__WEBPACK_IMPORTED_MODULE_6__.SpritComponent, _operation_overlay_operation_overlay_component__WEBPACK_IMPORTED_MODULE_7__.OperationOverlayComponent, _operation_overlay_change_key_signature_change_key_signature_component__WEBPACK_IMPORTED_MODULE_8__.ChangeKeySignatureComponent, _operation_overlay_change_time_signature_change_time_signature_component__WEBPACK_IMPORTED_MODULE_9__.ChangeTimeSignatureComponent, _add_part_modal_add_part_modal_component__WEBPACK_IMPORTED_MODULE_10__.AddPartModalComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_16__.CommonModule, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.FormsModule, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.ReactiveFormsModule, _slim_scroll_slim_scroll_module__WEBPACK_IMPORTED_MODULE_11__.SlimScrollModule, _angular_common_http__WEBPACK_IMPORTED_MODULE_18__.HttpClientModule, _fortawesome_angular_fontawesome__WEBPACK_IMPORTED_MODULE_14__.FontAwesomeModule, ng_zorro_antd_tooltip__WEBPACK_IMPORTED_MODULE_19__.NzToolTipModule, ng_zorro_antd_notification__WEBPACK_IMPORTED_MODULE_20__.NzNotificationModule, ng_zorro_antd_divider__WEBPACK_IMPORTED_MODULE_21__.NzDividerModule, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_22__.NzModalModule, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_23__.NzSelectModule, ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_24__.NzButtonModule, ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_25__.NzRadioModule, ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_26__.NzInputNumberModule, ng_zorro_antd_dropdown__WEBPACK_IMPORTED_MODULE_27__.NzDropDownModule, ng_zorro_antd_menu__WEBPACK_IMPORTED_MODULE_28__.NzMenuModule, ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_29__.NzIconModule, ng_zorro_antd_input__WEBPACK_IMPORTED_MODULE_30__.NzInputModule, ng_zorro_antd_tree__WEBPACK_IMPORTED_MODULE_31__.NzTreeModule, ng_zorro_antd_checkbox__WEBPACK_IMPORTED_MODULE_32__.NzCheckboxModule, ng_zorro_antd_form__WEBPACK_IMPORTED_MODULE_33__.NzFormModule],
    exports: [_editor_container_editor_container_component__WEBPACK_IMPORTED_MODULE_0__.EditorContainerComponent]
  });
})();
_angular_core__WEBPACK_IMPORTED_MODULE_13__["ɵɵsetComponentScope"](_operation_overlay_operation_overlay_component__WEBPACK_IMPORTED_MODULE_7__.OperationOverlayComponent, [_angular_common__WEBPACK_IMPORTED_MODULE_16__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_16__.NgForOf, _angular_common__WEBPACK_IMPORTED_MODULE_16__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_16__.NgStyle, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_17__.NgModel, ng_zorro_antd_tooltip__WEBPACK_IMPORTED_MODULE_19__.NzTooltipDirective, ng_zorro_antd_divider__WEBPACK_IMPORTED_MODULE_21__.NzDividerComponent, ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_34__["ɵNzTransitionPatchDirective"], ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_26__.NzInputNumberComponent, ng_zorro_antd_menu__WEBPACK_IMPORTED_MODULE_28__.NzMenuDirective, ng_zorro_antd_menu__WEBPACK_IMPORTED_MODULE_28__.NzMenuItemDirective, ng_zorro_antd_dropdown__WEBPACK_IMPORTED_MODULE_27__.NzDropDownDirective, ng_zorro_antd_dropdown__WEBPACK_IMPORTED_MODULE_27__.NzDropdownMenuComponent, ng_zorro_antd_icon__WEBPACK_IMPORTED_MODULE_29__.NzIconDirective, _operation_overlay_change_key_signature_change_key_signature_component__WEBPACK_IMPORTED_MODULE_8__.ChangeKeySignatureComponent, _operation_overlay_change_time_signature_change_time_signature_component__WEBPACK_IMPORTED_MODULE_9__.ChangeTimeSignatureComponent], []);

/***/ }),

/***/ 68951:
/*!****************************************************!*\
  !*** ./src/app/note-editor/note-editor.service.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "NoteEditorService": () => (/* binding */ NoteEditorService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ 80529);
/* harmony import */ var ng_zorro_antd_notification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ng-zorro-antd/notification */ 60387);
/* harmony import */ var _operation_overlay_operation_overlay_service__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation-overlay/operation-overlay.service */ 7770);





class NoteEditorService {
  constructor(http, notification, operationOverlayService) {
    this.http = http;
    this.notification = notification;
    this.operationOverlayService = operationOverlayService;
    this.onSystemStatusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onStaffStatusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onMeasureStatusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onNotationStatusChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onValidateMeasure = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onMeasureSequenceChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onModelChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onAddSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onRemoveSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onPageReflow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onContinueIncrementalFlow = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onPageDisplay = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onMeasureHandleClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
  }
  loadScore() {
    // return this.http.get('/assets/source/note-flight-score.json');
    return this.http.get('assets/source/basic.json');
  }
  open(el, info) {
    this.operationRef = this.operationOverlayService.open(el, info);
  }
  closeOperation() {
    if (this.operationRef) {
      this.operationRef.detach();
      this.operationRef.dispose();
      this.operationRef = null;
    }
  }
  notify(title, message) {
    this.notification.error(title, message);
  }
}
NoteEditorService.ɵfac = function NoteEditorService_Factory(t) {
  return new (t || NoteEditorService)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_2__.HttpClient), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](ng_zorro_antd_notification__WEBPACK_IMPORTED_MODULE_3__.NzNotificationService), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_operation_overlay_operation_overlay_service__WEBPACK_IMPORTED_MODULE_0__.OperationOverlayService));
};
NoteEditorService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({
  token: NoteEditorService,
  factory: NoteEditorService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 65213:
/*!******************************************************************************************************!*\
  !*** ./src/app/note-editor/operation-overlay/change-key-signature/change-key-signature.component.ts ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangeKeySignatureComponent": () => (/* binding */ ChangeKeySignatureComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../models/keysignature */ 48050);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 24006);
/* harmony import */ var ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng-zorro-antd/modal */ 50007);
/* harmony import */ var ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng-zorro-antd/select */ 38231);
/* harmony import */ var ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ng-zorro-antd/button */ 66616);
/* harmony import */ var ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng-zorro-antd/core/transition-patch */ 47044);
/* harmony import */ var ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ng-zorro-antd/core/wave */ 21811);










const _c0 = function (a0) {
  return {
    active: a0
  };
};
function ChangeKeySignatureComponent_ng_container_1_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeKeySignatureComponent_ng_container_1_div_4_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r7);
      const item_r5 = restoredCtx.$implicit;
      const ctx_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r6.changeFifth(item_r5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](2, _c0, item_r5.fifths === ctx_r3.fifths && item_r5.atonal === ctx_r3.atonal));
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", item_r5.label, " ");
  }
}
function ChangeKeySignatureComponent_ng_container_1_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeKeySignatureComponent_ng_container_1_div_8_Template_div_click_0_listener() {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const item_r8 = restoredCtx.$implicit;
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r9.changeFifth(item_r8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r8 = ctx.$implicit;
    const ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpureFunction1"](2, _c0, item_r8.fifths === ctx_r4.fifths && item_r8.atonal === ctx_r4.atonal));
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", item_r8.label, " ");
  }
}
function ChangeKeySignatureComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "div", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](4, ChangeKeySignatureComponent_ng_container_1_div_4_Template, 2, 4, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](5, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](6, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](7, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](8, ChangeKeySignatureComponent_ng_container_1_div_8_Template, 2, 4, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.sharpKeySignatures);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.flatKeySignatures);
  }
}
function ChangeKeySignatureComponent_ng_template_2_nz_option_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 16);
  }
  if (rf & 2) {
    const mode_r12 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzLabel", mode_r12.label)("nzValue", mode_r12.key);
  }
}
function ChangeKeySignatureComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 9)(1, "div", 10)(2, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](3, "Mode\uFF1A");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "nz-select", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeKeySignatureComponent_ng_template_2_Template_nz_select_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r14);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r13.mode = $event);
    })("ngModelChange", function ChangeKeySignatureComponent_ng_template_2_Template_nz_select_ngModelChange_4_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r14);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r15.modeChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](5, ChangeKeySignatureComponent_ng_template_2_nz_option_5_Template, 1, 2, "nz-option", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](6, "div", 13)(7, "button", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeKeySignatureComponent_ng_template_2_Template_button_click_7_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r14);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r16.close());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](8, "Cancel");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "button", 15);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeKeySignatureComponent_ng_template_2_Template_button_click_9_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r14);
      const ctx_r17 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r17.save());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](10, "OK");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r2.mode);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r2.modes);
  }
}
class ChangeKeySignatureComponent {
  constructor() {
    this.onSave = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onHide = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.sharpKeySignatures = [];
    this.flatKeySignatures = [];
    this.modes = [{
      key: 'major',
      label: 'Major'
    }, {
      key: 'minor',
      label: 'Minor'
    }, {
      key: 'ionian',
      label: 'Ionian'
    }, {
      key: 'dorian',
      label: 'Dorian'
    }, {
      key: 'phrygian',
      label: 'Phrygian'
    }, {
      key: 'lydian',
      label: 'Lydian'
    }, {
      key: 'mixolydian',
      label: 'Mixolydian'
    }, {
      key: 'aeolian',
      label: 'Aeolian'
    }, {
      key: 'locrian',
      label: 'Locrian'
    }];
    this.sharpFifths = [0, 1, 2, 3, 4, 5, 6, 7];
    this.flatFifths = [0, -1, -2, -3, -4, -5, -6, -7];
  }
  ngOnChanges(changes) {
    if ((changes.isShow || changes.info) && this.isShow && this.info) {
      this.fifths = this.info.fifths;
      this.mode = this.info.mode;
      this.atonal = this.info.atonal;
      this.modeChange(this.mode);
    }
  }
  ngOnInit() {}
  applyFifth(fifths) {
    this.atonal = false;
    this.fifths = fifths;
  }
  applyAtonal() {
    this.atonal = true;
    this.fifths = 0;
  }
  modeChange(mode) {
    this.sharpKeySignatures = [];
    this.flatKeySignatures = [];
    for (let i = 0; i < this.sharpFifths.length; i++) {
      const fifths = this.sharpFifths[i];
      let tonic = new _models_keysignature__WEBPACK_IMPORTED_MODULE_0__["default"](fifths, 0, false, mode).tonic;
      this.sharpKeySignatures.push({
        label: tonic,
        action: this.applyFifth.bind(this),
        atonal: false,
        fifths
      });
    }
    this.sharpKeySignatures = [...this.sharpKeySignatures];
    for (let i = 0; i < this.flatFifths.length; i++) {
      const fifths = this.flatFifths[i];
      if (i === 0) {
        this.flatKeySignatures.push({
          label: '--',
          atonal: true,
          fifths
        });
      } else {
        let tonic = new _models_keysignature__WEBPACK_IMPORTED_MODULE_0__["default"](fifths, 0, false, mode).tonic;
        this.flatKeySignatures.push({
          label: tonic,
          atonal: false,
          fifths
        });
      }
    }
    this.flatKeySignatures = [...this.flatKeySignatures];
  }
  changeFifth(item) {
    if (item.atonal) {
      this.applyAtonal();
    } else {
      this.applyFifth(item.fifths);
    }
  }
  save() {
    const keySignature = new _models_keysignature__WEBPACK_IMPORTED_MODULE_0__["default"](this.fifths, 0, this.atonal, this.mode);
    this.onSave.emit(keySignature);
  }
  close() {
    this.onHide.emit();
  }
}
ChangeKeySignatureComponent.ɵfac = function ChangeKeySignatureComponent_Factory(t) {
  return new (t || ChangeKeySignatureComponent)();
};
ChangeKeySignatureComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: ChangeKeySignatureComponent,
  selectors: [["app-change-key-signature"]],
  inputs: {
    isShow: "isShow",
    info: "info"
  },
  outputs: {
    onSave: "onSave",
    onHide: "onHide"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 2,
  consts: [["nzTitle", "Change Key Signature", 3, "nzVisible", "nzFooter", "nzVisibleChange", "nzOnCancel", "nzOnOk"], [4, "nzModalContent"], ["modalFooter", ""], [1, "keySignatures", "sharp"], [1, "back"], [1, "items"], ["class", "item", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "keySignatures", "flat"], [1, "item", 3, "ngClass", "click"], [1, "footer"], [1, "select"], [2, "width", "120px", 3, "ngModel", "ngModelChange"], [3, "nzLabel", "nzValue", 4, "ngFor", "ngForOf"], [1, "btns"], ["nz-button", "", "nzType", "default", 3, "click"], ["nz-button", "", "nzType", "primary", 3, "click"], [3, "nzLabel", "nzValue"]],
  template: function ChangeKeySignatureComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "nz-modal", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("nzVisibleChange", function ChangeKeySignatureComponent_Template_nz_modal_nzVisibleChange_0_listener($event) {
        return ctx.isShow = $event;
      })("nzOnCancel", function ChangeKeySignatureComponent_Template_nz_modal_nzOnCancel_0_listener() {
        return ctx.close();
      })("nzOnOk", function ChangeKeySignatureComponent_Template_nz_modal_nzOnOk_0_listener() {
        return ctx.save();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, ChangeKeySignatureComponent_ng_container_1_Template, 9, 2, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, ChangeKeySignatureComponent_ng_template_2_Template, 11, 2, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzVisible", ctx.isShow)("nzFooter", _r1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgClass, _angular_common__WEBPACK_IMPORTED_MODULE_2__.NgForOf, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalComponent, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalContentDirective, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzOptionComponent, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzSelectComponent, ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__.NzButtonComponent, ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__["ɵNzTransitionPatchDirective"], ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__.NzWaveDirective],
  styles: [".footer[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.footer[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n}\nnz-select[_ngcontent-%COMP%] {\n  text-align: left;\n}\n.keySignatures[_ngcontent-%COMP%] {\n  height: 93px;\n  position: relative;\n}\n.back[_ngcontent-%COMP%] {\n  width: 472px;\n  height: 83px;\n  background-size: 100% 100%;\n  background-position: top left;\n  background-repeat: no-repeat;\n}\n.sharp[_ngcontent-%COMP%] {\n  margin-bottom: 20px;\n}\n.sharp[_ngcontent-%COMP%]   .back[_ngcontent-%COMP%] {\n  background-image: url('assets/images/sharpSignatures.svg');\n}\n.flat[_ngcontent-%COMP%]   .back[_ngcontent-%COMP%] {\n  background-image: url('assets/images/flatSignatures.svg');\n  width: 479px;\n  background-position-x: -4px;\n}\n.items[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  display: flex;\n}\n.item[_ngcontent-%COMP%] {\n  font-size: 16px;\n  display: flex;\n  align-items: end;\n  justify-content: center;\n  margin-right: 5px;\n  cursor: pointer;\n  -webkit-user-select: none;\n          user-select: none;\n}\n.item.active[_ngcontent-%COMP%] {\n  background-color: rgba(128, 128, 255, 0.3);\n}\n.item[_ngcontent-%COMP%]:nth-child(1) {\n  width: 25px;\n  margin-left: 30px;\n}\n.item[_ngcontent-%COMP%]:nth-child(2) {\n  width: 28px;\n}\n.item[_ngcontent-%COMP%]:nth-child(3) {\n  width: 34px;\n}\n.item[_ngcontent-%COMP%]:nth-child(4) {\n  width: 44px;\n}\n.item[_ngcontent-%COMP%]:nth-child(5) {\n  width: 54px;\n}\n.item[_ngcontent-%COMP%]:nth-child(6) {\n  width: 65px;\n}\n.item[_ngcontent-%COMP%]:nth-child(7) {\n  width: 74px;\n}\n.item[_ngcontent-%COMP%]:nth-child(8) {\n  width: 85px;\n}"]
});

/***/ }),

/***/ 54690:
/*!********************************************************************************************************!*\
  !*** ./src/app/note-editor/operation-overlay/change-time-signature/change-time-signature.component.ts ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ChangeTimeSignatureComponent": () => (/* binding */ ChangeTimeSignatureComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../models/timesignature */ 67379);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ 24006);
/* harmony import */ var ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng-zorro-antd/modal */ 50007);
/* harmony import */ var ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ng-zorro-antd/select */ 38231);
/* harmony import */ var ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ng-zorro-antd/button */ 66616);
/* harmony import */ var ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng-zorro-antd/core/transition-patch */ 47044);
/* harmony import */ var ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ng-zorro-antd/core/wave */ 21811);
/* harmony import */ var ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ng-zorro-antd/radio */ 48521);
/* harmony import */ var ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ng-zorro-antd/input-number */ 37096);












function ChangeTimeSignatureComponent_ng_container_1_nz_option_12_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 15);
  }
  if (rf & 2) {
    const item_r6 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzLabel", item_r6)("nzValue", item_r6);
  }
}
function ChangeTimeSignatureComponent_ng_container_1_nz_option_27_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 16);
  }
  if (rf & 2) {
    const item_r7 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzValue", item_r7.key)("nzLabel", item_r7.label);
  }
}
function ChangeTimeSignatureComponent_ng_container_1_nz_option_29_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "nz-option", 16);
  }
  if (rf & 2) {
    const item_r8 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzValue", item_r8.key)("nzLabel", item_r8.label);
  }
}
function ChangeTimeSignatureComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "h5");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, "Time");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "nz-radio-group", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_radio_group_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r9 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r9.timeSymbol = $event);
    })("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_radio_group_ngModelChange_3_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r11 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r11.timeSymbolChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](4, "div", 4)(5, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](6, "i", 6)(7, "i", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](8, "nz-input-number", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_input_number_ngModelChange_8_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r12.beats = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](9, "span", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](10, "/");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](11, "nz-select", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_select_ngModelChange_11_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r13.beatType = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](12, ChangeTimeSignatureComponent_ng_container_1_nz_option_12_Template, 1, 2, "nz-option", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](13, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](14, "i", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](15, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](16, "Common Time");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](17, "div", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](18, "i", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](19, "span", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](20, "Cut Time");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](21, "div", 13)(22, "h5");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](23, "Type");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](24, "h5");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](25, "Visibility");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](26, "nz-select", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_select_ngModelChange_26_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r14 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r14.mode = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](27, ChangeTimeSignatureComponent_ng_container_1_nz_option_27_Template, 1, 2, "nz-option", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](28, "nz-select", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("ngModelChange", function ChangeTimeSignatureComponent_ng_container_1_Template_nz_select_ngModelChange_28_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r10);
      const ctx_r15 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r15.visibility = $event);
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](29, ChangeTimeSignatureComponent_ng_container_1_nz_option_29_Template, 1, 2, "nz-option", 14);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.timeSymbol);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzValue", null);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("number" + ctx_r0.beats);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassMap"]("number" + ctx_r0.beatType);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.beats);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.beatType);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.beatTypes);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzValue", "common");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzValue", "cut");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](9);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.mode);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.types);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngModel", ctx_r0.visibility);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngForOf", ctx_r0.visibilities);
  }
}
function ChangeTimeSignatureComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 17)(1, "button", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeTimeSignatureComponent_ng_template_2_Template_button_click_1_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r17);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r16.close());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](2, "Cancel");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](3, "button", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function ChangeTimeSignatureComponent_ng_template_2_Template_button_click_3_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r17);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r18.save());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](4, "OK");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]()();
  }
}
class ChangeTimeSignatureComponent {
  constructor() {
    this.onSave = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.onHide = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.EventEmitter();
    this.beatTypes = ['2', '4', '8', '16', '32', '64', '128'];
    this.beatsGlyphArray = [];
    this.types = [{
      key: 'normal',
      label: 'Normal'
    }, {
      key: 'pickup',
      label: 'Pickup'
    }];
    this.timeNames = [{
      key: 'common',
      label: 'Common Time'
    }, {
      key: 'cut',
      label: 'Cut Time'
    }, {
      key: null,
      label: ''
    }];
    this.visibilities = [{
      key: 'default',
      label: 'Default'
    }, {
      key: 'shown',
      label: 'Shown'
    }, {
      key: 'hidden',
      label: 'Hidden'
    }];
  }
  ngOnChanges(changes) {
    if ((changes.isShow || changes.info) && this.isShow && this.info) {
      this.beats = this.info.beats.toString();
      this.beatType = this.info.beatType.toString();
      this.mode = this.info.mode;
      this.timeSymbol = this.info.timeSymbol;
      this.visibility = this.info.visibility;
    }
  }
  ngOnInit() {}
  timeSymbolChange(timeSymbol) {
    if (timeSymbol === 'common') {
      this.beats = '4';
      this.beatType = '4';
    } else if (timeSymbol === 'cut') {
      this.beats = '2';
      this.beatType = '2';
    }
  }
  save() {
    const timeSignature = new _models_timesignature__WEBPACK_IMPORTED_MODULE_0__["default"](+this.beats, +this.beatType, {
      timeSymbol: this.timeSymbol,
      mode: this.mode,
      visibility: this.visibility
    });
    // timeSignature.hidden = this.visibility === 'hidden';
    this.onSave.emit(timeSignature);
  }
  close() {
    this.onHide.emit();
  }
}
ChangeTimeSignatureComponent.ɵfac = function ChangeTimeSignatureComponent_Factory(t) {
  return new (t || ChangeTimeSignatureComponent)();
};
ChangeTimeSignatureComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
  type: ChangeTimeSignatureComponent,
  selectors: [["app-change-time-signature"]],
  inputs: {
    isShow: "isShow",
    info: "info"
  },
  outputs: {
    onSave: "onSave",
    onHide: "onHide"
  },
  features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]],
  decls: 4,
  vars: 2,
  consts: [["nzTitle", "Change Key Signature", 3, "nzVisible", "nzFooter", "nzVisibleChange", "nzOnCancel", "nzOnOk"], [4, "nzModalContent"], ["modalFooter", ""], [3, "ngModel", "ngModelChange"], ["nz-radio", "", 3, "nzValue"], [1, "custom"], [1, "symbol", "numberGlyph"], [2, "width", "65px", 3, "ngModel", "ngModelChange"], [2, "margin", "0 12px"], [3, "nzLabel", "nzValue", 4, "ngFor", "ngForOf"], [1, "symbol", "nf-commontime"], [2, "padding-top", "5px"], [1, "symbol", "nf-cuttime"], [1, "type-visibility"], [3, "nzValue", "nzLabel", 4, "ngFor", "ngForOf"], [3, "nzLabel", "nzValue"], [3, "nzValue", "nzLabel"], [1, "footer"], ["nz-button", "", "nzType", "default", 3, "click"], ["nz-button", "", "nzType", "primary", 3, "click"]],
  template: function ChangeTimeSignatureComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "nz-modal", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("nzVisibleChange", function ChangeTimeSignatureComponent_Template_nz_modal_nzVisibleChange_0_listener($event) {
        return ctx.isShow = $event;
      })("nzOnCancel", function ChangeTimeSignatureComponent_Template_nz_modal_nzOnCancel_0_listener() {
        return ctx.close();
      })("nzOnOk", function ChangeTimeSignatureComponent_Template_nz_modal_nzOnOk_0_listener() {
        return ctx.save();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, ChangeTimeSignatureComponent_ng_container_1_Template, 30, 15, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, ChangeTimeSignatureComponent_ng_template_2_Template, 5, 0, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("nzVisible", ctx.isShow)("nzFooter", _r1);
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.NgForOf, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgControlStatus, _angular_forms__WEBPACK_IMPORTED_MODULE_3__.NgModel, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalComponent, ng_zorro_antd_modal__WEBPACK_IMPORTED_MODULE_4__.NzModalContentDirective, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzOptionComponent, ng_zorro_antd_select__WEBPACK_IMPORTED_MODULE_5__.NzSelectComponent, ng_zorro_antd_button__WEBPACK_IMPORTED_MODULE_6__.NzButtonComponent, ng_zorro_antd_core_transition_patch__WEBPACK_IMPORTED_MODULE_7__["ɵNzTransitionPatchDirective"], ng_zorro_antd_core_wave__WEBPACK_IMPORTED_MODULE_8__.NzWaveDirective, ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_9__.NzRadioComponent, ng_zorro_antd_radio__WEBPACK_IMPORTED_MODULE_9__.NzRadioGroupComponent, ng_zorro_antd_input_number__WEBPACK_IMPORTED_MODULE_10__.NzInputNumberComponent],
  styles: [".type-visibility[_ngcontent-%COMP%] {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  column-gap: 12px;\n}\n.type-visibility[_ngcontent-%COMP%]   nz-select[_ngcontent-%COMP%] {\n  width: 100%;\n}\nnz-radio-group[_ngcontent-%COMP%]  .ant-radio-wrapper {\n  display: flex;\n  align-items: center;\n  margin-bottom: 12px;\n  height: 28px;\n  padding-left: 12px;\n}\nnz-radio-group[_ngcontent-%COMP%]  .ant-radio-wrapper > span:not(.ant-radio) {\n  display: flex;\n  align-items: center;\n}\nh5[_ngcontent-%COMP%] {\n  font-size: 16px;\n}\n.symbol[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  height: 28px;\n  width: 28px;\n  padding-top: 5px;\n  margin-right: 6px;\n}\n.custom[_ngcontent-%COMP%]   .symbol[_ngcontent-%COMP%] {\n  height: 12px;\n}\n.symbol[_ngcontent-%COMP%]::before {\n  font-family: NFIcons;\n  font-size: 28px;\n  font-weight: 400;\n  font-style: normal;\n}\n.numberGlyph.number0[_ngcontent-%COMP%]:before {\n  content: \"\\e331\";\n}\n.numberGlyph.number1[_ngcontent-%COMP%]:before {\n  content: \"\\e332\";\n}\n.numberGlyph.number2[_ngcontent-%COMP%]:before {\n  content: \"\\e333\";\n}\n.numberGlyph.number3[_ngcontent-%COMP%]:before {\n  content: \"\\e334\";\n}\n.numberGlyph.number4[_ngcontent-%COMP%]:before {\n  content: \"\\e335\";\n}\n.numberGlyph.number5[_ngcontent-%COMP%]:before {\n  content: \"\\e336\";\n}\n.numberGlyph.number6[_ngcontent-%COMP%]:before {\n  content: \"\\e337\";\n}\n.numberGlyph.number7[_ngcontent-%COMP%]:before {\n  content: \"\\e338\";\n}\n.numberGlyph.number8[_ngcontent-%COMP%]:before {\n  content: \"\\e339\";\n}\n.numberGlyph.number9[_ngcontent-%COMP%]:before {\n  content: \"\\e340\";\n}\n.nf-commontime[_ngcontent-%COMP%]:before {\n  content: \"\\e341\";\n}\n.nf-cuttime[_ngcontent-%COMP%]:before {\n  content: \"\\e342\";\n}"]
});

/***/ }),

/***/ 55062:
/*!******************************************************************************!*\
  !*** ./src/app/note-editor/operation-overlay/operation-overlay.component.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationOverlayComponent": () => (/* binding */ OperationOverlayComponent)
/* harmony export */ });
/* harmony import */ var _operation_overlay_tokens__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation-overlay.tokens */ 9402);
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/note */ 14816);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _models_model_event_kind__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/model-event-kind */ 21151);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _models_trill__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/trill */ 42550);
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/text-notation */ 70240);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _models_tempo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/tempo */ 72620);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lodash */ 17489);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _models_accidental__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/accidental */ 18659);
/* harmony import */ var _models_slur__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/slur */ 85888);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _utils_line_notation__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../utils/line-notation */ 99655);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rxjs */ 8929);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! rxjs/operators */ 80013);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! rxjs/operators */ 75778);
/* harmony import */ var _models_keysignature__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/keysignature */ 48050);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _operation_overlay_service__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./operation-overlay.service */ 7770);



























function OperationOverlayComponent_ng_container_1_div_1_label_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "label");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const group_r6 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtextInterpolate1"]("", group_r6.name, ":");
  }
}
function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_nz_divider_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "nz-divider", 13);
  }
}
function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "i", 36);
  }
}
const _c0 = function (a0, a1, a2, a3, a4, a5, a6) {
  return {
    note2: a0,
    note3: a1,
    note4: a2,
    note5: a3,
    note6: a4,
    note7: a5,
    note8: a6
  };
};
const _c1 = function (a0) {
  return {
    selected: a0
  };
};
function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 14)(1, "div", 15)(2, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](3, "i", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](4, OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_i_4_Template, 1, 0, "i", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](5, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](6, "nz-dropdown-menu", null, 20)(8, "ul", 21)(9, "li", 22)(10, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r16.tempoValueChange(8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](11, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](12, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_12_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r18 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r18.tempoValueChange(7));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](13, "i", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](14, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_14_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r19 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r19.tempoValueChange(6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](15, "i", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](16, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_16_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r20 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r20.tempoValueChange(5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](17, "i", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](18, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_18_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r21 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r21.tempoValueChange(4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](19, "i", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](20, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_20_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r22 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r22.tempoValueChange(3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](21, "i", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](22, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_div_click_22_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r23 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r23.tempoValueChange(2));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](23, "i", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](24, "nz-divider", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](25, "div", 31)(26, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_i_click_26_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r24 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r24.toggleDot());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](27, "div", 33)(28, "span", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtext"](29, "=");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](30, "nz-input-number", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("ngModelChange", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_nz_input_number_ngModelChange_30_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r25 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r25.state.tempoBPM = $event);
    })("ngModelChange", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template_nz_input_number_ngModelChange_30_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r17);
      const ctx_r26 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r26.bpmChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const _r15 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵreference"](7);
    const ctx_r12 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("nzDropdownMenu", _r15);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction7"](14, _c0, ctx_r12.state.tempoValue == 2, ctx_r12.state.tempoValue == 3, ctx_r12.state.tempoValue == 4, ctx_r12.state.tempoValue == 5, ctx_r12.state.tempoValue == 6, ctx_r12.state.tempoValue == 7, ctx_r12.state.tempoValue == 8));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx_r12.state.tempoDots == 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](22, _c1, ctx_r12.state.tempoValue == "8"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](24, _c1, ctx_r12.state.tempoValue == "7"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](26, _c1, ctx_r12.state.tempoValue == "6"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](28, _c1, ctx_r12.state.tempoValue == "5"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](30, _c1, ctx_r12.state.tempoValue == "4"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](32, _c1, ctx_r12.state.tempoValue == "3"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](34, _c1, ctx_r12.state.tempoValue == "2"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](36, _c1, ctx_r12.state.tempoDots == "1"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngModel", ctx_r12.state.tempoBPM)("nzMin", 10)("nzPrecision", 0);
  }
}
const _c2 = function (a0) {
  return {
    backgroundImage: a0
  };
};
function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_3_Template_div_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r29);
      const item_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
      const ctx_r27 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r27.doAction(item_r10.action, item_r10.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](1, "div", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("nzTooltipTitle", item_r10.tip)("nzTooltipPlacement", "topCenter")("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](4, _c1, item_r10.selected));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](6, _c2, "url(assets/images/icons/" + item_r10.icon + ".png)"));
  }
}
function OperationOverlayComponent_ng_container_1_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, OperationOverlayComponent_ng_container_1_div_1_ng_container_2_nz_divider_1_Template, 1, 0, "nz-divider", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_2_Template, 31, 38, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](3, OperationOverlayComponent_ng_container_1_div_1_ng_container_2_div_3_Template, 2, 8, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r10 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r10.type === "split");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r10.type === "tempoNotePicker");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r10.type == null || item_r10.type !== "split" && item_r10.type !== "tempoNotePicker");
  }
}
function OperationOverlayComponent_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, OperationOverlayComponent_ng_container_1_div_1_label_1_Template, 2, 1, "label", 8);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, OperationOverlayComponent_ng_container_1_div_1_ng_container_2_Template, 4, 3, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const group_r6 = ctx.$implicit;
    const ctx_r5 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx_r5.groups.length > 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngForOf", group_r6.items);
  }
}
function OperationOverlayComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, OperationOverlayComponent_ng_container_1_div_1_Template, 3, 2, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngForOf", ctx_r0.groups);
  }
}
function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_nz_divider_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "nz-divider", 13);
  }
}
function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_i_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "i", 36);
  }
}
function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r42 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 14)(1, "div", 15)(2, "div", 16);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](3, "i", 17);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](4, OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_i_4_Template, 1, 0, "i", 18);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](5, "span", 19);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](6, "nz-dropdown-menu", null, 20)(8, "ul", 21)(9, "li", 22)(10, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_10_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r41 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r41.tempoValueChange(8));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](11, "i", 24);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](12, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_12_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r43 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r43.tempoValueChange(7));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](13, "i", 25);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](14, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_14_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r44 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r44.tempoValueChange(6));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](15, "i", 26);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](16, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_16_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r45 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r45.tempoValueChange(5));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](17, "i", 27);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](18, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_18_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r46 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r46.tempoValueChange(4));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](19, "i", 28);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](20, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_20_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r47 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r47.tempoValueChange(3));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](21, "i", 29);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](22, "div", 23);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_div_click_22_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r48 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r48.tempoValueChange(2));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](23, "i", 30);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](24, "nz-divider", 13);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](25, "div", 31)(26, "i", 32);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_i_click_26_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r49 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r49.toggleDot());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()()()()();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](27, "div", 33)(28, "span", 34);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtext"](29, "=");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](30, "nz-input-number", 35);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("ngModelChange", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_nz_input_number_ngModelChange_30_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r50 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r50.state.tempoBPM = $event);
    })("ngModelChange", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template_nz_input_number_ngModelChange_30_listener($event) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r42);
      const ctx_r51 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r51.bpmChange($event));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const _r40 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵreference"](7);
    const ctx_r37 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](4);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("nzDropdownMenu", _r40);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction7"](14, _c0, ctx_r37.state.tempoValue == 2, ctx_r37.state.tempoValue == 3, ctx_r37.state.tempoValue == 4, ctx_r37.state.tempoValue == 5, ctx_r37.state.tempoValue == 6, ctx_r37.state.tempoValue == 7, ctx_r37.state.tempoValue == 8));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx_r37.state.tempoDots == 1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](6);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](22, _c1, ctx_r37.state.tempoValue == "8"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](24, _c1, ctx_r37.state.tempoValue == "7"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](26, _c1, ctx_r37.state.tempoValue == "6"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](28, _c1, ctx_r37.state.tempoValue == "5"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](30, _c1, ctx_r37.state.tempoValue == "4"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](32, _c1, ctx_r37.state.tempoValue == "3"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](34, _c1, ctx_r37.state.tempoValue == "2"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](36, _c1, ctx_r37.state.tempoDots == "1"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](5);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngModel", ctx_r37.state.tempoBPM)("nzMin", 10)("nzPrecision", 0);
  }
}
function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r54 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 37);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_3_Template_div_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r54);
      const item_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
      const ctx_r52 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](3);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r52.doAction(item_r35.action, item_r35.value));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](1, "div", 38);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r35 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]().$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("nzTooltipTitle", item_r35.tip)("nzTooltipPlacement", "topCenter")("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](4, _c1, item_r35.selected));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](6, _c2, "url(assets/images/icons/" + item_r35.icon + ".png)"));
  }
}
function OperationOverlayComponent_ng_template_2_li_2_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, OperationOverlayComponent_ng_template_2_li_2_ng_container_4_nz_divider_1_Template, 1, 0, "nz-divider", 10);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_2_Template, 31, 38, "div", 11);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](3, OperationOverlayComponent_ng_template_2_li_2_ng_container_4_div_3_Template, 2, 8, "div", 12);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r35 = ctx.$implicit;
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r35.type === "split");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r35.type === "tempoNotePicker");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", item_r35.type == null || item_r35.type !== "split" && item_r35.type !== "tempoNotePicker");
  }
}
const _c3 = function (a0) {
  return {
    transform: a0
  };
};
const _c4 = function (a0) {
  return {
    active: a0
  };
};
const _c5 = function (a0, a1) {
  return {
    transform: a0,
    width: a1
  };
};
function OperationOverlayComponent_ng_template_2_li_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r57 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "li", 43)(1, "div", 44);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("click", function OperationOverlayComponent_ng_template_2_li_2_Template_div_click_1_listener($event) {
      const restoredCtx = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵrestoreView"](_r57);
      const group_r32 = restoredCtx.$implicit;
      const ctx_r56 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵresetView"](ctx_r56.selectGroup($event, group_r32));
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](3, "div", 45);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](4, OperationOverlayComponent_ng_template_2_li_2_ng_container_4_Template, 4, 3, "ng-container", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const group_r32 = ctx.$implicit;
    const i_r33 = ctx.index;
    const ctx_r31 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](6, _c3, "rotate(" + (ctx_r31.defaultDegree + 360 / ctx_r31.groups.length * i_r33) + "deg)"))("ngClass", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](8, _c4, group_r32.name === (ctx_r31.activedGroup == null ? null : ctx_r31.activedGroup.name)));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction1"](10, _c3, "rotate(" + -(ctx_r31.defaultDegree + 360 / ctx_r31.groups.length * i_r33) + "deg)"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtextInterpolate1"](" ", group_r32.name, " ");
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵpureFunction2"](12, _c5, "rotate(" + -(ctx_r31.defaultDegree + 360 / ctx_r31.groups.length * i_r33) + "deg)", group_r32.width + "px"));
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngForOf", group_r32.items);
  }
}
function OperationOverlayComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 39)(1, "ul", 40);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, OperationOverlayComponent_ng_template_2_li_2_Template, 5, 15, "li", 41);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](3, "div", 42);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngForOf", ctx_r2.groups);
  }
}
function OperationOverlayComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 46);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](1, "div", 47);
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
  }
}
function OperationOverlayComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelement"](0, "div", 48);
  }
}
class OperationOverlayComponent {
  constructor(info, operationOverlayService, el) {
    this.info = info;
    this.operationOverlayService = operationOverlayService;
    this.el = el;
    this.isShow = false;
    this.defaultDegree = 90;
    this.clefs = {
      clefTreble: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].trebleClef(),
      clefTenorVoice: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].tenorVoiceClef(),
      clefTenor: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].tenorClef(),
      clefAlto: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].altoClef(),
      clefBass: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].bassClef(),
      clefF8Below: _models_clef__WEBPACK_IMPORTED_MODULE_20__["default"].vocalTenorClef()
    };
    this.barlineGroup = {
      name: 'Barline',
      items: [{
        action: 'barline',
        tip: 'Single Barline',
        icon: 'single-barline',
        value: 'single'
      }, {
        action: 'barline',
        tip: 'Double Barline',
        icon: 'double-barline',
        value: 'double'
      }, {
        action: 'barline',
        tip: 'FInal Barline',
        icon: 'final-barline',
        value: 'final'
      }, {
        action: 'barline',
        tip: 'Invisible Barline',
        icon: 'invisible-barline',
        value: 'invisible'
      }]
    };
    this.measureGroup = {
      name: 'Measure',
      items: [{
        action: 'addMeasureBefore',
        tip: 'Add Measure Before',
        icon: 'add-measure-before'
      }, {
        action: 'addMeasureAfter',
        tip: 'Add Measure After',
        icon: 'add-measure-after'
      }, {
        action: 'deleteMeasure',
        tip: 'Delete Measures',
        icon: 'delete-measures'
      }, {
        type: 'split'
      }, {
        action: 'changeTimeSignature',
        tip: 'Change Time Signature',
        icon: 'change-time-signature'
      }, {
        action: 'changeKeySignature',
        tip: 'Change Key Signature',
        icon: 'change-key-signature'
      }, {
        type: 'split'
      }, {
        action: 'setClef',
        tip: 'Treble Clef',
        icon: 'treble-clef',
        value: 'clefTreble'
      }, {
        action: 'setClef',
        tip: 'Bass Clef',
        icon: 'bass-clef',
        value: 'clefBass'
      }, {
        type: 'split'
      }, ...this.barlineGroup.items, {
        type: 'split'
      }, {
        action: 'setClef',
        tip: 'Tenor Clef',
        icon: 'tenor-clef',
        value: 'clefTenor'
      }, {
        action: 'setClef',
        tip: 'Alto Clef',
        icon: 'alto-clef',
        value: 'clefAlto'
      }, {
        action: 'setClef',
        tip: 'Tenor Voice Clef',
        icon: 'tenor-voice-clef',
        value: 'clefTenorVoice'
      }, {
        action: 'setClef',
        tip: 'Octave Bass Clef',
        icon: 'octave-bass-clef',
        value: 'clefF8Below'
      }, {
        type: 'split'
      }, {
        action: 'cautionaries',
        tip: 'Hide/Show Cautionaries   Ctrl+Enter',
        icon: 'hide-show-cautionaries'
      }, {
        action: 'hideShowMeasure',
        tip: 'Hide/Show Measures',
        icon: 'hide-show-measures'
      }, {
        type: 'split'
      }, {
        action: 'multirest',
        tip: 'Multi-measure Rest',
        icon: 'multi-measure-rest'
      }]
    };
    this.repeatGroup = {
      name: 'Repeat',
      items: [{
        action: 'startRepeat',
        tip: 'Start Repeat',
        icon: 'start-repeat'
      }, {
        action: 'endRepeat',
        tip: 'End Repeat',
        icon: 'end-repeat'
      }, {
        action: 'segno',
        tip: 'Segno',
        icon: 'segno'
      }, {
        action: 'coda',
        tip: 'Coda',
        icon: 'coda'
      }, {
        action: 'repeatEnding',
        tip: 'Repeat Ending',
        icon: 'repeat-ending'
      }, {
        action: 'repeatEndingFinal',
        tip: 'Repeat Ending Final',
        icon: 'repeat-ending-final'
      }, {
        action: 'measureRepeat',
        tip: 'Measure Repeat',
        icon: 'measure-repeat'
      }
      // {
      //   action: 'twoeasureRepeat',
      //   tip: 'Two Measure Repeat',
      //   icon: 'two-measure-repeat',
      // },
      // {
      //   action: 'unrollRepeats',
      //   tip: 'Unroll Repeats',
      //   icon: 'unroll-repeats',
      // },
      ]
    };

    this.dynamicGroups = {
      name: 'Dynamics',
      items: [{
        action: 'expression',
        tip: 'Expression Text',
        icon: 'expression-text'
      }, {
        type: 'split'
      }, {
        action: 'crescendo',
        tip: 'Crescendo <',
        icon: 'crescendo'
      }, {
        action: 'diminuendo',
        tip: 'Diminuendo >',
        icon: 'diminuendo'
      }, {
        type: 'split'
      }, {
        action: 'lineCrescendo',
        tip: 'Crescendo',
        icon: 'crescendo-dot'
      }, {
        action: 'lineDiminuendo',
        tip: 'Diminuendo',
        icon: 'diminuendo-dot'
      }, {
        action: 'letVibrate',
        tip: 'Let Vibrate',
        icon: 'let-vibrate'
      }, {
        action: 'pedal',
        tip: 'Pedal Down',
        icon: 'pedal-down'
      }]
    };
    this.tempoGroups = {
      name: 'Tempo',
      items: [{
        type: 'tempoNotePicker'
      }, {
        action: 'addAccelerando',
        tip: 'Accelerando',
        icon: 'accelerando'
      }, {
        action: 'addRitardando',
        tip: 'Ritardando',
        icon: 'ritardando'
      }, {
        action: 'articulation',
        tip: 'Fermata',
        icon: 'fermata',
        value: 'fermata'
      }, {
        action: 'articulation',
        tip: 'Caesura',
        icon: 'caesura',
        value: 'caesura'
      }, {
        action: 'articulation',
        tip: 'Breath Mark',
        icon: 'breath-mark',
        value: 'breath'
      }]
    };
    this.noteActionGroups = [{
      name: 'Duration',
      items: [{
        action: 'setDuration',
        tip: 'Whole Note',
        icon: 'whole-note',
        value: '8'
      }, {
        action: 'setDuration',
        tip: 'Half Note',
        icon: 'half-note',
        value: '7'
      }, {
        action: 'setDuration',
        tip: 'Quarter Note',
        icon: 'quarter-note',
        value: '6'
      }, {
        action: 'setDuration',
        tip: 'Eighth Note',
        icon: 'eighth-note',
        value: '5'
      }, {
        action: 'setDuration',
        tip: '16th Note',
        icon: '16th-note',
        value: '4'
      }, {
        action: 'setDuration',
        tip: '32nd Note',
        icon: '32nd-note',
        value: '3'
      }, {
        action: 'setDuration',
        tip: '64th Note',
        icon: '64th-note',
        value: '2'
      }, {
        type: 'split'
      }, {
        action: 'dot',
        tip: 'Rhythm Dot',
        icon: 'rhythm-dot'
      }, {
        action: 'doubledot',
        tip: 'Double Dot',
        icon: 'double-dot'
      }, {
        action: 'tie',
        tip: 'Tie',
        icon: 'tie'
      }, {
        action: 'incomingTie',
        tip: 'Incoming Tie',
        icon: 'incoming-tie'
      }, {
        type: 'split'
      }, {
        action: 'articulation',
        tip: 'L.V. Tie',
        icon: 'lv-tie',
        value: 'lvTie'
      }, {
        type: 'split'
      }, {
        action: 'noteShorter',
        tip: 'Decrease Note Duration',
        icon: 'decrease-note-duration'
      }, {
        action: 'noteLonger',
        tip: 'Increase Note Duration',
        icon: 'increase-note-duration'
      }, {
        type: 'split'
      }, {
        action: 'remove',
        tip: 'Remove',
        icon: 'trash-can'
      }]
    }, {
      name: 'Rhythm',
      items: [{
        action: 'tremolo',
        tip: 'Tremolo 1',
        icon: 'tremolo-1',
        value: 1
      }, {
        action: 'tremolo',
        tip: 'Tremolo 2',
        icon: 'tremolo-2',
        value: 2
      }, {
        action: 'tremolo',
        tip: 'Tremolo 3',
        icon: 'tremolo-3',
        value: 3
      }, {
        action: 'startTremolo',
        tip: 'Start Tremolo',
        icon: 'start-tremolo'
      }, {
        action: 'articulation',
        tip: 'Roll',
        icon: 'roll',
        value: 'buzz'
      }, {
        type: 'split'
      }, {
        action: 'beamAt',
        tip: 'Start Beam }',
        icon: 'start-beam'
      }, {
        action: 'beamBefore',
        tip: 'Continue Beam {',
        icon: 'continue-beam'
      }, {
        type: 'split'
      }, {
        action: 'enterSlash',
        tip: 'Add Slash /',
        icon: 'add-slash'
      }, {
        action: 'grace',
        tip: 'Grace Note Ctrl+G',
        icon: 'grace-note'
      }, {
        action: 'appoggiatura',
        tip: 'Appoggiatura',
        icon: 'appoggiatura'
      }, {
        type: 'split'
      }, {
        action: 'tuplet',
        tip: 'Duplet 2',
        icon: 'duplet',
        value: 2
      }, {
        action: 'tuplet',
        tip: 'Triplet 3',
        icon: 'triplet',
        value: 3
      }, {
        action: 'tuplet',
        tip: 'Quadruplet 4',
        icon: 'quadruplet',
        value: 4
      }, {
        action: 'tuplet',
        tip: 'Quintuplet 5',
        icon: 'quintuplet',
        value: 5
      }, {
        action: 'tuplet',
        tip: 'Sextuplet 6',
        icon: 'sextuplet',
        value: 6
      }, {
        action: 'tuplet',
        tip: 'Septuplet 7',
        icon: 'septuplet',
        value: 7
      }]
    }, this.tempoGroups, {
      name: 'Articulation',
      items: [{
        action: 'slur',
        tip: 'Slur S',
        icon: 'slur'
      }, {
        type: 'split'
      }, {
        action: 'articulation',
        tip: "Accent '",
        icon: 'accent',
        value: 'marcato'
      }, {
        action: 'articulation',
        tip: 'Staccato ;',
        icon: 'staccato',
        value: 'staccato'
      }, {
        action: 'articulation',
        tip: 'Tenuto :',
        icon: 'tenuto',
        value: 'tenuto'
      }, {
        action: 'articulation',
        tip: 'Strong Accent "',
        icon: 'strong-accent',
        value: 'martellato'
      }, {
        action: 'articulation',
        tip: 'Staccatissimo',
        icon: 'staccatissimo',
        value: 'staccatissimo'
      }, {
        type: 'split'
      }, {
        action: 'articulation',
        tip: 'Closed',
        icon: 'closed',
        value: 'closed'
      }, {
        action: 'articulation',
        tip: 'Open',
        icon: 'open',
        value: 'open'
      }, {
        action: 'articulation',
        tip: 'Down Bow',
        icon: 'down-bow',
        value: 'downBow'
      }, {
        action: 'articulation',
        tip: 'Up Bow',
        icon: 'up-bow',
        value: 'upBow'
      }, {
        type: 'split'
      }, {
        action: 'preEffect',
        tip: 'Rip1',
        icon: 'rip-1',
        value: 'rip1'
      }, {
        action: 'preEffect',
        tip: 'Rip2',
        icon: 'rip-2',
        value: 'rip2'
      }, {
        action: 'preEffect',
        tip: 'Scoop',
        icon: 'scoop',
        value: 'scoop'
      }, {
        action: 'preEffect',
        tip: 'Plop',
        icon: 'plop',
        value: 'plop'
      }, {
        action: 'postEffect',
        tip: 'Fall 1',
        icon: 'fall-1',
        value: 'fall1'
      }, {
        action: 'postEffect',
        tip: 'Fall 2',
        icon: 'fall-2',
        value: 'fall2'
      }, {
        action: 'postEffect',
        tip: 'Quick Fall',
        icon: 'quick-fall',
        value: 'quickFall'
      }, {
        action: 'postEffect',
        tip: 'Doit',
        icon: 'doit',
        value: 'doit'
      }, {
        action: 'articulation',
        tip: 'Bend',
        icon: 'bend',
        value: 'bendJazz'
      }]
    }, this.measureGroup, this.repeatGroup, this.dynamicGroups, {
      name: 'Pitch',
      items: [{
        action: 'accidental',
        tip: 'Sharp +',
        icon: 'sharp',
        value: _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.SHARP
      }, {
        action: 'accidental',
        tip: 'Flat -',
        icon: 'flat',
        value: _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.FLAT
      }, {
        action: 'accidental',
        tip: 'Natural =',
        icon: 'natural',
        value: _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.NATURAL
      }, {
        type: 'split'
      }, {
        action: 'moveUp',
        tip: 'Move Up ↑',
        icon: 'move-up'
      }, {
        action: 'moveDown',
        tip: 'Move Down ↓',
        icon: 'move-down'
      }, {
        action: 'moveHalfUp',
        tip: 'Move Up a Half Step Shift+↑',
        icon: 'move-up-half-step'
      }, {
        action: 'moveHalfDown',
        tip: 'Move Down a Half Step Shift+↓',
        icon: 'move-down-half-step'
      }, {
        action: 'moveOctaveUp',
        tip: 'Move Up an Octave Ctrl+↑',
        icon: 'move-up-octave'
      }, {
        action: 'moveOctaveDown',
        tip: 'Move Down an Octave Ctrl+↓',
        icon: 'move-down-octave'
      }, {
        type: 'split'
      }, {
        action: 'accidental',
        tip: 'Doule Sharp *',
        icon: 'double-sharp',
        value: _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.DOUBLE_SHARP
      }, {
        action: 'accidental',
        tip: 'Doule Flat _',
        icon: 'double-flat',
        value: _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.DOUBLE_FLAT
      }, {
        action: 'enharmonic',
        tip: 'Enharmonic Shift Z',
        icon: 'enharmonic-shift'
      }, {
        action: 'courtesyAccidental',
        tip: 'Courtesy Accidental %',
        icon: 'courtesy-accidental'
      }
      // { type: 'split' },
      // {
      //   action: 'octaveUp',
      //   tip: 'Octave Up ',
      //   icon: 'octave-up',
      // },
      // {
      //   action: 'octaveDown',
      //   tip: 'Octave Down',
      //   icon: 'octave-down',
      // },
      ]
    }, {
      name: 'Ornament',
      items: [{
        action: 'trill',
        tip: 'Trill',
        icon: 'trill'
      }, {
        action: 'arpeggio',
        tip: 'Arpeggio',
        icon: 'arpeggio',
        value: null
      }, {
        action: 'glissando',
        tip: 'Glissando',
        icon: 'glissando'
      }, {
        action: 'articulation',
        tip: 'Mordent',
        icon: 'mordent',
        value: 'mordent'
      }, {
        action: 'articulation',
        tip: 'Inverted Mordent',
        icon: 'inverted-mordent',
        value: 'invertedMordent'
      }, {
        action: 'articulation',
        tip: 'Turn',
        icon: 'turn',
        value: 'turn'
      }, {
        action: 'articulation',
        tip: 'Inverted Turn',
        icon: 'inverted-turn',
        value: 'invertedTurn'
      }]
    }, {
      name: 'Note',
      items: [{
        action: 'noteHead',
        tip: 'Normal',
        icon: 'normal',
        value: 'normal'
      }, {
        action: 'noteHead',
        tip: 'Stemless',
        icon: 'stemless',
        value: 'stemless'
      }, {
        action: 'noteHead',
        tip: 'Slash',
        icon: 'slash',
        value: 'slash'
      }, {
        action: 'noteHead',
        tip: 'Hit',
        icon: 'hit',
        value: 'hit'
      }, {
        action: 'noteHead',
        tip: 'Cross',
        icon: 'cross',
        value: 'cross'
      }, {
        action: 'noteHead',
        tip: 'Square',
        icon: 'square',
        value: 'square'
      }, {
        action: 'noteHead',
        tip: 'Diamond',
        icon: 'diamond',
        value: 'diamond'
      }, {
        action: 'noteHead',
        tip: 'Triangle',
        icon: 'triangle',
        value: 'triangle'
      }, {
        action: 'noteHead',
        tip: 'Harmonic',
        icon: 'harmonic',
        value: 'harmonic'
      }, {
        action: 'noteHead',
        tip: 'Cross Circle',
        icon: 'cross-circle',
        value: 'crossCircle'
      }, {
        action: 'noteHead',
        tip: 'Note Name',
        icon: 'note-name',
        value: 'named'
      }, {
        type: 'split'
      }, {
        action: 'direction',
        tip: 'Stems Down',
        icon: 'stems-down',
        value: 'down'
      }, {
        action: 'direction',
        tip: 'Stems Up',
        icon: 'stems-up',
        value: 'up'
      }, {
        type: 'split'
      }, {
        action: 'cue',
        tip: 'Cue',
        icon: 'cue'
      }, {
        action: 'parentheses',
        tip: 'Parentheses',
        icon: 'parentheses'
      }]
    }];
    this.restActionGroups = [{
      name: 'Duration',
      items: [{
        action: 'setDuration',
        tip: 'Whole Rest',
        icon: 'whole-rest',
        value: '8'
      }, {
        action: 'setDuration',
        tip: 'Half Rest',
        icon: 'half-rest',
        value: '7'
      }, {
        action: 'setDuration',
        tip: 'Quarter Rest',
        icon: 'quarter-rest',
        value: '6'
      }, {
        action: 'setDuration',
        tip: 'Eighth Rest',
        icon: 'eighth-rest',
        value: '5'
      }, {
        action: 'setDuration',
        tip: '16th Rest',
        icon: '16th-rest',
        value: '4'
      }, {
        action: 'setDuration',
        tip: '32nd Rest',
        icon: '32nd-rest',
        value: '3'
      }, {
        action: 'setDuration',
        tip: '64th Rest',
        icon: '64th-rest',
        value: '2'
      }, {
        type: 'split'
      }, {
        action: 'dot',
        tip: 'Rhythm Dot',
        icon: 'rhythm-dot'
      }, {
        action: 'doubledot',
        tip: 'Double Dot',
        icon: 'double-dot'
      }, {
        action: 'noteShorter',
        tip: 'Decrease Rest Duration',
        icon: 'decrease-note-duration'
      }, {
        action: 'noteLonger',
        tip: 'Increase Rest Duration',
        icon: 'increase-note-duration'
      }]
    }, this.measureGroup, this.tempoGroups];
    this.groups = [];
    this.state = {};
    this.isShowKeySignature = false;
    this.isShowTimeSignature = false;
    this.bpmChangeSubject = new rxjs__WEBPACK_IMPORTED_MODULE_25__.Subject();
    this.selection = info.selection;
    this.controller = info.controller;
    this.documentController = info.documentController;
    this.boundingRect = info.boundingRect;
    this.rightToLeft = this.boundingRect.x > document.body.clientWidth / 2;
    this.notation = this.selection.selectedObjects[0];
    this.note = this.controller.document.firstSelectedNote;
    this.noteSet = this.controller.document.firstSelectedNoteSet;
    this.barline = this.controller.document.firstSelectedBarline;
    if (this.noteSet) {
      this.parent = this.noteSet.parent;
    } else if (this.barline) {
      this.parent = this.barline.parent;
    }
    const notation = this.controller.document.firstSelectedNotation(_models_notation__WEBPACK_IMPORTED_MODULE_8__.Notation);
    if (notation instanceof _models_value_notation__WEBPACK_IMPORTED_MODULE_9__["default"] || notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_3__["default"]) {
      this.otherNotation = null;
    } else {
      this.otherNotation = notation;
    }
    this.updateStates();
    if (this.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      if (this.notation instanceof _models_note__WEBPACK_IMPORTED_MODULE_1__.Note || this.notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_6__.NoteSet && this.notation.notes.length > 0) {
        this.groups = lodash__WEBPACK_IMPORTED_MODULE_14__.cloneDeep(this.noteActionGroups);
        this.activedGroup = this.groups[0];
      } else if (this.notation instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_2__["default"] || this.notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_6__.NoteSet && this.notation.notes.length === 0) {
        this.groups = lodash__WEBPACK_IMPORTED_MODULE_14__.cloneDeep(this.restActionGroups);
      } else if (this.notation instanceof _models_barline__WEBPACK_IMPORTED_MODULE_3__["default"]) {
        this.groups = [this.barlineGroup];
      } else if (this.notation instanceof _models_timesignature__WEBPACK_IMPORTED_MODULE_21__["default"]) {
        this.doAction('changeTimeSignature', null);
      } else if (this.notation instanceof _models_keysignature__WEBPACK_IMPORTED_MODULE_22__["default"]) {
        this.doAction('changeKeySignature', null);
      }
      this.isShow = this.groups.length > 0;
      const allItems = this.groups.reduce((prev, next) => prev.concat(next.items), []);
      this.updateValue(allItems);
      this.updateDot(allItems);
      this.updateTie(allItems);
      this.updateAccident(allItems);
      this.updateCourtesyAccidental(allItems);
      this.updateTremolo(allItems);
      this.updateArticulation(allItems);
      this.updateRepeat(allItems);
      this.updatePreEffects(allItems);
      this.updatePostEffects(allItems);
      this.updateArpeggio(allItems);
      this.updateGlissando(allItems);
      this.updateNoteHead(allItems);
      this.updateCue(allItems);
      this.updateParentheses(allItems);
      this.updateBarline(allItems);
      this.updateHide(allItems);
    }
    let width = 0;
    const showLabel = this.groups.length > 1 && this.groups.length <= 3;
    this.groups.forEach(group => {
      const items = group.items.filter(g => !g.type);
      const splits = group.items.filter(g => g.type);
      let groupWidth;
      if (group.name === 'Tempo') {
        groupWidth = 327;
      } else {
        groupWidth = items.length * 36 + splits.length * 16.8 + (showLabel ? 80 : 0);
      }
      group.width = groupWidth;
      width = Math.max(width, groupWidth);
    });
    if (this.groups.length > 3) {
      this.el.nativeElement.style.height = 272 + 'px';
      this.el.nativeElement.style.width = 272 + width + 'px';
      this.el.nativeElement.style.marginLeft = -272 / 2 + 'px';
      this.el.nativeElement.style.marginTop = 272 / 2 + 'px';
      this.el.nativeElement.style.background = 'transparent';
      this.el.nativeElement.style.boxShadow = 'none';
      // this.el.nativeElement.style.boxShadow =
      //   '0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d';
    } else {
      this.el.nativeElement.style.height = this.groups.length * 44 + 'px';
      this.el.nativeElement.style.width = width + 'px';
      this.el.nativeElement.style.marginLeft = -width / 2 + 'px';
    }
  }
  updateAccident(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    if (this.state.accidental != null) {
      const accidentalItem = allItems.find(i => i.value === this.state.accidental);
      if (accidentalItem) {
        accidentalItem.selected = true;
      }
    }
  }
  updateTie(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    if (this.state.tied) {
      const tieItem = allItems.find(i => i.action === 'tie');
      if (tieItem) {
        tieItem.selected = true;
      }
    }
  }
  updateDot(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    if (this.state.dots == 1) {
      const dotItem = allItems.find(i => i.action === 'dot');
      if (dotItem) {
        dotItem.selected = true;
      }
    } else if (this.state.dots == 2) {
      const dotItem = allItems.find(i => i.action === 'doubledot');
      if (dotItem) {
        dotItem.selected = true;
      }
    }
  }
  updateValue(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'setDuration' && i.value == this.state.value);
    if (item) {
      item.selected = true;
    }
  }
  ngOnInit() {
    if (this.tempoBpmChangeSub$) {
      this.tempoBpmChangeSub$.unsubscribe();
    }
    this.tempoBpmChangeSub$ = this.bpmChangeSubject.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_26__.debounceTime)(500), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_27__.distinctUntilChanged)()).subscribe(bpm => {
      this.state.tempoBPM = bpm;
      this.tempoValueChange(this.state.tempoValue);
    });
  }
  doAction(action, val) {
    let measureIndex = 0;
    switch (action) {
      case 'setDuration':
        this.controller.setSelectionDuration(val, 0);
        break;
      case 'dot':
        if (this.noteSet && !(this.noteSet instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_2__["default"])) {
          this.controller.setSelectionDuration(this.noteSet.value, this.state.dots === 1 ? 0 : 1);
        }
        // this.controller.;
        break;
      case 'doubledot':
        if (this.noteSet && !(this.noteSet instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_2__["default"])) {
          this.controller.setSelectionDuration(this.noteSet.value, this.state.dots === 2 ? 0 : 2);
        }
        // this.controller.;
        break;
      case 'tie':
        this.controller.modifyTies();
        this.updateStates();
        this.updateTie();
        break;
      case 'accidental':
        switch (val) {
          case _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.DOUBLE_FLAT:
            this.controller.applyAccidentalToSelection(-2);
            break;
          case _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.FLAT:
            this.controller.applyAccidentalToSelection(-1);
            break;
          case _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.NATURAL:
            this.controller.applyAccidentalToSelection(0);
            break;
          case _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.SHARP:
            this.controller.applyAccidentalToSelection(1);
            break;
          case _models_accidental__WEBPACK_IMPORTED_MODULE_15__.Accidental.DOUBLE_SHARP:
            this.controller.applyAccidentalToSelection(2);
            break;
        }
        this.updateStates();
        this.updateAccidental();
        break;
      case 'moveUp':
        this.controller.transposeSelectionDiatonic(1);
        this.documentController.ensureSelectionVisible();
        break;
      case 'moveDown':
        this.controller.transposeSelectionDiatonic(-1);
        this.documentController.ensureSelectionVisible();
        break;
      case 'moveHalfUp':
        this.controller.transposeSelectionChromatic(1);
        this.documentController.ensureSelectionVisible();
        this.updateStates();
        this.updateAccidental();
        break;
      case 'moveHalfDown':
        this.controller.transposeSelectionChromatic(-1);
        this.documentController.ensureSelectionVisible();
        this.updateStates();
        this.updateAccidental();
        break;
      case 'moveOctaveUp':
        this.controller.transposeSelectionAtOctave(1);
        this.documentController.ensureSelectionVisible();
        break;
      case 'moveOctaveDown':
        this.controller.transposeSelectionAtOctave(-1);
        this.documentController.ensureSelectionVisible();
        break;
      case 'enharmonic':
        this.controller.enharmonicShift();
        break;
      case 'parentheses':
        this.controller.modifyParentheses();
        this.updateStates();
        this.updateParentheses();
        break;
      case 'courtesyAccidental':
        this.controller.modifyCourtesyAccidentals();
        this.updateStates();
        this.updateCourtesyAccidental();
        break;
      case 'incomingTie':
        this.controller.modifyIncomingTies();
        break;
      case 'bent':
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.BEND_LIAISON);
        this.documentController.ensureSelectionVisible();
        break;
      case 'preBent':
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.PRE_BEND_LIAISON);
        this.documentController.ensureSelectionVisible();
        break;
      case 'slide':
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.SLIDE_LIAISON);
        this.documentController.ensureSelectionVisible();
        break;
      case 'glissando':
        this.controller.modifyLiaisons(_models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.GLISSANDO_LIAISON);
        this.documentController.ensureSelectionVisible();
        this.updateStates();
        this.updateGlissando();
        break;
      case 'remove':
        this.controller.deleteSelection();
        this.documentController.ensureSelectionVisible();
        break;
      case 'removeMarkings':
        this.controller.removeSelectionMarkings();
        break;
      case 'tremolo':
        this.controller.setTremolo(this.state.tremolo == val ? 0 : val);
        this.updateStates();
        this.updateTremolo();
        break;
      case 'startTremolo':
        this.controller.startTremolo();
        break;
      case 'multirest':
        this.controller.addMultiRest();
        break;
      case 'arpeggio':
        this.controller.modifyArpeggio(val);
        this.updateStates();
        this.updateArpeggio();
        break;
      case 'cue':
        this.controller.modifyCue();
        this.updateStates();
        this.updateCue();
        break;
      case 'direction':
        this.controller.modifyDirection(val);
        break;
      case 'notationDirection':
        this.controller.modifyDirection(val);
        break;
      case 'grace':
        this.controller.modifyGrace(false);
        break;
      case 'appoggiatura':
        this.controller.modifyGrace(true);
        break;
      case 'segno':
        this.controller.addSegno();
        break;
      case 'coda':
        this.controller.addCoda();
        break;
      case 'splitSystem':
        this.controller.toggleSplitSystem();
        break;
      case 'repeatEnding':
        this.documentController.addRepeatEnding();
        this.controller.document.validateNow();
        break;
      case 'repeatEndingFinal':
        this.documentController.addRepeatEnding(true);
        this.controller.document.validateNow();
      case 'measureRepeat':
        this.controller.setMeasureRepeat();
        break;
      case 'systemText':
        this.documentController.addPerformance(true);
        break;
      case 'rehearsalLetter':
        this.controller.addRehearsalLetter();
        break;
      case 'textbox':
        this.controller.toggleTextbox();
        break;
      case 'color':
        this.controller.setColor(val);
        break;
      case 'chordSymbol':
        this.documentController.addChordSymbol();
        break;
      case 'lyrics':
        this.documentController.addLyric();
        break;
      case 'expression':
        this.documentController.addExpression();
        break;
      case 'performance':
        this.documentController.addPerformance(false);
        break;
      case 'enterSlash':
        this.controller.enterSlash();
        break;
      case 'beamBefore':
        this.controller.modifyBeamBeforeSelection();
        this.updateStates();
        this.updateBeam();
        break;
      case 'beamAt':
        this.controller.modifyBeamAtSelection();
        this.updateStates();
        this.updateBeam();
        break;
      case 'barline':
        this.controller.setBarlineType(val);
        this.updateStates();
        this.updateBarline();
        break;
      case 'resetMeasureNumbers':
        this.controller.resetMeasureNumbers();
        break;
      case 'startRepeat':
        this.controller.modifyStartRepeat();
        this.updateStates();
        this.updateRepeat();
        break;
      case 'endRepeat':
        this.controller.modifyEndRepeat();
        this.updateStates();
        this.updateRepeat();
        break;
      case 'breakSetType':
        this.controller.applyBreakSet(val);
        break;
      case 'breakType':
        this.controller.applyBreak(val);
        break;
      case 'cautionaries':
        this.controller.toggleCautionaries();
        break;
      case 'noteHead':
        this.controller.setNoteHead(this.state.noteHead != val ? val : null);
        this.updateStates();
        this.updateNoteHead();
        break;
      case 'articulation':
        this.controller.modifyArticulation(val);
        this.updateStates();
        this.updateArticulation();
        break;
      case 'slur':
        this.controller.addSpanToSelection(new _models_slur__WEBPACK_IMPORTED_MODULE_16__["default"]());
        break;
      case 'octaveUp':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_OCTAVE_UP));
        break;
      case 'octaveDown':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_OCTAVE_DOWN));
        break;
      case 'letVibrate':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_LET_VIBRATE, 'l.v.'));
        break;
      case 'trill':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_TRILL));
        break;
      case 'vibrato':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_VIBRATO));
        break;
      case 'lineCrescendo':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_CRESCENDO, 'cresc.'));
        break;
      case 'lineDiminuendo':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_DIMINUENDO, 'dim.'));
        break;
      case 'accelerando':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_ACCELERANDO, 'accel.'));
        break;
      case 'ritardando':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_RITARDANDO, 'rit.'));
        break;
      case 'quarterBendAlteration':
        this.controller.modifyQuarterBendAlteration();
        break;
      case 'slurArticulation':
        const slur = new _models_slur__WEBPACK_IMPORTED_MODULE_16__["default"]();
        slur.slurArticulation = val;
        this.controller.addSpanToSelection(slur);
        break;
      case 'palmMute':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_PALM_MUTE, 'P.M.'));
        break;
      case 'letRing':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_LET_VIBRATE, 'l.r.'));
        break;
      case 'crescendo':
        this.controller.addSpanToSelection(_models_hairpin__WEBPACK_IMPORTED_MODULE_19__["default"].createHairpin(_models_hairpin__WEBPACK_IMPORTED_MODULE_19__["default"].CRESCENDO, this.controller.document.score.staffMetrics));
        break;
      case 'diminuendo':
        this.controller.addSpanToSelection(_models_hairpin__WEBPACK_IMPORTED_MODULE_19__["default"].createHairpin(_models_hairpin__WEBPACK_IMPORTED_MODULE_19__["default"].DIMINUENDO, this.controller.document.score.staffMetrics));
        break;
      case 'pedal':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_PEDAL));
        break;
      case 'line':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(val));
        break;
      case 'preEffect':
        this.controller.applyPreEffectToSelection(val);
        this.updateStates();
        this.updatePreEffects();
        break;
      case 'postEffect':
        this.controller.applyPostEffectToSelection(val);
        this.updateStates();
        this.updatePostEffects();
        break;
      case 'textBlockBefore':
        // this.controller.addTextBlock(Block.BEFORE_SYSTEM);
        break;
      case 'textBlockAfter':
        // this.controller.addTextBlock(Block.AFTER_SYSTEM);
        break;
      case 'tuplet':
        this.controller.createTuplet(val);
        this.documentController.ensureSelectionVisible();
        break;
      case 'noteShorter':
        this.controller.adjustSelectionDuration(-1, false);
        this.documentController.ensureSelectionVisible();
        break;
      case 'noteLonger':
        this.controller.adjustSelectionDuration(1, false);
        this.documentController.ensureSelectionVisible();
        break;
      case 'addMeasureAfter':
        if (this.measures) {
          measureIndex = this.measures.endIndex;
        } else {
          measureIndex = this.controller.document.score.numMeasures;
        }
        this.controller.insertBlankMeasureAt(measureIndex);
        break;
      case 'addMeasureBefore':
        measureIndex = 0;
        if (this.measures) {
          measureIndex = this.measures.startIndex;
        }
        this.controller.insertBlankMeasureAt(measureIndex);
        break;
      case 'deleteMeasure':
        this.controller.document.selection = this.measures;
        this.controller.deleteSelection();
        break;
      case 'changeTimeSignature':
        const timeSignatureSelection = this.controller.timeSignatureSelection;
        const timeSignature = this.controller.score.systemStaff.getMeasureAt(timeSignatureSelection.startIndex).timeSignature;
        this.infoForTimeSignature = timeSignature;
        this.isShowTimeSignature = true;
        break;
      case 'changeKeySignature':
        const keySignatureSelection = this.controller.keySignatureSelection;
        const keySignature = this.controller.score.systemStaff.getMeasureAt(keySignatureSelection.startIndex).keySignature;
        this.infoForKeySignature = keySignature;
        this.isShowKeySignature = true;
        break;
      case 'hideShowMeasure':
        this.controller.toggleHideStaff();
        this.updateStates();
        this.updateHide();
        break;
      case 'setClef':
        this.controller.changeClef(this.clefs[val]);
        break;
      case 'addAccelerando':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_ACCELERANDO, 'accel.'));
        break;
      case 'addRitardando':
        this.controller.addSpanToSelection((0,_utils_line_notation__WEBPACK_IMPORTED_MODULE_18__.createLineNotation)(_models_line_notation__WEBPACK_IMPORTED_MODULE_17__["default"].TYPE_RITARDANDO, 'rit.'));
        break;
      default:
        break;
    }
    this.updateModel();
  }
  updateModel() {
    const noteSet = this.controller.document.firstSelectedNoteSet;
    if (noteSet) {
      this.controller.document.handleModelChange({
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_5__.ModelEventKind.MODEL_CHANGE,
        child: noteSet,
        parent: noteSet.parent
      });
    } else if (this.noteSet) {
      this.controller.document.handleModelChange({
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_5__.ModelEventKind.MODEL_CHANGE,
        child: this.noteSet,
        parent: this.parent
      });
    } else if (this.barline) {
      this.controller.document.handleModelChange({
        kind: _models_model_event_kind__WEBPACK_IMPORTED_MODULE_5__.ModelEventKind.MODEL_CHANGE,
        child: this.barline,
        parent: this.parent
      });
    }
  }
  updatePreEffects(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'preEffect');
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      item.selected = false;
    }
    if (this.state.preEffect) {
      const item = allItems.find(i => i.value === this.state.preEffect.type);
      if (item) {
        item.selected = true;
      }
    }
  }
  updatePostEffects(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'postEffect');
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      item.selected = false;
    }
    if (this.state.postEffect) {
      const item = allItems.find(i => i.value === this.state.postEffect.type);
      if (item) {
        item.selected = true;
      }
    }
  }
  updateRepeat(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const startRepeatItem = allItems.find(i => i.action === 'startRepeat');
    if (this.state.startRepeat) {
      if (startRepeatItem) {
        startRepeatItem.selected = true;
      }
    } else {
      if (startRepeatItem) {
        startRepeatItem.selected = false;
      }
    }
    const endRepeatItem = allItems.find(i => i.action === 'endRepeat');
    if (this.state.endRepeat) {
      if (endRepeatItem) {
        endRepeatItem.selected = true;
      }
    } else {
      if (endRepeatItem) {
        endRepeatItem.selected = false;
      }
    }
  }
  updateBeam(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const beamBeforeItem = allItems.find(i => i.action === 'beamBefore');
    if (beamBeforeItem) {
      beamBeforeItem.selected = this.state.beamBefore;
    }
    const beamAtItem = allItems.find(i => i.action === 'beamAt');
    if (beamAtItem) {
      beamAtItem.selected = this.state.beamAt;
    }
  }
  updateArticulation(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'articulation');
    if (items.length > 0) {
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        item.selected = false;
        if (this.state.articulations.includes(item.value)) {
          item.selected = true;
        }
      }
    }
  }
  updateTremolo(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    if (this.state.tremolo != 0) {
      const item = allItems.find(i => i.action === 'tremolo' && i.value == this.state.tremolo);
      if (item) {
        item.selected = true;
      }
    } else {
      const item = allItems.find(i => i.action === 'tremolo' && i.selected);
      if (item) {
        item.selected = false;
      }
    }
  }
  updateCourtesyAccidental(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'courtesyAccidental');
    if (this.state.courtesyAccidental) {
      if (item) {
        item.selected = true;
      }
    } else {
      if (item) {
        item.selected = false;
      }
    }
  }
  updateAccidental(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const accidentalItems = allItems.filter(i => i.action === 'accidental');
    accidentalItems.forEach(i => {
      i.selected = false;
    });
    if (this.state.accidental != null) {
      const accidentalItem = allItems.find(i => i.value === this.state.accidental);
      if (accidentalItem) {
        accidentalItem.selected = true;
      }
    }
  }
  updateStates() {
    this.state = {};
    if (this.note && this.note.measure && this.note.measure.staff && this.note.measure.staff.score) {
      this.state.accidental = this.note.measure.getScoreNote(this.note).accidental;
      this.state.tied = this.note.tied;
      this.state.parentheses = this.note.parentheses;
      this.state.courtesyAccidental = this.note.courtesyAccidental;
      this.state.bent = this.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.BEND_LIAISON;
      this.state.preBent = this.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.PRE_BEND_LIAISON;
      this.state.slide = this.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.SLIDE_LIAISON;
      this.state.glissando = this.note.liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_7__.Liaison.GLISSANDO_LIAISON;
      this.state.noteHead = this.note.noteHead;
      this.state.xOffset = 10 * this.note.dx;
      this.state.yOffset = 10 * this.note.dy;
      this.state.quarterBendAlteration = this.note.tuning !== 0;
      this.state.cue = this.note.effectiveCue;
      this.state.preEffect = this.note.preEffect;
      this.state.postEffect = this.note.postEffect;
      this.state.canHideStaff = this.note.measure.canHideStaff;
    } else {
      this.state.preEffect = null;
      this.state.postEffect = null;
      this.state.accidental = null;
      this.state.tied = this.noteSet && this.noteSet.tied && this.noteSet.tieCount === this.noteSet.notes.length;
    }
    if (this.noteSet) {
      this.state.value = this.noteSet.value;
      this.state.dots = this.noteSet.dots;
      this.state.articulations = this.noteSet.articulations;
      this.state.tremolo = this.noteSet.tremolo;
      this.state.arpeggio = this.noteSet.arpeggio;
      this.state.direction = this.noteSet.direction;
      this.state.grace = this.noteSet.grace && !this.noteSet.appoggiatura;
      this.state.appoggiatura = this.noteSet.grace && this.noteSet.appoggiatura;
      this.state.restSelected = this.noteSet.notes.length === 0;
      this.state.beamAt = this.noteSet.beam;
      const previousNoteset = this.noteSet.previousNoteSet();
      this.state.beamBefore = previousNoteset && previousNoteset.beam;
      if (!this.note) {
        this.state.cue = this.noteSet.cue;
      }
      this.state.canHideStaff = this.noteSet.measure.canHideStaff;
    } else {
      this.state.value = 0;
      this.state.dots = 0;
      this.state.articulations = 0;
      this.state.tremolo = 0;
      this.state.arpeggio = 0;
      this.state.direction = 0;
      this.state.grace = 0;
      this.state.appoggiatura = 0;
      this.state.restSelected = false;
      this.state.beamAt = 0;
      this.state.beamBefore = 0;
      this.state.cue = 0;
    }
    if (this.barline) {
      this.state.barlineType = this.barline.type;
      let measure = this.barline.measure;
      if (measure) {
        this.state.breakType = this.controller.document.score.getBreak(measure.index);
        this.state.endRepeat = measure.endRepeat;
        this.state.disableCautionaries = measure.disableCautionaries;
        if (this.noteSet || this.barline.position < measure.duration) {
          this.state.startRepeat = measure.startRepeat;
        } else if (measure.staff && measure.index < measure.staff.score.numMeasures - 1) {
          measure = measure.staff.getMeasureAt(measure.index + 1);
          this.state.startRepeat = measure.startRepeat;
        } else {
          this.state.startRepeat = false;
        }
      }
    } else {
      this.state.barlineType = null;
      this.state.startRepeat = false;
      this.state.endRepeat = false;
      this.state.disableCautionaries = false;
      this.state.breakType = null;
    }
    if (this.otherNotation) {
      this.state.textboxAvailable = false;
      if (this.otherNotation instanceof _models_trill__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        this.state.accidental = this.otherNotation.accidental;
        this.note = this.otherNotation.dummyNeighbor;
      } else if (this.otherNotation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        this.state.textboxAvailable = true;
        this.state.textbox = this.otherNotation.textbox;
      } else {
        if (this.otherNotation instanceof _models_lyric__WEBPACK_IMPORTED_MODULE_12__["default"]) {
          this.state.direction = this.otherNotation.direction;
        }
      }
    }
    this.measures = this.selection.selectedMeasures;
    let tempo;
    let startTempo;
    if (this.measures) {
      startTempo = this.getTempo(this.measures.startIndex);
      tempo = startTempo;
      for (let i = this.measures.startIndex; i < this.measures.endIndex; i++) {
        const t = this.getTempo(i);
        if (t.value !== tempo.value || t.dots !== tempo.dots || t.bpm != tempo.bpm) {
          tempo = null;
          break;
        }
      }
    } else {
      startTempo = this.getTempo(0);
      tempo = startTempo;
    }
    this.state.tempoValue = tempo ? tempo.value : startTempo.value;
    this.state.tempoDots = tempo ? tempo.dots : startTempo.dots;
    this.state.tempoBPM = tempo ? tempo.bpm : '';
    let swingEighths = 0;
    let swingSixteenths = 0;
    if (startTempo.meterMap && startTempo.meterMap.type === 'swing') {
      if (startTempo.meterMap.swingType === '8') {
        swingEighths = 100 * startTempo.meterMap.swingDelta;
      } else {
        swingSixteenths = 100 * startTempo.meterMap.swingDelta;
      }
    }
    this.state.swingEighths = swingEighths;
    this.state.swingSixteenths = swingSixteenths;
  }
  getTempo(measureIdx) {
    return this.controller.document.score.systemStaff.getMeasureAt(measureIdx).tempo;
  }
  updateArpeggio(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'arpeggio');
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      item.selected = false;
    }
    if (this.state.arpeggio === 'normal') {
      const item = allItems.find(i => i.action === 'arpeggio' && i.value == null);
      if (item) {
        item.selected = true;
      }
    }
  }
  updateGlissando(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'glissando');
    if (item) {
      item.selected = this.state.glissando;
    }
  }
  updateNoteHead(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'noteHead');
    items.forEach(i => {
      i.selected = false;
    });
    const item = allItems.find(i => i.action === 'noteHead' && i.value === this.state.noteHead);
    if (item) {
      item.selected = true;
    }
  }
  updateCue(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'cue');
    if (item) {
      item.selected = this.state.cue;
    }
  }
  updateParentheses(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'parentheses');
    if (item) {
      item.selected = this.state.parentheses;
    }
  }
  updateBarline(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const items = allItems.filter(i => i.action === 'barline');
    items.forEach(i => i.selected = false);
    const item = allItems.find(i => i.action === 'barline' && i.value === this.state.barlineType);
    if (item) {
      item.selected = true;
    }
  }
  updateHide(allItems) {
    allItems = allItems || this.groups.reduce((prev, next) => prev.concat(next.items), []);
    const item = allItems.find(i => i.action === 'hideShowMeasure');
    if (item) {
      item.selected = this.state.canHideStaff;
    }
  }
  selectGroup(evt, group) {
    evt.stopPropagation();
    const currIdx = this.groups.findIndex(g => g.name === this.activedGroup.name);
    this.activedGroup = group;
    const idx = this.groups.findIndex(g => g.name === group.name);
    const averageDegree = 360 / this.groups.length;
    const diff = idx - currIdx;
    let degree = 0;
    const diffDegree = diff * averageDegree;
    if (diff > 0) {
      if (diffDegree > 180) {
        degree = 360 - diffDegree;
      } else {
        degree = -diffDegree;
      }
    } else if (diff < 0) {
      if (diffDegree < -180) {
        degree = -(360 + diffDegree);
      } else {
        degree = -diffDegree;
      }
    }
    this.defaultDegree = this.defaultDegree + degree;
  }
  changeKeySignature(keysignature) {
    this.controller.changeKeySignature(keysignature);
    this.hideKeySignature();
    this.updateModel();
  }
  hideKeySignature() {
    this.isShowKeySignature = false;
  }
  changeTimeSignature(timeSignature) {
    this.controller.changeTimeSignature(timeSignature, timeSignature.mode !== _models_timesignature__WEBPACK_IMPORTED_MODULE_21__["default"].MODE_PICKUP);
    this.hideTimeSignature();
    this.updateModel();
  }
  hideTimeSignature() {
    this.isShowTimeSignature = false;
  }
  tempoValueChange(val) {
    this.state.tempoValue = val;
    const i = parseInt(this.state.tempoBPM, 10);
    if (i > 0 && i < 1e3 && this.state.value != -1) {
      const tempo = new _models_tempo__WEBPACK_IMPORTED_MODULE_13__["default"](val, this.state.tempoDots, i);
      const selection = this.controller.document.selection;
      if (selection) {
        for (let idx = selection.selectedMeasures.startIndex; idx < selection.selectedMeasures.endIndex; idx++) {
          const t = tempo.clone();
          t.meterMap = this.cloneMeterMap(idx);
          this.controller.setTempoAtMeasure(t, idx, idx + 1);
        }
      } else {
        tempo.meterMap = this.cloneMeterMap(0);
        this.controller.setSelectionTempo(tempo);
      }
    }
    this.updateModel();
  }
  toggleDot() {
    this.state.tempoDots = this.state.tempoDots == 1 ? 0 : 1;
    this.tempoValueChange(this.state.tempoValue);
  }
  bpmChange(bpm) {
    this.bpmChangeSubject.next(bpm);
  }
  cloneMeterMap(measureIndex) {
    return this.getTempo(measureIndex).clone().meterMap;
  }
}
OperationOverlayComponent.ɵfac = function OperationOverlayComponent_Factory(t) {
  return new (t || OperationOverlayComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_operation_overlay_tokens__WEBPACK_IMPORTED_MODULE_0__.OPERATION_OVERLAY_INFO), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_operation_overlay_service__WEBPACK_IMPORTED_MODULE_23__.OperationOverlayService), _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_24__.ElementRef));
};
OperationOverlayComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵdefineComponent"]({
  type: OperationOverlayComponent,
  selectors: [["app-operation-overlay"]],
  hostVars: 2,
  hostBindings: function OperationOverlayComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵclassProp"]("show", ctx.isShow);
    }
  },
  decls: 8,
  vars: 8,
  consts: [[1, "content"], [4, "ngIf", "ngIfElse"], ["wheelTemplate", ""], ["class", "arrow", 4, "ngIf"], ["class", "border-cover", 4, "ngIf"], [3, "isShow", "info", "onSave", "onHide"], ["class", "group", 4, "ngFor", "ngForOf"], [1, "group"], [4, "ngIf"], [4, "ngFor", "ngForOf"], ["nzType", "vertical", 4, "ngIf"], ["class", "tempo", 4, "ngIf"], ["class", "item", "nz-tooltip", "", 3, "nzTooltipTitle", "nzTooltipPlacement", "ngClass", "click", 4, "ngIf"], ["nzType", "vertical"], [1, "tempo"], ["nz-dropdown", "", 1, "tempo-note-picker", 3, "nzDropdownMenu"], [1, "tempo-wrapper"], [1, "nf-icon", 3, "ngClass"], ["class", "nf-icon tempoDot", 4, "ngIf"], ["nz-icon", "", "nzType", "down", 2, "font-size", "8px"], ["menu", "nzDropdownMenu"], ["nz-menu", "", "nzSelectable", "", 2, "width", "306px"], ["nz-menu-item", "", 2, "background-color", "transparent !important", "padding", "0", "height", "28px", "line-height", "28px", "text-align", "center", "display", "flex", "align-items", "center"], [1, "item", 3, "ngClass", "click"], [1, "nf-icon", "note8"], [1, "nf-icon", "note7"], [1, "nf-icon", "note6"], [1, "nf-icon", "note5"], [1, "nf-icon", "note4"], [1, "nf-icon", "note3"], [1, "nf-icon", "note2"], [1, "item", "tempo-dots", 3, "ngClass"], [1, "nf-icon", "tempoDot", 3, "click"], [1, "bpm-wrapper"], [1, "equal-sign"], [2, "width", "66px", 3, "ngModel", "nzMin", "nzPrecision", "ngModelChange"], [1, "nf-icon", "tempoDot"], ["nz-tooltip", "", 1, "item", 3, "nzTooltipTitle", "nzTooltipPlacement", "ngClass", "click"], [1, "back-img", 3, "ngStyle"], [1, "wheel-wrapper"], [1, "wheel"], [3, "ngStyle", "ngClass", 4, "ngFor", "ngForOf"], [1, "circle"], [3, "ngStyle", "ngClass"], [1, "name", 3, "ngStyle", "click"], [1, "items-wrapper", 3, "ngStyle"], [1, "arrow"], [1, "arrow-content"], [1, "border-cover"]],
  template: function OperationOverlayComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](0, "div", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](1, OperationOverlayComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](2, OperationOverlayComponent_ng_template_2_Template, 4, 1, "ng-template", null, 2, _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplateRefExtractor"]);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](4, OperationOverlayComponent_div_4_Template, 2, 0, "div", 3);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵtemplate"](5, OperationOverlayComponent_div_5_Template, 1, 0, "div", 4);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](6, "app-change-key-signature", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("onSave", function OperationOverlayComponent_Template_app_change_key_signature_onSave_6_listener($event) {
        return ctx.changeKeySignature($event);
      })("onHide", function OperationOverlayComponent_Template_app_change_key_signature_onHide_6_listener() {
        return ctx.hideKeySignature();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementStart"](7, "app-change-time-signature", 5);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵlistener"]("onSave", function OperationOverlayComponent_Template_app_change_time_signature_onSave_7_listener($event) {
        return ctx.changeTimeSignature($event);
      })("onHide", function OperationOverlayComponent_Template_app_change_time_signature_onHide_7_listener() {
        return ctx.hideTimeSignature();
      });
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      const _r1 = _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵreference"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx.groups.length <= 3)("ngIfElse", _r1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](3);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx.groups.length <= 3 && ctx.groups.length > 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("ngIf", ctx.groups.length <= 3 && ctx.groups.length > 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("isShow", ctx.isShowKeySignature)("info", ctx.infoForKeySignature);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_24__["ɵɵproperty"]("isShow", ctx.isShowTimeSignature)("info", ctx.infoForTimeSignature);
    }
  },
  styles: ["[_nghost-%COMP%] {\n  display: flex;\n  background-color: #fff;\n  position: relative;\n  border-radius: 2px;\n  pointer-events: none;\n  -webkit-user-select: none;\n          user-select: none;\n}\n.show[_nghost-%COMP%] {\n  box-shadow: 0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d;\n  padding: 6px;\n}\n.arrow[_ngcontent-%COMP%] {\n  left: 50%;\n  transform: translateY(100%) translate(-50%);\n  bottom: 0;\n  position: absolute;\n  display: block;\n  width: 22px;\n  height: 22px;\n  overflow: hidden;\n  background: transparent;\n  pointer-events: none;\n}\n.arrow-content[_ngcontent-%COMP%] {\n  box-shadow: 3px 3px 7px #00000012;\n  transform: translateY(-11px) rotate(45deg);\n  position: absolute;\n  inset: 0;\n  display: block;\n  width: 11.3137085px;\n  height: 11.3137085px;\n  margin: auto;\n  background-color: transparent;\n  content: \"\";\n  pointer-events: auto;\n  border-radius: 0 0 2px;\n  pointer-events: none;\n}\n.arrow-content[_ngcontent-%COMP%]::before {\n  position: absolute;\n  top: -11.3137085px;\n  left: -11.3137085px;\n  width: 33.9411255px;\n  height: 33.9411255px;\n  background: #ffffff;\n  background-position: -10px -10px;\n  content: \"\";\n  clip-path: path(\"M 9.849242404917499 24.091883092036785 A 5 5 0 0 1 13.384776310850237 22.627416997969522 L 20.627416997969522 22.627416997969522 A 2 2 0 0 0 22.627416997969522 20.627416997969522 L 22.627416997969522 13.384776310850237 A 5 5 0 0 1 24.091883092036785 9.849242404917499 L 23.091883092036785 9.849242404917499 L 9.849242404917499 23.091883092036785 Z\");\n}\n.content[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  pointer-events: none;\n}\n.group[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  height: 36px;\n}\nlabel[_ngcontent-%COMP%] {\n  width: 80px;\n  text-align: right;\n  display: inline-block;\n  flex: 0 0 auto;\n}\n.item[_ngcontent-%COMP%] {\n  width: 36px;\n  height: 100%;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  pointer-events: all;\n  color: rgba(0, 0, 0, 0.85) !important;\n}\n.item.selected[_ngcontent-%COMP%] {\n  background-color: #bae7ff;\n}\n.back-img[_ngcontent-%COMP%] {\n  height: 20px;\n  width: 20px;\n  background-position: center center;\n  background-size: contain;\n  background-repeat: no-repeat;\n}\nnz-divider[_ngcontent-%COMP%] {\n  height: 0.7em;\n  border-color: #d1d5e0;\n  margin-top: 3px;\n}\n.wheel-wrapper[_ngcontent-%COMP%] {\n  border: 1px solid #000;\n  box-sizing: border-box;\n  height: 260px;\n  position: relative;\n  border-radius: 100%;\n  width: 260px;\n}\n.wheel[_ngcontent-%COMP%] {\n  box-sizing: border-box;\n  height: 100%;\n  margin: 0 auto;\n  position: relative;\n  border-radius: 100%;\n  text-align: center;\n  width: 100%;\n  transform-origin: center center;\n  background: rgba(255, 255, 255, 0.8);\n  box-shadow: 0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d;\n}\n.wheel[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  font-family: \"avantgarde_bold\", Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  height: 43%;\n  line-height: 18px;\n  list-style: none;\n  left: 50%;\n  top: 50%;\n  margin: 12px 0 0 -57px;\n  padding: 0;\n  position: absolute;\n  transform-origin: center bottom;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);\n  top: 0;\n  width: 43%;\n  transition: transform 1s cubic-bezier(0.85, 0, 0.14, 1.24);\n  pointer-events: none;\n}\n.circle[_ngcontent-%COMP%] {\n  border: 1px solid #000;\n  width: 116px;\n  height: 116px;\n  border-radius: 50%;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-top: -58px;\n  margin-left: -58px;\n}\n.name[_ngcontent-%COMP%] {\n  display: inline-block;\n  cursor: pointer;\n  transition: transform 1s cubic-bezier(0.85, 0, 0.14, 1.24);\n  font-weight: bold;\n  padding: 6px;\n  pointer-events: all;\n}\n.active[_ngcontent-%COMP%]   .name[_ngcontent-%COMP%] {\n  color: #009aff;\n}\n.items-wrapper[_ngcontent-%COMP%] {\n  display: flex;\n  background: rgba(255, 255, 255, 0.8);\n  height: 0;\n  align-items: center;\n  transform-origin: left center;\n  margin-left: 60px;\n  margin-top: -86px;\n  opacity: 0;\n  transition-property: opacity;\n  transition-delay: 1s;\n  transition-duration: 100ms;\n  overflow: hidden;\n}\n.active[_ngcontent-%COMP%]   .items-wrapper[_ngcontent-%COMP%] {\n  opacity: 1;\n  height: 44px;\n  padding: 6px;\n  box-shadow: 0 3px 6px -4px #0000001f, 0 6px 16px #00000014, 0 9px 28px 8px #0000000d;\n}\n.tempo-wrapper[_ngcontent-%COMP%] {\n  width: 36px;\n  padding-left: 10px;\n  padding-right: 3px;\n}\n.tempo[_ngcontent-%COMP%], .bpm-wrapper[_ngcontent-%COMP%], .tempo-note-picker[_ngcontent-%COMP%] {\n  display: flex;\n  align-items: center;\n  pointer-events: all;\n}\n.equal-sign[_ngcontent-%COMP%] {\n  margin-right: 6px;\n  margin-left: 12px;\n}\n.tempoDot[_ngcontent-%COMP%] {\n  margin-left: -9px;\n}"]
});

/***/ }),

/***/ 7770:
/*!****************************************************************************!*\
  !*** ./src/app/note-editor/operation-overlay/operation-overlay.service.ts ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OperationOverlayService": () => (/* binding */ OperationOverlayService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/cdk/portal */ 84080);
/* harmony import */ var _operation_overlay_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./operation-overlay.component */ 55062);
/* harmony import */ var _operation_overlay_tokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./operation-overlay.tokens */ 9402);
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/cdk/overlay */ 98184);










class OperationOverlayService {
  constructor(injector, overlay) {
    this.injector = injector;
    this.overlay = overlay;
  }
  open(el, info) {
    const boundingRect = el.getBoundingClientRect();
    info.boundingRect = boundingRect;
    let offsetY = -56;
    if (info.selection && info.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      if (info.selection.selectedObjects[0] instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_3__["default"]) {
        offsetY = -96;
      } else if (info.selection.selectedObjects[0] instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_5__.NoteSet && info.selection.selectedObjects[0].notes.length === 0) {
        offsetY = -106;
      }
    }
    let offsetX = -10;
    if (info.selection && info.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_2__["default"] && info.selection.selectedObjects[0] instanceof _models_barline__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      offsetX = -3;
    }
    const overlayRef = this.overlay.create({
      positionStrategy: this.overlay.position().flexibleConnectedTo(boundingRect).withDefaultOffsetY(offsetY).withDefaultOffsetX(offsetX).withPositions([{
        originX: 'end',
        originY: 'center',
        overlayX: 'start',
        overlayY: 'center'
      }]),
      scrollStrategy: this.overlay.scrollStrategies.block(),
      panelClass: 'note-action-overlay'
    });
    const injector = _angular_core__WEBPACK_IMPORTED_MODULE_6__.Injector.create({
      parent: this.injector,
      providers: [{
        provide: _operation_overlay_tokens__WEBPACK_IMPORTED_MODULE_1__.OPERATION_OVERLAY_INFO,
        useValue: info
      }]
    });
    const operationPortal = new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_7__.ComponentPortal(_operation_overlay_component__WEBPACK_IMPORTED_MODULE_0__.OperationOverlayComponent, null, injector);
    overlayRef.attach(operationPortal);
    return overlayRef;
  }
}
OperationOverlayService.ɵfac = function OperationOverlayService_Factory(t) {
  return new (t || OperationOverlayService)(_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_6__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵinject"](_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_8__.Overlay));
};
OperationOverlayService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_6__["ɵɵdefineInjectable"]({
  token: OperationOverlayService,
  factory: OperationOverlayService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 9402:
/*!***************************************************************************!*\
  !*** ./src/app/note-editor/operation-overlay/operation-overlay.tokens.ts ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "OPERATION_OVERLAY_INFO": () => (/* binding */ OPERATION_OVERLAY_INFO)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

const OPERATION_OVERLAY_INFO = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('OPERATION_OVERLAY_INFO');

/***/ }),

/***/ 38408:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/page-view/page-view.component.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PageViewComponent": () => (/* binding */ PageViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

const _c0 = ["app-page-view", ""];
class PageViewComponent {
  constructor() {
    this.width = 612;
    this.height = 792;
  }
  ngOnInit() {}
}
PageViewComponent.ɵfac = function PageViewComponent_Factory(t) {
  return new (t || PageViewComponent)();
};
PageViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: PageViewComponent,
  selectors: [["", "app-page-view", ""]],
  inputs: {
    rootDov: "rootDov",
    page: "page"
  },
  attrs: _c0,
  decls: 2,
  vars: 2,
  consts: [[1, "page"], ["x", "14", "y", "14", "fill", "white", "stroke", "none"]],
  template: function PageViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnamespaceSVG"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "g", 0);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "rect", 1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("width", ctx.width)("height", ctx.height);
    }
  }
});

/***/ }),

/***/ 26603:
/*!**************************************************************************!*\
  !*** ./src/app/note-editor/performance/performable-note-articulation.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PerformableNoteArticulation)
/* harmony export */ });
class PerformableNoteArticulation {
  static get NORMAL() {
    return 'normal';
  }
  static get LEGATO() {
    return 'legato';
  }
  static get MUTED() {
    return 'muted';
  }
  static get HARMONIC() {
    return 'harmonic';
  }
  static get SQUARE() {
    return 'square';
  }
  static get TRIANGLE() {
    return 'triangle';
  }
  static get CROSS_CIRCLE() {
    return 'crossCircle';
  }
  static get HAMMER_ON() {
    return 'hammerOn';
  }
  static get PULL_OFF() {
    return 'pullOff';
  }
  static get UP_BOW() {
    return 'upBow';
  }
  static get DOWN_BOW() {
    return 'downBow';
  }
  static get CLOSED() {
    return 'closed';
  }
  static get OPEN() {
    return 'open';
  }
  static get FERMATA() {
    return 'fermata';
  }
  static get MARCATO() {
    return 'marcato';
  }
  static get MARTELLATO() {
    return 'martellato';
  }
  static get STACCATO() {
    return 'staccato';
  }
  static get STACCATISSIMO() {
    return 'staccatissimo';
  }
  static get TENUTO() {
    return 'tenuto';
  }
  static get BUZZ() {
    return 'buzz';
  }
  static get PIZZICATO() {
    return 'pizzicato';
  }
  static get SPICCATO() {
    return 'spiccato';
  }
  static get normal() {
    return PerformableNoteArticulation._normal;
  }
  constructor(value = 'normal') {
    this.value = value;
  }
}
PerformableNoteArticulation._normal = new PerformableNoteArticulation(PerformableNoteArticulation.NORMAL);

/***/ }),

/***/ 62957:
/*!******************************************************!*\
  !*** ./src/app/note-editor/pitch/chromatic-pitch.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChromaticPitch)
/* harmony export */ });
/* harmony import */ var _tempered_pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tempered-pitch */ 53406);

class ChromaticPitch extends _tempered_pitch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get C() {
    return 0;
  }
  static get C_SHARP() {
    return 1;
  }
  static get D_FLAT() {
    return 1;
  }
  static get D() {
    return 2;
  }
  static get D_SHARP() {
    return 3;
  }
  static get E_FLAT() {
    return 3;
  }
  static get E() {
    return 4;
  }
  static get F() {
    return 5;
  }
  static get F_SHARP() {
    return 6;
  }
  static get G_FLAT() {
    return 6;
  }
  static get G() {
    return 7;
  }
  static get G_SHARP() {
    return 8;
  }
  static get A_FLAT() {
    return 8;
  }
  static get A() {
    return 9;
  }
  static get A_SHARP() {
    return 10;
  }
  static get B_FLAT() {
    return 10;
  }
  static get B() {
    return 11;
  }
  static get pitches() {
    return ChromaticPitch._pitches;
  }
  static set pitches(v) {
    this._pitches = v;
  }
  static get MIDDLE_C_OCTAVE() {
    return 4;
  }
  static get SHARP_PITCH_NAMES() {
    return ChromaticPitch.sharp_pitch_names;
  }
  static get FLAT_PITCH_NAMES() {
    return ChromaticPitch.flat_pitch_names;
  }
  static get PITCHES_PER_OCTAVE() {
    return 12;
  }
  static get STEP_PITCH_CLASSES() {
    return ChromaticPitch.step_pitch_classes;
  }
  static get STEP_NAMES() {
    return 'CDEFGAB';
  }
  constructor(ordinal) {
    super(ordinal);
  }
  static getPitch(ordinal) {
    let pitch = ChromaticPitch.pitches[ordinal];
    if (pitch == null || pitch === undefined) {
      pitch = new ChromaticPitch(ordinal);
      ChromaticPitch.pitches[ordinal] = pitch;
    }
    return pitch;
  }
  static pitchAt(pitch, octave) {
    return ChromaticPitch.getPitch(pitch + octave * ChromaticPitch.PITCHES_PER_OCTAVE);
  }
  static middleC() {
    return ChromaticPitch.pitchAt(ChromaticPitch.C, ChromaticPitch.MIDDLE_C_OCTAVE);
  }
  static standardA() {
    return ChromaticPitch.pitchAt(ChromaticPitch.A, ChromaticPitch.MIDDLE_C_OCTAVE);
  }
  static pitchFromString(pitchStr) {
    const ordinal = parseInt(pitchStr);
    if (!isNaN(ordinal)) {
      return ChromaticPitch.getPitch(ordinal);
    }
    const stepIndex = ChromaticPitch.STEP_NAMES.indexOf(pitchStr.charAt(0));
    if (stepIndex < 0) {
      throw new Error('Unrecognized pitch step ' + pitchStr);
    }
    let pitchClass = ChromaticPitch.step_pitch_classes[stepIndex];
    pitchStr = pitchStr.substring(1);
    if (pitchStr.charAt(0) === '#') {
      pitchClass++;
      pitchStr = pitchStr.substring(1);
    } else if (pitchStr.charAt(0) === 'b') {
      pitchClass--;
      pitchStr = pitchStr.substring(1);
    }
    const octave = parseInt(pitchStr);
    if (isNaN(octave)) {
      throw new Error('Unrecognized octave: ' + pitchStr);
    }
    return ChromaticPitch.pitchAt(pitchClass, octave);
  }
  get pitchesPerOctave() {
    return ChromaticPitch.PITCHES_PER_OCTAVE;
  }
  transpose(tonePitches) {
    return ChromaticPitch.getPitch(this.ordinal + tonePitches);
  }
  toString() {
    return ChromaticPitch.SHARP_PITCH_NAMES[this.pitchClass] + this.octave;
  }
}
ChromaticPitch._pitches = {};
ChromaticPitch.sharp_pitch_names = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
ChromaticPitch.flat_pitch_names = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];
ChromaticPitch.step_pitch_classes = [0, 2, 4, 5, 7, 9, 11];

/***/ }),

/***/ 53769:
/*!********************************************!*\
  !*** ./src/app/note-editor/pitch/pitch.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Pitch)
/* harmony export */ });
class Pitch {
  constructor(ordinal) {
    this._ordinal = 0;
    this._ordinal = ordinal;
  }
  get ordinal() {
    return this._ordinal;
  }
  equals(pitch) {
    return pitch.ordinal === this._ordinal;
  }
}

/***/ }),

/***/ 53406:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/pitch/tempered-pitch.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TemperedPitch)
/* harmony export */ });
/* harmony import */ var _pitch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pitch */ 53769);

class TemperedPitch extends _pitch__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(ordinal) {
    super(ordinal);
  }
  get pitchesPerOctave() {
    throw new Error('pitchesPerOctave property not implemented');
  }
  get octave() {
    return Math.floor((this.ordinal - this.pitchClass) / this.pitchesPerOctave);
  }
  get pitchClass() {
    return this.ordinal >= 0 ? this.ordinal % this.pitchesPerOctave : 11 - (-this.ordinal - 1) % this.pitchesPerOctave;
  }
  intervalAbove(pitch) {
    return this.ordinal - pitch.ordinal;
  }
  toString() {
    return `[Pitch class=${this.pitchClass} octave=${this.octave}]`;
  }
}

/***/ }),

/***/ 77357:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/processing/accidental-processor.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AccidentalProcessor)
/* harmony export */ });
/* harmony import */ var _models_note__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/note */ 14816);

class AccidentalProcessor {
  constructor(measure) {
    this._measure = null;
    this._keySignature = null;
    this._ordinalAlteration = null;
    this._stepAlteration = null;
    this._measure = measure;
    this._keySignature = measure.keySignature;
    this.reset();
  }
  reset() {
    this._ordinalAlteration = {};
    this._stepAlteration = {};
  }
  processNoteSet(noteSet) {
    for (let i = 0; i < noteSet.notes.length; i++) {
      const note = noteSet.notes[i];
      if (noteSet.position === 0) {
        const liaisonStart = this._measure.getLiaisonStart(noteSet.position, note);
        if (liaisonStart && liaisonStart.tied) {
          continue;
        }
      }
      this._ordinalAlteration[note.diatonicOrdinal] = note.alteration;
      this._stepAlteration[note.step] = note.alteration;
    }
  }
  getDefaultAlteration(position, note, voiceNumber = -1) {
    const contextualAlteration = this.getContextualAlteration(position, note, voiceNumber);
    if (contextualAlteration === -999) {
      return this._keySignature.getAlteration(note.step);
    } else {
      return contextualAlteration;
    }
  }
  getContextualAlteration(position, note, voiceNumber = -1) {
    let currPosition = position;
    let currNote = note;
    let measure = this._measure;
    let isLiaisonStart = false;
    let liaisonStartNote;
    if (measure) {
      liaisonStartNote = measure.getLiaisonStart(currPosition, currNote, voiceNumber);
    }
    while (measure && liaisonStartNote != null && liaisonStartNote.tied) {
      if (currPosition <= liaisonStartNote.noteSet.position) {
        measure = measure.previousMeasure;
        currPosition = liaisonStartNote.noteSet.position;
        currNote = liaisonStartNote;
        isLiaisonStart = true;
        if (measure) {
          liaisonStartNote = measure.getLiaisonStart(currPosition, currNote, voiceNumber);
        }
      }
    }
    return isLiaisonStart ? currNote.alteration : note.diatonicOrdinal in this._ordinalAlteration ? this._ordinalAlteration[note.diatonicOrdinal] : null != this._measure.effectiveClef && this._measure.effectiveClef.unpitched ? 0 : -999;
  }
  getAccidental(note) {
    if (note.explicitAccidental) {
      return note.accidental;
    } else if (this._keySignature.atonal && !note.measure.scoreInterval.octaveMultiple) {
      if (note.alteration === this.getContextualAlteration(note.position, note)) {
        return null;
      } else if (note.transposeInterval(note.measure.scoreInterval).alteration !== 0) {
        return _models_note__WEBPACK_IMPORTED_MODULE_0__.Note.alterationToAccidental(note.alteration);
      } else {
        return null;
      }
    } else if (note.alteration === this.getDefaultAlteration(note.position, note)) {
      return null;
    } else {
      return _models_note__WEBPACK_IMPORTED_MODULE_0__.Note.alterationToAccidental(note.alteration);
    }
  }
}

/***/ }),

/***/ 51799:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/processing/liaison-processor.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LiaisonProcessor)
/* harmony export */ });
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _accidental_processor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./accidental-processor */ 77357);


class LiaisonProcessor {
  constructor(measure) {
    this._ordinalTies = [];
    this._singleNoteLiaisons = ['glissando', 'bend'];
    this._indexLiaisons = [];
    this._measure = measure;
    for (let i = 0; i < this._measure.numVoices; i++) {
      this._ordinalTies.push({});
      this._indexLiaisons.push({});
    }
  }
  processMeasure() {
    for (let i = 0; i < this._measure.measureNotations.length; i++) {
      const measureNotation = this._measure.measureNotations[i];
      if (measureNotation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_0__.NoteSet) {
        const noteSet = measureNotation;
        this.processNoteSet(noteSet);
      }
    }
    const followingNoteSets = this._measure.followingNoteSets(this._measure.duration);
    for (let i = 0; i < followingNoteSets.length; i++) {
      const noteSet = followingNoteSets[i];
      for (let j = 0; j < noteSet.notes.length; j++) {
        const note = noteSet.notes[j];
        note.liaisonStartNote = noteSet.measure.getLiaisonStart(0, note);
        if (note.liaisonStartNote && note.liaisonStartNote.tied) {
          note.accidental = null;
        } else {
          note.accidental = new _accidental_processor__WEBPACK_IMPORTED_MODULE_1__["default"](noteSet.measure).getAccidental(note);
        }
        if (note.liaisonStartNote) {
          note.liaisonStartNote.liaisonEndNote = note;
        }
      }
    }
  }
  getStartNote(note, stringIndex) {
    if (note.position === 0 && !note.noteSet.previousGraceNote) {
      return this._measure.getLiaisonStart(note.position, note);
    }
    let startNote = this.getStartNoteInVoice(note, stringIndex, note.voiceNumber);
    if (startNote == null) {
      for (let i = 0; i < this._measure.numVoices && (i === note.voiceNumber || (startNote = this.getStartNoteInVoice(note, stringIndex, i)) === null); i++) {}
    }
    return startNote;
  }
  getStartNoteInVoice(note, stringIndex, voiceNumber) {
    let ordinalTie = this._ordinalTies[voiceNumber][note.pitch.ordinal];
    if (ordinalTie && ordinalTie.noteSet.endsAtPosition(note.position)) {
      delete this._ordinalTies[voiceNumber][note.pitch.ordinal];
      return ordinalTie;
    } else if (null != (ordinalTie = this._indexLiaisons[voiceNumber][stringIndex]) && ordinalTie.noteSet.endsAtPosition(note.position)) {
      delete this._indexLiaisons[voiceNumber][stringIndex];
      return ordinalTie;
    } else {
      return null;
    }
  }
  pendingOneNoteLiaisons(note) {
    const liaisons = [];
    const indexLiaison = this._indexLiaisons[note.voiceNumber];
    if (indexLiaison) {
      for (const key in indexLiaison) {
        const liaison = indexLiaison[key];
        if (this._singleNoteLiaisons.indexOf(liaison) >= 0) {
          liaisons.push(liaison);
        }
      }
    }
    return liaisons;
  }
  clearPendingOneNoteLiaison(note) {
    if (this._indexLiaisons[note.voiceNumber]) {
      const liaisons = [];
      for (const key in this._indexLiaisons[note.voiceNumber]) {
        const liaison = this._indexLiaisons[note.voiceNumber][key];
        if (this._singleNoteLiaisons.indexOf(liaison.liaison) >= 0) {
          liaisons.push(key);
        }
      }
      for (const key in liaisons) {
        delete this._indexLiaisons[note.voiceNumber][key];
      }
    }
  }
  processNoteSet(noteSet) {
    let stringIndex;
    if (noteSet.position !== 0 || noteSet.previousGraceNote) {
      stringIndex = 0;
      for (let i = 0; i < noteSet.notes.length; i++) {
        const note = noteSet.notes[i];
        note.liaisonStartNote = this.getStartNote(note, note.stringIndex >= 0 ? note.stringIndex : stringIndex);
        if (note.liaisonStartNote) {
          note.liaisonStartNote.liaisonEndNote = note;
        }
        stringIndex++;
        const pendingOneNoteLiaisons = this.pendingOneNoteLiaisons(note);
        if (stringIndex === noteSet.notes.length && pendingOneNoteLiaisons.length > 0) {
          note.liaisonStartNote = pendingOneNoteLiaisons[pendingOneNoteLiaisons.length - 1];
          if (note.liaisonStartNote) {
            note.liaisonStartNote.liaisonEndNote = note;
          }
          this.clearPendingOneNoteLiaison(note);
        }
      }
    } else {
      for (let i = 0; i < noteSet.notes.length; i++) {
        const note = noteSet.notes[i];
        note.liaisonStartNote = this._measure.getLiaisonStart(noteSet.position, note);
        if (note.liaisonStartNote) {
          note.liaisonStartNote.liaisonEndNote = note;
        }
      }
    }
    stringIndex = 0;
    for (let i = 0; i < noteSet.notes.length; i++) {
      const note = noteSet.notes[i];
      if (note.tied) {
        this._ordinalTies[noteSet.voiceNumber][note.pitch.ordinal] = note;
      } else if (note.hasIndexLiaison) {
        this._indexLiaisons[noteSet.voiceNumber][note.stringIndex >= 0 ? note.stringIndex : stringIndex] = note;
      }
      note.liaisonEndNote = null;
      stringIndex++;
    }
  }
}

/***/ }),

/***/ 93781:
/*!*************************************************************************!*\
  !*** ./src/app/note-editor/processing/remove-position-range-options.ts ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RemovePositionRangeOptions)
/* harmony export */ });
class RemovePositionRangeOptions {
  constructor() {
    this._filter = null;
    this._position = NaN;
    this._cropElements = false;
    this._ignoreGraceNotesAtBeginning = false;
  }
  get filter() {
    return this._filter;
  }
  set filter(v) {
    this._filter = v;
  }
  get position() {
    return this._position;
  }
  set position(v) {
    this._position = v;
  }
  get cropElements() {
    return this._cropElements;
  }
  set cropElements(v) {
    this._cropElements = v;
  }
  get ignoreGraceNotesAtBeginning() {
    return this._ignoreGraceNotesAtBeginning;
  }
  set ignoreGraceNotesAtBeginning(v) {
    this._ignoreGraceNotesAtBeginning = v;
  }
}

/***/ }),

/***/ 29722:
/*!************************************************************!*\
  !*** ./src/app/note-editor/processing/rhythm-processor.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RhythmProcessor)
/* harmony export */ });
/* harmony import */ var _models_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/notation */ 83658);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_rhythm_container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/rhythm-container */ 40793);
/* harmony import */ var _models_rhythm_element__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/rhythm-element */ 60828);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_value_notation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/value-notation */ 56170);
/* harmony import */ var _models_voice__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/voice */ 38445);







class RhythmProcessor {
  constructor(rhythmContext) {
    this._position = NaN;
    this._rhythmContext = rhythmContext;
    this.reset();
  }
  reset() {
    this._position = 0;
  }
  removePositionRange(rhythmPosition, rhythmDuration, option = null) {
    const removeElements = [];
    for (let i = 0; i < this._rhythmContext.elements.length; i++) {
      const element = this._rhythmContext.getElementAt(i);
      if (element.duration > 0 && element.rhythmPosition < rhythmPosition + rhythmDuration && element.rhythmPosition + element.rhythmDuration > rhythmPosition || element.duration === 0 && element.rhythmPosition < rhythmPosition + rhythmDuration && element.rhythmPosition >= rhythmPosition) {
        if (option && (option.filter && !option.filter(element) || option.ignoreGraceNotesAtBeginning && element.rhythmPosition === rhythmPosition)) {} else {
          removeElements.push(element);
        }
      }
    }
    for (let i = 0; i < removeElements.length; i++) {
      const element = removeElements[i];
      if (option && option.cropElements && element.rhythmPosition < rhythmPosition && element instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && _models_value_notation__WEBPACK_IMPORTED_MODULE_5__["default"].isDurationValid(rhythmPosition - element.rhythmPosition)) {
        const noteSet = element;
        noteSet.rhythmDuration = rhythmPosition - element.rhythmPosition;
      } else {
        this._rhythmContext.removeElement(element);
      }
    }
  }
  createRestsInRange(start, duration, hide, beam) {
    const rests = [];
    if (start === 0 && duration === this._rhythmContext.rhythmDuration && this._rhythmContext instanceof _models_voice__WEBPACK_IMPORTED_MODULE_6__["default"]) {
      rests.push(new _models_tacet__WEBPACK_IMPORTED_MODULE_4__["default"]());
    } else {
      let rhythmPosition = start;
      const rangeDurations = this._rhythmContext.timeSignature.getRangeDurations(start, duration, false);
      for (let i = 0; i < rangeDurations.length; i++) {
        const rangeDuration = rangeDurations[i];
        const rhythmDuration = +rangeDuration;
        const noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet(rhythmPosition);
        noteSet.rhythmDuration = rhythmDuration;
        if (hide) {
          noteSet.color = _models_notation__WEBPACK_IMPORTED_MODULE_0__.Notation.HIDDEN_COLOR;
          noteSet.beam = beam;
        }
        rests.push(noteSet);
        rhythmPosition += rhythmDuration;
      }
    }
    return rests;
  }
  addRests(hide) {
    let currPosition = 0;
    let rests = [];
    const hideCollection = [];
    let noteSet = null;
    let beam = false;
    for (let i = 0; i <= this._rhythmContext.elements.length; i++) {
      let rhythmPosition, element;
      if (i < this._rhythmContext.elements.length) {
        element = this._rhythmContext.getElementAt(i);
        if (element.rhythmDuration === 0) {
          continue;
        }
        rhythmPosition = element.rhythmPosition;
      } else {
        element = null;
        rhythmPosition = this._rhythmContext.timeSignature.meterDuration;
      }
      if (rhythmPosition > currPosition) {
        if (element instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet) {
          noteSet = element;
          if (noteSet.notes.length === 0 && (!hide || noteSet.invisible && noteSet.lyrics.length === 0)) {
            hideCollection.push(noteSet);
            continue;
          }
          const previousNoteSet = noteSet.previousNoteSet();
          if (previousNoteSet) {
            beam = previousNoteSet.beam;
          }
        }
        rests = rests.concat(this.createRestsInRange(currPosition, rhythmPosition - currPosition, hide, beam));
      }
      currPosition = +rhythmPosition;
      if (element) {
        currPosition += element.rhythmDuration;
      }
    }
    for (let i = 0; i < hideCollection.length; i++) {
      const hideElement = hideCollection[i];
      const noteset = hideElement;
      this._rhythmContext.removeElement(noteset);
    }
    for (let i = 0; i < rests.length; i++) {
      const rest = rests[i];
      if (rest instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet) {
        noteSet = rest;
        this._rhythmContext.addElement(noteSet);
      }
    }
  }
  addValueNotationWithDuration(valueNotation, rhythmposition, durations, s, withLyrics) {
    const valueNotations = [];
    const valueDurations = _models_value_notation__WEBPACK_IMPORTED_MODULE_5__["default"].descendingValueDurations(durations, true);
    let rhythmPosition = rhythmposition;
    for (let i = 0; i < valueDurations.length; i++) {
      const rhythmDuration = valueDurations[i];
      const notation = valueNotation.clone();
      notation.rhythmDuration = rhythmDuration;
      notation.rhythmPosition = rhythmPosition;
      if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && i < valueNotations.length - 1 || s) {
        notation.setAllTies();
      }
      if (!withLyrics && notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet) {
        const lyrics = notation.lyrics || [];
        for (let j = 0; j < lyrics.length; j++) {
          const lyric = lyrics[j];
          notation.removeLyric(lyric);
        }
      }
      this._rhythmContext.addElement(notation);
      valueNotations.push(notation);
      rhythmPosition += rhythmDuration;
    }
    return valueNotations;
  }
  noteSetAtPosition(position) {
    const notations = this.getNotations();
    for (let i = 0; i < notations.length; i++) {
      const notation = notations[i];
      if (notation.position > position) {
        break;
      }
      if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && notation.position === position) {
        return notation;
      }
    }
    return null;
  }
  getNotations() {
    const notations = [];
    this.doGetNotations(notations, this._rhythmContext);
    return notations;
  }
  doGetNotations(notations, rhythmContext) {
    const elements = rhythmContext.elements;
    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];
      if (element instanceof _models_notation__WEBPACK_IMPORTED_MODULE_0__.Notation) {
        notations.push(element);
      } else if (element instanceof _models_rhythm_element__WEBPACK_IMPORTED_MODULE_3__["default"] || element instanceof _models_rhythm_container__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        this.doGetNotations(notations, element);
      }
    }
  }
}

/***/ }),

/***/ 1755:
/*!***********************************************************************!*\
  !*** ./src/app/note-editor/processing/string-assignment-processor.ts ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StringAssignmentProcessor)
/* harmony export */ });
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/noteset */ 46605);

class StringAssignmentProcessor {
  constructor(measure) {
    this._stringNotes = null;
    this._measure = measure;
    this._stringNotes = measure.effectiveClef.stringNotes;
  }
  processMeasure() {
    for (let i = 0; i < this._measure.measureNotations.length; i++) {
      const notation = this._measure.measureNotations[i];
      if (notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_0__.NoteSet) {
        this.processNoteSet(notation);
      }
    }
  }
  processNoteSet(noteSet) {
    const notes = noteSet.notes.slice().reverse();
    for (let i = 0; i < notes.length; i++) {
      const note = notes[i];
      if (note.stringIndex < 0) {
        this.defaultNoteString(noteSet, note);
      }
    }
  }
  defaultNoteString(noteSet, note) {
    let idx = 0;
    let stringNote = this._stringNotes[idx];
    while (idx < this._stringNotes.length - 1 && stringNote.pitch.ordinal > note.pitch.ordinal) {
      idx++;
      stringNote = this._stringNotes[idx];
    }
    while (noteSet.noteOnString(idx) && idx < this._stringNotes.length - 1) {
      idx++;
    }
    note.stringIndex = idx;
  }
}

/***/ }),

/***/ 88832:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/services/svg-context.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SvgContext)
/* harmony export */ });
/* harmony import */ var _text_text_measurement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/text-measurement */ 99481);

class SvgContext {
  static get singleton() {
    return SvgContext._instance;
  }
  static set singleton(v) {
    SvgContext._instance = v;
  }
  constructor(svgEl) {
    this.svgElement = null;
    this.phantomGroup = null;
    this.definitions = null;
    this.svgElement = svgEl;
    this.phantomGroup = this.createElement('g');
    this.phantomGroup.setAttribute('visibility', 'hidden');
    this.svgElement.appendChild(this.phantomGroup);
    this.definitions = this.createElement('defs');
    this.svgElement.appendChild(this.definitions);
    this.textMeasurement = new _text_text_measurement__WEBPACK_IMPORTED_MODULE_0__["default"](this);
  }
  createElement(tagName) {
    return document.createElementNS(SvgContext.svgNS, tagName);
  }
  getScreenCTM(svg) {
    return svg.getScreenCTM();
  }
  getBBox(svg) {
    return this.internalGetBBox(svg);
  }
  internalGetBBox(svg) {
    try {
      let bbox = null;
      if (!svg.ownerSVGElement) {
        let rootNode = svg;
        while (rootNode) {
          rootNode = rootNode.parentNode;
        }
        this.phantomGroup.appendChild(rootNode);
        bbox = svg.getBBox();
        this.phantomGroup.removeChild(rootNode);
      }
      if (bbox) {
        return bbox;
      } else {
        return svg.getBBox();
      }
    } catch (error) {}
    let _bbox;
    let nextSibling;
    let parentNode = svg.parentNode;
    if (parentNode) {
      nextSibling = svg.nextSibling;
      parentNode.removeChild(svg);
    }
    this.phantomGroup.appendChild(svg);
    _bbox = svg.getBBox();
    this.phantomGroup.removeChild(svg);
    if (parentNode) {
      if (nextSibling) {
        parentNode.insertBefore(svg, nextSibling);
      } else {
        parentNode.appendChild(svg);
      }
    }
    return _bbox;
  }
  transformPoint(x, y, matrix) {
    const svgPoint = this.svgElement.createSVGPoint();
    svgPoint.x = x;
    svgPoint.y = y;
    return svgPoint.matrixTransform(matrix);
  }
}
SvgContext.svgNS = 'http://www.w3.org/2000/svg';

/***/ }),

/***/ 85789:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/slim-scroll/scroll.service.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScrollService": () => (/* binding */ ScrollService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);


class ScrollService {
  constructor() {
    this.onMenuOpenChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onTreeCollapseChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    this.onInspectorContentShowHide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
  }
}
ScrollService.ɵfac = function ScrollService_Factory(t) {
  return new (t || ScrollService)();
};
ScrollService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
  token: ScrollService,
  factory: ScrollService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 73714:
/*!***************************************************************!*\
  !*** ./src/app/note-editor/slim-scroll/slim-scroll.module.ts ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlimScrollModule": () => (/* binding */ SlimScrollModule)
/* harmony export */ });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ 36895);
/* harmony import */ var _slim_scroll_slim_scroll_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./slim-scroll/slim-scroll.component */ 99849);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ 94650);



class SlimScrollModule {}
SlimScrollModule.ɵfac = function SlimScrollModule_Factory(t) {
  return new (t || SlimScrollModule)();
};
SlimScrollModule.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
  type: SlimScrollModule
});
SlimScrollModule.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
  imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule]
});
(function () {
  (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](SlimScrollModule, {
    declarations: [_slim_scroll_slim_scroll_component__WEBPACK_IMPORTED_MODULE_0__.SlimScrollComponent],
    imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__.CommonModule],
    exports: [_slim_scroll_slim_scroll_component__WEBPACK_IMPORTED_MODULE_0__.SlimScrollComponent]
  });
})();

/***/ }),

/***/ 99849:
/*!******************************************************************************!*\
  !*** ./src/app/note-editor/slim-scroll/slim-scroll/slim-scroll.component.ts ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlimScrollComponent": () => (/* binding */ SlimScrollComponent)
/* harmony export */ });
/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! css-element-queries */ 52289);
/* harmony import */ var css_element_queries__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(css_element_queries__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _scroll_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scroll.service */ 85789);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ 36895);




const _c0 = function (a0, a1, a2, a3) {
  return {
    height: a0,
    opacity: a1,
    top: a2,
    background: a3
  };
};
const _c1 = ["*"];
class SlimScrollComponent {
  constructor(el, scrollService) {
    this.el = el;
    this.scrollService = scrollService;
    this.minBarHeight = 30;
    this.barHeight = 30;
    this.isShowBar = false;
    this.barTop = 0;
    this.scrollHeight = 0;
    this.wheelStep = 20;
  }
  ngOnInit() {
    if (this.type === 'menu-wrapper') {
      this.menuOpenChangeSub$ = this.scrollService.onMenuOpenChange.subscribe(() => {
        this.calcBarHeight();
      });
    }
    if (this.type === 'stencil-wrapper') {
      this.treeCollapseChangeSub$ = this.scrollService.onTreeCollapseChange.subscribe(() => {
        this.calcBarHeight();
      });
    }
    if (this.type === 'inspector-wrapper') {
      this.inspectorContentShowHideSub$ = this.scrollService.onInspectorContentShowHide.subscribe(() => {
        this.calcBarHeight();
      });
    }
    this.el.nativeElement.children[0].style.transition = 'all 300ms';
    new (css_element_queries__WEBPACK_IMPORTED_MODULE_0___default().ResizeSensor)(this.el.nativeElement.children[0], () => {
      this.calcBarHeight();
    });
  }
  ngOnDestroy() {
    if (this.menuOpenChangeSub$) {
      this.menuOpenChangeSub$.unsubscribe();
    }
    if (this.treeCollapseChangeSub$) {
      this.treeCollapseChangeSub$.unsubscribe();
    }
    if (this.inspectorContentShowHideSub$) {
      this.inspectorContentShowHideSub$.unsubscribe();
    }
    css_element_queries__WEBPACK_IMPORTED_MODULE_0___default().ResizeSensor.detach(this.el.nativeElement.children[0]);
  }
  calcBarHeight() {
    this.height = this.el.nativeElement.clientHeight;
    this.scrollHeight = this.el.nativeElement.children[0].clientHeight;
    if (this.scrollHeight > this.height) {
      this.isShowBar = true;
      this.barHeight = Math.max(this.height / this.scrollHeight * this.height, this.minBarHeight);
      this.barTop = Math.min(this.barTop, this.scrollHeight - this.height);
    } else {
      this.isShowBar = false;
      this.barTop = 0;
    }
    this.scrollContent();
  }
  scrollContent() {
    const percentScroll = this.barTop / (this.height - this.barHeight);
    const delta = percentScroll * (this.scrollHeight - this.height);
    this.el.nativeElement.children[0].style.marginTop = -delta + 'px';
  }
  onMouseEnter() {
    this.calcBarHeight();
  }
  onMouseLeave() {
    this.isShowBar = false;
  }
  onWheel(evt) {
    if (this.isShowBar) {
      const target = evt.target;
      const clientHeight = target.clientHeight;
      const scrollHeight = target.scrollHeight;
      const scrollTop = target.scrollTop;
      if (evt.target === this.el.nativeElement.children[0] || clientHeight === scrollHeight || clientHeight < scrollHeight && (evt.wheelDelta > 0 && scrollTop === 0 || scrollTop + clientHeight + 15 >= scrollHeight && evt.wheelDelta < 0)) {
        let delta = 0;
        if (evt.wheelDelta) {
          delta = -evt.wheelDelta / 120;
        }
        const maxTop = this.height - this.barHeight;
        delta = this.barTop + delta * this.wheelStep / 100 * this.barHeight;
        delta = Math.min(Math.max(delta, 0), maxTop);
        delta = Math.floor(delta);
        this.barTop = delta;
        this.scrollContent();
        evt.preventDefault();
      }
    }
  }
}
SlimScrollComponent.ɵfac = function SlimScrollComponent_Factory(t) {
  return new (t || SlimScrollComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_2__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdirectiveInject"](_scroll_service__WEBPACK_IMPORTED_MODULE_1__.ScrollService));
};
SlimScrollComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineComponent"]({
  type: SlimScrollComponent,
  selectors: [["app-slim-scroll"]],
  hostBindings: function SlimScrollComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵlistener"]("mouseenter", function SlimScrollComponent_mouseenter_HostBindingHandler() {
        return ctx.onMouseEnter();
      })("mouseleave", function SlimScrollComponent_mouseleave_HostBindingHandler() {
        return ctx.onMouseLeave();
      })("mousewheel", function SlimScrollComponent_mousewheel_HostBindingHandler($event) {
        return ctx.onWheel($event);
      });
    }
  },
  inputs: {
    type: "type",
    gradient: "gradient"
  },
  ngContentSelectors: _c1,
  decls: 2,
  vars: 6,
  consts: [[1, "slimScrollBar", 3, "ngStyle"]],
  template: function SlimScrollComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojectionDef"]();
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵprojection"](0);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵelement"](1, "div", 0);
    }
    if (rf & 2) {
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵadvance"](1);
      _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵproperty"]("ngStyle", _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵpureFunction4"](1, _c0, ctx.barHeight + "px", ctx.isShowBar ? ctx.gradient ? 1 : 0.4 : 0, ctx.barTop + "px", ctx.gradient ? "linear-gradient(rgb(190, 46, 228) 0%, rgb(0, 163, 255) 100%)" : "rgb(122, 134, 143)"));
    }
  },
  dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_3__.NgStyle],
  styles: ["[_nghost-%COMP%] {\n  display: block;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n.slimScrollBar[_ngcontent-%COMP%] {\n  width: 5px;\n  position: absolute;\n  top: 0px;\n  opacity: 0.4;\n  border-radius: 7px;\n  z-index: 99;\n  right: 1px;\n  transition: all 300ms;\n}"]
});

/***/ }),

/***/ 55151:
/*!******************************************************!*\
  !*** ./src/app/note-editor/sprit/sprit.component.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SpritComponent": () => (/* binding */ SpritComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

class SpritComponent {
  constructor() {}
  ngOnInit() {}
}
SpritComponent.ɵfac = function SpritComponent_Factory(t) {
  return new (t || SpritComponent)();
};
SpritComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SpritComponent,
  selectors: [["app-sprit"]],
  decls: 2,
  vars: 0,
  template: function SpritComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "sprit works!");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  }
});

/***/ }),

/***/ 87273:
/*!****************************************************************!*\
  !*** ./src/app/note-editor/staff-view/staff-view.component.ts ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StaffViewComponent": () => (/* binding */ StaffViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

class StaffViewComponent {
  constructor() {}
  ngOnInit() {}
}
StaffViewComponent.ɵfac = function StaffViewComponent_Factory(t) {
  return new (t || StaffViewComponent)();
};
StaffViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: StaffViewComponent,
  selectors: [["app-staff-view"]],
  decls: 2,
  vars: 0,
  template: function StaffViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "staff-view works!");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  }
});

/***/ }),

/***/ 45493:
/*!******************************************************************!*\
  !*** ./src/app/note-editor/system-view/system-view.component.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SystemViewComponent": () => (/* binding */ SystemViewComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ 94650);

class SystemViewComponent {
  constructor() {}
  ngOnInit() {}
}
SystemViewComponent.ɵfac = function SystemViewComponent_Factory(t) {
  return new (t || SystemViewComponent)();
};
SystemViewComponent.ɵcmp = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
  type: SystemViewComponent,
  selectors: [["app-system-view"]],
  decls: 2,
  vars: 0,
  template: function SystemViewComponent_Template(rf, ctx) {
    if (rf & 1) {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "p");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1, "system-view works!");
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
    }
  }
});

/***/ }),

/***/ 52348:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/text/anti-alias-type.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AntiAliasType": () => (/* binding */ AntiAliasType)
/* harmony export */ });
var AntiAliasType;
(function (AntiAliasType) {
  AntiAliasType["ADVANCED"] = "advanced";
  AntiAliasType["NORMAL"] = "normal";
})(AntiAliasType || (AntiAliasType = {}));

/***/ }),

/***/ 44669:
/*!*************************************************!*\
  !*** ./src/app/note-editor/text/editor-font.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EditorFont)
/* harmony export */ });
/* harmony import */ var _font_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font-names */ 20781);
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ 93172);
/* harmony import */ var fontkit__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fontkit */ 95716);



class EditorFont {
  constructor(fontFamily, folder, assetPath, bold, italic, fallbackFontInfo, isFallbackFont, http, onFontLoaded) {
    this.fontFamily = fontFamily;
    this.assetName = ''.concat(folder).concat(assetPath);
    this.assetPath = assetPath;
    this.bold = bold;
    this.italic = italic;
    this.font = null;
    this.fontName = _font_names__WEBPACK_IMPORTED_MODULE_0__["default"].toFontName(this.fontFamily, this.bold, this.italic);
    this.loadStatus = 'notLoaded';
    this.fallbackFontInfo = fallbackFontInfo;
    this.isFallbackFont = isFallbackFont;
    if (this.isFallbackFont) {
      this.fallbackFontFamilyInfo = fallbackFontInfo.fallbackFontsByFontFamily[this.fontFamily];
    }
    http.get(this.assetName, {
      responseType: 'arraybuffer'
    }).subscribe(res => {
      const blob = new Blob([res], {
        type: 'application/octet-binary'
      });
      const fileReader = new FileReader();
      fileReader.onloadend = evt => {
        const buffer = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(fileReader.result);
        this.font = fontkit__WEBPACK_IMPORTED_MODULE_2__.create(buffer);
        this.fontBuffer = buffer;
        onFontLoaded.call();
      };
      fileReader.readAsArrayBuffer(blob);
    });
  }
  getAdvanceWidth(text) {
    if (text == null || text.length === 0) return 0;
    if (this.isFallbackFont) {
      for (var e = 0, r = 0; r < text.length; r++) {
        var charCode = text.charCodeAt(r);
        if (this.hasCharCode(charCode)) e += this.fallbackFontInfo.getAdvanceWidth(charCode);
      }
      return e;
    }
    let width = 0;
    for (let i = 0; i < this.font.layout(text).positions.length; i++) {
      const position = this.font.layout(text).positions[i];
      width += position.xAdvance;
    }
    return width / this.font.unitsPerEm;
  }
  hasCharCode(t) {
    if (t < 256 && this.isFallbackFont && null != this.fallbackFontFamilyInfo && null != this.fallbackFontFamilyInfo.asciiCodepoints && 1 == this.fallbackFontFamilyInfo.asciiCodepoints[t]) return true;
    if (this.isFallbackFont) {
      var fontInfo = this.fallbackFontInfo.getFontInfo(t);
      return null != fontInfo && fontInfo.fontFamily === this.fontFamily;
    }
    return this.font.hasGlyphForCodePoint(t);
  }
}

/***/ }),

/***/ 94197:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/text/editor-fonts.service.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorFontsService": () => (/* binding */ EditorFontsService)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _editor_font__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./editor-font */ 44669);
/* harmony import */ var _font_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./font-names */ 20781);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash */ 17489);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common/http */ 80529);






class EditorFontsService {
  constructor(http) {
    this.http = http;
    this.onFontsLoaded = new _angular_core__WEBPACK_IMPORTED_MODULE_3__.EventEmitter();
    this.loadedFonts = [
    // {
    //   fontFamily: 'AshText',
    //   fontFiles: [
    //     {
    //       type: 'normal',
    //       filename: 'AshText.ttf',
    //     },
    //     {
    //       type: 'italic',
    //       filename: 'AshText.ttf',
    //     },
    //     {
    //       type: 'bold',
    //       filename: 'AshText.ttf',
    //     },
    //     {
    //       type: 'bolditalic',
    //       filename: 'AshText.ttf',
    //     },
    //   ],
    // },
    // {
    //   fontFamily: 'NeueHaasGroteskTextPro',
    //   fontFiles: [
    //     {
    //       type: 'normal',
    //       filename:
    //         'NeueHaasGrotText-commercial-webfont/NeueHaasGrotText-55Roman-Web.woff',
    //     },
    //     {
    //       type: 'bold',
    //       filename:
    //         'NeueHaasGrotText-commercial-webfont/NeueHaasGrotText-75Bold-Web.woff',
    //     },
    //   ],
    // },
    {
      fontFamily: 'SourceSansPro',
      fontFiles: [{
        type: 'normal',
        filename: 'SourceSansPro-Regular.otf'
      }, {
        type: 'bold',
        filename: 'SourceSansPro-Bold.otf'
      }, {
        type: 'italic',
        filename: 'SourceSansPro-It.otf'
      }, {
        type: 'bolditalic',
        filename: 'SourceSansPro-BoldIt.otf'
      }]
    }, {
      fontFamily: 'SourceSerifPro',
      fontFiles: [{
        type: 'normal',
        filename: 'SourceSerifPro-Regular.otf'
      }, {
        type: 'italic',
        filename: 'SourceSerifPro-It.otf'
      }, {
        type: 'bold',
        filename: 'SourceSerifPro-Bold.otf'
      }, {
        type: 'bolditalic',
        filename: 'SourceSerifPro-BoldIt.otf'
      }]
    }];
    this.editorFonts = [];
    this.loadedCount = 0;
    this.editorFonts = this.specifiedFontsToEditorFonts(this.loadedFonts, false);
    this.editorFontsByFontName = {};
    for (let i = 0; i < this.editorFonts.length; i++) {
      const editorFont = this.editorFonts[i];
      this.editorFontsByFontName[editorFont.fontName] = editorFont;
    }
  }
  specifiedFontsToEditorFonts(fonts, isFallback) {
    const editorFonts = [];
    const fontsCount = lodash__WEBPACK_IMPORTED_MODULE_2__.flatten(this.loadedFonts.map(f => f.fontFiles)).length;
    for (let i = 0; i < fonts.length; i++) {
      const font = fonts[i];
      const fontFamily = font.fontFamily;
      for (let j = 0; j < font.fontFiles.length; j++) {
        const fontFile = font.fontFiles[j];
        const filename = fontFile.filename;
        const bold = fontFile.type === 'bold' || fontFile.type === 'bolditalic';
        const italic = fontFile.type === 'italic' || fontFile.type === 'bolditalic';
        const editorFont = new _editor_font__WEBPACK_IMPORTED_MODULE_0__["default"](fontFamily, 'assets/fonts/', filename, bold, italic, this.fallbackInfo, isFallback, this.http, () => {
          this.loadedCount++;
          if (this.loadedCount === fontsCount) {
            this.onFontsLoaded.emit();
          }
        });
        editorFonts.push(editorFont);
      }
    }
    return editorFonts;
  }
  getFontWithName(name) {
    return this.editorFontsByFontName[name];
  }
  getTextWidth(text, style) {
    const fontName = _font_names__WEBPACK_IMPORTED_MODULE_1__["default"].textStyleToFontName(style);
    const fontWithName = this.getFontWithName(fontName);
    let width = 0;
    const fonts = this.getFontsForText(text, fontWithName);
    for (let i = 0; i < fonts.length; i++) {
      const font = fonts[i];
      width += font.editorFont.getAdvanceWidth(font.text);
    }
    return width *= style.size;
  }
  getFontsForText(text, fontWithName) {
    const fonts = [];
    let prevFont = null;
    for (let i = 0; i < text.length; i++) {
      let char = text.charAt(i);
      const charCode = text.charCodeAt(i);
      let font = this.getFontForCharCode(charCode, prevFont, fontWithName);
      prevFont = font;
      if (font == null && charCode >= 32) {
        char = String.fromCharCode(9632);
        font = this.getFontWithName(_font_names__WEBPACK_IMPORTED_MODULE_1__["default"].toFontName('SourceSerifPro', false, false));
      }
      if (fonts.length === 0 || fonts[fonts.length - 1].editorFont != font) {
        fonts.push({
          text: char,
          editorFont: font
        });
      } else {
        fonts[fonts.length - 1].text += char;
      }
    }
    return fonts;
  }
  getFontForCharCode(charCode, font, fontWithName) {
    if (13 === charCode || 10 === charCode) return fontWithName;
    if (charCode < 32) return null;
    if (null != font && font.hasCharCode(charCode)) return font;
    if (fontWithName != null && fontWithName.hasCharCode(charCode)) {
      return fontWithName;
    }
    const fontInfo = this.fallbackInfo.getFontInfo(charCode);
    if (fontInfo) {
      const bold = fontWithName != null && fontWithName.bold;
      const italic = fontWithName != null && fontWithName.italic;
      return this.getMatchingFallbackFont(fontInfo.fontFamily, bold, italic);
    }
    return null;
  }
  getMatchingFallbackFont(fontFamily, bold, italic) {
    throw new Error('Not Implemented');
  }
  toAvailableTextFieldText(text, defaultTextFormat) {
    text = this.replaceSpaceCharacters(text);
    const textStyle = _font_names__WEBPACK_IMPORTED_MODULE_1__["default"].textFormatToTextStyle(defaultTextFormat);
    const fontName = _font_names__WEBPACK_IMPORTED_MODULE_1__["default"].textStyleToFontName(textStyle);
    const fontWithName = this.getFontWithName(fontName);
    let txtFieldText = '';
    const fonts = this.getFontsForText(text, fontWithName);
    for (let i = 0; i < fonts.length; i++) {
      const font = fonts[i];
      const editorFont = font.editorFont;
      // todo loaded
      txtFieldText += font.text;
    }
    return txtFieldText;
  }
  replaceSpaceCharacters(text) {
    return text.replace(/[^\S\r\n]/g, ' ');
  }
}
EditorFontsService.ɵfac = function EditorFontsService_Factory(t) {
  return new (t || EditorFontsService)(_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵinject"](_angular_common_http__WEBPACK_IMPORTED_MODULE_4__.HttpClient));
};
EditorFontsService.ɵprov = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_3__["ɵɵdefineInjectable"]({
  token: EditorFontsService,
  factory: EditorFontsService.ɵfac,
  providedIn: 'root'
});

/***/ }),

/***/ 20781:
/*!************************************************!*\
  !*** ./src/app/note-editor/text/font-names.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FontNames)
/* harmony export */ });
class FontNames {
  static textStyleToFontName(options) {
    return FontNames.toFontName(options.family, options.bold, options.italic);
  }
  static toFontName(family, bold, italic) {
    if (bold || italic) {
      if (bold && !italic) {
        return `${family}-bold`;
      } else if (!bold && italic) {
        return `${family}-italic`;
      } else if (bold && italic) {
        return `${family}-bold-italic`;
      }
    }
    return `${family}-normal`;
  }
  static textFormatToTextStyle(format) {
    return {
      family: format.font,
      size: format.size,
      bold: !!format.bold,
      italic: !!format.italic
    };
  }
}

/***/ }),

/***/ 65007:
/*!***************************************************!*\
  !*** ./src/app/note-editor/text/grid-fit-type.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GridFitType": () => (/* binding */ GridFitType)
/* harmony export */ });
var GridFitType;
(function (GridFitType) {
  GridFitType["NONE"] = "none";
  GridFitType["PIXEL"] = "pixel";
  GridFitType["SUBPIXEL"] = "subpixel";
})(GridFitType || (GridFitType = {}));

/***/ }),

/***/ 67497:
/*!**************************************************!*\
  !*** ./src/app/note-editor/text/text-element.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextElement)
/* harmony export */ });
class TextElement {
  constructor(element, width, x) {
    this.element = null;
    this.width = NaN;
    this.x = NaN;
    this.element = element;
    this.width = width;
    this.x = x;
  }
}

/***/ }),

/***/ 85149:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/text/text-field-auto-size.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFieldAutoSize": () => (/* binding */ TextFieldAutoSize)
/* harmony export */ });
var TextFieldAutoSize;
(function (TextFieldAutoSize) {
  TextFieldAutoSize["CENTER"] = "center";
  TextFieldAutoSize["LEFT"] = "left";
  TextFieldAutoSize["NONE"] = "none";
  TextFieldAutoSize["RIGHT"] = "right";
})(TextFieldAutoSize || (TextFieldAutoSize = {}));

/***/ }),

/***/ 52895:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/text/text-field-formatter.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextFieldFormatter)
/* harmony export */ });
/* harmony import */ var _font_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./font-names */ 20781);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash */ 17489);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-field-auto-size */ 85149);



class TextFieldFormatter {
  get shouldWordWrap() {
    return this.options.wordWrap && this.options.fieldWidth > 0;
  }
  constructor(text, options, editorFonts) {
    this.editorFonts = editorFonts;
    this.options = options;
    this.baseFontName = _font_names__WEBPACK_IMPORTED_MODULE_0__["default"].textStyleToFontName(options.style);
    this.baseFont = editorFonts.getFontWithName(this.baseFontName);
    this.spaceWidth = this.baseFont.getAdvanceWidth(' ') * this.options.style.size;
    this.lineHeight = this.options.style.size;
    const lines = this.textToLines(text);
    this.createLineParts(lines);
    this.adjustLeadingSpaces(lines);
    const height = this.assignYValues(lines) - this.options.gutter;
    const width = this.computeWidth(lines);
    this.assignXValues(lines, width);
    this.formattedTextField = {
      width,
      height,
      lines
    };
  }
  assignXValues(lines, width) {
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (this.options.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.CENTER) {
        line.x = (width - line.width) / 2;
      } else if (this.options.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.RIGHT) {
        line.x = width - line.width;
      } else {
        line.x = 0;
      }
      line.x += this.options.gutter;
    }
  }
  computeWidth(lines) {
    let width = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.width > width) {
        width = line.width;
      }
    }
    return width;
  }
  assignYValues(lines) {
    let gutter = this.options.gutter;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      gutter += this.lineHeight;
      line.y = gutter;
    }
    return gutter;
  }
  adjustLeadingSpaces(lines) {
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      for (let j = 0; j < line.parts.length; j++) {
        const part = line.parts[j];
        const spaceCount = this.leadingSpaceCount(part.text);
        if (spaceCount > 0) {
          part.text = part.text.substring(spaceCount);
          part.x += this.spaceWidth * spaceCount;
        }
      }
    }
  }
  leadingSpaceCount(text) {
    let count = 0;
    while (text.charAt(count) === ' ') {
      count++;
    }
    return count;
  }
  createLineParts(lines) {
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const fonts = this.editorFonts.getFontsForText(line.text, this.baseFont);
      const processedFonts = fonts; // this.editorFonts.performBidiProcessing(fonts);
      let x = 0;
      const parts = [];
      for (let j = 0; j < processedFonts.length; j++) {
        const font = processedFonts[j];
        const width = font.editorFont.getAdvanceWidth(font.text) * this.options.style.size;
        parts.push({
          x,
          text: font.text,
          width,
          fontFamily: font.editorFont === this.baseFont ? null : font.editorFont.fontFamily
        });
        x += width;
      }
      line.parts = parts;
    }
  }
  textToLines(text) {
    const lines = text.split('\n');
    if (this.shouldWordWrap) {
      return this.toWordWrappedLines(lines);
    } else {
      return this.toLines(lines);
    }
  }
  toWordWrappedLines(lines) {
    return lodash__WEBPACK_IMPORTED_MODULE_1__.flatten(lines.map(line => this.toWordWrappedLines(line)));
  }
  toLines(lines) {
    return lines.map(line => {
      return {
        text: line,
        width: this.getTextWidth(line)
      };
    });
  }
  getTextWidth(text) {
    return this.editorFonts.getTextWidth(text, this.options.style);
  }
}

/***/ }),

/***/ 90200:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/text/text-field-type.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFieldType": () => (/* binding */ TextFieldType)
/* harmony export */ });
var TextFieldType;
(function (TextFieldType) {
  TextFieldType["DYNAMIC"] = "dynamic";
  TextFieldType["INPUT"] = "input";
})(TextFieldType || (TextFieldType = {}));

/***/ }),

/***/ 67477:
/*!************************************************!*\
  !*** ./src/app/note-editor/text/text-field.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextField)
/* harmony export */ });
/* harmony import */ var _display_graphics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/graphics */ 36404);
/* harmony import */ var _display_interactive_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/interactive-object */ 85336);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _anti_alias_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./anti-alias-type */ 52348);
/* harmony import */ var _font_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./font-names */ 20781);
/* harmony import */ var _grid_fit_type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./grid-fit-type */ 65007);
/* harmony import */ var _text_element__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./text-element */ 67497);
/* harmony import */ var _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./text-field-auto-size */ 85149);
/* harmony import */ var _text_field_formatter__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./text-field-formatter */ 52895);
/* harmony import */ var _text_field_type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./text-field-type */ 90200);
/* harmony import */ var _text_format__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./text-format */ 10431);
/* harmony import */ var _text_line_metrics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./text-line-metrics */ 69208);












class TextField extends _display_interactive_object__WEBPACK_IMPORTED_MODULE_1__["default"] {
  static get DEFAULT_TEXT_FORMAT() {
    return TextField.default_text_format;
  }
  static get METRICS_POINT_SIZE() {
    return 100;
  }
  static get GUTTER() {
    return 2;
  }
  get antiAliasType() {
    return this._antiAliasType;
  }
  set antiAliasType(v) {
    this._antiAliasType = v;
  }
  get embedFonts() {
    return this._embedFonts;
  }
  set embedFonts(v) {
    this._embedFonts = v;
  }
  get defaultTextFormat() {
    return this._defaultTextFormat;
  }
  set defaultTextFormat(t) {
    this._defaultTextFormat = t;
    if (this._svg) {
      this._svg.setAttribute('font-family', t.font);
      this._svg.setAttribute('font-size', t.size);
      this._svg.setAttribute('font-style', t.italic ? 'italic' : 'normal');
      this._svg.setAttribute('font-weight', t.bold ? 'bold' : 'normal');
      this._svg.setAttribute('text-decoration', t.underline ? 'underline' : 'none');
      if (t.color) {
        this._svg.setAttribute('fill', _display_graphics__WEBPACK_IMPORTED_MODULE_0__["default"].colorToRGBA(t.color, 1));
      }
      this._svg.setAttribute('stroke', 'none');
    }
    this.updateText();
  }
  get textColor() {
    return this._textColor;
  }
  set textColor(v) {
    this._textColor = v;
    if (this._svg) {
      this._svg.setAttribute('fill', _display_graphics__WEBPACK_IMPORTED_MODULE_0__["default"].colorToRGBA(v, 1));
    }
  }
  get autoSize() {
    return this._autoSize;
  }
  set autoSize(v) {
    this._autoSize = v;
  }
  get backgroundColor() {
    return this._backgroundColor;
  }
  set backgroundColor(v) {
    this._backgroundColor = v;
  }
  get background() {
    return this._background;
  }
  set background(v) {
    this._background = v;
  }
  get multiline() {
    return this._multiline;
  }
  set multiline(v) {
    if (this._multiline !== v) {
      this._multiline = v;
      this.updateText();
    }
  }
  get wordWrap() {
    return this._wordWrap;
  }
  set wordWrap(v) {
    if (this._wordWrap !== v) {
      this._wordWrap = v;
      this.updateText();
    }
  }
  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
    this.updateText();
  }
  get htmlText() {
    return this.text;
  }
  set htmlText(v) {
    this.text = v;
  }
  get selectable() {
    return this._selectable;
  }
  set selectable(v) {
    this._selectable = v;
  }
  get type() {
    return this._type;
  }
  set type(v) {
    this._type = v;
  }
  get gridFitType() {
    return this._gridFitType;
  }
  set gridFitType(v) {
    this._gridFitType = v;
  }
  get sharpness() {
    return this._sharpness;
  }
  set sharpness(v) {
    this._sharpness = v;
  }
  get textHeight() {
    return this._textHeight;
  }
  get textWidth() {
    return this._textWidth;
  }
  get width() {
    return this._textWidth;
  }
  set width(v) {
    if (this._fieldWidth !== v) {
      this._fieldWidth = v;
      if (this.wordWrap) {
        this.updateText();
      }
    }
  }
  get height() {
    return this._textHeight;
  }
  get screenScale() {
    return this._svg.getCTM().a;
  }
  constructor(editorFonts, rootDiv, noteEditorService) {
    super(noteEditorService, rootDiv);
    this._inputElement = null;
    this._inputAnchor = null;
    this._focusTime = NaN;
    this._antiAliasType = _anti_alias_type__WEBPACK_IMPORTED_MODULE_3__.AntiAliasType.NORMAL;
    this.metrics_point_size = 100;
    this._embedFonts = false;
    this._defaultTextFormat = new _text_format__WEBPACK_IMPORTED_MODULE_10__["default"]('', 12, 0);
    this._textColor = 0;
    this._autoSize = _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.NONE;
    this._backgroundColor = 0xffffff;
    this._background = false;
    this._multiline = false;
    this._wordWrap = false;
    this._text = '';
    this._selectable = true;
    this._type = _text_field_type__WEBPACK_IMPORTED_MODULE_9__.TextFieldType.DYNAMIC;
    this._gridFitType = _grid_fit_type__WEBPACK_IMPORTED_MODULE_5__.GridFitType.PIXEL;
    this._sharpness = NaN;
    this._textHeight = 0;
    this._textWidth = 0;
    this._fieldWidth = 0;
    this._lineMetrics = null;
    this._positionRequested = false;
    this.METRICS_POINT_SIZE = 100;
    this.GUTTER = 2;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
  }
  measureText(text) {
    let font;
    font = this.defaultTextFormat.bold ? 'bold ' : this.defaultTextFormat.italic ? 'italic ' : 'normal ';
    font += this.METRICS_POINT_SIZE.toString();
    font += 'px ';
    font += this.defaultTextFormat.font;
    return this.textMeasurement.canvasTextWidth(text, font) * this.defaultTextFormat.size / this.metrics_point_size;
  }
  letterMapKey(letter) {
    let letterMapKey = letter;
    const properties = ['font', 'bold', 'italic', 'underline', 'size'];
    for (let i = 0; i < properties.length; i++) {
      const property = properties[i];
      if (this.defaultTextFormat.hasOwnProperty(property)) {
        letterMapKey += '-' + this.defaultTextFormat[property].toString();
      } else {
        letterMapKey += '-null';
      }
    }
    return letterMapKey;
  }
  calculateWordWidth(word) {
    let wordWidth = 0;
    for (let i = 0; i < word.length; i++) {
      const letter = word[i];
      const letterMapKey = this.letterMapKey(letter);
      if (!TextField.widths[letterMapKey]) {
        const textField = new TextField(this.editorFonts, this.rootDiv, this.noteEditorService);
        if (this.defaultTextFormat) {
          textField.defaultTextFormat = this.defaultTextFormat;
        }
        if (letter == ' ') {
          textField.text = 'V V';
          const widthWithSpace = textField.width;
          textField.text = 'VV';
          const widthWithoutSpace = textField.width;
          TextField.widths[letterMapKey] = widthWithSpace - widthWithoutSpace;
        } else {
          textField.text = letter;
          TextField.widths[letterMapKey] = textField.width;
        }
      }
      wordWidth += TextField.widths[letterMapKey];
    }
    return wordWidth;
  }
  updateText() {
    this.clearTextNodes();
    const text = this.editorFonts.toAvailableTextFieldText(this._text, this._defaultTextFormat);
    const formattedTextField = new _text_field_formatter__WEBPACK_IMPORTED_MODULE_8__["default"](text, {
      style: _font_names__WEBPACK_IMPORTED_MODULE_4__["default"].textFormatToTextStyle(this._defaultTextFormat),
      wordWrap: this._wordWrap,
      fieldWidth: this._fieldWidth,
      autoSize: this._autoSize,
      gutter: TextField.GUTTER
    }, this.editorFonts).formattedTextField;
    for (let i = 0; i < formattedTextField.lines.length; i++) {
      const line = formattedTextField.lines[i];
      for (let j = 0; j < line.parts.length; j++) {
        const part = line.parts[j];
        this.addTextNode(part.text, line.x + part.x, line.y, part.fontFamily);
      }
    }
    this._textWidth = formattedTextField.width;
    this._textHeight = formattedTextField.height;
    return;
    let lines = [];
    if (this.text) {
      lines = this.text.split(/\n/);
    }
    let y = this.GUTTER;
    const textEls = [];
    this._textWidth = this._textHeight = 0;
    while (lines.length > 0) {
      let line = lines.shift();
      const textEl = this.svgContext.createElement('text');
      let dataLeadingSpaceWidth = 0;
      while (line.length > 0 && ' ' === line.charAt(0)) {
        dataLeadingSpaceWidth += this.measureText(' ');
        line = line.substring(1);
      }
      let x = this.GUTTER;
      y += this.defaultTextFormat.size;
      if (dataLeadingSpaceWidth > 0) {
        x += dataLeadingSpaceWidth;
        textEl.setAttribute('data-leading-space-width', dataLeadingSpaceWidth.toString());
      }
      textEl.setAttribute('x', x.toString());
      textEl.setAttribute('y', y.toString());
      const textNode = document.createTextNode(line);
      textEl.appendChild(textNode);
      this._svg.appendChild(textEl);
      if (this.wordWrap && this._fieldWidth > 0) {
        let wordsWidth = 0,
          start = 0,
          wrappedWord = '',
          spaceIdx = line.indexOf(' ');
        while (spaceIdx > -1) {
          const currWord = line.substring(start, spaceIdx + 1);
          wordsWidth += this.calculateWordWidth(currWord);
          if (!(start === 0 || wordsWidth < this._fieldWidth)) {
            // new line
            wrappedWord = line.substring(start);
            line = line.substring(0, start);
            textNode.textContent = line;
            break;
          }
          start += currWord.length;
          spaceIdx = line.indexOf(' ', start);
        }
        if (wrappedWord) {
          lines.unshift(wrappedWord);
        }
      }
      const width = dataLeadingSpaceWidth + this.measureText(line);
      this._textWidth = Math.max(this._textWidth, width);
      this._textHeight += this.defaultTextFormat.size;
      textEls.push(new _text_element__WEBPACK_IMPORTED_MODULE_6__["default"](textEl, width, x));
    }
    this._lineMetrics = null;
    if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.CENTER || this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.RIGHT) {
      for (let i = 0; i < textEls.length; i++) {
        const textEl = textEls[i];
        if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.CENTER) {
          textEl.element.setAttribute('x', textEl.x + (this.textWidth - textEl.width) / 2);
        } else {
          textEl.element.setAttribute('x', textEl.x + (this.textWidth - textEl.width));
        }
      }
    }
  }
  addTextNode(text, x, y, fontFamily) {
    if (text != '') {
      const textEl = this.svgContext.createElement('text');
      textEl.setAttribute('x', x);
      textEl.setAttribute('y', y);
      textEl.setAttribute('class', 'unselectable');
      if (fontFamily) {
        textEl.setAttribute('font-family', fontFamily);
      }
      const textNode = document.createTextNode(text);
      textEl.appendChild(textNode);
      this._svg.appendChild(textEl);
    }
  }
  clearTextNodes() {
    while (this._svg && this._svg.childNodes.length > 0) {
      this._svg.removeChild(this._svg.childNodes[0]);
    }
  }
  getLineMetrics(line) {
    if (line === 0 && this._lineMetrics != null) {
      return this._lineMetrics;
    }
    const textLineMetrics = new _text_line_metrics__WEBPACK_IMPORTED_MODULE_11__["default"](2, this.textWidth, this.textHeight, this.defaultTextFormat.size, 0, 0);
    if (line === 0) {
      this._lineMetrics = textLineMetrics;
    }
    return textLineMetrics;
  }
  setSelection(start, end) {
    if (this._inputElement) {
      this._inputElement.setSelectionRange(start, end);
    }
  }
  setupFocusElement(inputElement) {
    // TODO FocusEvent
    this._svg.setAttribute('visibility', 'hidden');
    this._inputElement = inputElement;
    const fontSize = Math.round(this.defaultTextFormat.size * this.screenScale);
    inputElement.style['font-family'] = this.defaultTextFormat.font;
    inputElement.style['font-style'] = this.defaultTextFormat.italic ? 'italic' : 'normal';
    inputElement.style['font-size'] = fontSize + 'px';
    inputElement.style['line-height'] = fontSize + 'px';
    inputElement.value = this.text;
    inputElement.style['position'] = 'absolute';
    inputElement.style['border'] = '0px';
    inputElement.style['white-space'] = this.wordWrap ? 'normal' : 'pre';
    inputElement.addEventListener('keydown', this.inputKeyDown.bind(this));
    inputElement.addEventListener('keyup', this.inputKeyUp.bind(this));
    inputElement.addEventListener('keypress', this.inputKeyPress.bind(this));
    inputElement.addEventListener('blur', this.inputBlur.bind(this));
    if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.CENTER) {
      this._inputAnchor = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](this.width / 2, 0);
      inputElement.style['text-align'] = 'center';
    } else if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.RIGHT) {
      this._inputAnchor = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](this.width, 0);
      inputElement.style['text-align'] = 'right';
    } else {
      this._inputAnchor = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
      inputElement.style['text-align'] = 'left';
    }
    this.positionInput();
    inputElement.style['display'] = 'block';
    this._focusTime = new Date().getTime();
    return this._inputElement;
  }
  teardownFocusElement() {
    this.text = this._inputElement.value;
    this._svg.setAttribute('visibility', 'visible');
    this._inputElement.removeEventListener('keydown', this.inputKeyDown.bind(this));
    this._inputElement.removeEventListener('keypress', this.inputKeyPress.bind(this));
    this._inputElement.removeEventListener('blur', this.inputBlur.bind(this));
    this._inputElement.style.display = 'none';
    this.handleFocusOut();
    this._inputElement = null;
  }
  handleFocusOut() {
    if (this.parent.editable) {
      this.background = false;
      this.commitValue();
      this.parent.updateText();
    }
  }
  commitValue() {
    this.parent._text = this.text.replace(/^\s+|\s+$/g, '');
    if (this.parent._model.getModelProperty(this.parent._property) !== this.text && !(this.parent.valueIsPrompt && this.parent.text === '')) {
      if (this.parent.editGroupName != null) {
        // todo Undo History
      }
      this.parent._model.setModelProperty(this.parent._property, this.parent.text);
    }
    if (this.parent._markdown) {
      this.parent.updateView();
    }
  }
  positionInput() {
    if (this._inputElement) {
      this.text = this._inputElement.value;
      const width = this.textWidth + 1.25 * this.defaultTextFormat.size;
      let position = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](this._inputAnchor.x + this.GUTTER, this._inputAnchor.y + this.GUTTER);
      if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.CENTER) {
        position.x -= width / 2;
      } else if (this.autoSize === _text_field_auto_size__WEBPACK_IMPORTED_MODULE_7__.TextFieldAutoSize.RIGHT) {
        position.x -= width;
      }
      position = this.localToGlobal(position);
      position = this.stage.controller.scoreDocumentView.globalToLocal(position);
      this._inputElement.style['left'] = position.x + 'px';
      this._inputElement.style['top'] = position.y + 'px';
      this._inputElement.style['width'] = width * this.screenScale + 'px';
      this._inputElement.style['height'] = this.textHeight * this.screenScale + 'px';
      this._inputElement.style['background-color'] = 'rgba(234, 85, 44, 0.2)';
      this._inputElement.style['user-select'] = 'text';
    }
  }
  inputKeyDown(evt) {
    if (!this._positionRequested) {
      this._positionRequested = true;
      setTimeout(() => {
        this._positionRequested = false;
        this.positionInput();
      }, 10);
    }
    this.handleKeyDown(evt);
  }
  handleKeyDown(evt) {
    evt.stopPropagation();
    const keyCode = evt.charCode > 0 ? evt.charCode : evt.keyCode;
    if (this.parent.autoCommitChars.indexOf(String.fromCharCode(keyCode)) >= 0 && this.parent.autoCommitFunction && this.parent.autoCommitFunction(this, evt)) {
      this.parent.commitChar = String.fromCharCode(keyCode);
      evt.preventDefault();
      this.parent.context.documentView.setFocus();
    } else if (evt.keyCode === 27) {
      evt.preventDefault();
      this.parent.context.documentView.setFocus();
    }
  }
  inputKeyUp(evt) {
    // TODO KEY_UP
  }
  inputKeyPress(evt) {
    this.handleKeyDown(evt);
    if (!this.multiline && evt.keyCode === 13 && this.stage) {
      this.stage.focus = null;
    }
  }
  inputBlur(evt) {
    if (new Date().getTime() - this._focusTime > 100) {
      this.stage.focus = null;
    } else if (this._inputElement) {
      this._inputElement.focus();
    }
  }
}
TextField.default_text_format = new _text_format__WEBPACK_IMPORTED_MODULE_10__["default"]('', 12, 0);
TextField.widths = {};

/***/ }),

/***/ 48520:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/text/text-format-align.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TextFormatAlign": () => (/* binding */ TextFormatAlign)
/* harmony export */ });
var TextFormatAlign;
(function (TextFormatAlign) {
  TextFormatAlign["CENTER"] = "center";
  TextFormatAlign["END"] = "end";
  TextFormatAlign["JUSTIFY"] = "justify";
  TextFormatAlign["LEFT"] = "left";
  TextFormatAlign["RIGHT"] = "right";
  TextFormatAlign["START"] = "start";
})(TextFormatAlign || (TextFormatAlign = {}));

/***/ }),

/***/ 10431:
/*!*************************************************!*\
  !*** ./src/app/note-editor/text/text-format.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextFormat)
/* harmony export */ });
class TextFormat {
  constructor(font, size, color, bold, italic, underline, url, target, align, leftMargin, rightMargin, indent, leading) {
    this.font = null;
    this.size = NaN;
    this.color = 0;
    this.bold = null;
    this.italic = null;
    this.underline = null;
    this.url = null;
    this.target = null;
    this.align = null;
    this.leftMargin = null;
    this.rightMargin = null;
    this.indent = null;
    this.leading = null;
    this.font = font;
    this.size = size;
    this.color = color ? color : 0;
    this.bold = bold;
    this.italic = italic;
    this.underline = underline;
    this.url = url;
    this.target = target;
    this.align = align;
    this.leftMargin = leftMargin;
    this.rightMargin = rightMargin;
    this.indent = indent;
    this.leading = leading;
  }
}

/***/ }),

/***/ 69208:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/text/text-line-metrics.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextLineMetrics)
/* harmony export */ });
class TextLineMetrics {
  constructor(x, width, height, ascent, descent, leading) {
    this.ascent = NaN;
    this.descent = NaN;
    this.height = NaN;
    this.leading = NaN;
    this.width = NaN;
    this.x = NaN;
    this.x = x;
    this.width = width;
    this.height = height;
    this.ascent = ascent;
    this.descent = descent;
    this.leading = leading;
  }
}

/***/ }),

/***/ 99481:
/*!******************************************************!*\
  !*** ./src/app/note-editor/text/text-measurement.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextMeasurement)
/* harmony export */ });
class TextMeasurement {
  get _textWidthCanvasContext() {
    return this._textWidthCanvas.getContext('2d');
  }
  constructor(svgContext, textMeasurementCaches, textWidthCanvas, textMeasurementImpl) {
    textMeasurementCaches = textMeasurementCaches || {};
    this.svgContext = svgContext;
    this._textWidthCanvas = textWidthCanvas || document.createElement('canvas');
    this._textMeasurementCaches = textMeasurementCaches;
    this._canvasTextWidthCache = textMeasurementCaches.canvasTextWidthCache;
    this._textWidthCache = textMeasurementCaches.textWidthCache;
    this._textHeightCache = textMeasurementCaches.textHeightCache;
    this.textMeasurementImpl = textMeasurementImpl;
  }
  withCache(cache, svg, createCacheKey, measureText) {
    if (cache) {
      const key = createCacheKey(svg);
      const val = cache[key];
      if (val == null) {
        this._textMeasurementCaches.requiresRegeneration = true;
        cache[key] = -1;
        return 0;
      } else if (val < 0) {
        this._textMeasurementCaches.requiresRegeneration = true;
        return 0;
      } else {
        return val;
      }
    }
    return measureText(svg);
  }
  canvasTextWidth(text, font) {
    if (this.textMeasurementImpl) {
      return this.textMeasurementImpl.canvasTextWidth(text, font);
    }
    return this.withCache(this._canvasTextWidthCache, {
      text,
      font
    }, t => this._canvasTextWidthCacheKey(t.text, t.font), t => {
      this._textWidthCanvasContext.font = t.font;
      return this._textWidthCanvasContext.measureText(t.text).width;
    });
  }
  _canvasTextWidthCacheKey(text, font) {
    return this._escapeNonAscii(''.concat(font, '|')).concat(text);
  }
  textHeight(svg) {
    if (this.textMeasurementImpl) {
      return this.textMeasurementImpl.textHeight(svg);
    }
    return this.withCache(this._textHeightCache, svg, t => this._textHeightCacheKey(t), t => {
      return this.svgContext.internalGetBBox(t).height;
    });
  }
  _textHeightCacheKey(svg) {
    return this._textSvgToCacheKey(svg);
  }
  textWidth(svg) {
    if (this.textMeasurementImpl) {
      return this.textMeasurementImpl.textWidth(svg);
    }
    return this.withCache(this._textWidthCache, svg, t => this._textWidthCacheKey(t), t => this.svgContext.internalGetBBox(t).width);
  }
  _textWidthCacheKey(svg) {
    return this._textSvgToCacheKey(svg);
  }
  _textSvgToCacheKey(svg) {
    const textSizingInfo = this._extractTextSizingInfo(svg);
    return textSizingInfo == null ? null : this._escapeNonAscii(JSON.stringify(textSizingInfo));
  }
  _escapeNonAscii(str) {
    let result = '';
    for (let i = 0; i < str.length; i++) {
      const charCode = str.charCodeAt(i);
      if (charCode < 32 || charCode > 126) {
        const s = '0000' + charCode.toString(16);
        result += '\\u' + s.substring(s.length - 4);
      } else {
        result += String.fromCharCode(charCode);
      }
    }
    return result;
  }
  _extractTextSizingInfo(svg) {
    const textInfo = this._extractTextInfo(svg);
    if (textInfo) {
      return textInfo;
    } else if (svg.nodeType !== Node.ELEMENT_NODE || 'g' !== svg.nodeName || this._hasSizeChangingTransform(svg) || svg.childNodes.length !== 1) {
      return null;
    } else {
      this._extractTextSizingInfo(svg.firstChild);
    }
  }
  _extractTextInfo(svg) {
    if (svg.nodeType !== Node.ELEMENT_NODE || 'g' !== svg.nodeName || this._hasSizeChangingTransform(svg)) {
      return null;
    }
    const fontInfo = this._extractFontInfo(svg);
    if (fontInfo) {
      const lines = [];
      fontInfo.push(lines);
      const childNodes = svg.childNodes;
      for (let i = 0; i < childNodes.length; i++) {
        const childNode = childNodes[i];
        const textLine = this._extractTextLine(childNode);
        if (textLine) {
          lines.push(textLine);
        } else {
          return null;
        }
      }
    } else {
      return null;
    }
  }
  _hasSizeChangingTransform(svg) {
    if (svg.hasAttribute('transform')) {
      const transformAttr = svg.getAttribute('transform');
      return transformAttr.indexOf('scale(1,1)') < 0 || transformAttr.indexOf('rotate(0)') < 0;
    } else {
      return false;
    }
  }
  _extractFontInfo(svg) {
    if (svg.hasAttribute('font-family') && svg.hasAttribute('font-size') && svg.hasAttribute('font-style') && svg.hasAttribute('font-weight')) {
      return [svg.getAttribute('font-family'), this._getNumberAttribute(svg, 'font-size'), svg.getAttribute('font-style'), svg.getAttribute('font-weight')];
    } else {
      return null;
    }
  }
  _extractTextLine(childNode) {
    if (childNode.nodeType === Node.ELEMENT_NODE && 'text' === childNode.nodeName && childNode.hasAttribute('x') && childNode.hasAttribute('y') && 1 === childNode.childNodes.length && childNode.firstNode.nodeType === Node.TEXT_NODE) {
      return [this._getNumberAttribute(childNode, 'x'), this._getNumberAttribute(childNode, 'y'), childNode.firstChild.nodeValue];
    } else {
      return null;
    }
  }
  _getNumberAttribute(svg, attr) {
    const attrVal = svg.getAttribute(attr);
    if (attrVal === 'NaN') return NaN;
    let val = parseFloat(attrVal);
    let sign = 1;
    if (val < 0) {
      val = -val;
      sign = -1;
    }
    return Math.floor(100000 * val + 0.5) / 100000 * sign;
  }
}

/***/ }),

/***/ 21506:
/*!********************************************!*\
  !*** ./src/app/note-editor/utils/color.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "colorToRGBA": () => (/* binding */ colorToRGBA),
/* harmony export */   "extractAlphaFromRGBA": () => (/* binding */ extractAlphaFromRGBA)
/* harmony export */ });
/* harmony import */ var _convert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./convert */ 20065);

function colorToRGBA(color, alpha) {
  return `rgba(${color >>> 16 & 255},${color >>> 8 & 255},${color & 255},${alpha})`;
}
function extractAlphaFromRGBA(rgba) {
  return (0,_convert__WEBPACK_IMPORTED_MODULE_0__.stringToNumber)(rgba.replace(/^.*,(.+)\)/, '$1'));
}

/***/ }),

/***/ 20065:
/*!**********************************************!*\
  !*** ./src/app/note-editor/utils/convert.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "parseBoolean": () => (/* binding */ parseBoolean),
/* harmony export */   "parseNumber": () => (/* binding */ parseNumber),
/* harmony export */   "stringToNumber": () => (/* binding */ stringToNumber)
/* harmony export */ });
const decimal_string_pattern = /^\s*[+-]?(([0-9]+)|([0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?))\s*$/;
const hex_string_pattern = /^\s*[+-]?0x[0-9a-fA-F]+\s*$/;
const octal_string_pattern = /^\s*0[0-9]+\s*$/;
function isDecimalString(str) {
  return decimal_string_pattern.test(str);
}
function isHexString(str) {
  return hex_string_pattern.test(str);
}
function isOctalString(str) {
  return octal_string_pattern.test(str);
}
function stringToNumber(str) {
  return str === undefined ? NaN : str == null || str === '' ? 0 : isDecimalString(str) ? parseFloat(str) : isHexString(str) ? parseInt(str, 16) : isOctalString(str) ? parseInt(str, 10) : NaN;
}
function parseBoolean(source) {
  if (typeof source === 'boolean') {
    return source;
  } else if (typeof source === 'string') {
    if (source.toLowerCase() === 'true') {
      return true;
    } else if (source.toLowerCase() === 'false') {
      return false;
    }
  }
  return undefined;
}
function parseNumber(num) {
  if (typeof num === 'number') {
    return num;
  }
  if (typeof num === 'string') {
    return parseFloat(num);
  }
  return num;
}

/***/ }),

/***/ 97837:
/*!*************************************************!*\
  !*** ./src/app/note-editor/utils/dictionary.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Dictionary)
/* harmony export */ });
class Dictionary {
  constructor() {
    this.map = new Map();
  }
  get(key) {
    return this.map.get(key);
  }
  put(key, val) {
    return this.map.set(key, val);
  }
  hasOwnProperty(key) {
    return typeof key === 'string' && this.map.has(key);
  }
}

/***/ }),

/***/ 33400:
/*!********************************************!*\
  !*** ./src/app/note-editor/utils/event.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "buildEvent": () => (/* binding */ buildEvent)
/* harmony export */ });
/* harmony import */ var _display_interactive_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/interactive-object */ 85336);
/* harmony import */ var _events_falsh_mouse_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/falsh-mouse-event */ 93699);


function buildEvent(evt, eventType, useCapture, svgContext, screenCTM, stage) {
  const mouseTransformed = svgContext.transformPoint(evt.clientX, evt.clientY, screenCTM.inverse());
  const flashMouseEvent = new _events_falsh_mouse_event__WEBPACK_IMPORTED_MODULE_1__["default"](eventType, true, useCapture, evt.x, evt.y, mouseTransformed.x, mouseTransformed.y, null, evt.ctrlKey, evt.altKey, evt.shiftKey, stage.mouseButton, 0, evt.metaKey, evt.ctrlKey);
  flashMouseEvent.target = _display_interactive_object__WEBPACK_IMPORTED_MODULE_0__["default"]._lastFlashTarget;
  const stageOffset = stage.stageOffset;
  flashMouseEvent.stageX = evt.clientX - stageOffset.x;
  flashMouseEvent.stageY = evt.clientY - stageOffset.y;
  stage.trackMouseState(evt);
  // if (flashMouseEvent.cancelled) {
  //   evt.stopPropagation();
  // }
  return flashMouseEvent;
}

/***/ }),

/***/ 80872:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/utils/fretboart-maps.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FretboardMap": () => (/* binding */ FretboardMap),
/* harmony export */   "UkeFretboardMap": () => (/* binding */ UkeFretboardMap)
/* harmony export */ });
const FretboardMap = {
  A: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Ab5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Ab5/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A(add#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  A11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  A13: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A13/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  A13b9: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A13/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A13/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A13/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  A13sus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  A13sus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  A5: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }]
  },
  'A5(9 6)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A5(add9)': {
    notes: []
  },
  'A5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A5/C#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A5/D': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }]
  },
  'A5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A5/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  A6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A6(9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A6/9sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }]
  },
  'A6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A6(2)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A6/C#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }]
  },
  'A6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  A7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(add11)(no5)': {
    notes: []
  },
  'A7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A6/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A7(4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  A7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7b5/C#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'A7b5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7b5(b9,b5,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'A7(b9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7b9(b9 b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'A7b9(b9 #11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'A7(b9)/C#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'A7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(no3)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(b9)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7b5(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'A7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(add6)b9': {
    notes: []
  },
  'A7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A7#5(#5 b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'A7#5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A7#5/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'A7#5(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A7(#9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A7#9(#9 b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A7#9(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A7(#9)/E': {
    firstFret: 11,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 12
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 12
    }, {
      string: 1,
      fret: 13
    }]
  },
  A7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7sus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7sus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7sus/D': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7sus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7sus(add13)': {
    notes: []
  },
  A9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A9(b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  A9b5: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A9/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9/E': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9(#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'A9#5': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  A9sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A9sus/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'A(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add2)/B': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add2)/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add2)/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add2)/E': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A(add2)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add4)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add#9)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add9)/B': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add9)/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add9)/E': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add9)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'A(add9)(no3)': {
    notes: []
  },
  Adim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  Adim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Adim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Adim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Adim7/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Adim7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Adim/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Adim/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Adim/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Adim/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Adim/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  Ab: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Ab11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  Ab13: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ab13#11': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  Ab13b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ab13b9: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Ab13/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab13#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Ab5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab13#9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Ab5/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ab6: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ab6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab6/9/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab6/9/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6/Gb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Ab7: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7(no5)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7(13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ab7(b13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Ab7(4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7(4)/Gb': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Ab7b5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ab7(b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Ab7b9(b9 b13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Ab7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7b9(b9 #11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Ab7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7(#11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ab7#4': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ab7#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Ab7#5(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Ab7#5(#5 #9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Ab7(#9)': {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 11
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 12
    }]
  },
  'Ab7#9(#9 b13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Ab7sus/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7sus/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ab7sus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Ab9: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab9(13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ab9/Eb': {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 11
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11,
      barre: 'start'
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 11,
      barre: 'stop'
    }]
  },
  'Ab9(b13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  Ab9b5: {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 11
    }, {
      string: 3,
      fret: 10,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Ab9(no3)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ab9/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab9/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab9/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab9(#11)': {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 11
    }, {
      string: 3,
      fret: 10,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Ab9#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  Ab9sus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab(add9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab(add9)/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab(add2)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ab(add2)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab(add2)/C': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8,
      barre: 'start'
    }, {
      string: 4,
      fret: 11,
      barre: 'start'
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 11,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Ab(add2)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab(add2)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab(add4)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Ab(add4)/Gb': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab#4': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }]
  },
  'Ab(add9)/C': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8,
      barre: 'start'
    }, {
      string: 4,
      fret: 11,
      barre: 'start'
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 11,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Ab(add9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab#4/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  Abdim: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab#4/C': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }]
  },
  Abdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Abdim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Abdim7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Abdim/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Abdim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Abdim7/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  Abb5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  Abm11: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  Abm: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Abm13: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  Abm6: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm6+5': {
    notes: []
  },
  'Abm6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm7(4)/Eb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Abm6/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm6/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Abm7: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  Abm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Abm7b5/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Abm7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm(add2)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm7/Gb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Abm9: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm9/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm9/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm(add9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  Abmaj13: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Abm(add4)/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Abmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj7(add6)': {
    notes: []
  },
  Abmaj7b5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Abmaj7b5/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Abmaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Abmaj7/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Abmaj7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj7(#11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Abmaj7#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Abmaj7#5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abmaj9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Abmaj9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj9/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abmaj9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abmaj9(#11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Abm(add#7)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abm/B': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm/Gb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/E': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/Fb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Ab/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab/Gb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab+': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Ab+/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab+/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab+/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Ab#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Absus2/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }]
  },
  Absus2: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'Absus2/Db': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }]
  },
  'Absus2/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Absus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Absus2(add#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  Absus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Absus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Absus(add2)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Absus(add2)/E': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Absus/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Absus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Absus/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Absus/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Absus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Absus/Fb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  Am: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Am11: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  Am11b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Am13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Am6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Am13/E': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am6(add11)': {
    notes: []
  },
  'Am(no3rd)': {
    notes: []
  },
  'Am6(2)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am6(9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am6/9': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am6/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Am6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Am6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Am7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am7(11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Am7(11)/E': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am6/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am7(4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  Am7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Amb5/C': {
    notes: []
  },
  'Am7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Am7b5/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Am7b5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Am7b5/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Am7(b6)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Am7(no3rd)': {
    notes: []
  },
  'Am7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Am7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am7(no3rd)/G': {
    notes: []
  },
  'Am7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Am7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Am7/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Am7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Am7sus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Am9: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am9(4)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am9(ma7)': {
    notes: []
  },
  'Am9/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am9/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am9/G#': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(addB)': {
    notes: []
  },
  'Am(add2)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(addb6)': {
    notes: []
  },
  'Am(add4)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add4)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add4)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am(add9)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Amaj13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Amaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Amaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj13#11/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Amaj7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Amaj7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Amaj13b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Amaj7/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj7(#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Amaj7#5': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  Amaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj9/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj9/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj9/E': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Amaj9/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Amaj9(#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Amaj9(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Amaj9(no3)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add#7)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add#7)/G#': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add9)/G#': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(#7)': {
    notes: []
  },
  'Am/G#': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am#5': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Amsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Amsus2: {
    notes: []
  },
  Amsus2ma4: {
    notes: []
  },
  'A/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  Ano3d: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'A/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A+(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A+/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A+/C#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'A#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }]
  },
  'A#7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#dim': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#dim7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#dim/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'A#dim/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A#7sus': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m7b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A#m7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'A#m7/G#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'A#7#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'A#m9': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A#m/D#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'A#m7/D#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'A#/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'A#+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Asus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A#m6': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Asus(add9)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  Asus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Asus2ma4: {
    notes: []
  },
  'Asus2(add11)': {
    notes: []
  },
  'Asus2/4/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  Asus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  B: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B13: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  B13b9: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'B13/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'B13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  B5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'B11/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B5/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'B13/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'B5/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  B5sus2: {
    notes: []
  },
  B6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  B6b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B6/9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }]
  },
  'B6/9(b5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B6(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B6/9(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B6/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B6/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  B7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'B7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  B7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'B7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B7b5/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'B7b9(b9 b13)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'B6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7(b9)/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7b9(b9 #11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B7(b9)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'B7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'B7/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'B7/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'B7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B+7': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }]
  },
  'B7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'B7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B7#5(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B7#5/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B7#5(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'B7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'B7#9(#9 #11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B7#9(#9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  B7sus: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7sus(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  B7sus4: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7sus2/4': {
    notes: []
  },
  'B7sus/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B7sus/E': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7sus/F#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B9(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B9/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  B9sus: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'B9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B(add2)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B(add2)/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B(add2)/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B(add4)/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'B(add4)/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B(add4)/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B(add9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 9
    }]
  },
  'B(add9)/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B(add9)/F#': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 9
    }]
  },
  Bdim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  Bdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bdim7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bdim/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  Bb: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bb11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bb13: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bb13/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bb13b9: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Bb13/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bb13sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb13#9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb5/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1,
      barre: 'stop'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb13#11/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb5(add#5)': {
    notes: []
  },
  Bb6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bb6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb6/9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb6/9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb6/9(no3)': {
    notes: []
  },
  'Bb6/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb6(no3)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 5
    }]
  },
  'Bb6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb6/9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb6/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Bb7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Bb7(4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bb7(b13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  Bb7b5: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Bb7b5(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb7(no5)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }]
  },
  'Bb7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb7(no3)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bb7b9(b9 b13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bb7(b9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb7/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bb7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bb7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb+7': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bb7(#11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Bb7#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bb7#5(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb7#5(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb7#5/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bb7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bb7#9(#9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb7(#9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  Bb7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7sus/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bb7sus(b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Bb7sus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7sus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bb7sus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7sus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bb9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bb9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb9(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb9(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb9#5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bb9sus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bb(add4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add2)/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb(add2)/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb(add4)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bb(add4)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb(add#11,add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb(add2)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb(add2)/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb(add2)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add2)/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Bb(add#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb(add9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bb(add9)/A': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bb(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add2)/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bb(add9)/F': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bb(add9)/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  Bbdim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbdim7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb(add9)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbdim/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbdim/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbdim7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bbb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bb#4/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bbm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm11: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  Bbm13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbm6: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbm6/9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm6(add4)': {
    notes: []
  },
  'Bbm6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bbm6/Db': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm7(11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bbm7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bbm7(4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bbm7(9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  Bbm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm7b5(add11)/D': {
    notes: []
  },
  'Bbm7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbm7b5/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bbm7b5/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bbm7/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm7/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm7sus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm9: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bbm9/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bbm9/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bbm(add2)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Bbm(add9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  Bbmaj13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbmaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbmaj7(add6)': {
    notes: []
  },
  'Bbmaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Bbmaj7(no3)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Bbmaj7/A': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Bbmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bbmaj7/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Bbmaj7/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Bbmaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbmaj7sus2/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Bbmaj7#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bbmaj7#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bbmaj7#5/F#': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }]
  },
  Bbmaj9: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Bbmaj9(13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Bbmaj9/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Bbmaj9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bbmaj9/Eb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Bbmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbm(add#7)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbmaj9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm(add#7)/Db': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm(add#7)/F': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbm/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bb/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bb/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bb/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+(add9)': {
    notes: []
  },
  'Bb+/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb#4/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb+/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbsus2/4/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus(addb9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbsus2/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Bbsus2/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus2/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbsus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bbsus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbsus/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbsus/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  Bm11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bm11b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm11(b6)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bm11(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm6/9': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm6/C': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm6/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm6/G#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  Bm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm7(11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bm7b5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bm7b5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bm7b5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bm7b5/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Bm7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bm7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bm9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bm9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm9/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm9/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bm(add2)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(add2)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bm9/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(add2)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bm(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bm(add2)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(add#11)': {
    notes: []
  },
  'Bm(add9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7,
      barre: 'start'
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  Bmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bmaj7b5/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bmaj7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bmaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bmaj7(no5)/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Bm(add4)/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm(add4)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bmaj7/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bmaj7/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Bmaj7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bmaj7#5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  Bmaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bmaj13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Bm(add#7)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm(add13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bm/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm/A#': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bm/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Bm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bm#5': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'B/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'B+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B+/F#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bsus2/D#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bsus2/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bsus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bsus/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bsus/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bsus/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bsus/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bsus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  C: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  C11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  C11b9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C11/F': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 6
    }]
  },
  C13: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  C13b9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C13#11': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C13b9(b9 #11)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  C13sus: {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'C(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add2)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  C5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'C5/A': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'C5/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'C5/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3,
      barre: 'stop'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'C5/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'C5/Bb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'C5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C5/E': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Cpower#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  C6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C6(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cb5/E': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'C6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6/9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6(2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  C6b5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  C6sus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  C7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7(4)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7(13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C7(b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  C7b5: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 7
    }]
  },
  'C7b5(b5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7b5(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7b5/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'C7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'C7b9(b9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7(b9)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C7(b9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C7b9(b9 #11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7b9(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/Bb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/Eb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C7(#11)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 7
    }]
  },
  'C7#5': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }]
  },
  'C7#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5/Bb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5(#5 b9)/E': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7#5(#5 #9)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C7#9(#9 b13)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  C7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  C7sus2: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C7(#9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C7sus(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C7sus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C7sus/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  C9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C9(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  C9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'C9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C9/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  C9sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C9sus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C(add2)/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add2)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add2)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C(add4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add4)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add9)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add9)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C(add#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C+/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C+/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C+/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C+/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Csus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Csus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  Csus2: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Csus2/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Csus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Csus2/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Csus2/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Csus2/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Csus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Csus2/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Csus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Csus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Csus/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Csus(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Csus/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Csus/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Csus/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Csus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Cbm6: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7,
      barre: 'start'
    }, {
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  Cbm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cbm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cbmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cbm(add13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Cbmaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cbmaj7#5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cbmaj7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Cbmaj9: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Cbmaj9(13)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'start'
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'Cbmaj7/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cb/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cb/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cb/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cb/F': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cbsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cb/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cbsus2/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }]
  },
  Cm: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  Cm11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Cm11/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cm6: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cm11/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Cm6/9': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Cm6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Cm6/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm6/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cm6/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm6/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cm6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  Cm7: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm7(4)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Cm7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  Cm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cm7b5/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Cm7b5(b5 b9)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Cm7b5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cm7(b6)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cm7/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm7b5/F': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Cm7/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Cm7/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm7/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm7/B': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  Cm7sus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cm9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm9/Bb': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Cm9/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm9/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Cm9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  Cm9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cm(add2)/Bb': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Cm(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm(add2)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm(add9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm(add4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cm(add9)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm(add#7)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm(add#7)/B': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm(add#7,b5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cm(add#7)/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cm(add#7)/G': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cm/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cm/B': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm/Bb': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm/Eb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cm/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Cm(addb6)': {
    notes: []
  },
  'Cmaj7sus2/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cmaj7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7#5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Cmaj7sus2: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cmaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Cmaj9/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj9/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Cmaj9/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'C#11': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#13': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C#13b9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C#4': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#6': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'C#5/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'stop'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'C#7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'C#7b5': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 8
    }]
  },
  'C#7#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'C#7b9(b9 b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#7b9(b9,no3)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7(no3)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7#5/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#7/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7/F#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C#7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#7(#11)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 8
    }]
  },
  'C#7(#11)/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#7#5(#5 b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#7#5(#5 #9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C#7(#9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'C#7#9(#9 b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C#7sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#7sus(b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'C#9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#9b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C#9(b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C#7sus/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#9#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#9sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C#dim': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'C#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#(add2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#dim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#dim7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#dim/B': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C#dim7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#dim/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#dim/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#dim/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#b5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'C#9b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C#b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }]
  },
  'C#9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m11': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#m6': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C#m6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m6/G': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C#m7': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m11/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m7(11)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#m7(13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C#m7(4)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#m7b5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'C#m7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m7b5/G': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m7/B': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C#m7/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m7/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C#m7/F#': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C#m7/B#': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C#m7/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C#m9b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#m9/B': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#m9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C#m(add2)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#m(add2)/B': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#m(add4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m(add9)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#m(add9)/B': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#maj7': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#maj7(#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'C#maj9': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'C#maj9(#11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m(add#7)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m(add#7)/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#m/E': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m/F': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#no3d': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#/B': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'C#/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'stop'
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'C#+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C#+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C#+/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C#sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#sus2': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#sus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#sus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  E: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  E11sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  E11: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  E13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  E13b9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'E13/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E13/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E13#11': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  E13sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E+/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'E+(add2)': {
    notes: []
  },
  E5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'E5(add9)': {
    notes: []
  },
  'E5(b13)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }]
  },
  'E5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E5/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E5/D': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E5/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'E5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4
    }]
  },
  'E5/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  E6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E6(#11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  E7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(13)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  E7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'E7b5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7b5(b5 #9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7b5(b5 b9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'E7b5/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7b9(b9 b13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'E7(b9)/G#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'E7b9(b9 #11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7b9(#5 b9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'E7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(no3)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'E7/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E+7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'E7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7#5(#5 b9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'E7#5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7#5(#5 #9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'E7(#9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'E7#9(#9 #11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7#9(#9 b13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  E7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(#9)/B': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'E7sus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7sus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  E9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E9(b13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  E9b5: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E9b5/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E9/A': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'E9b5/G#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E9/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E9/G#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'E9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E9(#11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E9#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  E9sus: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'E9sus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'E(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add2)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E(add2)/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add2/4)': {
    notes: []
  },
  'E(add4)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add4)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add4)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(add4mano5)': {
    notes: []
  },
  'E(add4)(no5)': {
    notes: []
  },
  'E(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E(addb6)': {
    notes: []
  },
  'E(add9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E(add9)/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Edim: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Edim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Edim7/Ab': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Edim7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Edim7/Bb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Edim7/C#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Edim7/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Edim7/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Edim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Edim7/G': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Edim/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Edim/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Edim/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Edim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Edim/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Edim/Bb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Eb: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  Eb11: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add#11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  Eb11b9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Eb13: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Eb13/Bb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Eb13(4)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  Ebb5: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }]
  },
  Eb13b9: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  Eb13sus: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Eb13#11': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  Eb5: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Eb5/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Eb5/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'stop'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Eb5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb5/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Eb5/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Eb5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Eb5(#11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 5,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 1,
      fret: 10
    }]
  },
  Eb6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb6/9': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Eb6(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Eb6/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb6/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb6/9/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Eb6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb6/9(#11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb6/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Eb7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb6/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7(13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  Eb7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7(b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb7b9(b9 b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Eb7b5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Eb7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7#5(#5 b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb7#5/G': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb7#5(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Eb7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Eb7(#9)/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Eb7#9(#9 b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Eb7#9(#9 #11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Eb7sus: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7sus(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eb7sus/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7sus/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Eb9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Eb9(b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  Eb9b5: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Eb9/Bb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb9/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb9/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb9(#11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb9(no3)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb9#5': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb9#5(#5 #11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  Eb9sus: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add2)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add2)/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add2)/Db': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(add2)/F': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Eb(add9)/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(add9)/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add9)/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb9sus/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb(add#11,add9)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb#4/F': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Eb(add2)/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(add2)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(add#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb(add2#4)': {
    notes: []
  },
  'Eb(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb#4': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb(addF)': {
    notes: []
  },
  Ebdim: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }]
  },
  Ebdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebdim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebdim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ebdim7/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebdim7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebdim7/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Ebdim/A': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Ebdim/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'stop'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Ebdim(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebdim/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ebm(#7)': {
    notes: []
  },
  Ebm: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Ebm11: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebm11/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ebm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ebm13: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebm6/9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm13/C': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebm6/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm11/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebm6/Gb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  Ebm7: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebm7(4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4
    }]
  },
  Ebm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ebm7b5/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ebm7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ebm7b5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ebm7/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Ebm7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1,
      barre: 'stop'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ebm7/F': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm7/Gb': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 11,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 11,
      barre: 'stop'
    }]
  },
  Ebm9: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm9/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm9/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm9/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ebm(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ebm(add2ma4)/Gb': {
    notes: []
  },
  'Ebm/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }]
  },
  Ebm7sus: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebmaj13#11': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Ebmaj6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ebmaj13: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  Ebmaj7: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Ebmaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebmaj7b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ebmaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ebmaj7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebmaj7/Bb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebmaj7#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebmaj7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebmaj7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ebmaj7(#11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Ebmaj7#5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  Ebmaj9: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Ebmaj9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebmaj9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ebmaj9/F': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Ebmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebmaj9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebm(add#7)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebmaj9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebm/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebmaj9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebm/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ebm#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Eb/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb+/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb+/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb+/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Eb+/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Eb+/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ebsus: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }]
  },
  Ebsus2: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus2/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus2(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ebsus2ma4: {
    notes: []
  },
  'Ebsus2/4': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ebsus2/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ebsus2/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ebsus4/2': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus(add2)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus2(#4)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebsus/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebsus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebsus/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Em: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Em11: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 5
    }]
  },
  Em11b5: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6
    }]
  },
  Em13: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Em11b5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  Em6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em6/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Em7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7(4)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Em7(4)/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Em7(4)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Em7(11)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 5
    }]
  },
  Em7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7b5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7b5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Em7b5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7b5/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Em7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7#5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Em7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Em7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Em9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em7(no5)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Em9(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add4)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Em(add9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add2)/G': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Em(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add9)/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Emb5/A': {
    notes: []
  },
  Emaj13: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  Emaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Emaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Emaj7(no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Emaj7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Emaj7/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Emaj7/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Emaj7(add6)': {
    notes: []
  },
  'Emaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Emaj7/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Emaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Emaj9#5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Emaj9(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Emaj9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Emaj9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Emaj9(#11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Emaj9/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Em(add13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add#7)/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add#7)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(no3rd)': {
    notes: []
  },
  'Emaj9/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Em/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add#7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em#5': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  Emsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Emsus2: {
    notes: []
  },
  Eno3d: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E+(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E+/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'E#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E#4/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E#dim': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }]
  },
  'E#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'E#m': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Esus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Esus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus2/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E#m/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Esus2/D': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Esus2/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus2/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Esus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Esus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus(add2)/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Esus/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus/A': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Esus2(#4)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }]
  },
  'Esus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus(add9)': {
    notes: []
  },
  'E(add9)sus': {
    notes: []
  },
  'Esus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Esus/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  F: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  F11: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F11(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  F11b9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  F13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  F13b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F13/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  F13b9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F13/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F13/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  F13sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F13(#9 #11)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  F5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'F5(addb2)': {
    notes: []
  },
  'F5/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'F5/Bb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }]
  },
  'F5/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'F5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'F5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }]
  },
  F6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F6(no3rd)': {
    notes: []
  },
  'F6(addb3)': {
    notes: []
  },
  'F6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F6/9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F6/9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F6/9(no5th)': {
    notes: []
  },
  'F6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F6/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F6/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  F7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F7(add6)': {
    notes: []
  },
  'F7(4)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'F7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  F7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F7b5(b5 b9)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F7b5/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F7b5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F7(b9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F7b9(b9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F7b5/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F7(no3rd)': {
    notes: []
  },
  'F7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F7b5(b5 #9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'F7/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7#5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7#5(#5 b9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'F7#5(#5 #9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'start'
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F7#5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(#9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'F7#9(#9 b13)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'start'
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F7(#9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F7#9(#5 #9)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'start'
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  F7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7#9(b9 #9)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F7sus/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7sus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7sus/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7sus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  F9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F9(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  F9b5: {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'F9/Eb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 8
    }]
  },
  'F9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F9(#11)': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'F9#5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'F9(no3)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  F9sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add2)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add2)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add2)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F(add4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F(add4)/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F(add4)(no5)': {
    notes: []
  },
  'F(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add#11,add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add9)/C': {
    notes: []
  },
  'F(add9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add9)/G': {
    notes: []
  },
  'F(addb6)': {
    notes: []
  },
  'F#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F(add#5)/G': {
    notes: []
  },
  Fdim: {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }]
  },
  Fdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Fdim7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Fdim7/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Fdim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fdim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Fdim7/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Fdim/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fdim/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }]
  },
  'Fdim/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fdim/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Fb: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'Fb5(add9)': {
    notes: []
  },
  'Fb(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fb(add2)/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Fb6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fb7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fb9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Fbmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fbmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Fbmaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Fb/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fb/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fm11: {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Fm11/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fm11b5: {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'Fm11/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm11(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm6/9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm6/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Fm6/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Fm6/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm6/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }]
  },
  Fm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm6(add11)': {
    notes: []
  },
  'Fm7(11)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Fm7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm7(add#4)': {
    notes: []
  },
  Fm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fm7b5/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fm7b5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fm7b5/C': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }]
  },
  'Fm7b5/Eb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Fm7(b9)/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Fm7/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fm7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fm9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm7sus/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fm9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fm(add4)/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Fm9/Ab': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Fm(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm(add2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fmaj13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Fm9/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Fmaj13#11': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Fm(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fmaj6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Fmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fmaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7(no3rd)': {
    notes: []
  },
  'Fmaj7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7#5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fmaj7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj9/Eb': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Fmaj9/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fm(maj13)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Fm(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm(add#7)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm(add#7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fno3: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'Fno3/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/Ab': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F+/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F+/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F+/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F+/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F+/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F+/G': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#11': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F#13': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#13b9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#13#11': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#13/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'F#(#5b9)': {
    notes: []
  },
  'F#5(add6)': {
    notes: []
  },
  'F#5/E': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'F#5/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#5/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#5/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }]
  },
  'F#5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#5/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#6': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#6/C#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#6/9': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  'F#6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#6/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F#7(4)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'F#7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F#7b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#7b5(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#7b5(b5,no3)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7(b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F#7b9(b9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#7b9(#5 b9)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F#7(b9)/A#': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#7(no3)/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7(b9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#7(no3)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#+7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F#7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7#5(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F#7#5(#5 #9)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'F#7#5(#5 #9)/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F#7#5/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F#7(#9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F#7#9(#9 b13)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'F#7sus/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7sus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7(#9)/C#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F#7sus/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7sus': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7sus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#9': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#9/E': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F#b5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6
    }]
  },
  'F#9(b13)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'F#9b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#9(#11)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'F#9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#9/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#9sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#(add2)/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#b5/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }]
  },
  'F#(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 10
    }]
  },
  'F#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#dim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'F#dim7b5': {
    notes: []
  },
  'F#dim7/G': {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10,
      barre: 'start'
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 10,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'F#dim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#dim/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#dim/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#m': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m#7': {
    notes: []
  },
  'F#m11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#m6': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'F#m6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m6/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m11b5': {
    notes: []
  },
  'F#m6/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#m7(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m7b5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/A': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/E': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7b5/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'F#m7b5/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#m7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#m7b5(b5 b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#m7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7sus': {
    notes: []
  },
  'F#m7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7/D': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m9': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m9b5': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8
    }]
  },
  'F#m(add2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m9/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m(add4)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#m(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#maj7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'F#m(add2)/A': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#maj7/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'F#maj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'F#maj9': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }]
  },
  'F#maj7/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'F#maj9/G#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#maj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'F#m(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m(add9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m(sus2)': {
    notes: []
  },
  'F#no3': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'F#no3/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#no3/G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }]
  },
  'F#/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }]
  },
  'F#/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/F': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#+/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#(#5#9)': {
    notes: []
  },
  'F#sus2/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#sus2ma4': {
    notes: []
  },
  'F#sus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#sus4sus2': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#sus': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#sus2': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F#sus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#sus/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#sus/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F#sus/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }]
  },
  'F#sus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Fsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Fsus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus2/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fsus2/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus2(b6)': {
    notes: []
  },
  'Fsus2/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fsus2/G': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fsus2ma4: {
    notes: []
  },
  'Fsus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fsus2/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fsus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fsus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fsus9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  G: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  G11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G11sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G13: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G13/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  G13b9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G13/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  G13sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add2)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  G5: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }]
  },
  'G5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 5
    }]
  },
  'G5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5(add2)': {
    notes: []
  },
  'G13b5(b5 b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gpower(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  G6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6#9': {
    notes: []
  },
  'G6/9/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G6(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  G6sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'G6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  G7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7(13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'G7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7(4)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G7b5(b5 b9)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(add6)': {
    notes: []
  },
  'G7b5/Db': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 8
    }]
  },
  'G7b5(#5)': {
    notes: []
  },
  'G7b5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7b5(b5 #9)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G7b9(13 b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G7b9(b9 b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7(b9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G7(b9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G7b9(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7b9(b9 #11)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7#5(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7#5(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7#5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7#5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G7#5(#5 #11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7#5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7(#9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G7#9(#9 b13)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 11,
      barre: 'start'
    }, {
      string: 0,
      fret: 11,
      barre: 'stop'
    }]
  },
  G7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G7sus2: {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10,
      barre: 'start'
    }, {
      string: 3,
      fret: 12
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G7sus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7sus(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7sus/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G7sus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G9: {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G7sus/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7sus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G9(b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G9/B': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G9/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  G9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G9/D': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G9/A': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G9b5(b5,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G9(#11)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G9#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G9#5(b9)': {
    notes: []
  },
  'G9#5/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  G9sus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G(add2)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(addA)': {
    notes: []
  },
  'G(add2)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add2)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#4/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add4)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add2#4)': {
    notes: []
  },
  'G(add#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add4)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add4)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add6)/B': {
    notes: []
  },
  'G(add9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'G(add9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add9)/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gdim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim7/Ab': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G(add11)': {
    notes: []
  },
  'Gdim7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gdim(add#7)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gdim7/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Gdim7/Db': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Gdim7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Gdim7/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gdim/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Gdim/Db': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Gdim/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gdim/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gb: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gb13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Gb13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  Gb6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  Gb11: {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'Gb6/9': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Gb6(no5)': {
    notes: []
  },
  'Gb6/9(maj7)': {
    notes: []
  },
  'Gb6(#11)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb6/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Gb6/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  Gb7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gb7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gb7(add6)': {
    notes: []
  },
  'Gb7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gb7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gb7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Gb7b5(b5 #9)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gb7/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gb7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Gb7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gb7#5(#5 #9)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Gb7(#9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gb7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gb9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gb9b5: {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb9#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb9/Db': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'Gb9(#11)': {
    firstFret: 8,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb(add2)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb(add2)/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb(add2#4)': {
    notes: []
  },
  'Gb(add2)/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb(add4)/Eb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb(add2#4)/Bb': {
    notes: []
  },
  'Gb(add9)/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb(add2)/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb(add9)/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb(add2)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbdim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  Gbdim7: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gbdim/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbb5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gbm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbmaj13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Gbm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbm6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbm6/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbm9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Gbm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbmaj7/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Gbmaj11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gbmaj7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gbmaj7/Db': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gbmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gbmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gbmaj7#5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gbmaj9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gbm(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbmaj9/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gbm/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbm/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbmaj9(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gb/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbm(maj13)': {
    notes: []
  },
  'Gb/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb/Bb': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gb/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Gb/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gb/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gb+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gb+/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gb+/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gb+/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gb+/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gbsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gbsus/Bb': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }]
  },
  Gbsus2: {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9,
      barre: 'start'
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'Gbsus2/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gm: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Gm11: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Gm11/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm11/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Gm11/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm11b5/Db': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 8
    }]
  },
  Gm6: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm6/9': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm6/9/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm6/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm6/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm6/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gm6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Gm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(2)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm7/Eb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Gm7(4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }]
  },
  Gm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Gm7b5/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Gm7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gm7b5/D': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Gm7b5/Db': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7b5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(b6)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Gm7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Gm7sus/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Gm7sus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  Gm9: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm9(4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gm9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Gm9/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm9/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm9/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm9/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm9/F#': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gm9sus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add9)/Eb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add2)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add2)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add2)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gm(add4)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Gm(add9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(add9)/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(add9)/F': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gmaj13: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Gm(#5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gmaj13#11': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Gmaj6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Gmaj7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/A': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(no3)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(no3)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(no3)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gmaj7#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gmaj7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Gmaj7#5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gmaj7sus: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7sus2/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gmaj7sus13: {
    notes: []
  },
  Gmaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj9(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gmaj9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj9/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gmaj9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gmaj9/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj9(#11)': {
    firstFret: 9,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'Gm(add#7)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(add#7)/Bb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(add#7)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(addb6)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(add#7)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gm(add13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gm/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gm/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm+': {
    notes: []
  },
  'Gm#5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Gmsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gmsus/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(sus2)': {
    notes: []
  },
  'G(no3rd)': {
    notes: []
  },
  'Gno3d/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gno3d/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/A': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G/Ab': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/Db': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G/D#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }]
  },
  'G+/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(add#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G(#5)b9': {
    notes: []
  },
  'G#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#13': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'G#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }]
  },
  'G#6': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G#7': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7b5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G#7b5(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G#7(b9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'G#7(no3)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7b9(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'G#7/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G(#5)#9': {
    notes: []
  },
  'G#7/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#7/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7#5': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7#5/B#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'G#7#5(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'G#7#5(#5 #9)': {
    firstFret: 10,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 11
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 12,
      barre: 'start'
    }, {
      string: 0,
      fret: 12,
      barre: 'stop'
    }]
  },
  'G#7(#9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'G#7sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7sus/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#9': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G#9b5': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G#9sus': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G#dim': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G#dim7/A': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'G#dim/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }]
  },
  'G#dim/C': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#m': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G#maj7': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  'G#m6': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G#m6/B': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7(11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G#maj7/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#m7b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G#m/A#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7b5/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G#m7b5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m7b5/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7(no5)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'G#m7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m7/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m7b5/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m7/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G#m9(13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G#m/B': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m9/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'G#m/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#/B#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'G#/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#m(add#7)/G': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#/D': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#/D#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#+': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#sus(2/4)': {
    notes: []
  },
  'G#+/B#': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gsus: {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Gsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2(add11)': {
    notes: []
  },
  'Gsus2(add6)': {
    notes: []
  },
  'Gsus2/4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/4/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gsus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gsus4sus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Gsus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus/D': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gsus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Cb: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  D: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Db: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  'A13(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A13/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Apower: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }]
  },
  'Apower(6 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Apower/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower/C#': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Apower/D': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Apower/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  'Apower/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  Apowerb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'A6(9,4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }]
  },
  'A7(b9,b5,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(#11 b9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'A7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'A7(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'A7(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'A7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(4,no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(4,no3)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(4,no3)/D': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(4,no3)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A9(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A9(4,no3)/D': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  Abpower: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }]
  },
  'Abpower/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab13(#9,no11)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Abpower/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }]
  },
  'Abpower/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab6(9)/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab6(9)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab6(9)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab7(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Ab7(#11 b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Ab7(#5 #9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Ab7(4,no3)/Db': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7(4,no3)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Ab7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Ab9(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abb5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Abb5/C': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }]
  },
  'Abdim/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Abm6(9)/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm6(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm6/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Abm(add2)/Cb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm(maj7)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Abm(maj7)(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Abm/Cb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Abaug: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Abaug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Abaug/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Abaug/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Abaug/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Absus2/Cb': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }]
  },
  'Absus2(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Absus(2)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Absus(2)/E': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Am7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Amaj13(#11)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Amaj7(13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Am(maj7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(maj7)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(maj7)/G#': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Am(maj7)(9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am(maj7)(9)/G#': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Am(add4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }]
  },
  Aaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Aaug(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Aaug/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Aaug/C#': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'A#power': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }]
  },
  'Aaug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#power/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'A#7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#aug': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Asus(9)/D': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Asus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus(2)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus2(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  Asus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Asus(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Bpower/A': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Bpower/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Bpower/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Epower(6 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B6(9)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }]
  },
  'B6(b5 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B6(9,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'B7(#5 b9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'B7(#11 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Baug(add7)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }]
  },
  'B7(#5 b9)/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'B7(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'B7(#11 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'B7(4,no3)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7(4,no3)/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'B7(4,no3)/E': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7(4,no3)/F#': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B9(4,no3)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Bb13(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb13(#9,no11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bbpower/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Bbpower/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bbpower/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bbpower/D': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Bbpower/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1,
      barre: 'stop'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bbpower/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Bb6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb6(9)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb6(#11 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb6(9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb7(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bb7(#5 b9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bbaug(add7)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Bb7(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(4,no3)/Eb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bb7(b9,4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Bb7(2,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(4,no3)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bb7(4,no3)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(4,no3)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb9(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Bb(add9,add#11,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbb5/D': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbm/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Bbm6(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm7b5/D': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbm7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbmaj7(2,no3)/D': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Bbm(maj7)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm(maj7)/C': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Bbm(maj7)/Db': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm(maj7)/F': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Bbm(maj7)(9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  Bbaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbaug/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbaug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbaug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbaug/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbb5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bbaug/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbaug/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bbsus(2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbsus(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbsus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm11(no9,no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Bm6(9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm(maj7)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Bm(maj7)(9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7,
      barre: 'start'
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Bm(maj7)(13 11 9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Baug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Baug/F#': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bsus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C13b9#11': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'C13(no3)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'C13/E': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Cpower: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Am11/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cpower/A': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Cpower/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3,
      barre: 'stop'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Cpower/Ab': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Cpower/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Cpower/Bb': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Cpower/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Cpower/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cpower/E': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }]
  },
  Cpowerb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C6(9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6(2,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C6(#11 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7(b5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7(#11 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'C7(#5 b9)/E': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7(#5 #9)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Caug(add7)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C7(2,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C7(4,no3,no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C7(4,no3)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C7(4,no3)/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'C9(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C9(4,no3)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cb5: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cdim: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  Cdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cdim7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cdim7/G': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cdim/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cdim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cdim/Eb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cdim/G': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cb13: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Cb13#11': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Cbpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }]
  },
  Cbb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Cb6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cb6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cbpowerb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Cb6/Db': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cbpowerb5/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2,
      barre: 'stop'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }]
  },
  Cb7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cbdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Cb7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Cbdim7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2,
      barre: 'stop'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Cb7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Cb7/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Cb7/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cb9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cb9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Cb(add2)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cb9/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cb(add9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 9
    }]
  },
  Cbm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cbm(maj7)(13 11 9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Db13(no3)/A': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  Cbsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Cbsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Cm6(9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Cm7(b5 b9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Cm7(4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cmaj13: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  Cmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7(13)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  Cmaj7b5: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Cmaj7b5/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Cmaj7b5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7(no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7/B': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Cmaj7/D': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Cmaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Cmaj7(#11)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Cmaj7(2,no3)/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cmaj7(2,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm(maj7)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm(maj7)/B': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm(maj7)b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cm(maj7)/Eb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Cm(maj7)/G': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Cm(maj7)(9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  Caug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Caug/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Caug/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Caug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Caug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Caug/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Caug/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#power': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#power/G#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'stop'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#power/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'C#7(#5 b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#7(b9,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7(#5 #9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C#7(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#7(b9,4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'C#7(4,no3)/G#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#9(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m(maj7)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'C#m(maj7)(9)': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 11
    }]
  },
  'C#m(maj7)/B#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#(no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'C#aug': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'C#aug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C#aug/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Csus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Csus2(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Csus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Csus(2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  D11: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  D13: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  D13b9: {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 11
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 12
    }]
  },
  'D13b9/G': {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10,
      barre: 'start'
    }, {
      string: 3,
      fret: 10,
      barre: 'stop'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 12
    }, {
      string: 0,
      fret: 11
    }]
  },
  'D13/Ab': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Dmaj7(13)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13(#9,no11)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13#11': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13(no3)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13#11/A': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D(add2)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dpower: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  'Dpower/A': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 5,
      barre: 'stop'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  'Dpower/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Dpower/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Dpower/C#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  Dpowerb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  D6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D6(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6(9,4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6(no3)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D6(9)/F#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D6/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  D7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D6/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(4)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  D7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7b5/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7b5/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(b5 #9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7(b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7(b9)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'D7(b9)/F#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D7(b9)/G': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#11 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7(b9,4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'D7(no5)/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'D7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7/Ab': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(no3)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'D7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#11)/E#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#5 #11 #9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Daug(add7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7#5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7#5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#5 #9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D7(#5 #9)/B': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D7#5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(#9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'D7(#9)/A': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'D7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7(2,4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7(4,no3)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7(4,no3)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7(2,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  D9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D7(4,no3)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D9(13)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D9#5': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D9/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Db5: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }]
  },
  D9b5: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D9(11)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D9(4)/F#': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D9(13 b5)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D9/A': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D9/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'D9/E': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'D(add2)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add4)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D(add4)/F#': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D9(#11)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D(add#11)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D9(4,no3)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D(add2)/A': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add2)/B': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add9)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add2)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add2)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add4)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D(add4)/A': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }]
  },
  Ddim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ddim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ddim7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ddim7/Eb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Ddim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ddim/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ddim: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ddim/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ddim7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D(add9)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Ddim/Ab': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  Db13: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Db13#11': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  Db13b9: {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 10
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 11
    }]
  },
  'Db(add4)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbpower: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'Dbpower/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'stop'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'Dbpower/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  Db6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Db6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6(9)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6(9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6(#11 9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db6/F': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Db6(#11 9)/Eb': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db6/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Db6/Eb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Db7: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Db7b5: {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Db7(b5 b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db7/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Db7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Db7/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Db7/Eb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Db7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Db7b5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Db7b5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Db7(#11)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 9
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 8
    }]
  },
  'Db7#5': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  Db9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db7(#9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Db7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db7(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db9/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db7(#11 #9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Db9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db9(#11,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Db9(#5 #11)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db9#5': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Db9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db9(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add2)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db9/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db(add2)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add2)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db5/G#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }]
  },
  'Db(add2)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add9)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add2)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dbsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Db(add9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add2)/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db(add4)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Dbb5: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbb5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Db(add9)/Eb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbdim: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  Dbdim7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dbm: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbm11: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dbdim7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dbm6/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dbm/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dbm6/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dbm/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dbm7: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbm7b5: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dbm6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dbm9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Dbm(add2)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbmaj13: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Dbm9(#11)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dbmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dbmaj7b5: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Dbmaj7/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Dbmaj7b5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbmaj7/Eb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Dbb5/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Dbb5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dbmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbmaj7/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbmaj7(#11)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Dbmaj7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dbmaj9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Dbmaj7(no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Dbmaj9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dbm/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Dbm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dbm/Fb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Db/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Db/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Db/G': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db/Gb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dbaug/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  Dbsus: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus(2)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dbsus/Gb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }]
  },
  'Dbsus2/G': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus2/Bb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus2/Eb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  Dbsus2b5: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Dbsus/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus/Eb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 7
    }]
  },
  Dm: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Dm11: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dm11/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dm11b9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dm6: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm6/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm6(9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dm6/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm6/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Dm6/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm6/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm11/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Dm7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7#5': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Dm7(11)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dm13: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Dm7(4)/A': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Dm7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dm7(13)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Dm7(2)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dbsus2/Gb': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dm7(4)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dm7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7b5/Ab': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }]
  },
  Dmb5: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dm7b5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7b5/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  'Dm7b5/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm7/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  Dm9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  Dm11b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm9/A': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dm9/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dm9/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add2)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(add2)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add9)/B': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add9)/C': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dmaj13: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Dm(add2)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dmaj13/A': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Dm(add9)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dmaj7: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Dmaj7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Dmaj7/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dmaj7(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Dmaj7(4,no3)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dmaj7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dmaj7(no3)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Dmaj9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dmaj9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dmaj9(no3)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(maj7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(maj7)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(maj7)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(maj7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(maj7)(9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm7/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Dm/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Dm/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D/B': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }]
  },
  'D/Bb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7,
      barre: 'stop'
    }]
  },
  'D/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  Daug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Daug/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Daug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#11': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Daug(add#9,add7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#power': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'D#power/E': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'D#7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#7b5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#7(b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#7/A#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#7(#9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#7(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'D#7/E': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }]
  },
  'D#7(4,no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#7(4,no3)/A#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#dim': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }]
  },
  'D#dim/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }]
  },
  'D#dim/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#dim7': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#dim7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#dim/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D#dim7/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#dim7/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'D#dim/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }]
  },
  'D#dim7/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D#m': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#m(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#m11': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#m7': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#m6': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#m7b5': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }]
  },
  'D#m9': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }]
  },
  'D#m7/G#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 9
    }]
  },
  'D#m/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'D#m/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'D#m7/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D#m7/F#': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 11,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 11,
      barre: 'stop'
    }]
  },
  'D#m7b5/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'D#m/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#m6/F#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'D#m/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'D#/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#m/G#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'D#m/A#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'D#/A#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#aug': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#aug(add7)': {
    firstFret: 11,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 11
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 12
    }, {
      string: 1,
      fret: 12
    }]
  },
  'D#sus': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }]
  },
  Dsus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dsus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D#sus/G#': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Dsus2/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus2/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus(2)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dsus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dsus/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dsus(9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dsus/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dsus/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dsus/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dsus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'E13(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Eaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eaug/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Eaug(add9,add7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Epower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'Epower#5': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Epower/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Epower/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Epower/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Epower/D': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Epower/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Epower/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'Epower/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2,
      barre: 'stop'
    }, {
      string: 2,
      fret: 4
    }]
  },
  'Epower/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E6(#11 9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7(b5 #9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7(b5 b9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7(#5 b9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'E7(#11 b9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eaug(add7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(#5 #9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'E7(#11 #9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7
    }, {
      string: 3,
      fret: 6,
      barre: 'start'
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'E7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'E7(4,no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(4,no3)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E7(4,no3)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E9(4,no3)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 7,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'E9(4,no3)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Eb5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eb13(no9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6,
      barre: 'stop'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 8
    }]
  },
  'Eb13(no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  Ebpower: {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Ebpower/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Ebpower/Bb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6,
      barre: 'stop'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Ebpower/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ebpower/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ebpower/D': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Ebpower/F': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'Ebpower/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }]
  },
  'Ebpower(#11)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 5,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 1,
      fret: 10
    }]
  },
  'Eb6(9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Eb6(9)/G': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Eb6(#11 9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb7(#5 b9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb7(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'Eb7(#11 #9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Eb7(4,no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eb7(4,no3)/Bb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb7(4,no3)/Ab': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Eb9(#5 #11)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'Eb9(4,no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebsus2/Bb': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb9(4,no3)/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Eb(add9,add#11,no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebb5/F': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }]
  },
  Ebaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'Ebm6(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Ebm6(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebm7(4,no3)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebmaj13(#11)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 8,
      barre: 'start'
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Ebm(maj7)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Ebm(maj7)(9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Eb/Cb': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 7
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Ebaug/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebaug/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebaug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebaug/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Ebaug/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebaug/G': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ebsus2(4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebsus(2)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  Ebsus2b5: {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'Em6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(maj7)(13 11 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(maj7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(maj7)/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(maj7)(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(maj7)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(maj7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'E(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eaug(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Eaug/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Esus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Esus(2)/F#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5,
      barre: 'start'
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Esus2b5: {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }]
  },
  'F11#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'F13/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F13(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F13#9#11': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  Fpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'Fpower/Ab': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Fpower/A': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Fpower/Bb': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }]
  },
  'Fpower/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }]
  },
  'Fpower/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fpower/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'Fpower/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F6(9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F6(9)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(b5 b9)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F7b5/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }]
  },
  'F7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F7(b5 #9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'F7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F7(#5 #9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9,
      barre: 'start'
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'F7(#9 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(4,no3)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(4,no3)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(4,no3)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F7(4,no3)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F9b5/Cb': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 7,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'F9(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'F(add9,add#11,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fmaj9/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fbpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }]
  },
  'Fb6/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fb/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fm11#5': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm6(9)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm7b5/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Fm7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fmaj13(#11)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 9
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Fmaj7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fmaj9: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fm(maj7)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 8
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 9,
      barre: 'stop'
    }, {
      string: 0,
      fret: 10
    }]
  },
  'Fm(maj7)/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Fm(maj7)(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm(maj7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }]
  },
  'F(no3)/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  Faug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Faug/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Faug/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Faug/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Faug/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Faug/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Faug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Faug/G': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'F#power': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'D#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#m13/E': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#power/E': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'F#power/A': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#power/G#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#power/C#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4,
      barre: 'stop'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }]
  },
  'F#power/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#power/D': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#6(9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  'F#7(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#7(b5,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7(4,b5,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#aug(add7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }]
  },
  'F#7(#5 #9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'F#7(#5 #9)/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F#7(4,no3)/A#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }]
  },
  'F#7(4,no3)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7(4,no3)/G#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7(4,no3)/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 0
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#9(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'F#m(maj7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#m6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m7(b5 b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#m(maj7)(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m(maj7)(9)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'F#(no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#(no3)/G#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }]
  },
  'F#aug': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#aug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#aug/A#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#aug/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#sus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Fsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Fsus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fsus(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G13(no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gpower: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 5
    }]
  },
  'Gpower/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/B': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 5
    }]
  },
  'Gpower/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  G13b9b5: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Gpower/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/Db': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gpower/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/Eb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gpower/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G6(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G6(9)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G6(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'G7(b5 b9)': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(b5 #9)': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(13 b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G7(#5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7(b9,4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(#11 b9)': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10
    }, {
      string: 3,
      fret: 9,
      barre: 'start'
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  'G7(#5 #9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4,
      barre: 'start'
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G7(#5 #11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(2,no3)': {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 10,
      barre: 'start'
    }, {
      string: 3,
      fret: 12
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'G7(4,no3)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G9(b5,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G7(4,no3,no5)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(4,no3)/Ab': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G7(4,no3)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(4,no3)/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G7(4,no3)/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Gaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G9(4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gb5/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gbpower: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }]
  },
  'Gb6(9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8,
      barre: 'stop'
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 9
    }]
  },
  'Gb6(#11 9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb7(b5 #9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8,
      barre: 'start'
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8,
      barre: 'stop'
    }]
  },
  'Gb7(#5 #9)': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 9
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 9
    }, {
      string: 1,
      fret: 10,
      barre: 'start'
    }, {
      string: 0,
      fret: 10,
      barre: 'stop'
    }]
  },
  'Gb7(4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbb5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbmajor-11th': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2,
      barre: 'start'
    }, {
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gbm(maj7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbmaj9b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gb/Cb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gbaug: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbaug/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbaug/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbaug/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gbaug/D': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gm6(9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm6(9)/Bb': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 1
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(4,no3)/C': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm7(4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm9(4,no3)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gmaj13(#11)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  Gmaj7b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gmaj7(4,no3)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gmaj7(2,no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Gm(maj7)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(maj7)/Bb': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(maj7)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Gm(maj7)/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gm(maj7)(9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3,
      barre: 'start'
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Gm(maj7)(13 11 9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Gm(add4,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gm(add4,no3)/A': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 3,
      barre: 'start'
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G(no3)/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G(no3)/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gaug/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gaug/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gaug/D#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gaug/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 1
    }, {
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }]
  },
  'Gaug/D': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#power': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 6
    }]
  },
  'B13#5/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#7(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 5
    }]
  },
  'G#7(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'G#7(#5 #9)': {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 11
    }, {
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 12,
      barre: 'start'
    }, {
      string: 0,
      fret: 12,
      barre: 'stop'
    }]
  },
  'G#7(4,no3)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#7(4,no3)/D#': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#9(4,no3)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  'G#m(maj7)/G': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'G#aug': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#aug/B#': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gsus(2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus(2)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gsus2b5: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus2(#11)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gsus(9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D13(13)': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D13#9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 7
    }]
  },
  D13sus: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  D5: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  'D5/A': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5,
      barre: 'start'
    }, {
      string: 4,
      fret: 5,
      barre: 'stop'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  'D5/B': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D5/C': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D5/C#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 7
    }]
  },
  'D5(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D6/9': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6/9sus': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D6/9/F#': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D7(b13)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7b5(b5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7b5(b5 #9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7b9(13)': {
    notes: []
  },
  'D7b9(b9 b13)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'D7b9(b9 #11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'D7#4': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D7#5(#5 #9 #11)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D7#5(b13)': {
    notes: []
  },
  'D7#5(#5 b9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 6
    }]
  },
  'D7#5(#5 #9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D7#5(#5 #9)/B': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D7#9(#9 b13)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 5
    }, {
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 6
    }]
  },
  'D7#9(#5 #9)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6,
      barre: 'start'
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  D7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7sus2/4': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7sus(add9)': {
    notes: []
  },
  'D7sus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7sus/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  D7sus2: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D7sus/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D9(b13)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D9(add11)': {
    notes: []
  },
  'D9b5(13 b5)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 7
    }]
  },
  'D(add#11)': {
    notes: []
  },
  D9sus: {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D#4': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'D(addG)': {
    notes: []
  },
  'D(addG)/A': {
    notes: []
  },
  'Db5/Ab': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4,
      barre: 'start'
    }, {
      string: 4,
      fret: 4,
      barre: 'stop'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 6
    }]
  },
  'Db5/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Db6/9': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6/9/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6/9/F': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db6(#11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db6(#11)/Eb': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db7b5(b5 b9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db7(add6)': {
    notes: []
  },
  Db7sus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db7#9(#9 #11)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Db9(9)': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db9#11(#11,no3)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Db9sus: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db(add11b9)/Ab': {
    notes: []
  },
  'Db(add2#4)': {
    notes: []
  },
  'Db#4': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Db#4/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }]
  },
  'Dbmaj(add2)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Db+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Db+/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 4,
      fret: 4
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }]
  },
  Dbsus2ma4: {
    notes: []
  },
  'Dbsus2/4': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus2(#4)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4,
      barre: 'start'
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }]
  },
  'Dbsus2(b6)': {
    notes: []
  },
  'Dm11b5(b5 b9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 2
    }, {
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Dm6/9': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5
    }, {
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }]
  },
  'Dm6#7(add9)': {
    notes: []
  },
  Dm7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dm(#4)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dm7(no3)/E': {
    notes: []
  },
  'Dm7(#9)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(addE)': {
    notes: []
  },
  Dmaj7sus: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dmaj7sus/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dm(add#7)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(add#7)/A': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(add#7)/C#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm(add#7)/G': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 3
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Dm#7': {
    notes: []
  },
  'Dm(sus2)': {
    notes: []
  },
  Dno3d: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'D/Ab': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 4
    }, {
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Dm(sus4/2)': {
    notes: []
  },
  'D+': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D+(add9)': {
    notes: []
  },
  'D+/F#': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 2
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D+/E': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D+(add#9)': {
    notes: []
  },
  'D#5': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }]
  },
  'D#7#9(#5 #9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 7,
      barre: 'start'
    }, {
      string: 0,
      fret: 7,
      barre: 'stop'
    }]
  },
  'D#7sus': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 6,
      barre: 'start'
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#7sus/A#': {
    firstFret: 6,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 6,
      barre: 'start'
    }, {
      string: 4,
      fret: 6
    }, {
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  'D#+': {
    firstFret: 3,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#+7': {
    firstFret: 11,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 5,
      fret: 11
    }, {
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 12
    }, {
      string: 1,
      fret: 12
    }]
  },
  Dsus4: {
    strings: 6,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dsus2ma4: {
    notes: []
  },
  'Dsus2(b6)': {
    notes: []
  },
  'Dsus2(#4)': {
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 0
    }, {
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dsus(add6)': {
    notes: []
  },
  'Dsus4(add2)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dsus(add2)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'Dsus(add9)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 6,
    frets: 4,
    notes: [{
      string: 4,
      fret: 5,
      barre: 'start'
    }, {
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  }
};
const UkeFretboardMap = {
  C: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  A: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Am: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Aaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Adim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Apower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Am(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Asus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Asus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  A6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Am6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Amaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Amaj9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 0
    }]
  },
  Am7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Am7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Am9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Am11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  A7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  A7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  A9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  A11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  A13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Adim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ab: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Abm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  Abaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'Ab(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Abm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  Absus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Absus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ab6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Abmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abmaj9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Abm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Abm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Abm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Abm9: {
    firstFret: 11,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 13
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 14
    }, {
      string: 0,
      fret: 13
    }]
  },
  Abm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ab7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ab7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ab7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ab7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ab9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Ab9(#11)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ab7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Ab7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Ab11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ab13: {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  Abdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A#': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#aug': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#dim': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#power': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#m(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#sus': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#sus2': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#maj7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A#maj9': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#m7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A#m7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#m9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#m11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'A#7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'A#7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'A#7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'A#11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'A#13': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#dim7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  B: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Baug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  Bpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Bsus: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  B6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bmaj9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 4
    }]
  },
  Bm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bm9: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  Bm11: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4,
      barre: 'start'
    }, {
      string: 2,
      fret: 4,
      barre: 'stop'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  B7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'B7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  B9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 4
    }]
  },
  'B7(#9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'B7(b9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  B11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }]
  },
  B13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bb: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bbdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bbpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bbm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bb6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bbmaj9: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bbm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bbm9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Bbm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Bb7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bb7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bb7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bb9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Bb7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Bb7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bb11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Bb13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bbdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bb(add#11)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Cm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Caug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Cdim: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Cpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C(add9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Cm(add9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  Csus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Csus2: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 5
    }]
  },
  C6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Cm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Cmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Cmaj9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  Cm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'Cm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Cm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Cm9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  Cm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  C7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  C7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  C9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C7(#9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 6
    }]
  },
  'C7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  C11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  C13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Cdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#aug': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#dim': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#power': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#sus': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#sus2': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#m6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C#maj7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#maj9': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5
    }]
  },
  'C#m7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#m(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#m7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#m9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7(#9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#7(b9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  'C#11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#13': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'C#dim7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'C(add#11)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  D: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Daug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ddim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  Dpower: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D(add4)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D(add9)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'Dm(add9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 7
    }]
  },
  Dsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  D6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dmaj9: {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 7
    }]
  },
  Dm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dm(maj7)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Dm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dm9: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 7
    }]
  },
  Dm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  D7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  D7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  D9: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D7(#9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 5,
      barre: 'stop'
    }, {
      string: 0,
      fret: 8
    }]
  },
  'D7(b9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6,
      barre: 'start'
    }, {
      string: 1,
      fret: 8
    }, {
      string: 0,
      fret: 6,
      barre: 'stop'
    }]
  },
  D11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  D13: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Ddim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Db: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dbdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Dbm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Db6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dbm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Dbmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dbmaj9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5
    }]
  },
  Dbm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Dbm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Dbm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Dbm9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Db7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Db7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Db7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Db7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Db9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db7(#9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Db7(b9)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Db11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Db13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Dbdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#m': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#aug': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#dim': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D#power': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'D#m(add9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8
    }]
  },
  'D#sus': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'D#sus2': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'D#6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'D#m6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D#maj7': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D#maj9': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8
    }]
  },
  'D#m7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#m(maj7)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D#m7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#m9': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8
    }]
  },
  'D#m11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#13': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'D#dim7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Dpower/C': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  E: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  Em: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Eaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Edim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Epower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Esus: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 0
    }]
  },
  Esus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  E6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Em6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Emaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Emaj9: {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 9
    }]
  },
  Em7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Em(maj7)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6
    }]
  },
  Em7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Em9: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 5
    }]
  },
  Em11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  E7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  'E7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  E7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  E9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 7
    }]
  },
  'E7(#9)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4,
      barre: 'start'
    }, {
      string: 1,
      fret: 4,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  'E7(b9)': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 7
    }, {
      string: 2,
      fret: 8
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 8
    }]
  },
  E11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  E13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Edim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Eb: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ebm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ebaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ebdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  Ebpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Eb(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebm(add9)': {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 8
    }]
  },
  Ebsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Ebsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Eb6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Ebm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ebmaj7: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 5
    }]
  },
  Ebmaj9: {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 7
    }, {
      string: 1,
      fret: 10
    }, {
      string: 0,
      fret: 8
    }]
  },
  Ebm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Ebm(maj7)': {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  Ebm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Ebm9: {
    firstFret: 6,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 9
    }, {
      string: 0,
      fret: 8
    }]
  },
  Ebm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Eb7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Eb7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Eb7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Eb7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 4
    }]
  },
  Eb9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Eb7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Eb7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Eb11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Eb13: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  Ebdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Epower/C': {
    firstFret: 7,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  F: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Faug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fdim: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  Fpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Fm(add9)': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  F6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fmaj7: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fmaj9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fm7: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  'Fm(maj7)': {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 7
    }]
  },
  Fm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  Fm9: {
    firstFret: 4,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 6
    }]
  },
  Fm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  F7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 4
    }]
  },
  F7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  F9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F7(b9)': {
    firstFret: 9,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 9,
      barre: 'start'
    }, {
      string: 1,
      fret: 11
    }, {
      string: 0,
      fret: 9,
      barre: 'stop'
    }]
  },
  F11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  F13: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  Fdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F#m': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#aug': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F#dim': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#power': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F#m(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#sus': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#sus2': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#maj7': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#maj9': {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 13
    }, {
      string: 0,
      fret: 11
    }]
  },
  'F#m(maj7)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#m9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#m11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'F#7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#7#5': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 5
    }]
  },
  'F#7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'F#9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'F#7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F#11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#13': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 6
    }]
  },
  'F#dim7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  G: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Gpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  'G(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  G6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gmaj7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gmaj9: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gm(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Gm9: {
    firstFret: 5,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  G7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  G9: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G7(#9)': {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10,
      barre: 'start'
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 10,
      barre: 'stop'
    }, {
      string: 0,
      fret: 13
    }]
  },
  'G7(b9)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  G11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  G13: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  Gdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gb: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Gbm: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gbaug: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gbdim: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gbpower: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gbm(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gbsus: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbsus2: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gb6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbm6: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbmaj7: {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbmaj9: {
    firstFret: 10,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 11
    }, {
      string: 2,
      fret: 10
    }, {
      string: 1,
      fret: 13
    }, {
      string: 0,
      fret: 11
    }]
  },
  Gbm7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gbm(maj7)': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbm7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gbm9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gbm11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Gb7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gb7#5': {
    firstFret: 2,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 5
    }]
  },
  Gb7b5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Gb9: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Gb7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Gb7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gb11: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gb13: {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 6
    }]
  },
  Gbdim7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#': {
    firstFret: 3,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G#b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#m': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#aug': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#dim': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#power': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G#(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  'G#m(add9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G#sus': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#sus2': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G#6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#m6': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'stop'
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#maj7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#maj9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G#m7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m(maj7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#m9': {
    firstFret: 11,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 13
    }, {
      string: 2,
      fret: 11
    }, {
      string: 1,
      fret: 14
    }, {
      string: 0,
      fret: 13
    }]
  },
  'G#m11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#7(4,no3)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#7#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#7b5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#9': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'G#7(#9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#7(b9)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'G#11': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'G#13': {
    firstFret: 8,
    firstFretLocation: 'right',
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 10
    }, {
      string: 2,
      fret: 8,
      barre: 'start'
    }, {
      string: 1,
      fret: 8,
      barre: 'stop'
    }, {
      string: 0,
      fret: 9
    }]
  },
  'G#dim7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Ao: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  A5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Asus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Am(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  A7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 0
    }]
  },
  Ao7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Ab+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Abo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  Ab5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  Absus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Abm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ab7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Abo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'A#+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#o': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'A#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#m(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'A#7sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'A#o7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'B+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Bo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  B5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bsus4: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'start'
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  'Bm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2,
      barre: 'start'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  B7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2,
      barre: 'stop'
    }]
  },
  Bo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Bb+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bbo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  Bb5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Bbm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Bb7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Bbo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Bbadd#11': {
    notes: []
  },
  'C+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Co: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  C5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Csus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Cm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 3,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3,
      barre: 'stop'
    }]
  },
  C7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1,
      barre: 'start'
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  Co7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  'C#o': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'C#m(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'C#7sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  'C#o7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Cadd#11': {
    notes: []
  },
  'D+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Do: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }]
  },
  D5: {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  Dsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Dm(add#7)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 6
    }, {
      string: 2,
      fret: 5,
      barre: 'start'
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5,
      barre: 'stop'
    }]
  },
  D7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 2,
      barre: 'stop'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  Do7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'Db+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Dbo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 4
    }]
  },
  Db5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Dbsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Dbm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Db7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 1,
      barre: 'stop'
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 2
    }]
  },
  Dbo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'D#o': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'D#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  'D#sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'D#m(add#7)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  'D#7sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'D#o7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'D5/C': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 5
    }]
  },
  'E+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  Eo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  E5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Esus4: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 5
    }, {
      string: 0,
      fret: 0
    }]
  },
  'Em(add#7)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 6
    }]
  },
  E7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 2
    }]
  },
  Eo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Eb+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Ebo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }]
  },
  Eb5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 0,
      fret: 1
    }]
  },
  Ebsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1,
      barre: 'start'
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  'Ebm(add#7)': {
    firstFret: 5,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 8
    }, {
      string: 2,
      fret: 6
    }, {
      string: 1,
      fret: 6
    }, {
      string: 0,
      fret: 5
    }]
  },
  Eb7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3,
      barre: 'start'
    }, {
      string: 2,
      fret: 3,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  Ebo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'E5/C': {
    firstFret: 7,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 7
    }, {
      string: 0,
      fret: 7
    }]
  },
  'F+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 0
    }]
  },
  Fo: {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 4
    }]
  },
  F5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Fm(add#7)': {
    firstFret: 4,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 5,
      barre: 'start'
    }, {
      string: 2,
      fret: 5,
      barre: 'stop'
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 7
    }]
  },
  F7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Fo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  },
  'F#+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  'F#o': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  'F#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#m(add#7)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#7sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'F#o7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  Go: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1,
      barre: 'start'
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 1,
      barre: 'stop'
    }]
  },
  G5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }]
  },
  Gsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 3
    }]
  },
  'Gm(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  G7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 3
    }]
  },
  Go7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 0
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 1
    }]
  },
  'Gb+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 3
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 1
    }]
  },
  Gbo: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 0
    }]
  },
  Gb5: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbsus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 1
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'Gbm(add#7)': {
    firstFret: 2,
    firstFretLocation: 0,
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2,
      barre: 'start'
    }, {
      string: 2,
      fret: 5
    }, {
      string: 1,
      fret: 2,
      barre: 'stop'
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gb7sus4: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 4
    }, {
      string: 2,
      fret: 4
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  Gbo7: {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 2
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#+': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 0
    }, {
      string: 1,
      fret: 0
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#o': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 0,
      fret: 3
    }]
  },
  'G#5': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }]
  },
  'G#sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 4
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#m(add#7)': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 3
    }, {
      string: 0,
      fret: 2
    }]
  },
  'G#7sus4': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 3
    }, {
      string: 1,
      fret: 2
    }, {
      string: 0,
      fret: 4
    }]
  },
  'G#o7': {
    strings: 4,
    frets: 4,
    notes: [{
      string: 3,
      fret: 1
    }, {
      string: 2,
      fret: 2
    }, {
      string: 1,
      fret: 1
    }, {
      string: 0,
      fret: 2
    }]
  }
};

/***/ }),

/***/ 57533:
/*!***********************************************!*\
  !*** ./src/app/note-editor/utils/geometry.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ GeometryUtils)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);


class GeometryUtils {
  static get half() {
    return GeometryUtils._half;
  }
  static set half(t) {
    GeometryUtils._half = t;
  }
  static get bezBoundsRect() {
    return GeometryUtils._bezBoundsRect;
  }
  static set bezBoundsRect(t) {
    GeometryUtils._bezBoundsRect = t;
  }
  static get sx() {
    return GeometryUtils._sx;
  }
  static set sx(t) {
    GeometryUtils._sx = t;
  }
  static get sy() {
    return GeometryUtils._sy;
  }
  static set sy(t) {
    GeometryUtils._sy = t;
  }
  static get m1() {
    return GeometryUtils._m1;
  }
  static set m1(t) {
    GeometryUtils._m1 = t;
  }
  static get m2() {
    return GeometryUtils._m2;
  }
  static set m2(t) {
    GeometryUtils._m2 = t;
  }
  static get m3() {
    return GeometryUtils._m3;
  }
  static set m3(t) {
    GeometryUtils._m3 = t;
  }
  static get dx() {
    return GeometryUtils._dx;
  }
  static set dx(t) {
    GeometryUtils._dx = t;
  }
  static get dy() {
    return GeometryUtils._dy;
  }
  static set dy(t) {
    GeometryUtils._dy = t;
  }
  static get dx1() {
    return GeometryUtils._dx1;
  }
  static set dx1(t) {
    GeometryUtils._dx1 = t;
  }
  static get dx2() {
    return GeometryUtils._dx2;
  }
  static set dx2(t) {
    GeometryUtils._dx2 = t;
  }
  static get returnResult() {
    return GeometryUtils._returnResult;
  }
  static set returnResult(t) {
    GeometryUtils._returnResult = t;
  }
  static barycenter(t, e, r, s) {
    return (1 - s) * (1 - s) * t + 2 * (1 - s) * s * e + s * s * r;
  }
  static perimeter(t, e, r, s, i, n) {
    for (var a, o, h, l, g = t, f = e, c = 0, u = 0; u <= 1; u += 0.001) a = GeometryUtils.barycenter(t, r, i, u), o = GeometryUtils.barycenter(e, s, n, u), h = Math.abs(a - g), l = Math.abs(o - f), c += Math.sqrt(h * h + l * l), g = a, f = o;
    return c;
  }
  // B(t)=(1-t)³ * P0 + 3 * (1-t)² * t * P1 + 3 * (1-t) * t² * P2 + t³ * P3, 0 <= t <= 1
  // The curve starts at P0 going toward P1 and arrives at P3 coming from the direction of P2.
  static cubicBezierCurve(t, P0, P1, P2, P3) {
    return P0 * Math.pow(1 - t, 3) + 3 * P1 * t * Math.pow(1 - t, 2) + 3 * P2 * (1 - t) * Math.pow(t, 2) + P3 * Math.pow(t, 3);
  }
  static cubicBezierCurveDerivativeCoord(t, e, r, s, i) {
    return 3 * ((r - e) * Math.pow(1 - t, 2) + 2 * (s - r) * (1 - t) * t + (i - s) * Math.pow(t, 2));
  }
  static pointOnQuadraticCurve(t, e, r, s, i, n, a) {
    var o = t / 100;
    return {
      x: e + o * (2 * (1 - o) * (s - e) + o * (n - e)),
      y: r + o * (2 * (1 - o) * (i - r) + o * (a - r))
    };
  }
  static bezierBounds(t, e, r, s, i, n) {
    var a;
    return t == r && r == i ? (GeometryUtils.bezBoundsRect.x = t, GeometryUtils.bezBoundsRect.y = Math.min(e, n), GeometryUtils.bezBoundsRect.width = 1e-4, GeometryUtils.bezBoundsRect.height = Math.abs(n - e), GeometryUtils.bezBoundsRect) : e == s && s == n ? (GeometryUtils.bezBoundsRect.x = Math.min(t, i), GeometryUtils.bezBoundsRect.y = e, GeometryUtils.bezBoundsRect.width = Math.abs(i - t), GeometryUtils.bezBoundsRect.height = 1e-4, GeometryUtils.bezBoundsRect) : (e > n ? s > n ? GeometryUtils.bezBoundsRect.y = n : (a = -(s - e) / (n - 2 * s + e), GeometryUtils.bezBoundsRect.y = (1 - a) * (1 - a) * e + 2 * a * (1 - a) * s + a * a * n) : s > e ? GeometryUtils.bezBoundsRect.y = e : (a = -(s - e) / (n - 2 * s + e), GeometryUtils.bezBoundsRect.y = (1 - a) * (1 - a) * e + 2 * a * (1 - a) * s + a * a * n), e > n ? s < e ? GeometryUtils.bezBoundsRect.bottom = e : (a = -(s - e) / (n - 2 * s + e), GeometryUtils.bezBoundsRect.bottom = (1 - a) * (1 - a) * e + 2 * a * (1 - a) * s + a * a * n) : n > s ? GeometryUtils.bezBoundsRect.bottom = n : (a = -(s - e) / (n - 2 * s + e), GeometryUtils.bezBoundsRect.bottom = (1 - a) * (1 - a) * e + 2 * a * (1 - a) * s + a * a * n), t > i ? r > i ? GeometryUtils.bezBoundsRect.x = i : (a = -(r - t) / (i - 2 * r + t), GeometryUtils.bezBoundsRect.x = (1 - a) * (1 - a) * t + 2 * a * (1 - a) * r + a * a * i) : r > t ? GeometryUtils.bezBoundsRect.x = t : (a = -(r - t) / (i - 2 * r + t), GeometryUtils.bezBoundsRect.x = (1 - a) * (1 - a) * t + 2 * a * (1 - a) * r + a * a * i), t > i ? r < t ? GeometryUtils.bezBoundsRect.right = t : (a = -(r - t) / (i - 2 * r + t), GeometryUtils.bezBoundsRect.right = (1 - a) * (1 - a) * t + 2 * a * (1 - a) * r + a * a * i) : r < i ? GeometryUtils.bezBoundsRect.right = i : (a = -(r - t) / (i - 2 * r + t), GeometryUtils.bezBoundsRect.right = (1 - a) * (1 - a) * t + 2 * a * (1 - a) * r + a * a * i), GeometryUtils.bezBoundsRect);
  }
  static lineIntersects(t, e, r, s) {
    var i = t.x,
      n = t.y,
      a = s.x,
      o = s.y,
      h = e.x - i,
      l = r.x - a,
      g = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]();
    h || l || (g.x = 0, g.y = 0);
    var f = (e.y - n) / h,
      c = (r.y - o) / l;
    if (!h) return g.x = i, g.y = c * (i - a) + o, g;
    if (!l) return g.x = a, g.y = f * (a - i) + n, g;
    var u = (-c * a + o + f * i - n) / (f - c),
      d = f * (u - i) + n;
    return g.x = u, g.y = d, g;
  }
  static midPoint(t, e) {
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]((t.x + e.x) * GeometryUtils.half, (t.y + e.y) * GeometryUtils.half);
  }
  static splitBezier(t, e, r, s) {
    var i = GeometryUtils.midPoint(t, e),
      n = GeometryUtils.midPoint(e, r),
      a = GeometryUtils.midPoint(r, s),
      o = GeometryUtils.midPoint(i, n),
      h = GeometryUtils.midPoint(n, a),
      l = GeometryUtils.midPoint(o, h);
    return {
      b0: {
        p1: t,
        c1: i,
        c2: o,
        p2: l
      },
      b1: {
        p1: l,
        c1: h,
        c2: a,
        p2: s
      }
    };
  }
  static roundTo(t, e) {
    return Math.round(t * Math.pow(10, e)) / Math.pow(10, e);
  }
  static degressToRadius(t) {
    return t * (Math.PI / 180);
  }
  static radiusToDegress(t) {
    return t * (180 / Math.PI);
  }
  static rotatePoint(t, e) {
    var r = Math.sqrt(Math.pow(t.x, 2) + Math.pow(t.y, 2)),
      s = Math.atan2(t.y, t.x) + GeometryUtils.degressToRadius(e);
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](GeometryUtils.roundTo(r * Math.cos(s), 3), GeometryUtils.roundTo(r * Math.sin(s), 3));
  }
  static rotatePointOnCenterPoint(t, e, r) {
    var s = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](),
      i = r / 180 * Math.PI;
    return s.x = e.x + (Math.cos(i) * (t.x - e.x) - Math.sin(i) * (t.y - e.y)), s.y = e.y + (Math.sin(i) * (t.x - e.x) + Math.cos(i) * (t.y - e.y)), s;
  }
  static cubicToQuadratic(lineTo, curveTo, p1X, p1Y, c1X, c1Y, c2X, c2Y, p2X, p2Y, tolerance) {
    if (GeometryUtils.dx1 = c1X - p1X, GeometryUtils.dx2 = c2X - p2X, (GeometryUtils.dx1 < 0 ? -GeometryUtils.dx1 : GeometryUtils.dx1) < 0.00001 && (GeometryUtils.dx1 = 0), (GeometryUtils.dx2 < 0 ? -GeometryUtils.dx2 : GeometryUtils.dx2) < 0.00001 && (GeometryUtils.dx2 = 0), p1Y != p2Y || c1Y != p1Y || c2Y != p2Y) {
      if (GeometryUtils.dx1 || GeometryUtils.dx2) {
        if (GeometryUtils.dx1) {
          if (GeometryUtils.dx2) {
            if (GeometryUtils.m1 = (c1Y - p1Y) / GeometryUtils.dx1, GeometryUtils.m2 = (c2Y - p2Y) / GeometryUtils.dx2, (GeometryUtils.m1 < 0 ? -GeometryUtils.m1 : GeometryUtils.m1) == (GeometryUtils.m2 < 0 ? -GeometryUtils.m2 : GeometryUtils.m2)) {
              if (GeometryUtils.m3 = (p2Y - p1Y) / (p2X - p1X), GeometryUtils.m1 == GeometryUtils.m2 && GeometryUtils.m3 == GeometryUtils.m1) return void lineTo(p2X, p2Y);
              GeometryUtils.m1 > GeometryUtils.m3 && GeometryUtils.m2 < GeometryUtils.m3 || GeometryUtils.m1 < GeometryUtils.m3 && GeometryUtils.m2 > GeometryUtils.m3 ? (GeometryUtils.sx = (c1X + c2X) / 2, GeometryUtils.sy = (c1Y + c2Y) / 2, GeometryUtils.dx = 0.125 * (p1X + p2X + 4 * GeometryUtils.sx - 3 * (c1X + c2X)), GeometryUtils.dy = 0.125 * (p1Y + p2Y + 4 * GeometryUtils.sy - 3 * (c1Y + c2Y))) : (GeometryUtils.dx = tolerance, GeometryUtils.dy = tolerance);
            } else GeometryUtils.sx = (-GeometryUtils.m2 * p2X + p2Y + GeometryUtils.m1 * p1X - p1Y) / (GeometryUtils.m1 - GeometryUtils.m2), GeometryUtils.sy = GeometryUtils.m1 * (GeometryUtils.sx - p1X) + p1Y, GeometryUtils.dx = 0.125 * (p1X + p2X + 4 * GeometryUtils.sx - 3 * (c1X + c2X)), GeometryUtils.dy = 0.125 * (p1Y + p2Y + 4 * GeometryUtils.sy - 3 * (c1Y + c2Y));
          } else GeometryUtils.sx = p2X, GeometryUtils.sy = (c1Y - p1Y) / GeometryUtils.dx1 * (p2X - p1X) + p1Y, GeometryUtils.dx = 0.125 * (p1X + p2X + 4 * GeometryUtils.sx - 3 * (c1X + c2X)), GeometryUtils.dy = 0.125 * (p1Y + p2Y + 4 * GeometryUtils.sy - 3 * (c1Y + c2Y));
        } else GeometryUtils.sx = p1X, GeometryUtils.sy = (c2Y - p2Y) / GeometryUtils.dx2 * (p1X - p2X) + p2Y, GeometryUtils.dx = 0.125 * (p1X + p2X + 4 * GeometryUtils.sx - 3 * (c1X + c2X)), GeometryUtils.dy = 0.125 * (p1Y + p2Y + 4 * GeometryUtils.sy - 3 * (c1Y + c2Y));
      } else {
        var f = p1X - p2X;
        if (f < 0 && (f = -f), !f || f < 0.00001) return void lineTo(p2X, p2Y);
        if (GeometryUtils.dy = p1Y - c1Y, GeometryUtils.dy < 0 && (GeometryUtils.dy = -GeometryUtils.dy), !GeometryUtils.dy || GeometryUtils.dy < 0.00001) {
          if (GeometryUtils.dy = p2Y - c2Y, GeometryUtils.dy < 0 && (GeometryUtils.dy = -GeometryUtils.dy), !GeometryUtils.dy || GeometryUtils.dy < 0.00001) return void lineTo(p2X, p2Y);
          GeometryUtils.sx = c2X, GeometryUtils.sy = c2Y;
        } else GeometryUtils.dy = p2Y - c2Y, GeometryUtils.dy < 0 && (GeometryUtils.dy = -GeometryUtils.dy), !GeometryUtils.dy || GeometryUtils.dy < 0.00001 ? (GeometryUtils.sx = c1X, GeometryUtils.sy = c1Y) : c1Y < p1Y && c2Y < p2Y || c1Y > p1Y && c2Y > p2Y ? (GeometryUtils.sx = (c1X + c2X) / 2, GeometryUtils.sy = (c1Y + c2Y) / 2) : (GeometryUtils.dx = tolerance, GeometryUtils.dy = tolerance);
        GeometryUtils.dx || (GeometryUtils.dx = 0.125 * (p1X + p2X + 4 * GeometryUtils.sx - 3 * (c1X + c2X)), GeometryUtils.dy = 0.125 * (p1Y + p2Y + 4 * GeometryUtils.sy - 3 * (c1Y + c2Y)));
      }
      if (GeometryUtils.dx * GeometryUtils.dx + GeometryUtils.dy * GeometryUtils.dy > tolerance) {
        var c = 0.5 * (p1X + c1X),
          u = 0.5 * (p1Y + c1Y),
          d = 0.5 * (c1X + c2X),
          p = 0.5 * (c1Y + c2Y),
          m = 0.5 * (c2X + p2X),
          _ = 0.5 * (c2Y + p2Y),
          y = 0.5 * (c + d),
          b = 0.5 * (u + p),
          v = 0.5 * (d + m),
          L = 0.5 * (p + _),
          S = 0.5 * (y + v),
          A = 0.5 * (b + L);
        GeometryUtils.cubicToQuadratic(lineTo, curveTo, p1X, p1Y, c, u, y, b, S, A, tolerance), GeometryUtils.cubicToQuadratic(lineTo, curveTo, S, A, v, L, m, _, p2X, p2Y, tolerance);
      } else curveTo(GeometryUtils.sx, GeometryUtils.sy, p2X, p2Y);
    } else lineTo(p2X, p2Y);
  }
}
GeometryUtils._half = 0.5;
GeometryUtils._bezBoundsRect = new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_1__["default"]();
GeometryUtils._sx = NaN;
GeometryUtils._sy = NaN;
GeometryUtils._m1 = NaN;
GeometryUtils._m2 = NaN;
GeometryUtils._m3 = NaN;
GeometryUtils._dx = NaN;
GeometryUtils._dy = NaN;
GeometryUtils._dx1 = NaN;
GeometryUtils._dx2 = NaN;
GeometryUtils._returnResult = null;

/***/ }),

/***/ 39314:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/utils/keycode-to-charcode.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "keyCodeToChartChod": () => (/* binding */ keyCodeToChartChod)
/* harmony export */ });
function keyCodeToChartChod(keyCode) {
  const codeInfo = {
    8: {
      charCode: 8
    },
    13: {
      charCode: 13
    },
    16: {
      modifier: 'shift'
    },
    17: {
      modifier: 'control'
    },
    18: {
      modifier: 'alt'
    },
    91: {
      modifier: 'control'
    }
  };
  return codeInfo[keyCode] || {};
}

/***/ }),

/***/ 29057:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/utils/liaison-layout.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLiaisonLayout": () => (/* binding */ createLiaisonLayout)
/* harmony export */ });
/* harmony import */ var _layouts_bend_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/bend-layout */ 96707);
/* harmony import */ var _layouts_slide_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layouts/slide-layout */ 51341);
/* harmony import */ var _layouts_tie_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layouts/tie-layout */ 10461);
/* harmony import */ var _models_articulation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/articulation */ 78859);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);






function createLiaisonLayout(note, noteEditorService) {
  if (note.noteSet && note.noteSet.hasArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_3__.Articulation.LV_TIE)) {
    return new _layouts_tie_layout__WEBPACK_IMPORTED_MODULE_2__["default"](noteEditorService);
  }
  switch (note.liaison) {
    case _models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.TIE_LIAISON:
      if (note.measure && note.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_5__["default"] && note.cumulativeBend > 0) {
        return new _layouts_bend_layout__WEBPACK_IMPORTED_MODULE_0__["default"](_models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.BEND_LIAISON, noteEditorService);
      } else {
        return new _layouts_tie_layout__WEBPACK_IMPORTED_MODULE_2__["default"](noteEditorService);
      }
    case _models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.BEND_LIAISON:
    case _models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.PRE_BEND_LIAISON:
      return new _layouts_bend_layout__WEBPACK_IMPORTED_MODULE_0__["default"](note.liaison, noteEditorService);
    case _models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.SLIDE_LIAISON:
    case _models_liaison__WEBPACK_IMPORTED_MODULE_4__.Liaison.GLISSANDO_LIAISON:
      return new _layouts_slide_layout__WEBPACK_IMPORTED_MODULE_1__["default"](noteEditorService);
    default:
      throw new Error('Unrecognized liaison type: ' + note.liaison);
  }
}

/***/ }),

/***/ 99655:
/*!****************************************************!*\
  !*** ./src/app/note-editor/utils/line-notation.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createLineNotation": () => (/* binding */ createLineNotation),
/* harmony export */   "exporcreateLineNotation": () => (/* binding */ exporcreateLineNotation)
/* harmony export */ });
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_trill__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/trill */ 42550);


function exporcreateLineNotation(type, startingText = null) {
  let lineNotation;
  if (type === _models_line_notation__WEBPACK_IMPORTED_MODULE_0__["default"].TYPE_TRILL) {
    lineNotation = new _models_trill__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0, type);
  } else {
    lineNotation = new _models_line_notation__WEBPACK_IMPORTED_MODULE_0__["default"](0, true, 0, type);
  }
  if (startingText) {
    lineNotation.startingText = startingText;
  }
  return lineNotation;
}
function createLineNotation(type, startingText = null) {
  let lineNotation;
  if (type === _models_line_notation__WEBPACK_IMPORTED_MODULE_0__["default"].TYPE_TRILL) {
    lineNotation = new _models_trill__WEBPACK_IMPORTED_MODULE_1__["default"](0, 0, type);
  } else {
    lineNotation = new _models_line_notation__WEBPACK_IMPORTED_MODULE_0__["default"](0, true, 0, type);
  }
  if (startingText) {
    lineNotation.startingText = startingText;
  }
  return lineNotation;
}

/***/ }),

/***/ 28490:
/*!*************************************************!*\
  !*** ./src/app/note-editor/utils/note-const.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LEAST_FIFTHS": () => (/* binding */ LEAST_FIFTHS),
/* harmony export */   "LEAST_FIFTHS_STEPS": () => (/* binding */ LEAST_FIFTHS_STEPS)
/* harmony export */ });
const LEAST_FIFTHS = [0, -5, 2, -3, 4, -1, 6, 1, -4, 3, -2, 5];
const LEAST_FIFTHS_STEPS = [0, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6];

/***/ }),

/***/ 7265:
/*!*******************************************!*\
  !*** ./src/app/note-editor/utils/note.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getEnharmonicWithMinimumAlterations": () => (/* binding */ getEnharmonicWithMinimumAlterations)
/* harmony export */ });
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/noteset */ 46605);

function getEnharmonicWithMinimumAlterations(note, keySignature) {
  note = note.clone();
  let noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_0__.NoteSet(0, [note]);
  let normalizeSpelling = noteSet.normalizeSpelling(keySignature);
  let enharmonic = note;
  let shiftInterval = note.enharmonicShiftInterval();
  let transposedNote = note.transposeInterval(shiftInterval);
  while (!enharmonic.equals(transposedNote)) {
    noteSet = new _models_noteset__WEBPACK_IMPORTED_MODULE_0__.NoteSet(0, [transposedNote]);
    const transposedNormalizeSpelling = noteSet.normalizeSpelling(keySignature);
    if (Math.abs(transposedNormalizeSpelling) < Math.abs(normalizeSpelling)) {
      normalizeSpelling = transposedNormalizeSpelling;
      enharmonic = transposedNote;
    }
    shiftInterval = transposedNote.enharmonicShiftInterval();
    transposedNote = transposedNote.transposeInterval(shiftInterval);
  }
  return enharmonic;
}

/***/ }),

/***/ 54131:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/utils/rhythm-element.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "comparePosition": () => (/* binding */ comparePosition),
/* harmony export */   "compareScorePosition": () => (/* binding */ compareScorePosition)
/* harmony export */ });
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/noteset */ 46605);


function comparePosition(voiceEl1, voiceEl2) {
  let diff = voiceEl1.position - voiceEl2.position;
  if (diff === 0) {
    diff = voiceEl1.voiceNumber - voiceEl2.voiceNumber;
    if (diff === 0) {
      diff = voiceEl1.index - voiceEl2.index;
    }
  }
  if (diff !== 0) {
    return diff < 0 ? -1 : 1;
  } else {
    return 0;
  }
}
function compareScorePosition(notation1, notation2) {
  let diff;
  if (notation1.measure && notation2.measure) {
    diff = notation1.measure.index - notation2.measure.index;
    if (diff !== 0) {
      return diff < 0 ? -1 : 1;
    }
    diff = notation1.position - notation2.position;
    if (diff !== 0) {
      return diff < 0 ? -1 : 1;
    }
    if (notation1.measure.staff && notation2.measure.staff) {
      diff = notation1.measure.staff.index - notation2.measure.staff.index;
      if (diff !== 0) {
        return diff < 0 ? -1 : 1;
      }
    }
  } else if (0 != (diff = notation1.rhythmPosition - notation2.rhythmPosition)) {
    return diff < 0 ? -1 : 1;
  }
  if (0 != (diff = notation1.voiceNumber - notation2.voiceNumber)) {
    return diff < 0 ? -1 : 1;
  }
  if (notation1 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && notation2 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet) {
    if (notation1.grace && notation2.grace && notation1 === notation2.previousGraceNote) {
      return -1;
    }
    const prevGrace = notation1.grace ? 1 : 0;
    const nextGrace = notation2.grace ? 1 : 0;
    return nextGrace - prevGrace;
  }
  return notation1 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_1__.NoteSet && notation2 instanceof _models_hairpin__WEBPACK_IMPORTED_MODULE_0__["default"] ? 1 : 0;
}

/***/ }),

/***/ 35628:
/*!*************************************************!*\
  !*** ./src/app/note-editor/utils/staff-type.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTypeFromClef": () => (/* binding */ createTypeFromClef)
/* harmony export */ });
/* harmony import */ var _models_staff_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/staff-type */ 52472);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);


function createTypeFromClef(clef) {
  let type;
  if (clef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_1__["default"]) {
    type = _models_staff_type__WEBPACK_IMPORTED_MODULE_0__["default"].GUITAR_TAB_TYPE;
  } else {
    type = _models_staff_type__WEBPACK_IMPORTED_MODULE_0__["default"].STANDARD_TYPE;
  }
  return _models_staff_type__WEBPACK_IMPORTED_MODULE_0__["default"].createType(type, clef.numLines);
}

/***/ }),

/***/ 31836:
/*!***************************************************!*\
  !*** ./src/app/note-editor/utils/string-utils.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "removeBreakLines": () => (/* binding */ removeBreakLines)
/* harmony export */ });
function removeBreakLines(str) {
  return str.replace(/(\r\n|\n|\r)/gm, ' ');
}

/***/ }),

/***/ 8227:
/*!**************************************************!*\
  !*** ./src/app/note-editor/utils/ststem-span.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ensureSpanDefaulted": () => (/* binding */ ensureSpanDefaulted)
/* harmony export */ });
/* harmony import */ var _layouts_span_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/span-info */ 18128);

function ensureSpanDefaulted(spannotation, context, editorFonts, rootDiv, noteEditorService) {
  if (spannotation.requiresDefaultInfo) {
    spannotation.requiresDefaultInfo = false;
    const spanInfo = new _layouts_span_info__WEBPACK_IMPORTED_MODULE_0__["default"](context, spannotation, editorFonts, rootDiv, noteEditorService);
    spannotation.setDefaultInfo(spanInfo);
  }
}

/***/ }),

/***/ 1275:
/*!*******************************************!*\
  !*** ./src/app/note-editor/utils/uuid.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "generateRandomString": () => (/* binding */ generateRandomString),
/* harmony export */   "generateUUID": () => (/* binding */ generateUUID)
/* harmony export */ });
function generateUUID() {
  var t = new Date().getTime();
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (e) {
    var r = (t + 16 * Math.random()) % 16 | 0;
    return t = Math.floor(t / 16), ('x' === e ? r : 3 & r | 8).toString(16);
  });
}
function generateRandomString(length) {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const maxPos = chars.length;
  let str = '';
  for (let k = 0; k < length; k++) {
    str += chars.charAt(Math.floor(Math.random() * maxPos));
  }
  return str;
}

/***/ }),

/***/ 3981:
/*!**************************************************!*\
  !*** ./src/app/note-editor/utils/view-helper.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isDestroyable": () => (/* binding */ isDestroyable)
/* harmony export */ });
/* harmony import */ var _layouts_abstract_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/abstract-layout */ 45009);
/* harmony import */ var _views_abstract_handle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/abstract-handle */ 2005);
/* harmony import */ var _views_score_object_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../views/score-object-view */ 39928);



function isDestroyable(handle) {
  return handle instanceof _layouts_abstract_layout__WEBPACK_IMPORTED_MODULE_0__["default"] || handle instanceof _views_abstract_handle__WEBPACK_IMPORTED_MODULE_1__["default"] || handle instanceof _views_score_object_view__WEBPACK_IMPORTED_MODULE_2__["default"] //||
  // handle instanceof RollButton ||
  // handle instanceof AnnotationMediator || // IScoreObjectMediator
  // handle instanceof BasicNotationMediator ||
  // handle instanceof BeamMediator ||
  // handle instanceof MeasureEditMediator // ||
  // handle instanceof MeasureHandleMediator //||
  // handle instanceof ScoreMediator ||
  // handle instanceof ObjectMediator ||
  // handle instanceof StaffHandleMediator ||
  // handle instanceof TrackFlagMediator
  ;
}

/***/ }),

/***/ 15869:
/*!*************************************************!*\
  !*** ./src/app/note-editor/utils/view-utils.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ViewUtils)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);

class ViewUtils {
  static isSyntheticMouseEvent(evt, prevEvt) {
    var position = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](evt.stageX, evt.stageY),
      prevPosition = new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](prevEvt.stageX, prevEvt.stageY),
      offset = _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(position, prevPosition);
    return offset <= 1 || offset >= 1000000;
  }
}

/***/ }),

/***/ 12585:
/*!***************************************************!*\
  !*** ./src/app/note-editor/utils/voice-number.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VoiceNumber": () => (/* binding */ VoiceNumber)
/* harmony export */ });
var VoiceNumber;
(function (VoiceNumber) {
  VoiceNumber[VoiceNumber["NON_METRICAL_VOICE_NUMBER"] = -1] = "NON_METRICAL_VOICE_NUMBER";
  VoiceNumber[VoiceNumber["UNKNOWN_VOICE_NUMBER"] = -999] = "UNKNOWN_VOICE_NUMBER";
  VoiceNumber[VoiceNumber["NORMAL_MAX_VOICES"] = 2] = "NORMAL_MAX_VOICES";
})(VoiceNumber || (VoiceNumber = {}));

/***/ }),

/***/ 47422:
/*!********************************************!*\
  !*** ./src/app/note-editor/utils/voice.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "collision": () => (/* binding */ collision)
/* harmony export */ });
/* harmony import */ var _models_barline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/barline */ 24728);
/* harmony import */ var _models_clef__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/clef */ 87690);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_span_notation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/span-notation */ 43586);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/text-notation */ 70240);







function collision(element1, element2) {
  return element1 instanceof _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"] && element2 instanceof _models_barline__WEBPACK_IMPORTED_MODULE_0__["default"] || element1 instanceof _models_clef__WEBPACK_IMPORTED_MODULE_1__["default"] && !_canCollideWithClef(element2) || element2 instanceof _models_clef__WEBPACK_IMPORTED_MODULE_1__["default"] && !_canCollideWithClef(element1) || !(!(element1 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet) || !(element2 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet) || element1.grace || element2.grace) || element1 instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_5__["default"] && !(element2 instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_2__["default"]) && element2 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet && !element2.grace || element2 instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_5__["default"] && !(element1 instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_2__["default"]) && element1 instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_3__.NoteSet && !element1.grace;
}
function _canCollideWithClef(notation) {
  return notation instanceof _models_span_notation__WEBPACK_IMPORTED_MODULE_4__["default"] || notation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_6__["default"];
}

/***/ }),

/***/ 2005:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/abstract-handle.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AbstractHandle)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/point */ 81443);


class AbstractHandle extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get handleSize() {
    return this._handleSize;
  }
  get context() {
    return this._context;
  }
  get position() {
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](this.x, this.y);
  }
  set position(t) {
    this.x = t.x, this.y = t.y;
  }
  get rolled() {
    return this._rolled;
  }
  get strokeThickness() {
    return (this._rolled ? 2 : 1) / this.context.info.displayScale;
  }
  get strokeAlpha() {
    return this._rolled ? 1 : 0.5;
  }
  constructor(context, noteEditorService) {
    super(noteEditorService);
    this.apparentSize = 6;
    this._context = null;
    this._handleSize = NaN;
    this._rolled = false;
    this._context = context;
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.addEventListener(
    //   FlashEvent.ADDED_TO_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleAddedToStage)
    // );
    // this.addEventListener(
    //   FlashEvent.REMOVED_FROM_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleRemovedFromStage)
    // );
    this.updateHandleSize();
    this.updateGraphics();
  }
  handleAddedToStage(t) {
    // this._context.documentView.addEventListener(
    //   EditorEvent.DISPLAY_SCALE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleScaleChange)
    // );
  }
  removeDisplayScaleChangeEvent() {
    // this._context.documentView.removeEventListener(
    //   EditorEvent.DISPLAY_SCALE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleScaleChange)
    // );
  }
  handleRemovedFromStage(t) {
    this.removeDisplayScaleChangeEvent();
  }
  destroy() {
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashEvent.ADDED_TO_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleAddedToStage)
    // );
    // this.removeEventListener(
    //   FlashEvent.REMOVED_FROM_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleRemovedFromStage)
    // );
    this.removeDisplayScaleChangeEvent();
  }
  updateGraphics() {}
  updateHandleSize() {
    this._handleSize = this.apparentSize / this._context.info.displayScale;
  }
  handleScaleChange(t) {
    this.updateHandleSize();
    this.updateGraphics();
  }
  addRollHighlight(evt) {
    this._rolled = true;
    this.updateGraphics();
    evt.stopPropagation();
  }
  removeRollHighlight(evt) {
    this._rolled = false;
    this.updateGraphics();
    evt.stopPropagation();
  }
}

/***/ }),

/***/ 29782:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/angle-bracket-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AngleBracketView)
/* harmony export */ });
/* harmony import */ var _display_line_scale_mode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/line-scale-mode */ 66299);
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geoms/point */ 81443);




class AngleBracketView extends _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(x, y, width, height, ascent, staffMetrics, noteEditorService) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    const point = new _geoms_point__WEBPACK_IMPORTED_MODULE_3__["default"](-ascent, width);
    point.normalize(height);
    this.graphics.lineStyle(staffMetrics.lineThickness * staffMetrics.lineSpacing, 0, 1, _display_line_scale_mode__WEBPACK_IMPORTED_MODULE_0__.LineScaleMode.NORMAL, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_2__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_2__.JointStyle.MITER);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(width / 2 + point.x, ascent / 2 + point.y);
    this.graphics.lineTo(width, ascent);
  }
}

/***/ }),

/***/ 98167:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/annotation-view.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AnnotationView)
/* harmony export */ });
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _selectable_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./selectable-view */ 35707);


class AnnotationView extends _selectable_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get annotation() {
    return this._annotation;
  }
  get notationLayout() {
    return this._notationLayout;
  }
  get selected() {
    if (super.selected) {
      return true;
    }
    if (this.context.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
      const selectedNotations = this.context.document.selection.selectedNotations();
      if (selectedNotations.length === 1 && selectedNotations[0].valueNotation === this.notation) {
        return true;
      }
    }
    return false;
  }
  constructor(context, notationLayout, annotation, noteEditorService, rootDiv) {
    super(context, annotation.parent, noteEditorService, rootDiv);
    this._annotation = null;
    this._notationLayout = null;
    this._viewContext = null;
    this._annotationMeditaor = null;
    this.ANNOTATION_MARGIN_TOP = 12;
    this.ANNOTATION_ICON_NAME = 'annotationIcon';
    this._annotation = annotation;
    this._notationLayout = notationLayout;
    this._viewContext = context;
    this._annotationMeditaor = this.context.registerAnnotationView(this);
    this.initializeView();
  }
  destroy() {
    this._annotationMeditaor.destroy();
    super.destroy();
  }
  getGlyph() {
    return this._viewContext.layoutContext.foundry.getSymbol(this.ANNOTATION_ICON_NAME);
  }
  updateView() {
    const displayObject = this.getGlyph().createDisplayObject(this._viewContext.info);
    displayObject.y = displayObject.y - this.ANNOTATION_MARGIN_TOP;
    this.addChild(displayObject);
  }
}

/***/ }),

/***/ 50457:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/barline-view.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BarlineView)
/* harmony export */ });
/* harmony import */ var _notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation-view */ 91755);

class BarlineView extends _notation_view__WEBPACK_IMPORTED_MODULE_0__["default"] {}

/***/ }),

/***/ 8689:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/beam-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BeamView)
/* harmony export */ });
/* harmony import */ var _layouts_note_set_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/note-set-layout */ 83944);
/* harmony import */ var _layouts_rest_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layouts/rest-layout */ 41910);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_timesignature__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/timesignature */ 67379);
/* harmony import */ var _selectable_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./selectable-view */ 35707);





class BeamView extends _selectable_view__WEBPACK_IMPORTED_MODULE_4__["default"] {
  get layout() {
    return this._layout;
  }
  get color() {
    const color = this._layout.getBeamableLayoutAt(0).noteSet.color;
    if (color === this._layout.getBeamableLayoutAt(this._layout.numBeamableLayouts - 1).noteSet.color) {
      return color;
    } else {
      return 0;
    }
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout.getBeamableLayoutAt(0).noteSet, noteEditorService, rootDiv);
    this._layout = layout;
    this._beamMediator = context.registerBeamView(this);
    this.initializeView();
  }
  destroy() {
    this._beamMediator.destroy();
    super.destroy();
  }
  updateView() {
    let beamThinkness = this.toViewUnits(this.layout.effectiveBeamThickness);
    if (!this.layout.down) {
      beamThinkness *= -1;
    }
    for (let i = 0; i < this.layout.beams.length; i++) {
      const beam = this.layout.beams[i];
      const startBeamableLayout = this.layout.getBeamableLayoutAt(beam.start);
      const endBeamableLayout = this.layout.getBeamableLayoutAt(beam.end);
      const beamLevel = beam.level;
      let height = (this.layout.down ? beamLevel : -beamLevel) * this.layout.effectiveBeamInterval;
      let left = startBeamableLayout.leftX + startBeamableLayout.stemEnd.x;
      let right = endBeamableLayout.leftX + endBeamableLayout.stemEnd.x;
      if (startBeamableLayout.noteSet.tremoloDyad && (beamLevel > 0 || !startBeamableLayout.hasStem || startBeamableLayout.noteSet.value === _models_notation_value__WEBPACK_IMPORTED_MODULE_2__.NotationValue.QUARTER)) {
        const quarterWidth = (right - left) / 4;
        left += Math.min(quarterWidth, this.staffMetrics.tremoloInsertLength);
        right -= Math.min(quarterWidth, this.staffMetrics.tremoloInsertLength);
        if (!startBeamableLayout.hasStem) {
          height += this.layout.down ? -this.layout.maxLevel / 2 : this.layout.maxLevel / 2;
          if (!startBeamableLayout.down && startBeamableLayout instanceof _layouts_note_set_layout__WEBPACK_IMPORTED_MODULE_0__["default"] && startBeamableLayout.hasAlternate) {
            left += startBeamableLayout.notationWidth;
          }
          if (endBeamableLayout.down && endBeamableLayout instanceof _layouts_note_set_layout__WEBPACK_IMPORTED_MODULE_0__["default"] && endBeamableLayout.hasAlternate) {
            right -= endBeamableLayout.notationWidth;
          }
        }
      }
      if (beam.start === beam.end) {
        if (startBeamableLayout instanceof _layouts_rest_layout__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          continue;
        }
        if (this.layout.isBeamStart(beam.start) || !this.layout.isBeamEnd(beam.start) && _models_timesignature__WEBPACK_IMPORTED_MODULE_3__["default"].groupStartAt(startBeamableLayout.noteSet.measure.timesignature.beamGroups, startBeamableLayout.noteSet.rhythmPosition)) {
          right = left + this.layout.context.staffMetrics.fractionalBeamLength;
        } else {
          left = right - this.layout.context.staffMetrics.fractionalBeamLength;
        }
      }
      const leftx = this.toViewUnits(left);
      const leftTop = -this.toViewUnits(this.layout.startY + height + this.layout.rise * (left - this.layout.startX) / (this.layout.endX - this.layout.startX));
      const rightx = this.toViewUnits(right);
      const rightTop = -this.toViewUnits(this.layout.startY + height + this.layout.rise * (right - this.layout.startX) / (this.layout.endX - this.layout.startX));
      this.graphics.beginFill(0);
      this.graphics.moveTo(leftx, leftTop);
      this.graphics.lineTo(leftx, leftTop - beamThinkness);
      this.graphics.lineTo(rightx, rightTop - beamThinkness);
      this.graphics.lineTo(rightx, rightTop);
      this.graphics.lineTo(leftx, leftTop);
      this.graphics.endFill();
    }
  }
}

/***/ }),

/***/ 59754:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/bend-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BendView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/liaison */ 31253);



class BendView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, width, height, staffMetrics, bendType, noteEditorService) {
    super(noteEditorService);
    if (bendType === _models_liaison__WEBPACK_IMPORTED_MODULE_2__.Liaison.PRE_BEND_LIAISON) {
      x += width;
      width = 0;
      y -= staffMetrics.lineSpacing / 2;
      height += staffMetrics.lineSpacing / 2;
    }
    this.x = x;
    this.y = y;
    this.graphics.lineStyle(staffMetrics.lineThickness * staffMetrics.lineSpacing, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.moveTo(0, 0);
    const a = height + staffMetrics.bendArrowHeight * staffMetrics.lineSpacing;
    this.graphics.curveTo(width, 0, width, a);
    this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.beginFill(0);
    this.graphics.moveTo(width, height);
    this.graphics.lineTo(width - staffMetrics.bendArrowWidth * staffMetrics.lineSpacing / 2, a);
    this.graphics.lineTo(width + staffMetrics.bendArrowWidth * staffMetrics.lineSpacing / 2, a);
    this.graphics.lineTo(width, height);
    this.graphics.endFill();
  }
}

/***/ }),

/***/ 38854:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/block-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ BlockView)
/* harmony export */ });
/* harmony import */ var _chunk_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-view */ 17002);

class BlockView extends _chunk_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get layout() {
    return this._layout;
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
    this._layout = layout;
    this._context = context;
    this.initializeView();
  }
  initializeView() {
    super.initializeView();
  }
  updateView() {
    this.layout.validateGlobalLayout();
    const viewElements = this.layout.getViewElements(this.context);
    for (let i = 0; i < viewElements.length; i++) {
      this.addChild(viewElements[i]);
    }
    this.updateGeometry();
  }
  updateGeometry() {
    this.layout.validateGlobalLayout();
  }
}

/***/ }),

/***/ 18880:
/*!*********************************************!*\
  !*** ./src/app/note-editor/views/canvas.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Canvas)
/* harmony export */ });
/* harmony import */ var _ui_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui-component */ 41036);

class Canvas extends _ui_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
  }
}

/***/ }),

/***/ 68680:
/*!********************************************************!*\
  !*** ./src/app/note-editor/views/chord-symbol-view.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChordSymbolView)
/* harmony export */ });
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _fretboard_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fretboard-view */ 70615);
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./text-notation-view */ 16089);






class ChordSymbolView extends _text_notation_view__WEBPACK_IMPORTED_MODULE_5__["default"] {
  static get CHORD_LINE_GAP() {
    return 6;
  }
  constructor(context, layout, editorFonts, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
    this._fretboardView = null;
    if (!layout.chordSymbol.hideFretboards && layout.fretboard) {
      this._fretboardView = new _fretboard_view__WEBPACK_IMPORTED_MODULE_4__["default"](layout.dx, layout.glyphWidths, layout.distanceY, layout.fretboard, context.layoutContext.staffMetrics, editorFonts, this.noteEditorService);
      this._fretboardView.x += this.toViewUnits(layout.justifyOffset);
      this.addChild(this._fretboardView);
    }
  }
  static addChordSymbol(context, measure, position, chordSymbol) {
    const notation = new _models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"](position, '');
    const previousNotation = measure.previousNotation(position, function (t) {
      return t instanceof _models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"];
    }, true);
    if (previousNotation == null || chordSymbol != null && previousNotation.dy === chordSymbol.dy) {
      if (chordSymbol != null) {
        notation.dy = chordSymbol.dy + (chordSymbol.dy >= 0 ? ChordSymbolView.CHORD_LINE_GAP : -ChordSymbolView.CHORD_LINE_GAP);
      } else {
        if (measure.staff.index === measure.staff.score.numStaves - 1 && measure.staff.index > 0) {
          const staffMetrics = context.layoutContext.staffMetrics;
          if (measure.effectiveClef.isTab) {
            notation.dy += staffMetrics.chordBelowStaffOffsetTab;
          } else {
            notation.dy += staffMetrics.chordBelowStaffOffset;
          }
        }
      }
    } else {
      notation.dy = previousNotation.dy;
    }
    _text_notation_view__WEBPACK_IMPORTED_MODULE_5__["default"].addMeasureText({
      context,
      measure,
      notation,
      groupName: 'Add Chord Symbol',
      createFieldFunction: ChordSymbolView.createChordSymbolField
    });
  }
  static commitChordSymbold(context, rhythmElement, textField, noteEditorService) {
    if (textField.commitChar && textField.commitChar === String.fromCharCode(9)) {
      let position = -1;
      if (rhythmElement.rhythmContext) {
        position = rhythmElement.position;
      } else {
        const selection = context.documentController.scoreDocument.selection;
        if (selection && selection.selectedRange) {
          position = selection.selectedRange.start.position;
        }
      }
      if (position > -1) {
        const nextNotation = rhythmElement.measure.nextNotation(position, function (t) {
          return t instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_2__.NoteSet && t.notes.length > 0;
        }, true);
        if (nextNotation) {
          context.document.validateNow();
          const chordSymbol = nextNotation.measure.notationAtPosition(nextNotation.position, _models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"]);
          if (chordSymbol) {
            context.documentController.scoreDocument.selection = new _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"](context.document.score, [chordSymbol], noteEditorService);
            // chordSymbol.dispatchEvent(new NotationEvent(NotationEvent.EDIT));
          } else {
            context.controller.selectNotation(nextNotation);
            context.documentController.addChordSymbol();
          }
        }
      }
    }
  }
  editText() {
    super.editMeasureText('Edit Chord Symbol', ChordSymbolView.createChordSymbolField);
  }
  static createChordSymbolField(context, notation, y, editorFonts, rootDiv, noteEditorService) {
    const staffMetrics = context.layoutContext.staffMetrics;
    const editField = _text_notation_view__WEBPACK_IMPORTED_MODULE_5__["default"].createEditField(context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_3__.TextFieldAutoSize.LEFT, staffMetrics.chordSymbolFont, staffMetrics.chordSymbolSize, false, false, notation, 0, -staffMetrics.chordSymbolPadding.bottom, y, editorFonts, rootDiv, noteEditorService, 'transposedText');
    editField.multiline = true;
    editField.autoCommitChars = String.fromCharCode(13) + String.fromCharCode(9);
    editField.autoCommitFuction = function (t, e) {
      return !_models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"].isFiguredBass(_models_chord_symbol__WEBPACK_IMPORTED_MODULE_1__["default"].canonicalizeChord(t.uncommitedText));
    };
    // editField.addEventListener(FlexEvent.VALUE_COMMIT, function (r) {
    //   ChordSymbolView.commitChordSymbol(context, notation, editField);
    // });
    return editField;
  }
}

/***/ }),

/***/ 17002:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/chunk-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ChunkView)
/* harmony export */ });
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./score-object-view */ 39928);

class ChunkView extends _score_object_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = layout;
  }
  get layout() {
    return this._layout;
  }
}

/***/ }),

/***/ 85926:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/views/dashed-line-view.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DashedLineView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/point */ 81443);



class DashedLineView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, width, height, lengthSpacing, staffMetrics, noteEditorService, contextInfo = null) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    const strokeWidth = staffMetrics.lineThickness * staffMetrics.lineSpacing;
    if (contextInfo && !contextInfo.printView) {
      this.graphics.lineStyle(Math.max(5, strokeWidth), 0, 0);
      this.graphics.moveTo(0, 0);
      this.graphics.lineTo(width, height);
    }
    this.graphics.lineStyle(strokeWidth, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.moveTo(0, 0);
    let hypotenuse = Math.sqrt(width * width + height * height);
    let currLenght = 0;
    while (true) {
      let isSpacing = false;
      for (let i = 0; i < lengthSpacing.length; i++) {
        const lengthOrSpacing = lengthSpacing[i];
        const endpoint = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](width, height);
        endpoint.normalize(currLenght);
        if (isSpacing) {
          this.graphics.moveTo(endpoint.x, endpoint.y);
        } else {
          this.graphics.lineTo(endpoint.x, endpoint.y);
        }
        isSpacing = !isSpacing;
        currLenght += lengthOrSpacing;
        if (currLenght > hypotenuse) {
          return;
        }
      }
    }
  }
}

/***/ }),

/***/ 99373:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/views/embed-display-object.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ EmbededDisplayObject)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class EmbededDisplayObject extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, source = null, symbol = null) {
    super(noteEditorService);
    this.source = null;
    this.symbol = null;
    this.source = source;
    this.symbol = symbol;
  }
}

/***/ }),

/***/ 2319:
/*!***********************************************************!*\
  !*** ./src/app/note-editor/views/expression-text-view.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ExpressionTextView)
/* harmony export */ });
/* harmony import */ var _models_expression_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/expression-text */ 9674);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./text-notation-view */ 16089);



class ExpressionTextView extends _text_notation_view__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
  }
  static addExpressionText(context, measure, rhythmPosition, dy = 0, listenerNotation, editorFonts, rootDiv, noteEditorService) {
    const textField = _text_notation_view__WEBPACK_IMPORTED_MODULE_2__["default"].addMeasureText({
      context,
      measure,
      notation: new _models_expression_text__WEBPACK_IMPORTED_MODULE_0__["default"](rhythmPosition, '', dy),
      groupName: '',
      listenerNotation,
      editorFonts,
      rootDiv,
      noteEditorService,
      createFieldFunction: ExpressionTextView.createExpressionTextField
    });
    noteEditorService.onFocus.emit(textField._textField);
  }
  editText() {
    super.editMeasureText('Edit Dynamics/Expression', ExpressionTextView.createExpressionTextField);
  }
  static createExpressionTextField(context, notation, editGroupName, editorFonts, rootDiv, noteEditorService) {
    const staffMetrics = context.layoutContext.staffMetrics;
    const editfield = _text_notation_view__WEBPACK_IMPORTED_MODULE_2__["default"].createEditField(context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_1__.TextFieldAutoSize.LEFT, staffMetrics.staffTextFont, staffMetrics.expressionTextSize, false, true, notation, 0, -staffMetrics.expressionTextPadding.bottom, editGroupName, editorFonts, rootDiv, noteEditorService);
    editfield.autoCommitChars = String.fromCharCode(13);
    return editfield;
  }
}

/***/ }),

/***/ 41245:
/*!**************************************************!*\
  !*** ./src/app/note-editor/views/flex-sprite.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FlexSprite)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class FlexSprite extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
  }
}

/***/ }),

/***/ 70615:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/views/fretboard-view.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ FretboardView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _models_fretboard__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/fretboard */ 24217);
/* harmony import */ var _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/anti-alias-type */ 52348);
/* harmony import */ var _text_grid_fit_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/grid-fit-type */ 65007);
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _text_text_format_align__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../text/text-format-align */ 48520);









class FretboardView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get TOP_FRET_HEAVIER_THICKNESS() {
    return 0.25;
  }
  static get PADDING_TOP() {
    return 1.5;
  }
  static get STOP_RADIUS() {
    return 0.25;
  }
  static get SILENT_SIDE() {
    return 0.5;
  }
  static get SILENT_PADDING() {
    return 0.25;
  }
  static get FINGERING_VERTICAL_NUDGE() {
    return 0.25;
  }
  static get FINGERING_TEXT_SIZE() {
    return 0.14;
  }
  static get FIRST_FRET_TEXT_SIZE() {
    return 0.18;
  }
  static get BARRE_BOTTOM_OF_CURVE() {
    return -0.5;
  }
  static get BARRE_TOP_OF_CURVE() {
    return -0.8;
  }
  static get BARRE_PADDING() {
    return -0.2;
  }
  static get HALF_LINE() {
    return 0.5;
  }
  constructor(dx, glyphWidths, distanceY, fretboard, staffMetrics, editorFonts, noteEditorService) {
    super(noteEditorService);
    this._staffMetrics = null;
    this._staffMetrics = staffMetrics;
    this.editorFonts = editorFonts;
    const totalSpacingSize = (fretboard.strings - 1) * this._staffMetrics.chordFrameStringSpacing;
    this.x = (dx - (totalSpacingSize - glyphWidths) / 2) * this._staffMetrics.lineSpacing;
    this.y = (-distanceY + FretboardView.PADDING_TOP) * this._staffMetrics.lineSpacing;
    this.drawFretboard(fretboard);
  }
  makeFingeringTextField() {
    const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_5__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
    textField.autoSize = _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__.TextFieldAutoSize.CENTER;
    textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__.AntiAliasType.ADVANCED;
    textField.gridFitType = _text_grid_fit_type__WEBPACK_IMPORTED_MODULE_4__.GridFitType.NONE;
    textField.embedFonts = true;
    textField.selectable = false;
    textField.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_7__["default"]('SourceSansPro', FretboardView.FINGERING_TEXT_SIZE * this._staffMetrics.baseFontSize, null, null, null, null, null, null, _text_text_format_align__WEBPACK_IMPORTED_MODULE_8__.TextFormatAlign.CENTER);
    return textField;
  }
  makeFirstFretTextField(firstFretLocation) {
    const textfield = new _text_text_field__WEBPACK_IMPORTED_MODULE_5__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
    textfield.autoSize = firstFretLocation === _models_fretboard__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_FRET_LOCATION_LEFT ? _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__.TextFieldAutoSize.RIGHT : _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_6__.TextFieldAutoSize.LEFT;
    textfield.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__.AntiAliasType.ADVANCED;
    textfield.gridFitType = _text_grid_fit_type__WEBPACK_IMPORTED_MODULE_4__.GridFitType.NONE;
    textfield.embedFonts = true;
    textfield.selectable = false;
    textfield.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_7__["default"]('SourceSansPro', FretboardView.FIRST_FRET_TEXT_SIZE * this._staffMetrics.baseFontSize, null, null, null, null, null, null, firstFretLocation === _models_fretboard__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_FRET_LOCATION_LEFT ? _text_text_format_align__WEBPACK_IMPORTED_MODULE_8__.TextFormatAlign.LEFT : _text_text_format_align__WEBPACK_IMPORTED_MODULE_8__.TextFormatAlign.RIGHT);
    return textfield;
  }
  drawFretboard(fretboard) {
    this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    const width = this._staffMetrics.chordFrameStringSpacing * (fretboard.strings - 1) * this._staffMetrics.lineSpacing;
    const height = this._staffMetrics.chordFrameFretSpacing * fretboard.frets * this._staffMetrics.lineSpacing;
    this.graphics.beginFill(0, 0);
    this.graphics.drawRect(0, 0, width, height);
    this.graphics.endFill();
    for (let i = 0; i < fretboard.frets + 1; i++) {
      this.graphics.moveTo(0, i * this._staffMetrics.chordFrameFretSpacing * this._staffMetrics.lineSpacing);
      this.graphics.lineTo(width, i * this._staffMetrics.chordFrameFretSpacing * this._staffMetrics.lineSpacing);
    }
    for (let i = 0; i < fretboard.strings; i++) {
      this.graphics.moveTo(i * this._staffMetrics.chordFrameStringSpacing * this._staffMetrics.lineSpacing, 0);
      this.graphics.lineTo(i * this._staffMetrics.chordFrameStringSpacing * this._staffMetrics.lineSpacing, height);
    }
    if (fretboard.firstFret === 0) {
      this.graphics.lineStyle(FretboardView.TOP_FRET_HEAVIER_THICKNESS * this._staffMetrics.lineSpacing, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
      this.graphics.moveTo(0, 0);
      this.graphics.lineTo(width, 0);
    }
    let barreStart,
      barreStop,
      cx,
      cy,
      stringsIdx = [];
    for (let i = 1; i < fretboard.strings; i++) {
      stringsIdx.push(i);
    }
    this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    for (let i = 0; i < fretboard.notes.length; i++) {
      const note = fretboard.notes[i];
      const string = note.string + 1;
      const nextStringIdx = stringsIdx.indexOf(string);
      if (nextStringIdx !== -1) {
        stringsIdx.splice(nextStringIdx, 1);
      }
      cx = (fretboard.strings - string) * this._staffMetrics.chordFrameStringSpacing * this._staffMetrics.lineSpacing;
      if (fretboard.firstFret === 0) {
        cy = note.fret - FretboardView.HALF_LINE;
      } else if (note.fret === 0) {
        cy = -FretboardView.HALF_LINE;
      } else {
        cy = note.fret - fretboard.firstFret + FretboardView.HALF_LINE;
      }
      cy *= this._staffMetrics.chordFrameFretSpacing * this._staffMetrics.lineSpacing;
      if (note.fret === 0) {
        this.graphics.drawCircle(cx, cy, FretboardView.STOP_RADIUS * this._staffMetrics.lineSpacing);
      } else {
        this.graphics.beginFill(0);
        this.graphics.drawCircle(cx, cy, FretboardView.STOP_RADIUS * this._staffMetrics.lineSpacing);
        this.graphics.endFill();
      }
      if (note.hasFingering) {
        const fingeringTextField = this.makeFingeringTextField();
        this.addChild(fingeringTextField);
        fingeringTextField.text = note.fingering;
        fingeringTextField.y = (fretboard.frets * this._staffMetrics.chordFrameFretSpacing - FretboardView.FINGERING_VERTICAL_NUDGE) * this._staffMetrics.lineSpacing;
        fingeringTextField.x = cx - fingeringTextField.width / 2;
      }
      if (note.hasBarre) {
        if (note.barre === 'start') {
          barreStart = cx;
        } else {
          barreStop = cx;
        }
      }
      cy = -(FretboardView.SILENT_SIDE + FretboardView.SILENT_PADDING);
      for (let i = 0; i < stringsIdx.length; i++) {
        const stringIdx = stringsIdx[i];
        cx = (fretboard.strings - stringIdx) * this._staffMetrics.chordFrameStringSpacing - FretboardView.SILENT_SIDE / 2;
        this.graphics.moveTo(cx * this._staffMetrics.lineSpacing, cy * this._staffMetrics.lineSpacing);
        this.graphics.lineTo((cx + FretboardView.SILENT_SIDE) * this._staffMetrics.lineSpacing, (cy + FretboardView.SILENT_SIDE) * this._staffMetrics.lineSpacing);
        this.graphics.moveTo(cx * this._staffMetrics.lineSpacing, (cy + FretboardView.SILENT_SIDE) * this._staffMetrics.lineSpacing);
        this.graphics.lineTo((cx + FretboardView.SILENT_SIDE) * this._staffMetrics.lineSpacing, cy * this._staffMetrics.lineSpacing);
      }
      const effectiveFirstFretText = fretboard.effectiveFirstFretText;
      if (effectiveFirstFretText) {
        const firstFretTextField = this.makeFirstFretTextField(fretboard.firstFretLocation);
        this.addChild(firstFretTextField);
        firstFretTextField.text = effectiveFirstFretText;
        firstFretTextField.y = -firstFretTextField.getLineMetrics(0).ascent / 2;
        if (fretboard.firstFretLocation === _models_fretboard__WEBPACK_IMPORTED_MODULE_2__["default"].FIRST_FRET_LOCATION_LEFT) {
          firstFretTextField.x = -firstFretTextField.width * this._staffMetrics.lineSpacing;
        } else {
          firstFretTextField.x = this._staffMetrics.chordFrameStringSpacing * (fretboard.strings - 1) * this._staffMetrics.lineSpacing;
        }
      }
      if (!isNaN(barreStart)) {
        this.graphics.beginFill(0);
        this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.BEVEL);
        this.graphics.moveTo(barreStart, FretboardView.BARRE_PADDING * this._staffMetrics.lineSpacing);
        const centerX = barreStart + (barreStop - barreStart) / 2;
        this.graphics.curveTo(centerX, FretboardView.BARRE_BOTTOM_OF_CURVE * this._staffMetrics.lineSpacing, barreStop, FretboardView.BARRE_PADDING * this._staffMetrics.lineSpacing);
        this.graphics.curveTo(centerX, FretboardView.BARRE_TOP_OF_CURVE * this._staffMetrics.lineSpacing, barreStart, FretboardView.BARRE_PADDING * this._staffMetrics.lineSpacing);
        this.graphics.endFill();
      }
    }
  }
}

/***/ }),

/***/ 50406:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/hairpin-view.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HairpinView)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_hairpin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/hairpin */ 76088);
/* harmony import */ var _span_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./span-view */ 62309);



class HairpinView extends _span_view__WEBPACK_IMPORTED_MODULE_2__["default"] {
  constructor(context, span, start, pEnd, noteEditorService, rootDiv) {
    super(context, span, noteEditorService, rootDiv);
    this.w = NaN;
    this.broken = false;
    this.startGap = NaN;
    this.endGap = NaN;
    this.stroke = NaN;
    this.startHandle = null;
    this.endHandle = null;
    this.pEnd = null;
    const hairpin = span.notation;
    const angle = Math.atan2(pEnd.y - start.y, pEnd.x - start.x);
    this.rotation = 180 * angle / Math.PI;
    this.x = start.x;
    this.y = start.y;
    this.w = _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"].distance(pEnd, start);
    this.pEnd = pEnd;
    this.stroke = this.staffMetrics.hairpinThickness * this.staffMetrics.lineSpacing;
    const widthThreshold = this.staffMetrics.hairpinLongThreshold * this.staffMetrics.lineSpacing;
    const endGap = this.w > widthThreshold ? this.staffMetrics.hairpinLongEndGap : this.staffMetrics.hairpinShortEndGap;
    if (hairpin.type === _models_hairpin__WEBPACK_IMPORTED_MODULE_1__["default"].CRESCENDO) {
      this.startGap = this.toViewUnits(span.startBreak ? this.staffMetrics.hairpinBreakGap : 0);
      this.endGap = this.toViewUnits(endGap);
    } else {
      this.startGap = this.toViewUnits(endGap);
      this.endGap = this.toViewUnits(span.endBreak ? this.staffMetrics.hairpinBreakGap : 0);
    }
    this.initializeView();
  }
  updateView() {
    this.drawGraphics(0, Math.max(4, this.stroke));
    this.drawGraphics(1, this.stroke);
  }
  drawGraphics(alpha, strokeWidth) {
    this.graphics.lineStyle(strokeWidth, 0, alpha);
    this.graphics.moveTo(0, this.startGap / 2);
    this.graphics.lineTo(this.w, this.endGap / 2);
    this.graphics.moveTo(0, -this.startGap / 2);
    this.graphics.lineTo(this.w, -this.endGap / 2);
  }
  updateSelectionFeedback() {
    super.updateSelectionFeedback();
    if (this.context.document && this.context.document.isModelEditable(this.notation)) {
      if (this.selected) {
        if (!this.span.startBreak) {
          // todo
          // this.addHandle(
          //   0,
          //   0,
          //   new SpanStartDragMediator(this.context, this.span.notation)
          // );
        }
        if (!this.span.endBreak) {
          // todo
          // this.addHandle(
          //   this.w,
          //   0,
          //   new SpanEndDragMediator(this.context, this.span.notation)
          // );
        }
      }
    }
  }
}

/***/ }),

/***/ 95787:
/*!**************************************************!*\
  !*** ./src/app/note-editor/views/hyphen-view.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HyphenView)
/* harmony export */ });
/* harmony import */ var _layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/lyric-layout */ 43541);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score-object-view */ 39928);


class HyphenView extends _score_object_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get layout() {
    return this._layout;
  }
  get width() {
    // if (EditorFonts.useNewFonts) {
    //   var glyph = this._layout.decorationLayout._glyph;
    //   return EditorFonts.singleton.getTextGlyphWidth(glyph);
    // }
    return this.textMeasurement.textWidth(this._svg);
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    this._decorationView = null;
    this._layout = layout;
    this.initializeView();
  }
  updateStaffGeometry(staffLayout) {
    this._decorationView.y = -this.toViewUnits(_layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__["default"].lyricY(this.context.layoutContext, this.layout.startLyricLayout, staffLayout, this.layout.startLyricLayout.lyric));
  }
  updateView() {
    while (this.numChildren > 0) {
      this.removeChildAt(0);
    }
    this._decorationView = this.layout.decorationLayout.createDisplayObject(this.context);
    this.addChild(this._decorationView);
  }
}

/***/ }),

/***/ 74596:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/insertion-point.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ InsertionPoint)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class InsertionPoint extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get CHANGE_DELAY() {
    return 0.5;
  }
  static get MAX_ALPHA() {
    return 0.9;
  }
  constructor(context, height, noteEditorService, withoutSlop, position = 0) {
    super(noteEditorService);
    this._svg.classList.add('insertion');
    const staffMetrics = context.layoutContext.staffMetrics;
    this._context = context;
    this._lastChange = 0;
    this.graphics.clear();
    if (withoutSlop) {
      this.graphics.lineStyle(1, context.info.dragHighlightInsertionPointColor);
    } else {
      this.alpha = 0;
      this.graphics.beginFill(0, 0);
      const slopHeight = context.toViewUnits(staffMetrics.mouseNoteEntrySlopHeight);
      const slopWidth = context.toViewUnits(staffMetrics.mouseNoteEntrySlopWidth);
      this.graphics.drawRect(0, -slopHeight, slopWidth, height + 2 * slopHeight);
      this.graphics.endFill();
      this.graphics.lineStyle(1, 0);
      //   this.addEventListener(
      //     FlashEvent.ENTER_FRAME,
      //     RumtimeHelper.bindMethod(this, this.handleEnterFrame)
      //   );
      //   this.addEventListener(
      //     FlashEvent.REMOVED_FROM_STAGE,
      //     RumtimeHelper.bindMethod(this, this.handleRemovedFromStage)
      //   );
    }

    this.graphics.moveTo(0, position);
    this.graphics.lineTo(0, position + height);
  }
  handleRemovedFromStage(t) {
    // this.removeEventListener(
    //   FlashEvent.ENTER_FRAME,
    //   RumtimeHelper.bindMethod(this, this.handleEnterFrame)
    // );
  }
  handleEnterFrame(t) {
    this.visible = null != this.stage && (this.stage.focus == this._context.documentView || null == this.stage.focus);
    var changeTime = new Date().getTime() / 1000;
    if (this.visible && changeTime - this._lastChange >= InsertionPoint.CHANGE_DELAY) {
      this.alpha = 0 === this.alpha ? InsertionPoint.MAX_ALPHA : 0;
      this._lastChange = changeTime;
    }
  }
}

/***/ }),

/***/ 48101:
/*!*************************************************************!*\
  !*** ./src/app/note-editor/views/jsflight-document-view.ts ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ JsflightDocumentView)
/* harmony export */ });
/* harmony import */ var _score_document_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./score-document-view */ 47904);
/* harmony import */ var _view_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./view-context */ 65532);


class JsflightDocumentView extends _score_document_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get viewportWidth() {
    return this.stage.width;
  }
  get viewportHeight() {
    return this.stage.height;
  }
  get horizontalScrollPosition() {
    return this.controller.horizontalScrollPosition;
  }
  set horizontalScrollPosition(t) {
    this.controller.horizontalScrollPosition = t;
  }
  get verticalScrollPosition() {
    return this.controller.verticalScrollPosition;
  }
  set verticalScrollPosition(t) {
    this.controller.verticalScrollPosition = t;
  }
  constructor(editorFonts, rootDiv, noteEditorService, overlay) {
    super(editorFonts, rootDiv, noteEditorService, overlay);
    this.controller = null;
    this.scoreController = null;
    this.scoreDocumentController = null;
    this.domElements = null;
    this.scrollToPage = false;
  }
  publicCreateChildren() {
    this.createChildren();
  }
  createViewContext() {
    return new _view_context__WEBPACK_IMPORTED_MODULE_1__["default"](this.viewInfo, this._context, this.scoreController, this.scoreDocumentController, this, this.stage, this.noteEditorService, this.viewInfo.buildIncrementally, _view_context__WEBPACK_IMPORTED_MODULE_1__["default"].FLOW_VERTICAL);
  }
  updateScoreDimensions() {
    super.updateScoreDimensions();
    if (!this._overlay) {
      this.controller.updateScoreDivDimensions(this.width, this.height);
    }
  }
  getViewFrame() {
    return super.getViewFrame();
  }
  scrollToPoint(point) {
    this._scrolling = true;
    this.controller.animateScrollPosition(point, () => {
      this._scrolling = false;
    });
  }
  activateFocusManager() {}
  deactivateFocusManager() {}
  editAnnotation(t) {}
}

/***/ }),

/***/ 25059:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/views/label-notation-view.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LabelNotationView)
/* harmony export */ });
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-notation-view */ 16089);

class LabelNotationView extends _text_notation_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
  }
  updateLabelNotationText(text) {
    this.layout.updateLabelNotationText(text);
    const sprite = this.getChildAt(0);
    if (sprite) {
      sprite.getChildAt(0).text = text;
    }
  }
}

/***/ }),

/***/ 78479:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/line-notation-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineNotationView)
/* harmony export */ });
/* harmony import */ var _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/glyph-series */ 56494);
/* harmony import */ var _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../glyph/text-glyph */ 37857);
/* harmony import */ var _layouts_multi_rest_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layouts/multi-rest-view */ 32916);
/* harmony import */ var _models_line_notation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/line-notation */ 93207);
/* harmony import */ var _models_multi_rest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/multi-rest */ 92488);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _models_trill__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/trill */ 42550);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _dashed_line_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./dashed-line-view */ 85926);
/* harmony import */ var _line_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./line-view */ 36764);
/* harmony import */ var _span_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./span-view */ 62309);











class LineNotationView extends _span_view__WEBPACK_IMPORTED_MODULE_10__["default"] {
  static get DEFAULT_DASH_LENGTH() {
    return 4;
  }
  static get DEFAULT_DASH_SPACING() {
    return 3;
  }
  static get DEFAULT_BRACKET_LENGTH() {
    return 4;
  }
  static get LINE_TYPE_DASHED() {
    return 'dashed';
  }
  static get LINE_TYPE_SOLID() {
    return 'solid';
  }
  static get LINE_TYPE_MULTIREST() {
    return 'multirest';
  }
  static get LINE_TYPE_WAVY() {
    return 'wavy';
  }
  static get LINE_TYPE_NONE() {
    return 'none';
  }
  static get BRACKET_UP() {
    return 'bracketUp';
  }
  static get BRACKET_DOWN() {
    return 'bracketDown';
  }
  static get BRACKET_MIDDLE() {
    return 'bracketMiddle';
  }
  static get BRACKET_NONE() {
    return 'bracketNone';
  }
  get isItalic() {
    return this.lineNotation.isItalic;
  }
  get isBold() {
    return this.lineNotation.isBold;
  }
  get font() {
    return this.staffMetrics.staffTextFont;
  }
  get fontSize() {
    return this.calculateFontSize();
  }
  get lineSettings() {
    let lineType,
      bracketType,
      bracketPosition,
      position = 'bottom';
    switch (this.lineNotation.type) {
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_TRILL:
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_VIBRATO:
        lineType = LineNotationView.LINE_TYPE_WAVY;
        bracketType = LineNotationView.BRACKET_NONE;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_OCTAVE_DOWN:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_UP;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_OCTAVE_UP:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_DOWN;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_PEDAL:
        lineType = LineNotationView.LINE_TYPE_NONE;
        bracketType = LineNotationView.BRACKET_NONE;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_SOLID:
        lineType = LineNotationView.LINE_TYPE_SOLID;
        bracketType = LineNotationView.BRACKET_NONE;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_SOLID_BRACKET_DOWN:
        lineType = LineNotationView.LINE_TYPE_SOLID;
        bracketPosition = bracketType = LineNotationView.BRACKET_DOWN;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_SOLID_BRACKET_MIDDLE:
        lineType = LineNotationView.LINE_TYPE_SOLID;
        bracketPosition = bracketType = LineNotationView.BRACKET_MIDDLE;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_SOLID_BRACKET_UP:
        lineType = LineNotationView.LINE_TYPE_SOLID;
        bracketPosition = bracketType = LineNotationView.BRACKET_UP;
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_DASHED:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_NONE;
        position = 'middle';
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_DASHED_FINAL_DOWN:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_DOWN;
        position = 'middle';
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_PALM_MUTE:
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_LET_VIBRATE:
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_DASHED_FINAL_MIDDLE:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_MIDDLE;
        position = 'middle';
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_DASHED_FINAL_UP:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_UP;
        position = 'middle';
        break;
      case _models_line_notation__WEBPACK_IMPORTED_MODULE_3__["default"].TYPE_MULTIREST:
        lineType = LineNotationView.LINE_TYPE_MULTIREST;
        bracketPosition = LineNotationView.BRACKET_MIDDLE;
        bracketType = LineNotationView.BRACKET_MIDDLE;
        position = 'top';
        break;
      default:
        lineType = LineNotationView.LINE_TYPE_DASHED;
        bracketType = LineNotationView.BRACKET_NONE;
        break;
    }
    return [lineType, bracketType, bracketPosition, position, 0];
  }
  get bracketLength() {
    return this.lineNotation.bracketLength > 0 ? this.toViewUnits(this.lineNotation.bracketLength) : this.toViewUnits(this.staffMetrics.lineNotationBracketHeight);
  }
  constructor(context, span, pStart, pEnd, editorFonts, rootDiv, noteEditorService) {
    super(context, span, noteEditorService, rootDiv);
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this.lineNotation = span.notation;
    this.x = pStart.x;
    this.y = pStart.y;
    this.w = Math.max(0, pEnd.x - pStart.x);
    this.pEnd = pEnd;
    this.stroke = this.staffMetrics.lineNotationThickness * this.staffMetrics.lineSpacing;
    this.initializeView();
  }
  updateView() {
    let alpha = 1;
    if (this.lineNotation instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_4__["default"]) {
      if (!this.span.startBreak && this.span.staffLayout.getMeasureLayoutAt(this.span.notation.measure.index - this.span.staffLayout.startMeasureIndex).multiRestEnabled) {
        this.w += this.toViewUnits(0.25);
      } else {
        if (this.context.info.printView) {
          return;
        }
        alpha = 0.3;
        this.w -= this.toViewUnits(1);
      }
    }
    this.drawGraphics(alpha);
  }
  drawGraphics(alpha) {
    let startTextDisplayObject;
    const settings = this.lineSettings || [];
    const lineType = settings[0],
      bracketType = settings[1],
      bracketPosition = settings[2],
      position = settings[3],
      topYOffset = settings[4];
    let paddingLeft = 0,
      paddingRight = 0;
    const layoutContext = this.context.layoutContext;
    if (!this.span.startBreak) {
      const lineNotationStart = layoutContext.foundry.getLineNotationStart(this.lineNotation.type);
      if (lineNotationStart) {
        startTextDisplayObject = lineNotationStart.createDisplayObject(this.context.info);
        paddingLeft = lineNotationStart.width + lineNotationStart.spacingX;
        startTextDisplayObject.y = lineNotationStart.dy;
        this.addChild(startTextDisplayObject);
      }
      if (this.lineNotation.startingText) {
        const textFormat = this.createTextFormat();
        const startTextGlyph = new _glyph_text_glyph__WEBPACK_IMPORTED_MODULE_1__["default"](textFormat, this.lineNotation.startingText, this.editorFonts, null, null, null, null, this.rootDiv, this.noteEditorService);
        const startTextDisplayObject = startTextGlyph.createDisplayObject();
        if (position === 'top') {
          startTextDisplayObject.y += startTextGlyph.originY + this.staffMetrics.lineNotationYPosition + topYOffset;
          startTextDisplayObject.x += 4;
        } else if (position === 'middle') {
          startTextDisplayObject.y += 0.25 * textFormat.size;
          paddingLeft = startTextGlyph.width;
        } else {
          paddingLeft = startTextGlyph.width;
        }
        this.addChild(startTextDisplayObject);
      }
      if (this.lineNotation instanceof _models_trill__WEBPACK_IMPORTED_MODULE_6__["default"]) {
        const trill = this.lineNotation;
        if (trill.accidental) {
          const scoreAccidental = trill.scoreAccidental;
          const foundryGlyph = this.context.layoutContext.foundry.getAccidental(scoreAccidental);
          startTextDisplayObject = foundryGlyph.createDisplayObject(this.context.info);
          startTextDisplayObject.y = foundryGlyph.dy - lineNotationStart.height - this.staffMetrics.trillAccidentalYSpacing * this.staffMetrics.lineSpacing;
          paddingLeft += this.staffMetrics.trillAccidentalXSpacing * this.staffMetrics.lineSpacing;
          startTextDisplayObject.x = paddingLeft;
          paddingLeft += foundryGlyph.width;
          startTextDisplayObject.scaleX = startTextDisplayObject.scaleY = this.staffMetrics.trillAccidentalScale;
          this.addChild(startTextDisplayObject);
        }
      }
      this.graphics.lineStyle(this.stroke, 0, alpha);
      if (bracketPosition == LineNotationView.BRACKET_DOWN) {
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(0, this.bracketLength);
      } else if (bracketPosition === LineNotationView.BRACKET_UP) {
        this.graphics.moveTo(0, 0);
        this.graphics.lineTo(0, -this.bracketLength);
      } else if (bracketPosition === LineNotationView.BRACKET_MIDDLE) {
        this.graphics.moveTo(0, this.bracketLength / 2);
        this.graphics.lineTo(0, -this.bracketLength / 2);
      }
    }
    if (!this.span.endBreak) {
      let lineNotationEnd = layoutContext.foundry.getLineNotationEnd(this.lineNotation.type);
      if (lineNotationEnd) {
        startTextDisplayObject = lineNotationEnd.createDisplayObject(this.context.info);
        paddingRight = lineNotationEnd.width + lineNotationEnd.spacingX;
        startTextDisplayObject.x = this.w - lineNotationEnd.width;
        startTextDisplayObject.y = lineNotationEnd.dy;
        this.addChild(startTextDisplayObject);
      }
      this.graphics.lineStyle(this.stroke, 0, alpha);
      if (bracketType === LineNotationView.BRACKET_DOWN) {
        this.graphics.moveTo(this.w, -this.toViewUnits(this.lineNotation.ascent));
        this.graphics.lineTo(this.w, -this.toViewUnits(this.lineNotation.ascent) + this.bracketLength);
      } else if (bracketType === LineNotationView.BRACKET_UP) {
        this.graphics.moveTo(this.w, -this.toViewUnits(this.lineNotation.ascent));
        this.graphics.lineTo(this.w, -this.toViewUnits(this.lineNotation.ascent) - this.bracketLength);
      } else if (bracketType === LineNotationView.BRACKET_MIDDLE) {
        this.graphics.moveTo(this.w, -this.toViewUnits(this.lineNotation.ascent) + this.bracketLength / 2);
        this.graphics.lineTo(this.w, -this.toViewUnits(this.lineNotation.ascent) - this.bracketLength / 2);
      }
    }
    if (lineType === LineNotationView.LINE_TYPE_DASHED) {
      const lengthSpacing = [LineNotationView.DEFAULT_DASH_LENGTH, LineNotationView.DEFAULT_DASH_SPACING];
      const dashedView = new _dashed_line_view__WEBPACK_IMPORTED_MODULE_8__["default"](0, 0, this.w - (paddingLeft + paddingRight), -this.toViewUnits(this.lineNotation.ascent), lengthSpacing, this.staffMetrics, this.noteEditorService, this.context.info);
      dashedView.x = paddingLeft;
      this.addChild(dashedView);
    } else if (lineType === LineNotationView.LINE_TYPE_WAVY) {
      const lineNotationSegment = this.context.layoutContext.foundry.getLineNotationSegment(lineType);
      const glyphSeries = new _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__["default"]([], lineNotationSegment.spacingX, this.noteEditorService);
      glyphSeries.addRepeatingGlyph(lineNotationSegment, this.w - (paddingLeft + paddingRight));
      const displayObject = glyphSeries.createDisplayObject(this.context.info);
      displayObject.x = paddingLeft;
      displayObject.y = lineNotationSegment.dy;
      this.addChild(displayObject);
    } else if (lineType === LineNotationView.LINE_TYPE_MULTIREST) {
      if (!this.span.startBreak) {
        const timeSignature = this.context.layoutContext.foundry.getTimeSignature(this.lineNotation.bars);
        const startTextDisplayObject = timeSignature.createDisplayObject(this.context.info);
        startTextDisplayObject.x = this.w / 2 - timeSignature.width / 2;
        startTextDisplayObject.y = -timeSignature.height - this.toViewUnits(2);
        startTextDisplayObject.alpha = alpha;
        this.addChild(startTextDisplayObject);
      }
      const multiRestView = new _layouts_multi_rest_view__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0, this.w - (paddingLeft + paddingRight), -this.toViewUnits(this.lineNotation.ascent), this.staffMetrics, alpha, this.noteEditorService);
      multiRestView.x = paddingLeft;
      multiRestView.alpha = alpha;
      this.addChild(multiRestView);
    } else if (lineType === LineNotationView.LINE_TYPE_SOLID) {
      const lineView = new _line_view__WEBPACK_IMPORTED_MODULE_9__["default"](0, 0, this.w - (paddingLeft + paddingRight), -this.toViewUnits(this.lineNotation.ascent), this.toViewUnits(this.staffMetrics.lineThickness), this.staffMetrics, this.noteEditorService, this.context.info);
      lineView.x = paddingLeft;
      this.addChild(lineView);
    }
  }
  createTextFormat() {
    return new _text_text_format__WEBPACK_IMPORTED_MODULE_7__["default"](this.font, this.fontSize, null, this.isBold, this.isItalic);
  }
  showHandles() {
    return !(this.lineNotation instanceof _models_multi_rest__WEBPACK_IMPORTED_MODULE_4__["default"]) && !(this.lineNotation instanceof _models_repeat_ending__WEBPACK_IMPORTED_MODULE_5__["default"]);
  }
  updateSelectionFeedback() {
    super.updateSelectionFeedback();
    if (this.context.document && this.context.document.isModelEditable(this.notation) && this.showHandles()) {
      if (this.selected) {
        if (!this.span.startBreak) {
          // todo
          // this.addHandle(
          //   0,
          //   0,
          //   new SpanStartDragMediator(
          //     this.context,
          //     this.lineNotation,
          //     this.lineNotation.allowAscent
          //   )
          // );
        }
        if (!this.span.endBreak) {
          // todo
          // this.addHandle(
          //   this.w,
          //   -this.toViewUnits(this.lineNotation.ascent),
          //   new SpanEndDragMediator(
          //     this.context,
          //     this.lineNotation,
          //     this.lineNotation.allowAscent
          //   )
          // );
        }
      } else {
        this.removeHandles();
      }
    }
  }
  calculateFontSize() {
    return this.staffMetrics.baseFontSize * this.staffMetrics.lineNotationFontSize;
  }
}

/***/ }),

/***/ 36764:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/line-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LineView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);


class LineView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, endX, endY, strokeWidth, staffMetrics, noteEditorService, viewInfo = {}) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    if (viewInfo && !viewInfo.printView) {
      this.graphics.lineStyle(Math.max(5, strokeWidth), 0, 0);
      this.graphics.moveTo(0, 0);
      this.graphics.lineTo(endX, endY);
    }
    this.graphics.lineStyle(strokeWidth, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.moveTo(0, 0);
    this.graphics.lineTo(endX, endY);
  }
}

/***/ }),

/***/ 63919:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/views/lyric-extender-view.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LyricExtenderView)
/* harmony export */ });
/* harmony import */ var _layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/lyric-layout */ 43541);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score-object-view */ 39928);


class LyricExtenderView extends _score_object_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get layout() {
    return this._layout;
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    this._decorationView = null;
    this._layout = layout;
    this.initializeView();
  }
  updateStaffGeometry(staffLayout) {
    this._decorationView.y = -this.toViewUnits(_layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__["default"].lyricY(this.context.layoutContext, this.layout.startLyric, staffLayout, this.layout.startLyric.lyric));
  }
  updateView() {
    while (this.numChildren > 0) {
      this.removeChildAt(0);
    }
    this._decorationView = this.layout.decorationLayout.createDisplayObject(this.context);
    this.addChild(this._decorationView);
  }
}

/***/ }),

/***/ 48997:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/lyric-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ LyricView)
/* harmony export */ });
/* harmony import */ var _layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/lyric-layout */ 43541);
/* harmony import */ var _models_lyric__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/lyric */ 10914);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text-notation-view */ 16089);




class LyricView extends _text_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get lyricLayout() {
    return this.layout;
  }
  get lyric() {
    return this.lyricLayout.lyric;
  }
  constructor(context, layout, editorFonts, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
    this.staffLayout = null;
    this.editorFonts = editorFonts;
  }
  static addLyric(context, noteSet, line, noninitial, editorFonts, rootDiv, noteEditorService) {
    // context.controller.document.undoHistory.openGroup('Add Lyrics');
    let direction = null;
    if (noteSet.lyrics.length > 0) {
      direction = noteSet.lyrics[0].direction;
    }
    const lyric = new _models_lyric__WEBPACK_IMPORTED_MODULE_1__["default"](' ', line, false, false, noninitial, direction);
    noteSet.addLyric(lyric);
    context.document.validateNow();
    const lyricField = LyricView.createLyricField(context, lyric, null, null, null, editorFonts, rootDiv, noteEditorService);
    // lyricField.addEventListener(FlexEvent.VALUE_COMMIT, function (e) {
    //   LyricView.commitLyric(context, lyric, lyricField);
    // });
  }

  editText() {
    var lyricField = LyricView.createLyricField(this.context, this.lyric, this.lyricLayout, this.staffLayout, null, this.editorFonts, this.rootDiv, this.noteEditorService);
    if ('' === this.lyric.text) {
      this.lyric.text = ' ';
    }
    this.context.document.validateNow();
    this.visible = false;
    var that = this;
    // lyricField.addEventListener(FlexEvent.VALUE_COMMIT, function (r) {
    //   LyricView.commitLyric(that.context, that.lyric, lyricField),
    //     (that.visible = true);
    // });
  }

  static commitLyric(context, lyric, lyricField) {
    const noteSet = lyric.noteSet;
    const escapeKey = !lyricField.commitChar || lyricField.commitChar === String.fromCharCode(27);
    const enterKey = lyricField.commitChar && lyricField.commitChar === String.fromCharCode(13);
    if (lyricField.commitChar != null) {
      if (!enterKey || !lyric.continued) {
        lyric.continued = '-' === lyricField.commitChar;
      }
      if (!enterKey || !lyric.extend) {
        lyric.extend = '_' === lyricField.commitChar;
      }
      while (lyric.text.length > 0 && lyric.text.charAt(lyric.text.length - 1) === lyricField.commitChar) {
        lyric.text = lyric.text.substring(0, lyric.text.length - 1);
      }
    }
    if (lyric.text !== '' && (enterKey || escapeKey)) {
      // context.controller.document.undoHistory.openGroupName = 'Remove Lyrics';
      if (noteSet) {
        noteSet.removeLyric(lyric);
      }
      if (lyricField.commitChar !== ' ') {
        return;
      }
    } else {
      lyric.text = lyric.text.replace(/\+/g, ' ');
    }
    if (' ' == lyricField.commitChar || '-' == lyricField.commitChar || '_' == lyricField.commitChar) {
      let nextLyric,
        nextNoteSet = null;
      if (noteSet) {
        nextNoteSet = noteSet.nextNoteSet(true);
      }
      if (nextNoteSet) {
        nextLyric = nextNoteSet.getLyricAtLine(lyric.line);
        if (!nextLyric) {
          nextNoteSet.addLyric(new _models_lyric__WEBPACK_IMPORTED_MODULE_1__["default"](' ', lyric.line));
        }
      }
      context.document.validateNow();
      if (nextNoteSet) {
        if (nextLyric) {
          // nextLyric.dispatchEvent(
          //     new NotationEvent(NotationEvent.EDIT)
          //   )
        } else {
          context.controller.selectNotation(nextNoteSet);
          context.documentController.addLyric(lyric.line, '-' == lyricField.commitChar);
        }
      }
    } else {
      if (enterKey) {
        context.controller.selectNotation(noteSet);
        context.documentController.addLyric(lyric.line + 1);
      }
    }
  }
  updateGeometry() {
    super.updateGeometry();
    this.y = -this.toViewUnits(_layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__["default"].lyricY(this.context.layoutContext, this.lyricLayout, this.staffLayout, this.lyric, true));
  }
  static createLyricField(context, lyric, lyricLayout, staffLayout, editGroupName, editorFonts, rootDiv, noteEditorService) {
    const staffMetrics = context.layoutContext.staffMetrics;
    const editField = _text_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].createEditField(context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.CENTER, null,
    //  staffMetrics.lyricsFont
    staffMetrics.lyricsSize, staffMetrics.lyricsBold, staffMetrics.lyricsItalic, lyric, 1, _layouts_lyric_layout__WEBPACK_IMPORTED_MODULE_0__["default"].lyricY(context.layoutContext, lyricLayout, staffLayout, lyric), editGroupName, editorFonts, rootDiv, noteEditorService);
    editField.autoCommitChars = ' -_' + String.fromCharCode(13) + String.fromCharCode(27);
    return editField;
  }
}

/***/ }),

/***/ 40416:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/measure-deleter.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureDeleter)
/* harmony export */ });
/* harmony import */ var _embed_display_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embed-display-object */ 99373);
/* harmony import */ var _roll_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./roll-button */ 85726);


class MeasureDeleter extends _roll_button__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get width() {
    return 14;
  }
  get height() {
    return 14;
  }
  constructor(handle, measure, noteEditorService) {
    super(new _embed_display_object__WEBPACK_IMPORTED_MODULE_0__["default"](noteEditorService), new _embed_display_object__WEBPACK_IMPORTED_MODULE_0__["default"](noteEditorService), noteEditorService);
    this._handle = handle;
    this._measure = measure;
    const cy = handle.handleHeight / 2;
    this.graphics.beginFill(0xb0b0b0, 1);
    this.graphics.drawCircle(8, cy, 5);
    this.graphics.endFill();
    this.graphics.beginFill(0xffffff, 1);
    this.graphics.drawRect(5.5, cy / 2 + 2.5, 5, 2);
    this.graphics.endFill();
    this.graphics.beginFill(0, 0);
    this.graphics.drawRect(0, 0, handle.handleHeight, handle.handleHeight);
    this.graphics.endFill();
  }
  destroy() {
    super.destroy();
    this._measure = null;
  }
  handleMouseDown(evt) {
    // this._handle.dispatchEvent(
    //   new MeasureEditEvent(
    //     MeasureEditEvent.MEASURE_EDIT,
    //     MeasureEditEvent.DELETE,
    //     this._measure
    //   )
    // );
    super.handleMouseDown(evt);
    this.noteEditorService.onMeasureHandleClick.emit({
      kind: 'delete',
      measure: this._measure,
      view: this._handle
    });
  }
}

/***/ }),

/***/ 57852:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/views/measure-handle.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureHandle)
/* harmony export */ });
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../glyph/described-glyph-foundry */ 83446);
/* harmony import */ var _models_measure__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/measure */ 29839);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _measure_deleter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./measure-deleter */ 40416);
/* harmony import */ var _measure_inserter__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./measure-inserter */ 4776);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./score-object-view */ 39928);
/* harmony import */ var _score_text_field__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./score-text-field */ 61474);
/* harmony import */ var _view_context__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./view-context */ 65532);










class MeasureHandle extends _score_object_view__WEBPACK_IMPORTED_MODULE_7__["default"] {
  static get _lastRolled() {
    return MeasureHandle.lastRolled;
  }
  static set _lastRolled(t) {
    MeasureHandle.lastRolled = t;
  }
  get addAfter() {
    return this._addAfter;
  }
  get active() {
    return this._rolled || this.aboutToBeActive;
  }
  get layout() {
    return this._layout;
  }
  get measure() {
    return this.context.document.score.systemStaff.getMeasureAt(this._layout.measure.index);
  }
  get selected() {
    if (this.context.document == null) {
      return false;
    }
    const selection = this.context.document.selection;
    return selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"] && selection.includes(this.measure);
  }
  get handleHeight() {
    return this.context.info.measureHandleHeight;
  }
  get handleWidth() {
    return this.toViewUnits(this._layout.constraint.layoutVector.length);
  }
  get measureDeleterWidth() {
    if (this._delete) {
      if (this.context.cachedMeasureDeleterWidth === 0) {
        this.context.cachedMeasureDeleterWidth = this._delete.width;
      }
      return this.context.cachedMeasureDeleterWidth;
    } else {
      return 0;
    }
  }
  get playButtonWidth() {
    if (this._playFrom) {
      if (this.context.cachedPlayButtonWidth === 0) {
        this.context.cachedPlayButtonWidth = this._playFrom.width;
      }
      return this.context.cachedPlayButtonWidth;
    } else {
      return 0;
    }
  }
  constructor(context, layout, systemView, editorFonts, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this._textField = null;
    this._addBefore = null;
    this._addAfter = null;
    this._playFrom = null;
    this._playLoop = null;
    this._delete = null;
    this._breakObject = null;
    this._rolled = false;
    this._rollEvent = null;
    this.aboutToBeActive = false;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this._layout = layout;
    this._systemView = systemView;
    this._measureHandleMediator = this.context.registerMeasureView(this);
    this.systemStaffMeasure = this.context.document.score.systemStaff.getMeasureAt(this._layout.measure.index);
    this.initializeView();
    this.useHandCursor = true;
    this.buttonMode = true;
    // if (ViewContext.useRolloverEvents) {
    //   this.addEventListener(
    //     FlashMouseEvent.CLICK,
    //     RumtimeHelper.bindMethod(this, this.addRollHighlight)
    //   );
    //   this.addEventListener(
    //     FlashMouseEvent.ROLL_OVER,
    //     RumtimeHelper.bindMethod(this, this.addRollHighlight)
    //   );
    //   this.addEventListener(
    //     FlashMouseEvent.ROLL_OUT,
    //     RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    //   );
    // } else {
    //   this.addEventListener(
    //     FlashMouseEvent.CLICK,
    //     RumtimeHelper.bindMethod(this, this.handleClickAsRoll)
    //   );
    // }
  }

  removeListeners() {
    if (_view_context__WEBPACK_IMPORTED_MODULE_9__["default"].useRolloverEvents) {
      // this.removeEventListener(
      //   FlashMouseEvent.CLICK,
      //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
      // );
      // this.removeEventListener(
      //   FlashMouseEvent.ROLL_OVER,
      //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
      // );
      // this.removeEventListener(
      //   FlashMouseEvent.ROLL_OUT,
      //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
      // );
    } else {
      // this.removeEventListener(
      //   FlashMouseEvent.CLICK,
      //   RumtimeHelper.bindMethod(this, this.handleClickAsRoll)
      // );
    }
  }
  destroyChildren() {
    if (this._addBefore) {
      this._addBefore.destroy();
      this.removeChild(this._addBefore);
    }
    if (this._addAfter) {
      this._addAfter.destroy();
      this.removeChild(this._addAfter);
    }
    if (this._delete) {
      this._delete.destroy();
      this.removeChild(this._delete);
    }
    if (this._playFrom) {
      this._playFrom.destroy();
      this.removeChild(this._playFrom);
    }
    if (this._playLoop) {
      this._playLoop.destroy();
      this.removeChild(this._playLoop);
    }
    if (this._breakObject) {
      this.removeChild(this._breakObject);
    }
    if (this._textField) {
      this._textField.destroy();
      this.removeChild(this._textField);
    }
  }
  destroy() {
    this._measureHandleMediator.destroy();
    this._systemView = null;
    this.systemStaffMeasure = null;
    super.destroy();
  }
  updateView() {
    this.destroyChildren();
    const option = {
      model: this.measure,
      property: 'measureNumber',
      editGroupName: '',
      markdown: false,
      bold: this.measure.isMeasureNumberCustomized,
      underline: this.measure.isMeasureNumberCustomized
    };
    this._textField = new _score_text_field__WEBPACK_IMPORTED_MODULE_8__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_4__.TextFieldAutoSize.LEFT, this.context.info.handleFont, this.context.info.handleTextSize / this.staffMetrics.baseFontSize, this.editorFonts, option, this.rootDiv, this.noteEditorService);
    if (this.measure.isMeasureNumberCustomized) {
      this._textField.setColor(0xea5523);
    }
    this._textField.width = this.handleWidth - 2;
    this.addChild(this._textField);
    if (this.measure) {
      if (this.context.controller.document.editable) {
        this._addBefore = new _measure_inserter__WEBPACK_IMPORTED_MODULE_6__["default"](this, this.measure, false, this.noteEditorService);
        this._addBefore.visible = this.selected;
        this._addBefore.y = this.context.info.measureInserterOffset;
        this.addChild(this._addBefore);
        this._addAfter = new _measure_inserter__WEBPACK_IMPORTED_MODULE_6__["default"](this, this.measure, true, this.noteEditorService);
        this._addAfter.visible = this.selected;
        this._addAfter.y = this.context.info.measureInserterOffset;
        this.addChild(this._addAfter);
        this._addBefore.scaleX = this._addBefore.scaleY = this._addAfter.scaleX = this._addAfter.scaleY = this.context.info.inserterScale;
        this._delete = new _measure_deleter__WEBPACK_IMPORTED_MODULE_5__["default"](this, this.measure, this.noteEditorService);
        this._delete.visible = this.selected;
        this._delete.x = 0;
        this._delete.y = (this.context.info.measureHandleHeight - this._delete.height) / 2;
        this.addChild(this._delete);
      }
      if (!this.context.documentView.viewInfo.hidePlaybackControls) {
        // this._playFrom = new MeasurePlayer(
        //   this,
        //   this.measure,
        //   this.noteEditorService
        // );
        // this._playFrom.visible = this.selected;
        // this._playFrom.x = this._textField.width + 4;
        // this._playFrom.y =
        //   (this.context.info.measureHandleHeight - this._playFrom.height) / 2;
        // this.addChild(this._playFrom);
        // this._playLoop = new MeasurePlayer(
        //   this,
        //   this.measure,
        //   this.noteEditorService,
        //   true
        // );
        // this._playLoop.visible = this.selected;
        // this._playLoop.x = this._playFrom.x + this.playButtonWidth;
        // this._playLoop.y =
        //   (this.context.info.measureHandleHeight - this._playLoop.height) / 2;
        // this.addChild(this._playLoop);
      }
      const measureBreakType = this._layout.systemMeasureLayout.breakType;
      if (measureBreakType != null) {
        let barlineType, barline;
        switch (measureBreakType) {
          case _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].PAGE_BREAK_TYPE:
            barlineType = _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].PAGE_BREAK;
            break;
          case _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].SYSTEM_BREAK_TYPE:
            barlineType = _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].SYSTEM_BREAK;
            break;
          case _models_measure__WEBPACK_IMPORTED_MODULE_3__["default"].KEEP_WITH_NEXT_TYPE:
            barlineType = _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].KEEP_WITH_NEXT;
            break;
        }
        if (barlineType === _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].PAGE_BREAK || barlineType === _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].SYSTEM_BREAK) {
          barline = this.context.layoutContext.foundry.getBarline(barlineType);
          this._breakObject = barline.createDisplayObject(this.context.info);
          this._breakObject.x = this.handleWidth;
          this._breakObject.y = this.context.info.measureHandleHeight;
          this.addChild(this._breakObject);
        } else if (barlineType === _glyph_described_glyph_foundry__WEBPACK_IMPORTED_MODULE_2__["default"].KEEP_WITH_NEXT) {
          barline = this.context.layoutContext.foundry.getKeepWithNext();
          this._breakObject = barline.createDisplayObject(this.context.info);
          this._breakObject.x = this.handleWidth;
          this._breakObject.y = this.context.info.measureHandleHeight;
          this.addChild(this._breakObject);
        }
      }
    }
  }
  forceMeasureNumber(evt) {
    this._textField.handleJSClick(evt);
  }
  updateStatus() {
    this.graphics.clear();
    if (this.handleWidth <= 0) {
      this.removeChild(this._textField);
    } else {
      this.visible = this._layout.showHandle;
      let selected = false;
      let measureSelection = null;
      if (this.context.document != null && this.measure != null) {
        const selection = this.context.document.selection;
        if (selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_1__["default"] || selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
          const measureSelection = selection;
          selected = measureSelection.includes(this.measure);
        }
      }
      this.graphics.beginFill(0, 0);
      this.graphics.drawRect(0, 0, this.handleWidth, this.context.info.measureHandleMouseHeight);
      this.graphics.endFill();
      if (selected) {
        this.graphics.beginFill(this.context.info.measureHighlightColor, this.context.info.measureHighlightAlpha);
      } else {
        if (this._rolled) {
          this.graphics.lineStyle(1, this.context.info.measureHandleHighlightColor);
        }
        this.graphics.beginFill(this.context.info.handleColor, this.context.info.measureHandleAlpha);
      }
      this.graphics.drawRect(0, 0, this.handleWidth - 2, this.context.info.measureHandleHeight);
      this.graphics.endFill();
      if (measureSelection != null && this.context.document.dragHighlight != null) {
        const dragHighlightStart = this.context.document.dragHighlight.start;
        if (dragHighlightStart.measureIndex === this._layout.measure.index) {
          this.graphics.lineStyle(2, this.context.info.dragHighlightInsertionPointColor);
          this.graphics.moveTo(-1, -2);
          this.graphics.lineTo(-1, this.context.info.measureHandleHeight + 2);
        } else {
          if (dragHighlightStart.measureIndex === this._layout.measure.index + 1 && dragHighlightStart.measureIndex === this.context.document.score.numMeasures) {
            this.graphics.lineStyle(2, this.context.info.dragHighlightInsertionPointColor);
            this.graphics.moveTo(this.handleWidth + 1, -2);
            this.graphics.lineTo(this.handleWidth + 1, this.context.info.measureHandleHeight + 2);
          }
        }
      }
      this._textField.width = this.handleWidth - 2;
      if (this._addBefore != null && this._addAfter != null) {
        this._addBefore.visible = this.selected;
        this._addAfter.visible = this.selected;
        this._addAfter.x = this.handleWidth;
      }
      if (this._playFrom != null) {
        this._playFrom.visible = this.selected;
      }
      if (this._playLoop != null) {
        this._playLoop.visible = this.selected;
      }
      if (this._delete != null) {
        this._delete.x = this.handleWidth - this.measureDeleterWidth - 4;
        this._delete.visible = this.selected;
      }
      if (this._breakObject != null) {
        this._breakObject.x = this.handleWidth;
      }
    }
  }
  addRollHighlight(evt) {
    this._rollEvent = evt;
    if (MeasureHandle._lastRolled != null && MeasureHandle._lastRolled != this) {
      MeasureHandle._lastRolled.removeRollHighlight(evt);
    }
    MeasureHandle._lastRolled = this;
    this._rolled = !evt.buttonDown;
    this.updateStatus();
  }
  handleClickAsRoll(evt) {
    if (this.context.controller.isNotationInteractionAvailable()) {
      this.showControls();
    }
  }
  showControls() {
    if (MeasureHandle._lastRolled != null && MeasureHandle._lastRolled != this) {
      MeasureHandle._lastRolled._rolled = false;
      MeasureHandle._lastRolled.updateStatus();
    }
    MeasureHandle._lastRolled = this;
    this._rolled = true;
    this.updateStatus();
    if (this._systemView != null) {
      this._systemView.showHandles();
    }
  }
  removeRollHighlight(evt) {
    throw new Error('Not Implemented');
    if (this._rollEvent != null) {}
  }
  updateMeasureIndex() {
    this._textField.text = this._layout.measure.measureNumber.toString();
  }
}
MeasureHandle.lastRolled = null;

/***/ }),

/***/ 4776:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/views/measure-inserter.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureInserter)
/* harmony export */ });
/* harmony import */ var _embed_display_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./embed-display-object */ 99373);
/* harmony import */ var _roll_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./roll-button */ 85726);


class MeasureInserter extends _roll_button__WEBPACK_IMPORTED_MODULE_1__["default"] {
  get right() {
    return Math.max(this._handle.handleHeight, this.w / 2, this.h / 2);
  }
  constructor(handle, measure, addAfter, noteEditorService) {
    super(new _embed_display_object__WEBPACK_IMPORTED_MODULE_0__["default"](noteEditorService), new _embed_display_object__WEBPACK_IMPORTED_MODULE_0__["default"](noteEditorService), noteEditorService);
    this._handle = handle;
    this._measure = measure;
    this._addAfter = addAfter;
    this.h = handle.handleHeight - 4;
    this.w = 3;
    this.graphics.beginFill(0, 1);
    this.graphics.drawRect(-this.w / 2, 3, this.w, this.h);
    this.graphics.endFill();
    this.graphics.beginFill(0, 1);
    this.graphics.drawRect(-this.h / 2, 3 + this.h / 2 - this.w / 2, this.h, this.w);
    this.graphics.endFill();
    this.graphics.beginFill(0, 0);
    this.graphics.drawRect(0, 0, handle.handleHeight, handle.handleHeight);
    this.graphics.endFill();
    this._svg.setAttribute('class', 'measure-handle');
  }
  destroy() {
    super.destroy();
    this._measure = null;
  }
  handleMouseDown(evt) {
    const addPosition = this._addAfter ? 'addAfter' : 'addBefore';
    // this._handle.dispatchEvent(
    //   new MeasureEditEvent(
    //     MeasureEditEvent.MEASURE_EDIT,
    //     addPosition,
    //     this._measure
    //   )
    // );
    super.handleMouseDown(evt);
    this.noteEditorService.onMeasureHandleClick.emit({
      kind: addPosition,
      measure: this._measure,
      view: this._handle
    });
  }
}

/***/ }),

/***/ 36082:
/*!*******************************************************************!*\
  !*** ./src/app/note-editor/views/measure-number-notation-view.ts ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureNumberNotationView)
/* harmony export */ });
/* harmony import */ var _label_notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./label-notation-view */ 25059);

class MeasureNumberNotationView extends _label_notation_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
  }
  editText() {}
}

/***/ }),

/***/ 77347:
/*!************************************************************!*\
  !*** ./src/app/note-editor/views/measure-prefixes-view.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasurePrefixesView)
/* harmony export */ });
class MeasurePrefixesView {
  get measureIndex() {
    return this._measureIndex;
  }
  get prefixes() {
    return this._prefixes;
  }
  get staffStartView() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      if (prefix.isStaffStartView) {
        return prefix;
      }
    }
    return null;
  }
  constructor(measureIndex) {
    this._prefixes = [];
    this._measureIndex = NaN;
    this._measureIndex = measureIndex;
  }
  justifyMeasureViews() {
    for (let i = 0; i < this._prefixes.length; i++) {
      const prefix = this._prefixes[i];
      prefix.justifyMeasureView();
    }
  }
  addPrefix(prefix) {
    this._prefixes.push(prefix);
  }
}

/***/ }),

/***/ 3537:
/*!**************************************************************!*\
  !*** ./src/app/note-editor/views/measure-view-dimensions.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureViewDimensions)
/* harmony export */ });
class MeasureViewDimensions {
  static get alwaysReturnDifferent() {
    return MeasureViewDimensions._alwaysReturnDifferent;
  }
  static set alwaysReturnDifferent(t) {
    MeasureViewDimensions._alwaysReturnDifferent = t;
  }
  record(t) {
    if (!MeasureViewDimensions.alwaysReturnDifferent) {
      this.width = t.width;
      this.height = t.height;
    }
  }
  isWidthDifferent(measureView) {
    return !!MeasureViewDimensions.alwaysReturnDifferent || measureView.width != this.width;
  }
  isHeightDifferent(measureView) {
    return !!MeasureViewDimensions.alwaysReturnDifferent || measureView.height != this.height;
  }
}
MeasureViewDimensions._alwaysReturnDifferent = false;

/***/ }),

/***/ 35035:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/measure-view.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _layouts_barline_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../layouts/barline-layout */ 98954);
/* harmony import */ var _layouts_cautionary_layout__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../layouts/cautionary-layout */ 49606);
/* harmony import */ var _layouts_note_set_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../layouts/note-set-layout */ 83944);
/* harmony import */ var _layouts_rest_layout__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../layouts/rest-layout */ 41910);
/* harmony import */ var _layouts_staff_start_layout__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../layouts/staff-start-layout */ 87846);
/* harmony import */ var _layouts_text_notation_layout__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../layouts/text-notation-layout */ 88175);
/* harmony import */ var _models_coda__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/coda */ 32229);
/* harmony import */ var _models_label_notation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/label-notation */ 9213);
/* harmony import */ var _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../models/measure-number-notation */ 36987);
/* harmony import */ var _models_measure_position__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../models/measure-position */ 83067);
/* harmony import */ var _models_notation_value__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../models/notation-value */ 57485);
/* harmony import */ var _models_noteset__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/noteset */ 46605);
/* harmony import */ var _models_segno__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/segno */ 66000);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _models_tacet__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/tacet */ 51744);
/* harmony import */ var _annotation_view__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./annotation-view */ 98167);
/* harmony import */ var _insertion_point__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./insertion-point */ 74596);
/* harmony import */ var _lyric_extender_view__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./lyric-extender-view */ 63919);
/* harmony import */ var _lyric_view__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./lyric-view */ 48997);
/* harmony import */ var _measure_waveform_view__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./measure-waveform-view */ 23420);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./score-object-view */ 39928);
/* harmony import */ var _staff_lines__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./staff-lines */ 67346);



























class MeasureView extends _score_object_view__WEBPACK_IMPORTED_MODULE_25__["default"] {
  static get MEASURE_MASK_SLOP() {
    return 4;
  }
  static get SCORE() {
    return 'score';
  }
  static get PLACEHOLDER() {
    return 'placeholder';
  }
  get layout() {
    return this._layout;
  }
  set layout(v) {
    this._layout = v;
  }
  get measure() {
    return this._layout.measure;
  }
  get measureId() {
    return this._layout.measure.id;
  }
  get systemMeasure() {
    if (this.measure.isSystemMeasure) {
      return this.measure;
    } else {
      this.measure.systemMeasure;
    }
  }
  get measureIndex() {
    return this.measure.index;
  }
  set staffView(staffView) {
    this._staffView = staffView;
  }
  get measureWidth() {
    return this.toViewUnits(this._layout.x);
  }
  get entryNote() {
    return this._entryNote;
  }
  get entryNoteSet() {
    return this._entryNoteSet;
  }
  get insertionNoteSet() {
    return this._insertionNoteSet;
  }
  get entryVoiceNumber() {
    return this._insertionVoiceNumber;
  }
  get mouseInStaff() {
    return this._staffLines && this._staffLines.mouseInStaff;
  }
  get state() {
    return this._state;
  }
  set state(state) {
    if (this._state !== state) {
      if (state === MeasureView.PLACEHOLDER) {
        this.showPlaceHolder();
      } else if (state === MeasureView.SCORE) {
        this.showScore();
      }
      this._state = state;
    }
  }
  get isPlaceHolder() {
    return this._state === MeasureView.PLACEHOLDER;
  }
  get totalNotationViews() {
    return this._notationViews.length;
  }
  get staffTop() {
    return this._yStart;
  }
  get staffBottom() {
    return this._yEnd;
  }
  get highlightTop() {
    return this._yStart - this.toViewUnits(this.context.info.measureHighlightMargin);
  }
  get highlightHeight() {
    return this._yEnd - this._yStart + this.toViewUnits(2 * this.context.info.measureHighlightMargin);
  }
  constructor(context, layout, staffView, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this.highlightEnabled = true;
    this.isStaffStartView = false;
    this._staffView = null;
    this._staffLines = null;
    this._measureWaveform = null;
    this._notationViews = [];
    this._measureNumberView = null;
    this._barlineViews = [];
    this._labelViews = [];
    this._barlineUnscaledHeight = NaN;
    this._annotationViews = [];
    this._globalViews = [];
    this._entryNote = null;
    this._entryNoteSet = null;
    this._insertionPoint = null;
    this._insertionVoiceNumber = 0;
    this._insertionNoteSet = null;
    this._highlightLeft = 0;
    this._highlightRight = 0;
    this._yStart = NaN;
    this._yEnd = NaN;
    this._barlineHeight = 0;
    this._measureMask = null;
    this._backdropSprite = null;
    this._measureEditMediator = null;
    this._actualContent = null;
    this._state = MeasureView.SCORE;
    this._layout = null;
    this._layout = layout;
    this._staffView = staffView;
    this._measureMask = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    // this._measureMask.mouseEnabled = false;
    this.mask = this._measureMask;
    this._measureEditMediator = this.context.registerMeasureView(this);
    if (this.context.waveformController) {
      //   this.context.waveformController.addEventListener(
      //     WaveformUpdateEvent.WAVEFORM_UPDATE,
      //     RumtimeHelper.bindMethod(this, this.handleWaveformUpdate)
      //   );
    }
    this.initializeView();
    // todo
    // this.mouseChildrenOnRoll();
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.handleRollOut)
    // );
    // this._layout.addEventListener(
    //   MeasureLayoutEvent.UPDATE_MEASURE_INDEX,
    //   RumtimeHelper.bindMethod(this, this.handleUpdateMeasureIndex)
    // );
  }

  updateStaffLayout(staffLayout) {
    for (let i = 0; i < this._notationViews.length; i++) {
      const notationView = this._notationViews[i];
      if (notationView instanceof _lyric_view__WEBPACK_IMPORTED_MODULE_23__["default"]) {
        notationView.staffLayout = staffLayout;
      }
    }
  }
  removeListeners() {
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.handleRollOut)
    // );
    // this._layout.removeEventListener(
    //   MeasureLayoutEvent.UPDATE_MEASURE_INDEX,
    //   RumtimeHelper.bindMethod(this, this.handleUpdateMeasureIndex)
    // );
  }
  destroyChildren() {
    for (let i = 0; i < this._notationViews.length; i++) {
      const notationView = this._notationViews[i];
      notationView.destroy();
      if (this._staffLines) {
        this._staffLines.removeChild(notationView);
      }
    }
    if (this._staffLines) {
      this._staffLines.destroy();
      this._actualContent.removeChild(this._staffLines);
      this._staffLines = null;
    }
    if (this._measureWaveform) {
      this._measureWaveform.destroy();
      this._actualContent.removeChild(this._measureWaveform);
      this._measureWaveform = null;
    }
    for (let i = 0; i < this._annotationViews.length; i++) {
      const annotationView = this._annotationViews[i];
      annotationView.destroy();
    }
    for (let i = 0; i < this._globalViews.length; i++) {
      const globalView = this._globalViews[i];
      globalView.destroy();
    }
    this.removeInsertionPoint();
    if (this._backdropSprite) {
      this._actualContent.removeChild(this._backdropSprite);
    }
  }
  destroy() {
    this._measureEditMediator.destroy();
    if (this.context.waveformController) {
      //   this.context.waveformController.removeEventListener(
      //     WaveformUpdateEvent.WAVEFORM_UPDATE,
      //     RumtimeHelper.bindMethod(this, this.handleWaveformUpdate)
      //   );
    }
    if (!this.context.info.useMeasureViewsCache) {
      super.destroy();
    }
  }
  removeActualContent() {
    if (this._actualContent) {
      this.removeChild(this._actualContent);
    }
  }
  showPlaceHolder() {
    this.removeActualContent();
  }
  showScore() {
    if (this._actualContent && this.getChildIndex(this._actualContent) === -1) {
      this.addChild(this._actualContent);
    }
  }
  updateView() {
    this.destroyChildren();
    this._layout.validateLayout();
    this.removeActualContent();
    this._actualContent = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    this.addChild(this._actualContent);
    this._backdropSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    this._actualContent.addChild(this._backdropSprite);
    if (!this.context.info.printView && !(this._layout instanceof _layouts_staff_start_layout__WEBPACK_IMPORTED_MODULE_9__["default"]) && !(this._layout instanceof _layouts_cautionary_layout__WEBPACK_IMPORTED_MODULE_6__["default"])) {
      const left = this._layout.getMeasurePositionX(0, true, -1);
      const right = this._layout.getMeasurePositionX(this.measure.duration - 1, true, -1);
      this._measureWaveform = new _measure_waveform_view__WEBPACK_IMPORTED_MODULE_24__["default"](this.context, this.measure, left, right, this.noteEditorService, this.rootDiv);
      this._actualContent.addChild(this._measureWaveform);
    }
    const effectiveClef = this.measure.effectiveClef;
    this._staffLines = new _staff_lines__WEBPACK_IMPORTED_MODULE_26__["default"](this.context, effectiveClef.numLines, effectiveClef.lineSpacing, this._layout.x, effectiveClef.displayLineStartIndex, effectiveClef.displayLineEndIndex, effectiveClef.displayLineSpacing, this.noteEditorService, this.rootDiv);
    this._staffLines.y = 0;
    this._yStart = -this.toViewUnits(effectiveClef.staffHeight);
    this._yEnd = 0;
    this._actualContent.addChild(this._staffLines);
    this._notationViews = [];
    this._barlineViews = [];
    this._annotationViews = [];
    this._globalViews = [];
    this._labelViews = [];
    this._measureNumberView = null;
    const textNotationLayouts = [];
    for (let i = 0; i < this._layout.notationLayouts.length; i++) {
      const notationLayout = this._layout.notationLayouts[i];
      if (notationLayout instanceof _layouts_text_notation_layout__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        textNotationLayouts.push(notationLayout);
      } else {
        this.updateChild(notationLayout);
      }
    }
    for (let i = 0; i < textNotationLayouts.length; i++) {
      const textNotationLayout = textNotationLayouts[i];
      this.updateChild(textNotationLayout);
    }
    this.updateGeometry();
  }
  wakeUpCachedMeasureView() {
    this.layout.updateMeasureIndex();
    this.updateGeometry();
  }
  updateChild(layout) {
    const displayObject = layout.createDisplayObject(this.context);
    if (layout.notation instanceof _models_measure_number_notation__WEBPACK_IMPORTED_MODULE_13__["default"]) {
      this._measureNumberView = displayObject;
    }
    this._staffLines.addChild(displayObject);
    this._notationViews.push(displayObject);
    if (displayObject instanceof _lyric_view__WEBPACK_IMPORTED_MODULE_23__["default"]) {
      displayObject.staffLayout = this._staffView.layout;
    }
    if (layout instanceof _layouts_barline_layout__WEBPACK_IMPORTED_MODULE_5__["default"]) {
      const barlineGlyphView = _layouts_barline_layout__WEBPACK_IMPORTED_MODULE_5__["default"].getBarlineGlyphView(displayObject);
      if (this.layout.bottomStaffInBarlineGroup) {
        this._barlineViews.push(barlineGlyphView);
        this._barlineUnscaledHeight = this.context.toViewUnits(layout.barlineGlyphLayout.height);
      }
    }
    if (this.layout.showAnnotations && !this.context.info.printView) {
      for (let i = 0; i < layout.notation.allAnnotations.length; i++) {
        const annotation = layout.notation.allAnnotations[i];
        const annotationView = new _annotation_view__WEBPACK_IMPORTED_MODULE_20__["default"](this.context, layout, annotation, this.noteEditorService, this.rootDiv);
        this._actualContent.addChild(annotationView);
        this._annotationViews.push(annotationView);
      }
    }
  }
  updateGeometry() {
    if (null == this._staffLines) {
      throw Error('this._staffLines should be non-null');
    }
    this._layout.validateGlobalLayout();
    this._staffLines.staffWidth = this._layout.x;
    this._staffLines.updateGeometry();
    const measureWaveform = this._measureWaveform;
    if (measureWaveform) {
      const left = this._layout.getMeasurePositionX(0, true, -1);
      const right = this._layout.getMeasurePositionX(this.measure.duration - 1, true, -1);
      measureWaveform.left = left;
      measureWaveform.right = right;
      measureWaveform.updateGeometry();
    }
    for (let i = 0; i < this._notationViews.length; i++) {
      const notationView = this._notationViews[i];
      this.updateChildGeometry(notationView);
      if (notationView.notation instanceof _models_coda__WEBPACK_IMPORTED_MODULE_11__["default"] || notationView.notation instanceof _models_segno__WEBPACK_IMPORTED_MODULE_17__["default"]) {
        const inclinedLeft = notationView.notation.rhythmPosition <= this.measure.duration / 2;
        const prefixesView = this._staffView.getMeasurePrefixesViewByMeasureIndex(this.measure.index);
        if (prefixesView && prefixesView.staffStartView && notationView.notation instanceof _models_coda__WEBPACK_IMPORTED_MODULE_11__["default"]) {
          notationView.x = inclinedLeft ? -prefixesView.staffStartView.width : this.width;
        } else {
          notationView.x = inclinedLeft ? 0 : this.width;
        }
      } else {
        if (notationView.notation instanceof _models_label_notation__WEBPACK_IMPORTED_MODULE_12__["default"] && notationView.notation.alignToLeftEdge) {
          notationView.x = 0;
        }
      }
    }
    this.updateBarlineHeight();
    let prevAnnotationView = null;
    for (let i = 0; i < this._annotationViews.length; i++) {
      const annotationView = this._annotationViews[i];
      let notationLayoutX = this.toViewUnits(annotationView.notationLayout.x);
      if (prevAnnotationView) {
        notationLayoutX = Math.max(notationLayoutX, prevAnnotationView.x + prevAnnotationView.width);
      }
      annotationView.x = notationLayoutX;
      if (annotationView.notationLayout instanceof _layouts_note_set_layout__WEBPACK_IMPORTED_MODULE_7__["default"] || annotationView.notationLayout instanceof _layouts_rest_layout__WEBPACK_IMPORTED_MODULE_8__["default"]) {
        annotationView.y = -this.toViewUnits(annotationView.notationLayout.clearExtrasTop(0));
      } else {
        annotationView.y = this._yStart - this.toViewUnits(this.staffMetrics.staffSpacing / 2);
      }
      prevAnnotationView = annotationView;
    }
    for (let i = 0; i < this._globalViews.length; i++) {
      const globalView = this._globalViews[i];
      this._actualContent.removeChild(globalView);
    }
    this._globalViews = [];
    for (let i = 0; i < this._layout.globalLayouts.length; i++) {
      const globalLayout = this._layout.globalLayouts[i];
      const globalView = globalLayout.createDisplayObject(this.context);
      if (globalView instanceof _lyric_extender_view__WEBPACK_IMPORTED_MODULE_22__["default"]) {
        globalView.updateStaffGeometry(this._staffView.layout);
      }
      this._actualContent.addChild(globalView);
      this._globalViews.push(globalView);
    }
  }
  justifyMeasureView() {
    this.layout.invalidateGlobal();
    this.layout.validateGlobalLayout();
    this.updateGeometry();
  }
  isViewValid() {
    if (this.layout.notationLayouts.length !== this.totalNotationViews) {
      return false;
    }
    for (let i = 0; i < this.layout.notationLayouts.length; i++) {
      const notationLayout = this.layout.notationLayouts[i];
      if (!notationLayout.sameType(this._notationViews[i].layout)) {
        return false;
      }
    }
    return true;
  }
  updateBarlineHeight() {
    if (this.layout.bottomStaffInBarlineGroup) {
      const measureIdx = this.measure.index;
      const startMeasureIndex = this._staffView.layout.startMeasureIndex;
      let i = this._staffView.viewIndex;
      for (; i > 0; i--) {
        const measureLayout = this._staffView.layout.systemLayout.getStaffLayoutAt(i).getMeasureLayoutAt(measureIdx - startMeasureIndex);
        if (measureLayout && measureLayout.topStaffInBarlineGroup) {
          break;
        }
      }
      const staffLayout = this._staffView.layout.systemLayout.getStaffLayoutAt(i);
      const staffViewLayout = this._staffView.layout;
      this._barlineHeight = this.toViewUnits(staffViewLayout.distanceY - (staffLayout.distanceY - staffLayout.height));
      for (let j = 0; j < this._barlineViews.length; j++) {
        const barlineView = this._barlineViews[j];
        barlineView.scaleY = (this._barlineHeight + this.toViewUnits(this.staffMetrics.lineThickness)) / this._barlineUnscaledHeight;
      }
    }
  }
  updateChildGeometry(notationView) {
    if (notationView.layout) {
      const notationLayout = this.layout.getLayoutForNotation(notationView.layout.notation);
      if (notationLayout) {
        notationView.layout = notationLayout;
        if (notationLayout.centered) {
          const valueBounds = this.layout.valueBounds;
          notationView.x = this.toViewUnits(valueBounds.x + (valueBounds.width - notationLayout.width) / 2);
        } else {
          notationView.x = this.toViewUnits(notationLayout.x);
        }
        if (notationLayout.notation.parent) {
          notationView.updateGeometry();
        }
      }
    }
  }
  removeNoteEntryView() {
    if (this.context.noteEntryView) {
      this.context.noteEntryView.parent.removeChild(this.context.noteEntryView);
      this.context.noteEntryView = null;
    }
    this._entryNote = null;
    this._entryNoteSet = null;
  }
  updateNoteEntryView(entryNotation, mouseY, isEdit) {
    this.removeNoteEntryView();
    if (this._staffLines == null) {
      throw Error('this._staffLines should be non-null');
    }
    if (entryNotation && entryNotation.notation instanceof _models_noteset__WEBPACK_IMPORTED_MODULE_16__.NoteSet && entryNotation.notation.measure) {
      const noteSet = entryNotation.notation;
      const clef = entryNotation.clef;
      const leftX = this.toViewUnits(entryNotation.leftX);
      const staffLinesY = this._staffLines.y;
      const line = (staffLinesY - mouseY) / (this.staffMetrics.lineSpacing * clef.lineSpacing);
      let lineNote = clef.getLineNote(line, entryNotation.notation.measure);
      if (clef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_18__["default"]) {
        if (lineNote.stringIndex >= 0 && noteSet.noteOnString(lineNote.stringIndex)) {
          return;
        }
      } else {
        lineNote = lineNote.alter(this.measure.effectiveAlteration(noteSet.position, lineNote, noteSet.voiceNumber));
        if (!isEdit && noteSet.hasDiatonicPitch(lineNote.step, lineNote.notatedOctave)) {
          return;
        }
      }
      lineNote.enabled = false;
      this._entryNote = lineNote;
      this._entryNoteSet = noteSet;
      const noteset = new _models_noteset__WEBPACK_IMPORTED_MODULE_16__.NoteSet(this._entryNoteSet.position, [this._entryNote], _models_notation_value__WEBPACK_IMPORTED_MODULE_15__.NotationValue.QUARTER, 0);
      noteset.parent = this._entryNoteSet.parent;
      noteset.enabled = false;
      const noteSetLayout = this._layout.createNotationLayout(noteset, clef);
      noteSetLayout.enableStem = false;
      noteSetLayout.validateLayout();
      const entryLayout = entryNotation;
      if (entryLayout && noteset.measure.numVoices > 1 && (entryLayout.down && noteSetLayout.minPitchLine > entryLayout.maxPitchLine || !entryLayout.down && noteSetLayout.maxPitchLine < entryLayout.minPitchLine)) {
        return;
      }
      this.context.noteEntryView = noteSetLayout.createDisplayObject(this.context);
      const point = new _geoms_point__WEBPACK_IMPORTED_MODULE_4__["default"](leftX, staffLinesY);
      this.context.noteEntryView.x = point.x;
      this.context.noteEntryView.y = point.y;
      this.context.noteEntryView.feedback = true;
      this.context.noteEntryView.updateStatus();
      this._staffLines.addChild(this.context.noteEntryView);
    }
  }
  updateStatus() {
    super.updateStatus();
    if (!this.context.info.printView && this.context.document.editable && this.measure.canHideStaff && !(this._layout instanceof _layouts_cautionary_layout__WEBPACK_IMPORTED_MODULE_6__["default"])) {
      this.alpha = this.context.info.hiddenMeasureAlpha;
    } else {
      this.alpha = 1;
    }
    this.graphics.clear();
    this.removeInsertionPoint();
    this.removeNoteEntryView();
    this._highlightLeft = this._highlightRight = 0;
    if (this.layout.systemMeasureLayout && this.context.document && this.context.document.selection && !(this._layout instanceof _layouts_staff_start_layout__WEBPACK_IMPORTED_MODULE_9__["default"]) && this.context.controller.isNotationInteractionAvailable()) {
      if (this.highlightEnabled && this.context.document.selection.includes(this.measure)) {
        if (this.context.document.selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_3__["default"]) {
          const rangeSelection = this.context.document.selection;
          const measureStartPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_14__["default"](this.measure.index, 0);
          const measureEndPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_14__["default"](this.measure.index, this.measure.duration);
          if (rangeSelection.start.compareTo(measureStartPosition) <= 0) {
            this._highlightLeft = 0;
          } else {
            this._highlightLeft = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(rangeSelection.start.position));
          }
          if (rangeSelection.end.compareTo(measureEndPosition) > 0) {
            this._highlightRight = this.toViewUnits(this._layout.x);
          } else {
            this._highlightRight = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(rangeSelection.end.position));
          }
          this.graphics.beginFill(this.context.info.measureHighlightColor, this.context.info.measureHighlightAlpha);
          this.graphics.drawRect(this._highlightLeft, this.highlightTop, this._highlightRight - this._highlightLeft, this.highlightHeight);
          this.graphics.endFill();
          if (rangeSelection.start.measureIndex === measureStartPosition.measureIndex && this.measure.staff === rangeSelection.staves[0]) {
            this.showInsertionPoint(rangeSelection.start.position);
          }
        } else if (this.context.document.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
          const measureSelection = this.context.document.selection;
          if (measureSelection.includes(this.measure)) {
            this._highlightLeft = 0;
            this._highlightRight = this.measureWidth;
            if (measureSelection.startIndex === this.measure.index && this.layout.topStaffOnSystem) {
              this.showInsertionPoint(0);
            }
          }
        }
      }
      if (this.highlightEnabled && this.context.document.dragHighlight) {
        if (this.context.document.dragHighlight.intersectsMeasure(this.measure)) {
          if (this.context.document.selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_1__["default"]) {
            if (this.layout.bottomStaffInBarlineGroup) {
              this.graphics.lineStyle(2, this.context.info.dragHighlightInsertionPointColor, this.context.info.dragHighlightOutlineAlpha);
              this.graphics.moveTo(0, this.staffBottom);
              this.graphics.lineTo(0, this.staffBottom - this._barlineHeight);
            }
          }
        } else {
          const dragHightlight = this.context.document.dragHighlight;
          if (dragHightlight.end.compareTo(dragHightlight.start)) {
            this.showInsertionPoint(dragHightlight.start.position, null, true);
          } else {
            const measureStartPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_14__["default"](this.measure.index, 0);
            const measureEndPosition = new _models_measure_position__WEBPACK_IMPORTED_MODULE_14__["default"](this.measure.index, this.measure.duration);
            const dragBeforeStart = dragHightlight.start.compareTo(measureStartPosition) < 0;
            let dragStartPositionX;
            if (dragBeforeStart) {
              dragStartPositionX = 0;
            } else {
              dragStartPositionX = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(dragHightlight.start.position)) - 2;
            }
            const dragOverEnd = dragHightlight.end.compareTo(measureEndPosition) > 0;
            let dragEndPositionX;
            if (dragOverEnd) {
              dragEndPositionX = this.toViewUnits(this._layout.x);
            } else {
              dragEndPositionX = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(dragHightlight.end.position)) - 2;
            }
            this.graphics.lineStyle(2, this.context.info.dragHighlightOutlineColor, this.context.info.dragHighlightOutlineAlpha);
            this.graphics.moveTo(dragStartPositionX, this.highlightTop);
            this.graphics.lineTo(dragEndPositionX - 1, this.highlightTop);
            this.graphics.moveTo(dragStartPositionX, this.highlightTop + this.highlightHeight);
            this.graphics.lineTo(dragEndPositionX - 1, this.highlightTop + this.highlightHeight);
            if (!dragBeforeStart) {
              this.graphics.moveTo(dragStartPositionX, this.highlightTop);
              this.graphics.lineTo(dragStartPositionX, this.highlightTop + this.highlightHeight);
            }
            if (!dragOverEnd) {
              this.graphics.moveTo(dragEndPositionX, this.highlightTop);
              this.graphics.lineTo(dragEndPositionX, this.highlightTop + this.highlightHeight);
            }
            this.graphics.lineStyle();
          }
        }
      } else if (this.context.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        let selectedNoteSet = this.context.document.firstSelectedNoteSet;
        if (selectedNoteSet && !selectedNoteSet.grace) {
          if (this.context.document.entryAfterSelection) {
            const nextNoteSet = selectedNoteSet.nextNoteSet(true);
            if (nextNoteSet == null && selectedNoteSet.measure === this.measure) {
              this.showInsertionPoint(this.measure.duration, selectedNoteSet);
              return;
            }
            selectedNoteSet = nextNoteSet;
          }
          if (selectedNoteSet && selectedNoteSet.measure === this.measure) {
            this._highlightLeft = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(selectedNoteSet.position));
            this._highlightRight = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(selectedNoteSet.position + selectedNoteSet.duration));
            this.showInsertionPoint(selectedNoteSet.position, selectedNoteSet);
          }
        }
      }
    }
  }
  acceptNoteEntry(evt) {
    let position,
      insertionPoint = this._insertionPoint;
    if (insertionPoint == null) {
      return false;
    }
    if (this.measure.numNotations >= 1 && this.measure.getNotationAt(0) instanceof _models_tacet__WEBPACK_IMPORTED_MODULE_19__["default"]) {
      return true;
    }
    position = evt.target === this ? new _geoms_point__WEBPACK_IMPORTED_MODULE_4__["default"](evt.localX, evt.localY) : this.globalToLocal(new _geoms_point__WEBPACK_IMPORTED_MODULE_4__["default"](evt.stageX, evt.stageY));
    const mouseEntrySlopWidth = this.toViewUnits(this.staffMetrics.mouseNoteEntrySlopWidth);
    return position.x > insertionPoint.x && position.x < insertionPoint.x + mouseEntrySlopWidth;
  }
  removeInsertionPoint() {
    if (this._insertionPoint) {
      this._backdropSprite.removeChild(this._insertionPoint);
      this._insertionPoint = null;
    }
  }
  showInsertionPoint(position, insertionNoteSet = null, withoutSlop) {
    if (!this.context.info.testView && this.context.controller.document.editable && this._insertionPoint == null) {
      let insertionPointY,
        effectiveClef = this._layout.measure.effectiveClef;
      if (effectiveClef && effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_18__["default"] && this.context.controller.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        const stringIndex = this.context.controller.document.stringIndex;
        const insertionHeight = this.toViewUnits(effectiveClef.lineSpacing + this.context.info.tabInsertionPointExtension);
        const top = this.staffTop - insertionHeight / 2;
        insertionPointY = this.toViewUnits(stringIndex * effectiveClef.lineSpacing) + top;
        this._insertionPoint = new _insertion_point__WEBPACK_IMPORTED_MODULE_21__["default"](this.context, insertionHeight, this.noteEditorService, withoutSlop);
      } else {
        let multiVoiceOffset,
          measureInsertionPointInset = this.context.info.measureInsertionPointInset;
        insertionPointY = this.highlightTop + this.toViewUnits(measureInsertionPointInset);
        if (insertionNoteSet && insertionNoteSet.measure.numVoice > 1) {
          this._insertionVoiceNumber = insertionNoteSet.voiceNumber;
          if (this._insertionVoiceNumber === 0) {
            multiVoiceOffset = -this.toViewUnits(this.context.info.measureInsertionMultiVoiceOffset);
          } else {
            multiVoiceOffset = this.toViewUnits(this.context.info.measureInsertionMultiVoiceOffset);
          }
        } else {
          this._insertionVoiceNumber = 0;
          multiVoiceOffset = 0;
        }
        this._insertionNoteSet = insertionNoteSet;
        this._insertionPoint = new _insertion_point__WEBPACK_IMPORTED_MODULE_21__["default"](this.context, this.highlightHeight - this.toViewUnits(2 * measureInsertionPointInset), this.noteEditorService, withoutSlop, multiVoiceOffset);
      }
      const insertionPoint = this._insertionPoint;
      if (insertionPoint) {
        insertionPoint.y = insertionPointY;
        insertionPoint.x = this.toViewUnits(this._layout.systemMeasureLayout.getMeasurePositionX(position) - this.context.info.measureInsertionPointPadding);
        this._backdropSprite.addChild(insertionPoint);
      }
    }
  }
  handleRollOut(focusEvt) {
    if (focusEvt.relatedObject == null || focusEvt.relatedObject.stage != null) {
      this.removeNoteEntryView();
    }
  }
  handleWaveformUpdate(evt) {
    var measureWaveform = this._measureWaveform;
    if (measureWaveform && this.measure.staff) {
      var parts = evt.parts,
        part = this.measure.staff.part;
      parts.indexOf(part) >= 0 && measureWaveform.updateGeometry();
    }
  }
  updateMeasureNumberView() {
    if (this._measureNumberView) {
      var measureNumber = this.layout.requiresMeasureNumber ? this.measure.measureNumber.toString() : '';
      this._measureNumberView.updateLabelNotationText(measureNumber);
    }
  }
  handleUpdateMeasureIndex(t) {
    this.updateMeasureNumberView();
  }
}

/***/ }),

/***/ 23420:
/*!************************************************************!*\
  !*** ./src/app/note-editor/views/measure-waveform-view.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasureWaveformView)
/* harmony export */ });
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./score-object-view */ 39928);

class MeasureWaveformView extends _score_object_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get MAX_BAR_HEIGHT() {
    return 10;
  }
  static get COLOR() {
    return 0xf3bdaf;
  }
  constructor(context, measure, left, right, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this.measure = null;
    this.left = NaN;
    this.right = NaN;
    this.BRACKET_HEIGHT = 36;
    this.BRACKET_WIDTH = 5;
    this.BRACKET_CURVE = 2;
    this.BRACKET_Y = -28;
    this.measure = measure;
    this.left = left;
    this.right = right;
  }
  updateGeometry() {
    this.graphics.clear();
    if (this.measure.staff) {
      const part = this.measure.staff.part;
      if (part.showAudioWaveform) {
        const firstRecordedAudioTrackForPlayback = part.firstRecordedAudioTrackForPlayback;
        if (firstRecordedAudioTrackForPlayback) {
          this.drawWaveform(this.graphics, firstRecordedAudioTrackForPlayback);
        }
      }
    }
  }
  drawWaveform(graphics, recordedAudioTrack) {
    if (this.measure.staff.measures.indexOf(this.measure) >= 0) {
      const temporalMap = this.context.waveformController.temporalMap;
      if (temporalMap) {
        const scorePosition = this.measure.scorePosition;
        const startTime = temporalMap.scorePositionToTime(scorePosition);
        const endTime = temporalMap.scorePositionToTime(scorePosition + this.measure.duration);
        const left = this.toViewUnits(this.left);
        const width = this.toViewUnits(this.right) - left;
        const widthThirds = Math.floor(width / 3);
        const duration = endTime - startTime;
        const durationStep = duration / widthThirds;
        const f = [];
        const c = [];
        for (let i = 0; i < widthThirds; i++) {
          f.push(0);
          c.push(0);
        }
        const clipStarts = [];
        const clipEnds = [];
        const audioClips = recordedAudioTrack.autoClips;
        for (let i = 0; i < audioClips.length; i++) {
          // todo
          // const audioClip = audioClips[i] as AudioClip;
          // const mediaFileData = audioClip.audioMedia.mediaFileData;
          // if (mediaFileData) {
          //   const firstChannelData = mediaFileData.getChannelData(0);
          //   const trackStartTime = audioClip.trackStartTime;
          //   const trackEndTime = audioClip.trackEndTime;
          //   for (let j = 0; j < widthThirds; j++) {
          //     const currClipEndTime = startTime + durationStep * j;
          //     const nextClipEndTime = currClipEndTime + durationStep;
          //     const starttime =
          //       currClipEndTime > trackStartTime
          //         ? currClipEndTime
          //         : trackStartTime;
          //     const endTime =
          //       nextClipEndTime < trackEndTime ? nextClipEndTime : trackEndTime;
          //     if (starttime < endTime) {
          //       const start = audioClip.toMediaTime(starttime);
          //       const end = audioClip.toMediaTime(endTime);
          //       const clipStart = Math.floor(start * mediaFileData.sampleRate);
          //       let clipEnd = Math.floor(end * mediaFileData.sampleRate);
          //       if (clipEnd > firstChannelData.length) {
          //         clipEnd = firstChannelData.length;
          //       }
          //       for (let progress = clipStart; progress < clipEnd; progress++) {
          //         const D = firstChannelData[progress];
          //         f[j] += D * D;
          //         c[j]++;
          //       }
          //     }
          //   }
          //   if (
          //     trackStartTime >= startTime &&
          //     trackStartTime < endTime &&
          //     duration > 0
          //   ) {
          //     const b =
          //       left + width * ((trackStartTime - startTime) / duration);
          //     clipStarts.push(b);
          //   }
          //   if (
          //     trackEndTime >= startTime &&
          //     trackEndTime < endTime &&
          //     duration > 0
          //   ) {
          //     const b = left + width * ((trackEndTime - startTime) / duration);
          //     clipEnds.push(b);
          //   }
          // }
        }
        const bars = [];
        for (let i = 0; i < widthThirds; i++) {
          const Q = c[i] > 0 ? Math.sqrt(f[i] / c[i]) : 0;
          bars.push(Q);
        }
        this.drawWaveformBars(graphics, bars, left, 3, 2, this.toViewUnits(MeasureWaveformView.MAX_BAR_HEIGHT));
        this.drawClipStarts(graphics, clipStarts);
        this.drawClipEnds(graphics, clipEnds);
      }
    }
  }
  drawWaveformBars(graphics, bars, left, barWidthAndGap, barWidth, maxBarHeight) {
    graphics.beginFill(MeasureWaveformView.COLOR);
    for (let i = 0; i < bars.length; i++) {
      const bar = bars[i];
      const start = left + i * barWidthAndGap;
      const end = start + barWidth;
      const barHeight = 0 - bar * maxBarHeight;
      graphics.moveTo(start, barHeight);
      graphics.lineTo(end, barHeight);
      graphics.lineTo(end, 0);
      graphics.lineTo(start, 0);
      graphics.lineTo(start, barHeight);
    }
    graphics.endFill();
  }
  drawClipStarts(graphics, clipStarts) {
    for (let i = 0; i < clipStarts.length; i++) {
      const start = clipStarts[i];
      graphics.lineStyle(1, MeasureWaveformView.COLOR);
      graphics.moveTo(start + this.BRACKET_WIDTH, this.BRACKET_Y);
      graphics.moveTo(start + this.BRACKET_CURVE, this.BRACKET_Y);
      graphics.curveTo(start, this.BRACKET_Y, start, this.BRACKET_Y + this.BRACKET_CURVE);
      graphics.lineTo(start, this.BRACKET_Y + this.BRACKET_HEIGHT - this.BRACKET_CURVE);
      graphics.curveTo(start, this.BRACKET_Y + this.BRACKET_HEIGHT, start + this.BRACKET_CURVE, this.BRACKET_Y + this.BRACKET_HEIGHT);
      graphics.lineTo(start + this.BRACKET_WIDTH, this.BRACKET_Y + this.BRACKET_HEIGHT);
    }
  }
  drawClipEnds(graphics, clipEnds) {
    for (let i = 0; i < clipEnds.length; i++) {
      let end = clipEnds[i];
      end -= 1;
      graphics.lineStyle(1, MeasureWaveformView.COLOR);
      graphics.moveTo(end - this.BRACKET_WIDTH, this.BRACKET_Y);
      graphics.lineTo(end - this.BRACKET_CURVE, this.BRACKET_Y);
      graphics.curveTo(end, this.BRACKET_Y, end, this.BRACKET_Y + this.BRACKET_CURVE);
      graphics.lineTo(end, this.BRACKET_Y + this.BRACKET_HEIGHT - this.BRACKET_CURVE);
      graphics.curveTo(end, this.BRACKET_Y + this.BRACKET_HEIGHT, end - this.BRACKET_CURVE, this.BRACKET_Y + this.BRACKET_HEIGHT);
      graphics.lineTo(end - this.BRACKET_WIDTH, this.BRACKET_Y + this.BRACKET_HEIGHT);
    }
  }
}

/***/ }),

/***/ 91755:
/*!****************************************************!*\
  !*** ./src/app/note-editor/views/notation-view.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NotationView)
/* harmony export */ });
/* harmony import */ var _selectable_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selectable-view */ 35707);

class NotationView extends _selectable_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get layout() {
    return this._layout;
  }
  set layout(t) {
    this._layout = t;
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout ? layout.notation : null, noteEditorService, rootDiv);
    this._layout = null;
    this._notationViewMediator = null;
    this._views = [];
    this._notationViews = [];
    this._layout = layout;
    this._notationViewMediator = context.registerNotationView(this);
    this.initializeView();
    if (this.onSelectSub$) {
      this.onSelectSub$.unsubscribe();
    }
    this.onSelectSub$ = this._layout.onSelect.subscribe(info => {
      this.noteEditorService.closeOperation();
      this.noteEditorService.open(this._svg, info);
    });
  }
  destroy() {
    this._notationViewMediator.destroy();
    super.destroy();
    if (this.onSelectSub$) {
      this.onSelectSub$.unsubscribe();
    }
  }
  updateView() {
    this.destroyChildren();
    this._views = [];
    for (let i = 0; i < this.layout.numGlyphLayouts; i++) {
      const displayObject = this.layout.getGlyphLayoutAt(i).createDisplayObject(this.context);
      this._views.push(displayObject);
      this.addChild(displayObject);
    }
  }
}

/***/ }),

/***/ 61650:
/*!****************************************************!*\
  !*** ./src/app/note-editor/views/note-set-view.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NoteSetView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _notation_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation-view */ 91755);
/* harmony import */ var _layouts_liaison_layout__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layouts/liaison-layout */ 89280);
/* harmony import */ var _models_liaison__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/liaison */ 31253);
/* harmony import */ var _models_articulation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/articulation */ 78859);
/* harmony import */ var _utils_liaison_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/liaison-layout */ 29057);






class NoteSetView extends _notation_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
    this._liaisonSprite = null;
  }
  updateView() {
    this.destroyChildren();
    this._notationViews = [];
    super.updateView();
    const noteSetLayout = this.layout;
    for (let i = 0; i < noteSetLayout.numNoteLayouts; i++) {
      const notationView = new _notation_view__WEBPACK_IMPORTED_MODULE_1__["default"](this.context, noteSetLayout.getNoteLayoutAt(i), this.noteEditorService, this.rootDiv);
      this.addChild(notationView);
      this._notationViews.push(notationView);
    }
  }
  updateGeometry() {
    super.updateGeometry();
    this.updateLiaisonGeometry();
  }
  destroyChildren() {
    if (this._notationViews) {
      for (let i = 0; i < this._notationViews.length; i++) {
        const notationView = this._notationViews[i];
        notationView.destroy();
      }
    }
  }
  updateLiaisonGeometry() {
    if (this._liaisonSprite && this._liaisonSprite.parent === this) {
      this.removeChild(this._liaisonSprite);
    }
    let width,
      noteSetLayout = this.layout;
    const determineLiaisons = noteSetLayout.determineLiaisons();
    const continuationLiaisons = noteSetLayout.noteSet.position === 0 && !noteSetLayout.noteSet.previousGraceNote && noteSetLayout.noteSet.liaisonEnd && (noteSetLayout.measureLayout.firstLayoutOnSystem || noteSetLayout.measureLayout.measure.allowIncomingLiaisons);
    if (determineLiaisons || continuationLiaisons) {
      this._liaisonSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
      this.addChild(this._liaisonSprite);
      if (continuationLiaisons) {
        this.drawLiaisonContinuations(noteSetLayout, noteSetLayout.leftX);
      }
      if (noteSetLayout.liaisonEndLayout) {
        if (noteSetLayout.liaisonEndLayout.measureLayout !== noteSetLayout.measureLayout) {
          if (noteSetLayout.measureLayout.lastLayoutOnSystem || !noteSetLayout.noteSet.measure.flowsToNextMeasure) {
            width = noteSetLayout.measureLayout.x - noteSetLayout.x;
            this.drawLiaisons(noteSetLayout, null, width);
            return;
          }
          width = noteSetLayout.measureLayout.x - noteSetLayout.x + noteSetLayout.liaisonEndLayout.x;
        } else {
          width = noteSetLayout.liaisonEndLayout.x - noteSetLayout.x;
        }
        this.drawLiaisons(noteSetLayout, noteSetLayout.liaisonEndLayout, width);
      } else {
        width = noteSetLayout.measureLayout.x - noteSetLayout.x;
        this.drawLiaisons(noteSetLayout, null, width);
      }
    }
  }
  drawLiaisons(leftNsl, rightNsl, width) {
    let singleNote = !leftNsl.multiVoice && leftNsl.noteSet.notes.length === 1 && (rightNsl || rightNsl.noteSet.notes.length === 1);
    let liaisonCount = leftNsl.noteSet.liaisonCount;
    const liaisons = [];
    const showRhythm = leftNsl.measureLayout.measure.effectiveClef.showRhythm(this.context.layoutContext.score);
    const hasArticulation = leftNsl.noteSet.hasArticulation(_models_articulation__WEBPACK_IMPORTED_MODULE_4__.Articulation.LV_TIE);
    for (let i = 0; i < leftNsl.noteLayouts.length; i++) {
      const noteLayout = leftNsl.noteLayouts[i];
      const leftNl = noteLayout;
      const liaison = leftNl.note.liaison;
      let liaisonLayout;
      if (hasArticulation) {
        const maxLvTieWidth = this.context.toViewUnits(leftNsl.context.staffMetrics.maxLvTieWidth);
        width = Math.min(width, maxLvTieWidth);
        liaisonCount = leftNl.note.noteSet.notes.length;
        liaisonLayout = (0,_utils_liaison_layout__WEBPACK_IMPORTED_MODULE_5__.createLiaisonLayout)(leftNl.note, this.noteEditorService);
        liaisonLayout.setLiaisonInfo(leftNsl, leftNl, null, null, singleNote, width, i, liaisonCount);
      } else {
        if (liaison == null || !showRhythm && liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.TIE_LIAISON && leftNl.note.cumulativeBend === 0) {
          continue;
        }
        let rightNl = null;
        if (rightNsl) {
          if (!showRhythm && rightNsl.noteSet.invisible) {
            continue;
          }
          for (let j = 0; j < rightNsl.noteLayouts.length; j++) {
            const noteLayout = rightNsl.noteLayouts[j];
            if (noteLayout.note.liaisonStartNote === leftNl.note) {
              rightNl = noteLayout;
              break;
            }
          }
          if (rightNl == null) {
            rightNsl = null;
          }
        }
        if (liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.TIE_LIAISON && !leftNsl.context.staffMetrics.tieSingleNoteEnabled) {
          singleNote = false;
        }
        liaisonLayout = (0,_utils_liaison_layout__WEBPACK_IMPORTED_MODULE_5__.createLiaisonLayout)(leftNl.note, this.noteEditorService);
        liaisonLayout.setLiaisonInfo(leftNsl, leftNl, rightNsl, rightNl, singleNote, width, i, liaisonCount);
      }
      liaisons.push(liaisonLayout);
    }
    this.addLiaisonViews(liaisons);
  }
  drawLiaisonContinuations(rightNsl, width) {
    let singleNote = !rightNsl.multiVoice && rightNsl.noteSet.notes.length === 1;
    const liaisonCount = rightNsl.noteSet.liaisonCount;
    const liaisonLayouts = [];
    const showRhythm = rightNsl.measureLayout.measure.effectiveClef.showRhythm(this.context.layoutContext.score);
    const firstLayoutOnSystem = rightNsl.measureLayout.firstLayoutOnSystem;
    for (let i = 0; i < rightNsl.noteLayouts.length; i++) {
      let liaison;
      const noteLayout = rightNsl.noteLayouts[i];
      const rightNl = noteLayout;
      let note = null;
      let rightNlNote = rightNl.note;
      if (rightNlNote.incomingLiaison) {
        note = rightNlNote.clone();
        note.liaison = rightNlNote.incomingLiaison;
        liaison = note.liaison;
      } else {
        note = rightNlNote.liaisonStartNote;
        if (note == null || note.measure == null || note.measure.staff == null || !note.measure.flowsToNextMeasure || note.liaisonEndNote !== rightNlNote && note.liaisonEndNote || !firstLayoutOnSystem) {
          continue;
        }
        liaison = note.liaison;
      }
      if (liaison && (showRhythm || liaison !== _models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.TIE_LIAISON)) {
        if (liaison === _models_liaison__WEBPACK_IMPORTED_MODULE_3__.Liaison.TIE_LIAISON && !rightNsl.context.staffMetrics.tieSingleNoteEnabled) {
          singleNote = false;
        }
        const liaisonLayout = (0,_utils_liaison_layout__WEBPACK_IMPORTED_MODULE_5__.createLiaisonLayout)(note, this.noteEditorService);
        liaisonLayout.setLiaisonInfo(null, null, rightNsl, rightNl, singleNote, width, i, liaisonCount);
        liaisonLayouts.push(liaisonLayout);
      }
    }
    this.addLiaisonViews(liaisonLayouts);
  }
  addLiaisonViews(layouts) {
    if (layouts.length > 0) {
      _layouts_liaison_layout__WEBPACK_IMPORTED_MODULE_2__["default"].adjustLiaisonSpacing(layouts);
      for (let i = 0; i < layouts.length; i++) {
        const layout = layouts[i];
        const liaisonView = layout.createLiaisonView();
        if (liaisonView) {
          this._liaisonSprite.addChild(liaisonView);
        }
      }
      this.updateStatus();
    }
  }
}

/***/ }),

/***/ 17927:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/overlay-staff-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OverlayStaffView)
/* harmony export */ });
/* harmony import */ var _staff_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./staff-view */ 72908);

class OverlayStaffView extends _staff_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get lastDrawnMeasure() {
    return this.getMeasurePrefixesViewAt(0).prefixes[0];
  }
  constructor(context, layout, viewIndex, rootDiv, noteEditorService) {
    super(context, layout, viewIndex, rootDiv, noteEditorService);
  }
  updateMeasureAt(idx) {
    this.updatePrefixes(idx);
  }
  updateView() {
    this.destroyChildren();
    this._measurePrefixesViews = {};
    this.createMeasurePrefixesViewsAt(0);
    this._staffStartView = this._measurePrefixesViews[0].prefixes[0];
  }
}

/***/ }),

/***/ 11498:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/views/overlay-system-view.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OverlaySystemView)
/* harmony export */ });
/* harmony import */ var _layouts_system_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/system-view */ 46882);
/* harmony import */ var _overlay_staff_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./overlay-staff-view */ 17927);


class OverlaySystemView extends _layouts_system_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, layout, editorFonts, rootDiv, noteEditorService) {
    super(context, layout, editorFonts, rootDiv, noteEditorService);
    // layout.addEventListener(
    //   StaffStartChangeEvent.STAFF_START_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleStaffStartChange)
    // );
  }

  initializeView() {
    super.initializeView();
    this.updateGeometry();
  }
  handleStaffStartChange(t) {
    for (let i = 0; i < this._staffViews.length; i++) {
      const staffView = this._staffViews[i];
      staffView.updateMeasureAt(0);
    }
  }
  createStaffView(staffLayout, isLast, idx) {
    const overlayStaffView = new _overlay_staff_view__WEBPACK_IMPORTED_MODULE_1__["default"](this.context, staffLayout, idx, this.rootDiv, this.noteEditorService);
    overlayStaffView.x = this.toViewUnits(this._layout.leftPadding);
    overlayStaffView.y = this.toViewUnits(staffLayout.distanceY);
    this._staffViews.push(overlayStaffView);
    return this.y;
  }
  updateSpanNotations(t) {}
  removeListeners() {
    // this._layout.removeEventListener(
    //   StaffStartChangeEvent.STAFF_START_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleStaffStartChange)
    // );
  }
  handleMeasureDisplay(evt) {
    if (this.stage) {
      let staff, indice, staffView;
      this.layout.validateGlobalLayout();
      for (let i = 0; i < evt.measureIndices.length; i++) {
        const indice = evt.measureIndices[i];
        if (indice === this._layout.startMeasureIndex) {
          if (evt.staves && evt.staves.length && evt.staves[0].index !== -1) {
            for (let j = 0; j < evt.staves.length; j++) {
              staff = evt.staves[j];
              if (staff.index !== -1) {
                staffView = this.getViewForStaff(staff);
                staffView.updateMeasureAt(indice - this._layout.startMeasureIndex);
              }
            }
          } else {
            for (let i = 0; i < this._staffViews.length; i++) {
              staffView = this._staffViews[i];
              staffView.updateMeasureAt(indice - this._layout.startMeasureIndex);
            }
          }
          for (let i = 0; i < this._staffViews.length; i++) {
            staffView = this._staffViews[i];
            staffView.updateGeometry();
          }
        }
      }
      this.updateGeometry();
    }
  }
}

/***/ }),

/***/ 95114:
/*!********************************************************!*\
  !*** ./src/app/note-editor/views/overlay-view-info.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ OverlayViewInfo)
/* harmony export */ });
/* harmony import */ var _layouts_view_info__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layouts/view-info */ 89305);

class OverlayViewInfo extends _layouts_view_info__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get staffHandleExtent() {
    return this._$staffHandleExtent;
  }
  set staffHandleExtent(t) {
    this._$staffHandleExtent = t;
  }
  constructor() {
    super();
    this._$staffHandleExtent = 5;
  }
  clone() {
    const overlayViewInfo = new OverlayViewInfo();
    // overlayViewInfo.feedbackColor = this.feedbackColor;
    return overlayViewInfo;
  }
}

/***/ }),

/***/ 89531:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/page-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PageView)
/* harmony export */ });
/* harmony import */ var _display_preview_watermark__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/preview-watermark */ 69513);
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layouts/system-view */ 46882);
/* harmony import */ var _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/anti-alias-type */ 52348);
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _text_text_format_align__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../text/text-format-align */ 48520);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./score-object-view */ 39928);
/* harmony import */ var _score_text_field__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./score-text-field */ 61474);
/* harmony import */ var _track_flag_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./track-flag-view */ 87628);











class PageView extends _score_object_view__WEBPACK_IMPORTED_MODULE_8__["default"] {
  static get SCORE() {
    return 'score';
  }
  static get PLACEHOLDER() {
    return 'placeholder';
  }
  static get MAX_COPYRIGHT_SIZE() {
    return 9.6;
  }
  static get DEFAULT_PART_NAME_SIZE() {
    return 12;
  }
  static get DEFAULT_PAGE_MARGIN_TOP() {
    return 16;
  }
  static get DEFAULT_PAGE_MARGIN_LEFT() {
    return 16;
  }
  static get DEFAULT_PAGE_MARGIN_RIGHT() {
    return 18;
  }
  static get DEFAULT_WATERMARK_STARTING_PAGE() {
    return 1;
  }
  static get DEFAULT_WATERMARK_STARTING_MEASURE() {
    return 0;
  }
  static get HEADER_FIELDS() {
    return ['lyricist', 'arranger', 'composer', 'title', 'supertitle', 'prompt', 'subtitle'];
  }
  get isPlaceHolder() {
    return this._state === PageView.PLACEHOLDER;
  }
  get layout() {
    return this._layout;
  }
  get index() {
    return this._layout.index;
  }
  get showEndOfPreviewText() {
    return this._showEndOfPreviewText;
  }
  set layout(t) {
    this.removeListeners();
    this._layout = t;
    this.setListeners();
    if (this.state === PageView.SCORE) {
      this.refreshPageView();
    }
  }
  get startMeasureIndex() {
    return this._layout.startMeasureIndex;
  }
  get endMeasureIndex() {
    return this._layout.endMeasureIndex;
  }
  get state() {
    return this._state;
  }
  set state(t) {
    if (this._state !== t) {
      if (t === PageView.PLACEHOLDER) {
        this.showPlaceholder();
        this._state = t;
      } else if (t === PageView.SCORE) {
        if (this.layout.isActualLayout) {
          this.showScore();
          this._state = t;
        }
      }
    }
  }
  get lastDrawnMeasure() {
    for (let i = this._chunkViews.length - 1; i >= 0; i--) {
      const chunkView = this._chunkViews[i];
      if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        return chunkView.lastDrawnMeasure;
      }
    }
    return null;
  }
  get systemViews() {
    return this._chunkViews;
  }
  get firstSystem() {
    return this._chunkViews[0];
  }
  get lastSystem() {
    return this._chunkViews[this._chunkViews.length - 1];
  }
  get actualSystemViews() {
    const systemViews = [];
    for (let i = 0; i < this._chunkViews.length; i++) {
      const chunkView = this._chunkViews[i];
      if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        systemViews.push(chunkView);
      }
    }
    return systemViews;
  }
  get footerField() {
    const footerField = this._scoreTextFields.find(t => 'footer' === t._property);
    if (footerField) {
      return footerField;
    } else {
      return this._scoreTextFields.find(t => t._property === 'copyright');
    }
  }
  get headerFields() {
    return this._scoreTextFields.filter(t => PageView.HEADER_FIELDS.includes(t._property));
  }
  get watermarkScale() {
    const documentView = this._context.documentView;
    if (documentView && documentView.watermarkScale != null) {
      return documentView.watermarkScale;
    }
    const options = this._context.options;
    if (options && options.watermarkScale != null) {
      return options.watermarkScale;
    }
    throw new Error('Assertion failed: no watermarkScale available');
  }
  get watermarkStartingPage() {
    const documentView = this._context.documentView;
    const options = this._context.options;
    // if (documentView && documentView.watermarkStartingPage != null) {
    //   return documentView.watermarkStartingPage;
    // } else if (options && options.watermarkStartingPage != null) {
    //   return options.watermarkStartingPage;
    // } else {
    return PageView.DEFAULT_WATERMARK_STARTING_PAGE;
    // }
  }

  get watermark() {
    const documentView = this._context.documentView;
    const options = this._context.options;
    if (documentView && documentView.watermark != null) {
      return documentView.watermark;
    }
    if (options && options.watermark != null) {
      return options.watermark;
    }
  }
  get headerHeight() {
    const maxHeight = Math.max(...this.headerFields.map(t => t.y + t.height));
    return this._contentSprite.y + maxHeight;
  }
  get footerHeight() {
    const height = this.footerField ? this.footerField.height : 0;
    return this.pageMetrics.pageMarginBottom + height;
  }
  constructor(context, layout, editorFonts, rootDiv, noteEditorService, options = {
    showScoreInfo: true
  }) {
    super(context, noteEditorService, rootDiv);
    this._chunkViews = [];
    this._backdropSprite = null;
    this._contentSprite = null;
    this._shadowSprite = null;
    this._scoreTextFields = [];
    this._createdShadows = 0;
    this._state = PageView.SCORE;
    this._actualPage = null;
    this._placeholderInMemory = null;
    this._pageCleared = false;
    this._layout = layout;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this._isLastPage = options.isLastPage;
    this._showEndOfPreviewText = options.showEndOfPreviewText;
    this._showScoreInfo = options.showScoreInfo;
    if (layout.isActualLayout) {
      this.init();
    }
  }
  init() {
    this.setListeners();
    this.initializeView();
    // this.mouseChildrenOnRoll(); todo
  }

  setListeners() {
    this.onDisplaySub$ = this.noteEditorService.onPageDisplay.subscribe(evt => {
      this.handleMeasureDisplay(evt);
    });
  }
  refreshPageView() {
    this.update();
    this.positionChunkViews();
    this._pageCleared = false;
  }
  setNewLayout(layout) {
    this.removeListeners();
    this._layout = layout;
    this.setListeners();
    if (this.state === PageView.SCORE) {
      this.refreshPageView();
    }
  }
  showPlaceholder() {
    this.removeChild(this._actualPage);
    if (!this._placeholderInMemory) {
      this._placeholderInMemory = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
      this._placeholderInMemory.graphics.beginFill(this.pageMetrics.upcomingPageBackgroundColor, this.pageMetrics.upcomingPageBackgroundOpacity);
      this._placeholderInMemory.graphics.drawRect(0, 0, this.pageMetrics.width, this.pageMetrics.height);
      if (this.context.documentView.showHtml5Shadow) {
        this._placeholderInMemory.x = this.pageMetrics.horizontalScoreShadowSize;
      }
      const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_4__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
      textField.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_6__["default"](this.pageMetrics.upcomingPageTextFont, this.pageMetrics.upcomingPageTextSize, null, false, false, null, null, null, _text_text_format_align__WEBPACK_IMPORTED_MODULE_7__.TextFormatAlign.LEFT);
      textField.text = `Building page ${this.index + 1}`;
      textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__.AntiAliasType.ADVANCED;
      textField.embedFonts = true;
      textField.textColor = this.pageMetrics.upcomingPageTextColor;
      textField.backgroundColor = 0xffffff;
      textField.background = false;
      textField.multiline = true;
      textField.wordWrap = true;
      textField.x = this.pageMetrics.width / 2 - textField.width / 2;
      textField.y = this.pageMetrics.height / 2 - textField.height / 2;
      this._placeholderInMemory.addChild(textField);
    }
    this.addChild(this._placeholderInMemory);
  }
  showScore() {
    if (this.layout.isActualLayout) {
      if (this._pageCleared || this.layout.isActualLayout && !this._actualPage) {
        this.refreshPageView();
      }
      if (this._placeholderInMemory && this.getChildIndex(this._placeholderInMemory) > -1) {
        this.removeChild(this._placeholderInMemory);
      }
      this.addChild(this._actualPage);
    }
  }
  clearPage() {
    if (this._actualPage) {
      this._pageCleared = true;
      while (this._actualPage.numChildren > 0) {
        this._actualPage.removeChildAt(0);
      }
    }
  }
  clearChunksStartingAt(startIdx) {
    for (let i = startIdx; i < this._chunkViews.length; i++) {
      const chunkView = this._chunkViews[i];
      chunkView.destroy();
      this._contentSprite.removeChild(chunkView);
    }
  }
  removeListeners() {
    // todo
    if (this.onDisplaySub$) {
      this.onDisplaySub$.unsubscribe();
    }
  }
  destroyChildren() {
    for (let i = 0; i < this._chunkViews.length; i++) {
      const chunkView = this._chunkViews[i];
      chunkView.destroy();
    }
    for (let i = 0; i < this._scoreTextFields.length; i++) {
      const textField = this._scoreTextFields[i];
      textField.destroy();
    }
  }
  getPointInMeasure(measureIdx, staff, mPosition, posOpts = null) {
    if (measureIdx >= this.startMeasureIndex && measureIdx < this.endMeasureIndex) {
      for (let i = 0; i < this._chunkViews.length; i++) {
        const chunkView = this._chunkViews[i];
        if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
          const point = chunkView.getPointInMeasure(measureIdx, staff, mPosition, posOpts);
          if (point) {
            return point;
          }
        }
      }
    }
    return null;
  }
  getPositionUnderPoint(context, point, quantum, staff = null, posOpts = null) {
    let systemView;
    for (let i = 0; i < this._chunkViews.length; i++) {
      const chunkView = this._chunkViews[i];
      if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        systemView = chunkView;
        const pointInMeasure = systemView.getPointInMeasure(systemView.layout.startMeasureIndex, null, 0, {
          verticalAlign: 'bottom'
        });
        if (point.y <= pointInMeasure.y + this.toViewUnits(this.staffMetrics.systemSpacing / 2)) {
          if (i < this._chunkViews.length - 1) {
            const nextChunkView = this._chunkViews[i + 1];
            if (nextChunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
              const nextSystemView = nextChunkView;
              const contentY = nextSystemView.getPointInMeasure(nextSystemView.layout.startMeasureIndex, null, 0, {
                verticalAlign: 'top'
              }).y - this.toViewUnits(this.staffMetrics.measureHandlePadding);
              if (nextSystemView.areHandlesShown() && point.y > contentY) {
                return nextSystemView.getPositionUnderPoint(context, point, quantum, staff, posOpts);
              }
            }
          }
          return systemView.getPositionUnderPoint(context, point, quantum, staff, posOpts);
        }
      }
    }
    if (systemView) {
      return systemView.getPositionUnderPoint(context, point, quantum, staff, posOpts);
    } else {
      return null;
    }
  }
  createCopyrightField(footerField) {
    const options = {
      bold: this.staffMetrics.copyrightBold,
      editableElement: !this.layout.score.lockCopyright,
      editGroupName: 'Copyright',
      italics: false,
      markdown: false,
      maxSize: PageView.MAX_COPYRIGHT_SIZE,
      model: this._layout.score,
      property: 'copyright'
    };
    const scoreTextField = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.CENTER, this.staffMetrics.copyrightFont, -this.staffMetrics.copyrightSize, this.editorFonts, options, this.rootDiv, this.noteEditorService);
    scoreTextField.multiline = true;
    scoreTextField.x = this.pageMetrics.contentWidth / 2;
    scoreTextField.y = this.pageMetrics.contentHeight - scoreTextField.height;
    if (footerField) {
      scoreTextField.y = Math.min(footerField.y - scoreTextField.height, scoreTextField.y);
    }
    this._scoreTextFields.push(scoreTextField);
    this._contentSprite.addChild(scoreTextField);
  }
  createFooterField() {
    const options = {
      bold: this.staffMetrics.footerBold,
      editableElement: false,
      editGroupName: 'Footer',
      markdown: false,
      model: this._layout.score,
      property: 'footer'
    };
    const scoreTextField = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.CENTER, this.staffMetrics.footerFont, -this.staffMetrics.footerSize, this.editorFonts, options, this.rootDiv, this.noteEditorService);
    scoreTextField.multiline = true;
    scoreTextField.wordWrap = true;
    scoreTextField.setColor(this.staffMetrics.footerColor);
    scoreTextField.setTextWidth(this.pageMetrics.contentWidth);
    scoreTextField.x = this.pageMetrics.contentWidth / 2 - scoreTextField.width / 2;
    scoreTextField.y = this.pageMetrics.bottomVisiblePageYPosition - scoreTextField.height;
    return scoreTextField;
  }
  hasFooter() {
    return this.footerField && this.footerField.text;
  }
  updateBackdrop(pageHeight) {
    this.graphics.beginFill(0xffffff);
    let horizontalScoreShadowSize = 0,
      verticalScoreShadowSize = 0;
    if (this.context.documentView && this.context.documentView.showHtml5Shadow()) {
      horizontalScoreShadowSize = this.pageMetrics.horizontalScoreShadowSize;
      verticalScoreShadowSize = this.pageMetrics.verticalScoreShadowSize;
      this.createShadow(pageHeight);
    }
    this.graphics.drawRect(horizontalScoreShadowSize, verticalScoreShadowSize, this.pageMetrics.width, pageHeight);
    this.graphics.endFill();
  }
  createShadow(pageHeight) {
    const contentWidth = this.pageMetrics.width - 2 * this.pageMetrics.horizontalScoreShadowSize;
    this.createShadowImage(2 * this.pageMetrics.horizontalScoreShadowSize, 0, contentWidth, 1, 'Top');
    this.createShadowImage(0, 0, 1, 1, 'TopLeft');
    this.createShadowImage(this.pageMetrics.width, 0, 1, 1, 'TopRight');
    let contentHeight = pageHeight - 2 * this.pageMetrics.verticalScoreShadowSize;
    if (this._showEndOfPreviewText) {
      contentHeight = pageHeight - this.pageMetrics.verticalScoreShadowSize;
      contentHeight += 1 * this.pageMetrics.horizontalScoreShadowSize;
    } else {
      this.createShadowImage(2 * this.pageMetrics.horizontalScoreShadowSize, this.pageMetrics.verticalScoreShadowSize + pageHeight, contentWidth, 1, 'Bottom');
      this.createShadowImage(0, pageHeight, 1, 1, 'BottomLeft');
      this.createShadowImage(this.pageMetrics.width, pageHeight, 1, 1, 'BottomRight');
    }
    this.createShadowImage(0, 2 * this.pageMetrics.verticalScoreShadowSize, 1, contentHeight, 'Left');
    this.createShadowImage(this.pageMetrics.horizontalScoreShadowSize + this.pageMetrics.width, 2 * this.pageMetrics.verticalScoreShadowSize, 1, contentHeight, 'Right');
  }
  createShadowImage(x, y, scaleX, scaleY, position) {
    const cachedShadow = this._context.documentView.cachedShadows[position + this._layout.index];
    if (cachedShadow) {
      this.positionShadowImage(cachedShadow, this, x, y, scaleX, scaleY);
    } else {
      //todo
    }
  }
  positionShadowImage(shadow, pageView, x, y, scaleX, scaleY) {
    shadow.x = x;
    shadow.y = y;
    shadow.scaleX = scaleX;
    shadow.scaleY = scaleY;
    pageView._shadowSprite.addChild(shadow);
    pageView._createdShadows++;
    if (pageView._createdShadows === 8) {
      pageView._context.documentView.updateScoreDimensions();
    }
  }
  resizeWatermark(watermark) {
    // todo
  }
  update() {
    this.updateView();
  }
  updateView(layout) {
    if (!this._layout.isLayoutValid()) {
      this.destroy();
    }
    this.destroyChildren();
    if (layout) {
      this._layout = layout;
    }
    if (this._actualPage && this.getChildIndex(this._actualPage) > -1) {
      this.removeChild(this._actualPage);
    }
    if (this._placeholderInMemory && this.getChildIndex(this._placeholderInMemory) > -1) {
      this.removeChild(this._placeholderInMemory);
    }
    this._actualPage = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
    this.addChild(this._actualPage);
    this._shadowSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
    this._shadowSprite.x = 0;
    this._shadowSprite.y = 0;
    this._actualPage.addChild(this._shadowSprite);
    this._scoreTextFields = [];
    let leftPadding = this.pageMetrics.pageMarginLeft + this.pageMetrics.staffMarginLeft;
    let topPadding = this.pageMetrics.pageMarginTop + this.pageMetrics.staffMarginTop;
    if (!this.context.info.printView && this.context.documentView.showHtml5Shadow()) {
      leftPadding += this.pageMetrics.horizontalScoreShadowSize;
      topPadding += this.pageMetrics.verticalScoreShadowSize;
    }
    this._backdropSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
    this._backdropSprite.x = leftPadding;
    this._backdropSprite.y = topPadding;
    this._actualPage.addChild(this._backdropSprite);
    this._contentSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
    this._contentSprite.x = leftPadding;
    this._contentSprite.y = topPadding;
    this._actualPage.addChild(this._contentSprite);
    let textFieldOptions,
      composer,
      lyricist,
      arranger,
      sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
    sprite.graphics.beginFill(0xff0000);
    sprite.graphics.drawRect(0, 0, this.pageMetrics.width, this.pageMetrics.height);
    sprite.graphics.endFill();
    // sprite.mouseEnabled = false;// todo InteractiveObject
    this._actualPage.addChild(sprite);
    this._contentSprite.mask = sprite;
    const score = this._layout.score;
    let showPartNameAtTopLeft = false;
    if (score.showPartNameAtTopLeftOfThePage(this._layout.index)) {
      const options = {
        editableElement: false,
        minSize: PageView.DEFAULT_PART_NAME_SIZE,
        maxSize: PageView.DEFAULT_PART_NAME_SIZE
      };
      const prompt = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.LEFT, this.staffMetrics.textFont, -this.staffMetrics.partNameSize, this.editorFonts, options, this.rootDiv, this.noteEditorService);
      showPartNameAtTopLeft = true;
      prompt.x = 0;
      prompt.y = -this.pageMetrics.staffMarginTop + this.staffMetrics.partNameAtTheTopOffset - (this.pageMetrics.pageMarginTop - PageView.DEFAULT_PAGE_MARGIN_TOP);
      prompt.text = score.useIndividualPartInfo ? score.useIndividualPartInfo.name : score.visibleParts[0].name;
      this._scoreTextFields.push(prompt);
      this._contentSprite.addChild(prompt);
    }
    let footerField = null;
    if (this._layout.score.footer) {
      footerField = this.createFooterField();
      this._scoreTextFields.push(footerField);
      this._contentSprite.addChild(footerField);
    }
    if (this.layout.index === 0) {
      if (this._showScoreInfo) {
        let superTitleBottom = 0;
        if (this._layout.score.supertitle) {
          textFieldOptions = {
            model: this._layout.score,
            property: 'supertitle',
            editGroupName: 'Supertitle',
            markdown: false,
            bold: this.staffMetrics.supertitleBold
          };
          const superTitle = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.CENTER, this.staffMetrics.supertitleFont, -this.staffMetrics.supertitleSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
          superTitle.multiline = true;
          superTitle.x = this.pageMetrics.contentWidth / 2;
          superTitle.y = -this.pageMetrics.staffMarginTop + this.toViewUnits(this.staffMetrics.titleY);
          this._scoreTextFields.push(superTitle);
          this._contentSprite.addChild(superTitle);
          superTitleBottom = superTitle.y + superTitle.height;
        }
        textFieldOptions = {
          model: this._layout.score,
          property: 'title',
          editGroupName: 'Title',
          markdown: false,
          bold: this.staffMetrics.titleBold,
          editableElement: !this.layout.score.lockTitle
        };
        const title = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.CENTER, this.staffMetrics.titleFont, -this.staffMetrics.titleSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
        title.x = this.pageMetrics.contentWidth / 2;
        title.y = superTitleBottom !== 0 ? superTitleBottom + this.toViewUnits(this.staffMetrics.titlePageSupertitlePadding) : -this.pageMetrics.staffMarginTop + this.toViewUnits(this.staffMetrics.titleY);
        this._scoreTextFields.push(title);
        this._contentSprite.addChild(title);
        textFieldOptions = {
          model: this._layout.score,
          property: 'subtitle',
          editGroupName: 'Subtitle',
          markdown: false,
          bold: this.staffMetrics.subtitleBold
        };
        const subTitle = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.CENTER, this.staffMetrics.subtitleFont, -this.staffMetrics.subtitleSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
        subTitle.multiline = true;
        subTitle.x = this.pageMetrics.contentWidth / 2;
        subTitle.y = title.y + title.height + this.toViewUnits(this.staffMetrics.titlePageSubtitlePadding);
        this._scoreTextFields.push(subTitle);
        this._contentSprite.addChild(subTitle);
        let fieldY = -this.pageMetrics.staffMarginTop + this.toViewUnits(this.staffMetrics.composerY);
        const lowestTitle = this._layout.score.subtitle ? subTitle : title;
        const y = lowestTitle.y + lowestTitle.height + this.toViewUnits(this.staffMetrics.composerBottomPadding);
        fieldY = Math.max(fieldY, y);
        textFieldOptions = {
          model: this._layout.score,
          property: 'composer',
          editGroupName: 'Composer',
          markdown: false,
          bold: this.staffMetrics.composerBold,
          editableElement: !this.layout.score.lockComposer
        };
        const composer = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.RIGHT, this.staffMetrics.composerFont, -this.staffMetrics.composerSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
        composer.x = this.pageMetrics.contentWidth;
        composer.y = fieldY;
        this._scoreTextFields.push(composer);
        this._contentSprite.addChild(composer);
        textFieldOptions = {
          model: this._layout.score,
          property: 'lyricist',
          editGroupName: 'Lyricist',
          markdown: false,
          bold: this.staffMetrics.lyricsBold,
          editableElement: !this.layout.score.lockLyricist
        };
        const lyricist = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.LEFT, this.staffMetrics.lyricistFont, -this.staffMetrics.composerSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
        lyricist.multiline = true;
        lyricist.x = 0;
        lyricist.y = fieldY;
        this._scoreTextFields.push(lyricist);
        this._contentSprite.addChild(lyricist);
        if (this.layout.score.showArranger) {
          const arrangeY = lyricist.y + lyricist.height;
          textFieldOptions = {
            model: this._layout.score,
            property: 'arranger',
            editGroupName: 'Text',
            markdown: false,
            bold: false //this.staffMetrics.arrangerBold,
          };

          const arranger = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.LEFT, this.staffMetrics.arrangerFont, -this.staffMetrics.composerSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
          arranger.multiline = true;
          arranger.y = arrangeY;
          this._scoreTextFields.push(arranger);
          this._contentSprite.addChild(arranger);
        }
      }
      if (!this._showEndOfPreviewText) {
        this.createCopyrightField(footerField);
      }
    } else if (this._showScoreInfo) {
      const prompt = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.RIGHT, this.staffMetrics.textFont, -this.staffMetrics.pageNumberSize, this.editorFonts, {
        editableElement: false
      }, this.rootDiv, this.noteEditorService);
      prompt.x = this.pageMetrics.contentWidth + (this.pageMetrics.pageMarginRight - PageView.DEFAULT_PAGE_MARGIN_RIGHT);
      prompt.y = -this.pageMetrics.staffMarginTop - (this.pageMetrics.pageMarginTop - PageView.DEFAULT_PAGE_MARGIN_TOP);
      if (showPartNameAtTopLeft) {
        prompt.y += this.staffMetrics.partNameAtTheTopOffset;
      }
      let scoreInfo = (this._layout.index + 1).toString();
      if (this.staffMetrics.pageNumberIncludesTitle) {
        const scoreTitle = this._layout.score.title;
        if (scoreTitle) {
          scoreInfo = scoreTitle + ' - ' + scoreInfo;
        }
      }
      prompt.text = scoreInfo;
      this._scoreTextFields.push(prompt);
      this._contentSprite.addChild(prompt);
      if (this.staffMetrics.showCopyrightOnAllPages && !this._showEndOfPreviewText) {
        this.createCopyrightField(footerField);
      }
    }
    this._chunkViews = [];
    for (let i = 0; i < this._layout.chunkLayoutsLength; i++) {
      this.drawChunk(i);
    }
    if (this._layout.index === 0 && this._layout.score.prompt && this._showScoreInfo) {
      textFieldOptions = {
        model: this._layout.score,
        property: 'prompt',
        editGroupName: 'Prompt',
        markdown: true
      };
      const prompt = new _score_text_field__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_5__.TextFieldAutoSize.LEFT, this.staffMetrics.textFont, -this.staffMetrics.titlePagePromptSize, this.editorFonts, textFieldOptions, this.rootDiv, this.noteEditorService);
      prompt.x = this.toViewUnits(this.staffMetrics.titlePagePromptPadding.left);
      let scoreTextFieldY = this.toViewUnits(this.staffMetrics.titlePageFirstStaffPadding + this.staffMetrics.titlePagePromptPadding.top);
      if (composer && lyricist) {
        const fieldY = Math.max(composer.y + composer.height, lyricist.y + lyricist.height);
        scoreTextFieldY = Math.max(scoreTextFieldY, fieldY);
      }
      prompt.y = scoreTextFieldY;
      prompt.multiline = true;
      prompt.wordWrap = true;
      prompt.setTextWidth(this.pageMetrics.contentWidth - this.toViewUnits(this.staffMetrics.titlePagePromptPadding.right));
      this._scoreTextFields.push(prompt);
      this._contentSprite.addChild(prompt);
    }
    if (this._layout.index === 0 && this._layout.score.hasTracks && !this.context.info.printView) {
      const trackFlagView = new _track_flag_view__WEBPACK_IMPORTED_MODULE_10__["default"](this.context, this._layout.score, this.noteEditorService, this.rootDiv);
      trackFlagView.x = this.toViewUnits(this.pageMetrics.trackFlagX);
      trackFlagView.y = -this.pageMetrics.staffMarginTop + this.toViewUnits(this.pageMetrics.trackFlagY);
      this._contentSprite.addChild(trackFlagView);
    }
    if (this.watermark && this._layout.index >= this.watermarkStartingPage) {
      this.drawPreviewWatermark();
    }
    let pageMetricsHeight = this.pageMetrics.height;
    if (this._showEndOfPreviewText) {
      this.drawPreviewFeedback();
      pageMetricsHeight = this._contentSprite.y + this.lastSystem.y + this.lastSystem.height;
    }
    this.updateBackdrop(pageMetricsHeight);
  }
  drawChunk(chunkIdx) {
    const chunkLayout = this._layout.getChunkLayoutAt(chunkIdx);
    if (chunkLayout && this._contentSprite) {
      const chunkView = this._chunkViews[chunkIdx];
      let count = 0;
      if (chunkView) {
        this._backdropSprite.removeChild(chunkView.backdropSprite);
        this._contentSprite.removeChild(chunkView);
        if (!this.context.info.useMeasureViewsCache) {
          chunkView.destroy();
        }
        count = 1;
      }
      chunkLayout.validateGlobalLayout();
      // if (chunkLayout instanceof SystemLayout) {
      //   debugger;
      // }
      const displayObj = chunkLayout.createDisplayObject(this.context);
      displayObj.y = this.toViewUnits(chunkLayout.distanceY);
      this._contentSprite.addChild(displayObj);
      if (displayObj instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        const n = displayObj;
        n.backdropSprite.x = displayObj.x;
        n.backdropSprite.y = displayObj.y;
        this._backdropSprite.addChild(n.backdropSprite);
      }
      this._chunkViews.splice(chunkIdx, count, displayObj);
    }
  }
  drawPreviewWatermark() {
    const previewWatermark = new _display_preview_watermark__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    previewWatermark._svg.classList.add('previewWatermark');
    this.resizeWatermark(previewWatermark);
  }
  drawPreviewFeedback() {
    const y = this._contentSprite.y + this.lastSystem.y + this.lastSystem.height;
    let horizontalShadowSize;
    if (!this.context.info.printView && this.context.documentView.showHtml5Shadow()) {
      horizontalShadowSize = this.pageMetrics.horizontalScoreShadowSize;
    } else {
      horizontalShadowSize = 0;
    }
    const pageWidth = this.pageMetrics.width;
    this.createShadowImage(horizontalShadowSize, y, pageWidth, 1, 'Preview');
    const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_4__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
    textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_3__.AntiAliasType.ADVANCED;
    textField.embedFonts = true;
    textField.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_6__["default"](this.pageMetrics.previewTextFont, this.pageMetrics.previewTextSize, null, this.pageMetrics.previewTextBold, false, null, null, null, _text_text_format_align__WEBPACK_IMPORTED_MODULE_7__.TextFormatAlign.CENTER);
    textField.text = 'End Of Preview';
    textField.textColor = this.pageMetrics.previewTextColor;
    textField.x = this.pageMetrics.width / 2 + horizontalShadowSize - textField.width / 2;
    textField.y = y + this.pageMetrics.previewTextGap;
    this._actualPage.addChild(textField);
  }
  positionChunkViews() {
    this.layout.positionChunkLayouts();
    for (let i = 0; i < this._chunkViews.length; i++) {
      const chunkView = this._chunkViews[i];
      chunkView.y = this.toViewUnits(chunkView.layout.distanceY);
      if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
        chunkView.backdropSprite.y = this.toViewUnits(chunkView.layout.distanceY);
      }
    }
  }
  handleMeasureDisplay(evt) {
    if (this.stage) {
      for (let i = 0; i < this._chunkViews.length; i++) {
        const chunkView = this._chunkViews[i];
        if (chunkView instanceof _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"]) {
          const systemView = chunkView;
          if (systemView.layout.startMeasureIndex === evt.systemLayout.startMeasureIndex) {
            systemView.layout.constraint.generateLayoutVector(evt.systemLayout.constraint.lastWeights);
            systemView.handleMeasureDisplay(evt);
            break;
          }
        }
      }
      this.positionChunkViews();
    }
  }
}

/***/ }),

/***/ 61609:
/*!*****************************************************!*\
  !*** ./src/app/note-editor/views/paginated-view.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PaginatedView)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _layouts_placeholder_page_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layouts/placeholder-page-layout */ 73428);
/* harmony import */ var _page_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./page-view */ 89531);
/* harmony import */ var _score_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./score-view */ 67428);
/* harmony import */ var _view_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./view-context */ 65532);





class PaginatedView extends _score_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  static get INCREMENTAL_LAYOUT_LOOKAHEAD() {
    return 300;
  }
  get layout() {
    return this._layout;
  }
  get lastRealPageViewIndex() {
    let lastIdx = this._pageViews.length - 1;
    let pageView = this._pageViews[lastIdx];
    while (!pageView && lastIdx > 0) {
      lastIdx--;
      pageView = this._pageViews[lastIdx];
    }
    return lastIdx + 1;
  }
  get pageViews() {
    return this._pageViews;
  }
  get isHorizontalFlow() {
    return this.context.flowDirection === _view_context__WEBPACK_IMPORTED_MODULE_4__["default"].FLOW_HORIZONTAL;
  }
  get totalPageFlowElements() {
    return this.lastRealPageViewIndex;
  }
  get currentTopPageIndexInViewport() {
    const documentView = this.context.documentView;
    if (!documentView) {
      return 0;
    }
    let topPosition = this.rootDiv.scrollTop / documentView.viewInfo.displayScale;
    return Math.floor(topPosition / (this._pageMetrics.height + this._pageMetrics.pageViewSpacing));
  }
  get currentBottomPageIndexInViewport() {
    const documentView = this.context.documentView;
    if (!documentView) {
      return this.layout.pageLayouts.length - 1;
    }
    const bottomPosition = (this.rootDiv.scrollTop + documentView.viewportHeight) / documentView.viewInfo.displayScale;
    return Math.floor(bottomPosition / (this._pageMetrics.height + this._pageMetrics.pageViewSpacing));
  }
  get width() {
    return this.getWidthOfPages(1);
  }
  set width(t) {
    super.width = t;
  }
  get height() {
    if (this.context.documentView.overlay) {
      return 0;
    } else {
      return this.getHeightOfPages(this.lastDrawnPage.index + 1);
    }
  }
  set height(t) {
    super.height = t;
  }
  get lastDrawnScorePage() {
    for (let i = this._pageViews.length - 1; i >= 0; i--) {
      const pageView = this._pageViews[i];
      if (pageView && pageView.state === _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE) {
        return pageView;
      }
    }
    return this._pageViews[0];
  }
  get lastDrawnPage() {
    for (let i = this._pageViews.length - 1; i >= 0; i--) {
      const pageView = this._pageViews[i];
      if (pageView) {
        return pageView;
      }
    }
    return this._pageViews[0];
  }
  get lastDrawnMeasure() {
    return this.lastDrawnScorePage.lastDrawnMeasure;
  }
  get hasLastViewBeenCreated() {
    return this._pageViews.length === this.layout.totalPages && this._pageViews[this._pageViews.length - 1] && this._pageViews[this._pageViews.length - 1].layout.isActualLayout;
  }
  get pageCountGuess() {
    if (this.isIncrementalFlowComplete) {
      return this.layout.totalPages;
    }
    const firstPageView = this._pageViews[0];
    if (firstPageView) {
      const measureCountPerPage = firstPageView.layout.endMeasureIndex - firstPageView.layout.startMeasureIndex;
      const pageCount = Math.ceil(this.context.document.score.numMeasures / measureCountPerPage);
      return Math.max(pageCount, this.layout.totalPages);
    } else {
      return 0;
    }
  }
  get endSpritePosition() {
    if (this.isHorizontalFlow) {
      const pagesWidth = this.getWidthOfPages(this.pageCountGuess);
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](pagesWidth, 0);
    }
    const pagesHeight = this.pageCountGuess * this.toViewUnits(this._pageMetrics.height);
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](0, pagesHeight);
  }
  get isIncrementalFlowComplete() {
    return this.layout.isIncrementalLayoutComplete;
  }
  get isMoreFlowNeeded() {
    const documentView = this.context.documentView;
    const displayScale = documentView.viewInfo.displayScale;
    const lastDrawnScorePage = this.lastDrawnScorePage;
    if (this.layout.context.preview || !this.context.document.score.displayModeHasPages) {
      return false;
    }
    if (this._targetMeasureIndex) {
      const targetMeasure = this.layout.getPageContainingMeasure(this._targetMeasureIndex);
      return !targetMeasure || targetMeasure.index >= this.layout.pageLayouts.length;
    }
    if (this.isHorizontalFlow) {
      return (documentView.viewportWidth + documentView.horizontalScrollPosition) / displayScale > lastDrawnScorePage.x + this.context.layoutContext.pageMetrice.width;
    } else {
      this.updateIncrementalFeedback(this.layout.pageLayouts.length, 'page');
      return this.currentBottomPageIndexInViewport + 1 > this.layout.pageLayouts.length - 1;
    }
  }
  constructor(context, layout, editorFonts, rootDiv, noteEditorService) {
    super(context, layout, noteEditorService, rootDiv);
    this._pageViews = [];
    this._lastTotalPageViews = 0;
    this._pageMetrics = null;
    this._numOfPagesPerSide = 3;
    this._lastCurrentPageIndex = -1;
    this._placeholderIndexBelow = Number.MAX_VALUE;
    this._lastTopPageViewport = -1;
    this._lastBottomPageViewport = -1;
    this._firstPageDisplayed = false;
    this._viewContext = context;
    this._pageMetrics = layout.context.pageMetrics;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    if (this.onChunkReflowSub$) {
      this.onChunkReflowSub$.unsubscribe();
    }
    if (this.onPagesDisplaySub$) {
      this.onPagesDisplaySub$.unsubscribe();
    }
    if (this.layout) {
      this.onChunkReflowSub$ = this.layout.onChunkReflow.subscribe(evt => {
        const pageView = this._pageViews[evt.pageIndex];
        if (pageView) {
          pageView.drawChunk(evt.lastChunkIndex);
          pageView.positionChunkViews();
        }
      });
      this.onPagesDisplaySub$ = this.layout.onPagesDisplay.subscribe(pageIndex => {
        let emptyLayoutIdx;
        for (let i = pageIndex; i < this._pageViews.length; i++) {
          const pageView = this._pageViews[i];
          const pageLayout = this.layout.pageLayouts[i];
          if (pageLayout) {
            if (this._pageViews[i]) {
              this._pageViews[i].setNewLayout(pageLayout, pageIndex);
            } else {
              this.murderPage(i);
              if (!emptyLayoutIdx || emptyLayoutIdx > i) {
                emptyLayoutIdx = i;
              }
            }
          }
        }
        if (emptyLayoutIdx) {
          this._pageViews = this._pageViews.slice(0, emptyLayoutIdx);
          this.hasChangedSinceLastPullFlow();
        }
        this.createUpcomingMeasures();
      });
    }
    if (!this.context.documentView || !this.context.documentView.overlay) {
      //   layout.addEventListener(
      //     PageDisplayEvent.PAGE_DISPLAY,
      //     RumtimeHelper.bindMethod(this, this.handlePageDisplayEvent)
      //   );
      //   layout.addEventListener(
      //     PageDisplayEvent.CHECK_OLD_REMAINING_CHUNKS,
      //     RumtimeHelper.bindMethod(this, this.handleCheckUnusedChunks)
      //   );
      //   layout.addEventListener(
      //     PageDisplayEvent.CHUNK_REFLOW,
      //     RumtimeHelper.bindMethod(this, this.handleChunkReflow)
      //   );
      this.onPageReflowSub$ = this.noteEditorService.onPageReflow.subscribe(evt => {
        this.handlePageReflow(evt);
      });
      //   layout.addEventListener(
      //     PageReflowEvent.PAGE_REFLOW,
      //     RumtimeHelper.bindMethod(this, this.handlePageReflow)
      //   );
      //   layout.addEventListener(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_INITIATED,
      //     RumtimeHelper.bindMethod(this, this.dispatchEvent)
      //   );
      //   layout.addEventListener(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_COMPLETE,
      //     RumtimeHelper.bindMethod(this, this.dispatchEvent)
      //   );
      this.calculateNumberOfContextPages();
      this.initializeView();
    }
  }
  getPageViewAt(idx) {
    return this._pageViews[idx];
  }
  getPointInMeasure(idx, staff, positionOrRhythmPosition, posOpts = null) {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      if (pageView && pageView.layout.isActualLayout && idx >= pageView.startMeasureIndex && idx < pageView.endMeasureIndex) {
        if (pageView.state === _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].PLACEHOLDER) {
          pageView.state = _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE;
        }
        const point = pageView.getPointInMeasure(idx, staff, positionOrRhythmPosition, posOpts);
        if (point) {
          return point;
        }
      }
    }
    return null;
  }
  forceFirstMeasuresToBeShown() {
    if (this._pageViews.length > 0) {
      this._pageViews[0].showScore();
    }
  }
  createPageViewsInViewport() {
    const topIdx = this.currentTopPageIndexInViewport;
    const bottomIdx = this.currentBottomPageIndexInViewport;
    for (let i = topIdx; i <= bottomIdx; i++) {
      const isLastPage = i === this.layout.pageLayouts.length - 1;
      this.addPageView(i, true, {
        isLastPage,
        showEndOfPreviewText: isLastPage && this.context.controller && this.context.controller.showEndOfPreviewText,
        showScoreInfo: this.context.controller == null || this.context.controller.showScoreInfo
      });
    }
    if (!this._firstPageDisplayed) {
      this._firstPageDisplayed = true;
    }
  }
  pullFlowComplete() {
    this.createPageViewsInViewport();
    this.removeUnnecessaryUpcomingPages();
    this.optimizeMeasureViews();
    this.createUpcomingMeasures();
  }
  getWidthOfPages(pageCount) {
    let width = pageCount * this._pageMetrics.width;
    width += (pageCount - 1) * this._pageMetrics.pageViewSpacing;
    if (this.context.documentView.showHtml5Shadow()) {
      width += 2 * this._pageMetrics.horizontalScoreShadowSize;
    }
    return width;
  }
  getHeightOfPages(pageCount) {
    let height = pageCount * this._pageMetrics.height;
    height += (pageCount - 1) * this._pageMetrics.pageViewSpacing;
    if (this.context.documentView.showHtml5Shadow()) {
      height += 2 * this._pageMetrics.verticalScoreShadowSize;
    }
    if (!this.context.score.isPerformable && this.context.controller.showEndOfPreviewText) {
      height = height - this._pageMetrics.height + this._pageViews[this._pageViews.length - 1].height + this._pageMetrics.previewTextGap;
    }
    return height;
  }
  ensureScoreInViewportIsVisible() {
    const topIdx = this.currentTopPageIndexInViewport;
    const bottomIdx = this.currentBottomPageIndexInViewport;
    if (this._lastTopPageViewport > topIdx || this._lastBottomPageViewport < bottomIdx) {
      this._lastTopPageViewport = topIdx;
      this._lastBottomPageViewport = bottomIdx;
      this.showHiddenPages(topIdx, bottomIdx);
    }
  }
  optimizeMeasureViews() {
    if (this.context.documentView && !(this._pageViews.length < 2 * this._numOfPagesPerSide + 1)) {
      let bottomIdx = this.currentBottomPageIndexInViewport;
      if (Math.abs(bottomIdx - this._lastCurrentPageIndex) > 1) {
        if (this.isIncrementalFlowComplete) {
          bottomIdx = Math.min(bottomIdx, this._pageViews.length);
        }
        this.showHiddenPages(bottomIdx - this._numOfPagesPerSide, bottomIdx + this._numOfPagesPerSide);
        if (this.isIncrementalFlowComplete && this._pageViews.length !== this._lastTotalPageViews) {
          this.estimateScrollBar();
        }
        this._lastTotalPageViews = this._pageViews.length;
        this.hidePages(0, bottomIdx - this._numOfPagesPerSide - 1);
        if (bottomIdx + this._numOfPagesPerSide + 1 < this._placeholderIndexBelow) {
          this._placeholderIndexBelow = Math.min(this._pageViews.length, this._placeholderIndexBelow);
          this.hidePages(bottomIdx + this._numOfPagesPerSide + 1, this._placeholderIndexBelow);
          this._placeholderIndexBelow = bottomIdx + this._numOfPagesPerSide + 1;
        }
        this._placeholderIndexBelow = Math.max(bottomIdx + this._numOfPagesPerSide + 1, this._placeholderIndexBelow);
        this._lastCurrentPageIndex = bottomIdx;
      }
    }
  }
  calculateNumberOfContextPages() {
    this._numOfPagesPerSide = Math.min(1, 0.5 * this.layout.context.staffMetrics.scoreLineSpacing);
  }
  showHiddenPages(startIdx, endIdx) {
    for (let i = startIdx; i <= endIdx; i++) {
      if (i >= 0 && this._pageViews[i]) {
        if (i >= this._pageViews.length) {
          break;
        }
        this._pageViews[i].state = _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE;
      }
    }
  }
  hidePages(startIdx, endIdx) {
    for (let i = startIdx; i < endIdx; i++) {
      if (i >= 0 && this._pageViews[i]) {
        if (i >= this._pageViews.length) {
          break;
        }
        this._pageViews[i].state = _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].PLACEHOLDER;
      }
    }
  }
  removeUnnecessaryUpcomingPages() {
    if (this.isIncrementalFlowComplete) {
      for (let i = this._pageViews.length - 1; i >= this.layout.totalPages; i--) {
        const pageView = this._pageViews[i];
        if (pageView) {
          pageView.destroy();
          this.removeChild(pageView);
          delete this._pageViews[i];
        }
      }
      this.estimateScrollBar();
    }
  }
  getSystemViewAfterMeasure(measureIdx) {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      if (pageView && pageView.layout.isActualLayout && !(measureIdx < pageView.layout.startMeasureIndex || measureIdx > pageView.layout.endMeasureIndex || (pageView.state = _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE, pageView.state != _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE || pageView.lastDrawnMeasure && pageView.lastDrawnMeasure.measure.index < measureIdx))) {
        for (let j = 0; j < pageView.actualSystemViews.length; j++) {
          const systemView = pageView.actualSystemViews[j];
          if (systemView.lastDrawnMeasure.measure.index >= measureIdx) {
            for (let k = 0; k < systemView.staffViews.length; k++) {
              const staffView = systemView.staffViews[k];
              if (staffView.lastDrawnMeasure.measure.index >= measureIdx) {
                for (let l = 0; l < staffView.numMeasureViews; l++) {
                  if (staffView.getMeasureViewAt(l).measure.index === measureIdx) {
                    const systemview = pageView.actualSystemViews[j + 1];
                    if (systemview) {
                      return systemview;
                    }
                    const nextPageView = this._pageViews[i + 1];
                    if (nextPageView) {
                      return nextPageView.actualSystemViews[0];
                    } else {
                      return null;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  getPositionUnderPoint(context, point, quantum, staff = null, positioningOptions = null) {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      if (pageView.state !== _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].PLACEHOLDER && point.y <= pageView.localToGlobal(new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"](0, this._pageMetrics.height)).y) {
        return pageView.getPositionUnderPoint(context, point, quantum, staff, positioningOptions);
      }
    }
    return null;
  }
  getPageUnderPoint(measureIdx, staff, positionOrRhythmPosition, posOpts = null) {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      if (pageView.getPointInMeasure(measureIdx, staff, positionOrRhythmPosition, posOpts)) {
        return pageView;
      }
    }
    return null;
  }
  updateView() {
    this.destroyChildren();
    this._pageViews = [];
    const isLastPage = this.layout.pageLayouts.length === 1;
    this.addPageView(0, true, {
      isLastPage,
      showEndOfPreviewText: isLastPage && this.context.controller && this.context.controller.showEndOfPreviewText,
      showScoreInfo: this.context.controller == null || this.context.controller.showScoreInfo
    });
    this.pullFlow(false);
    this.createPageViewsInViewport();
  }
  updateBackdrop() {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      pageView.updateBackdrop();
    }
  }
  addPageView(layoutIdx, isNotPlaceholder, options = {}) {
    let scrollOffset;
    let pageView;
    if (this.isHorizontalFlow) {
      scrollOffset = layoutIdx * (this._pageMetrics.width + this._pageMetrics.pageViewSpacing);
    } else {
      scrollOffset = layoutIdx * (this._pageMetrics.height + this._pageMetrics.pageViewSpacing);
    }
    if (isNotPlaceholder) {
      const layout = this.layout.pageLayouts[layoutIdx];
      const pageV = this._pageViews[layoutIdx];
      if (!layout || pageV && pageV.state === _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].SCORE && pageV.showEndOfPreviewText === options.showEndOfPreviewText) {
        return;
      }
      if (pageV) {
        pageV.destroy();
        this.removeChild(pageV);
      }
      pageView = layout.createDisplayObject(this.context, options);
      this.showIncrementalFeedback(false);
    } else {
      const placeholderPageLayout = new _layouts_placeholder_page_layout__WEBPACK_IMPORTED_MODULE_1__["default"](this.context.layoutContext, layoutIdx, this.editorFonts, this.rootDiv, this.noteEditorService);
      pageView = placeholderPageLayout.createDisplayObject(this.context);
    }
    if (this.isHorizontalFlow) {
      pageView.x += scrollOffset;
    } else {
      pageView.y += scrollOffset;
    }
    this.addChild(pageView);
    this._pageViews[layoutIdx] = pageView;
  }
  destroyChildren() {
    for (let i = 0; i < this._pageViews.length; i++) {
      const pageView = this._pageViews[i];
      pageView.destroy();
    }
  }
  removeListeners() {
    if (this.onChunkReflowSub$) {
      this.onChunkReflowSub$.unsubscribe();
    }
    if (this.onPagesDisplaySub$) {
      this.onPagesDisplaySub$.unsubscribe();
    }
    // this.layout.removeEventListener(
    //   PageDisplayEvent.PAGE_DISPLAY,
    //   RumtimeHelper.bindMethod(this, this.handlePageDisplayEvent)
    // );
    // this.layout.removeEventListener(
    //   PageDisplayEvent.CHECK_OLD_REMAINING_CHUNKS,
    //   RumtimeHelper.bindMethod(this, this.handleCheckUnusedChunks)
    // );
    // this.layout.removeEventListener(
    //   PageReflowEvent.PAGE_REFLOW,
    //   RumtimeHelper.bindMethod(this, this.handlePageReflow)
    // );
    // this.layout.removeEventListener(
    //   PageDisplayEvent.CHUNK_REFLOW,
    //   RumtimeHelper.bindMethod(this, this.handleChunkReflow)
    // );
    // this.layout.removeEventListener(
    //   IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_INITIATED,
    //   RumtimeHelper.bindMethod(this, this.dispatchEvent)
    // );
    // this.layout.removeEventListener(
    //   IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_COMPLETE,
    //   RumtimeHelper.bindMethod(this, this.dispatchEvent)
    // );
  }

  murderPage(idx) {
    const pageView = this._pageViews[idx];
    if (pageView) {
      this.removeChild(pageView);
      pageView.destroy();
    }
  }
  handleCheckUnusedChunks(evt) {
    const pageView = this._pageViews[evt.pageIndex];
    if (pageView) {
      pageView.clearChunksStartingAt(evt.lastChunkIndex + 1);
    }
  }
  handlePageDisplayEvent(evt) {
    let emptyLayoutIdx;
    for (let i = evt.pageIndex; i < this._pageViews.length; i++) {
      const pageLayout = this.layout.pageLayouts[i];
      if (pageLayout) {
        if (this._pageViews[i]) {
          this._pageViews[i].setNewLayout(pageLayout, evt);
        }
      } else {
        this.murderPage(i);
        if (!emptyLayoutIdx || emptyLayoutIdx > i) {
          emptyLayoutIdx = i;
        }
      }
    }
    if (emptyLayoutIdx) {
      this._pageViews = this._pageViews.slice(0, emptyLayoutIdx);
      this.hasChangedSinceLastPullFlow();
    }
    this.createUpcomingMeasures();
  }
  handleChunkReflow(evt) {
    const pageView = this._pageViews[evt.pageIndex];
    if (pageView) {
      pageView.drawChunk(evt.lastChunkIndex);
      pageView.positionChunkViews();
    }
  }
  handlePageReflow(evt) {
    let stateNeedChange = false;
    for (let i = 0; i < evt.pageIndices.length; i++) {
      const pageIndice = evt.pageIndices[i];
      const pageLayout = this.layout.pageLayouts[pageIndice];
      if (pageLayout && pageLayout.startMeasureIndex !== -1) {
        const pageView = this._pageViews[pageIndice];
        if (pageView && !pageView.isPlaceholder) {
          if (stateNeedChange) {
            pageView.state = _page_view__WEBPACK_IMPORTED_MODULE_2__["default"].PLACEHOLDER;
          } else {
            pageView.updateView(pageLayout, evt.measureIndices, evt.staves);
            pageView.positionChunkViews();
            stateNeedChange = true;
          }
        }
      }
    }
  }
  createUpcomingMeasures() {
    if (this.context.controller && !this.context.layoutContext.preview) {
      const lastRealPageViewIndex = Math.max(0, this.lastRealPageViewIndex);
      let pageViewAdded = false;
      for (let i = lastRealPageViewIndex; i < this.pageCountGuess; i++) {
        this.addPageView(i, false);
        pageViewAdded = true;
      }
      if (pageViewAdded) {
        this._viewContext.documentView.updateScoreDimensions();
      }
    }
  }
  scrollDirectionAffectsFlow(direction) {
    // if (this.isHorizontalFlow) {
    //   return direction === ScrollEventDirection.HORIZONTAL;
    // } else {
    //   return direction === ScrollEventDirection.VERTICAL;
    // }
    throw new Error('ScrollEventDirection');
  }
  ensureSystemAfterMeasureDrawn(measureIdx) {
    if (!this.getSystemViewAfterMeasure(measureIdx) && !this.isIncrementalFlowComplete) {
      this.pullFlow(true, {
        measureIndex: measureIdx + 1
      });
    }
  }
  doIncrementalFlow() {
    return this.layout.doIncrementalFlow();
  }
  continueIncrementalFlow(force, e) {
    if (force) {
      setTimeout(() => {
        this.doIncrementalFlow();
        this.pullFlow(force);
      });
      return true;
    }
    while (this.isMoreFlowNeeded && !this.layout.isIncrementalLayoutComplete) {
      this.doIncrementalFlow();
    }
    this.showIncrementalFeedback(false);
    return false;
  }
}

/***/ }),

/***/ 4161:
/*!****************************************************!*\
  !*** ./src/app/note-editor/views/part-inserter.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PartInserter)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _embed_display_object__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./embed-display-object */ 99373);


class PartInserter extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(staff, addBelow, noteEditorService) {
    super(noteEditorService);
    this._staff = null;
    this._addBelow = false;
    this._rolled = false;
    this._skin = null;
    this._overSkin = null;
    this._staff = staff;
    this._addBelow = addBelow;
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.handleMouseDown)
    // );
    this._skin = new _embed_display_object__WEBPACK_IMPORTED_MODULE_1__["default"](noteEditorService);
    this.addChild(this._skin);
    this._overSkin = new _embed_display_object__WEBPACK_IMPORTED_MODULE_1__["default"](noteEditorService);
    this._overSkin.visible = false;
    this.addChild(this._overSkin);
  }
  removeListeners() {
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.handleMouseDown)
    // );
  }
  destroy() {
    this.removeListeners();
  }
  addRollHighlight(evt) {
    this._skin.visible = false;
    this._overSkin.visible = true;
    evt.stopPropagation();
  }
  removeRollHighlight(evt) {
    this._skin.visible = true;
    this._overSkin.visible = false;
    evt.stopPropagation();
  }
  handleMouseDown(evt) {
    // const addBelow = this._addBelow
    //   ? StaffEditEvent.ADD_BELOW
    //   : StaffEditEvent.ADD_ABOVE;
    // this.dispatchEvent(
    //   new StaffEditEvent(StaffEditEvent.PART_EDIT, addBelow, this._staff)
    // );
    // evt.stopPropagation();
  }
}

/***/ }),

/***/ 15957:
/*!************************************************************!*\
  !*** ./src/app/note-editor/views/performance-text-view.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PerformanceTextView)
/* harmony export */ });
/* harmony import */ var _models_performance_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/performance-text */ 92946);
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/text-notation */ 70240);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./text-notation-view */ 16089);




class PerformanceTextView extends _text_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
  }
  static addPerformanceText(context, measure, rhythmPosition, dy = 0, box) {
    _text_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].addMeasureText({
      context,
      measure,
      notation: new _models_performance_text__WEBPACK_IMPORTED_MODULE_0__["default"](rhythmPosition, '', dy),
      groupName: 'Add Performance Text',
      createFieldFunction: PerformanceTextView.createPerformanceTextField,
      box
    });
  }
  editText() {
    super.editMeasureText('Edit Performance Text', PerformanceTextView.createPerformanceTextField);
  }
  static createPerformanceTextField(context, notation, editGroup, editorFonts, rootDiv, noteEditorService) {
    let autoSize;
    switch (notation.justify) {
      case _models_text_notation__WEBPACK_IMPORTED_MODULE_1__["default"].JUSTIFY_CENTER:
        autoSize = _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.CENTER;
        break;
      case _models_text_notation__WEBPACK_IMPORTED_MODULE_1__["default"].JUSTIFY_RIGHT:
        autoSize = _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.RIGHT;
        break;
      default:
        autoSize = _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.LEFT;
        break;
    }
    const editField = _text_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].createEditField(context, autoSize, null,
    // context.layoutContext.staffMetrics.staffTextFont,
    context.layoutContext.staffMetrics.performanceTextSize, false, false, notation, 0, -context.layoutContext.staffMetrics.performanceTextPadding.bottom, editGroup, editorFonts, rootDiv, noteEditorService);
    editField.multiline = true;
    return editField;
  }
}

/***/ }),

/***/ 17987:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/playback-cursor.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlaybackCursor)
/* harmony export */ });
/* harmony import */ var _display_shape__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/shape */ 15165);
/* harmony import */ var _playback_highlight__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playback-highlight */ 54894);


class PlaybackCursor extends _display_shape__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get HIGHLIGHT_WIDTH() {
    return 6;
  }
  set cursorHeight(t) {
    this._cursorHeight = t;
    this.updateGraphics();
  }
  constructor(color, width, noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this._color = 0;
    this._width = NaN;
    this._cursorHeight = NaN;
    this._highlights = [];
    this._color = color;
    this._width = width;
    this._cursorHeight = 0;
    this.updateGraphics();
  }
  updateGraphics() {
    this.graphics.clear();
    this.graphics.beginFill(this._color);
    this.graphics.moveTo(0, this.width * Math.SQRT1_2);
    this.graphics.lineTo(-this.width / 2, 0);
    this.graphics.lineTo(this.width / 2, 0);
    this.graphics.lineTo(0, this.width * Math.SQRT1_2);
    this.graphics.endFill();
    this.graphics.lineStyle(1, this._color);
    this.graphics.moveTo(0, this.width);
    this.graphics.lineTo(0, this._cursorHeight);
    for (let i = 0; i < this._highlights.length; i++) {
      const highlight = this._highlights[i];
      this.graphics.lineStyle(0, 0, 0);
      this.graphics.beginFill(this._color, 0.5);
      this.graphics.moveTo(0, highlight.top);
      this.graphics.lineTo(PlaybackCursor.HIGHLIGHT_WIDTH / 2, highlight.top);
      this.graphics.lineTo(PlaybackCursor.HIGHLIGHT_WIDTH / 2, highlight.top + highlight.height);
      this.graphics.lineTo(-PlaybackCursor.HIGHLIGHT_WIDTH / 2, highlight.top + highlight.height);
      this.graphics.lineTo(-PlaybackCursor.HIGHLIGHT_WIDTH / 2, highlight.top);
      this.graphics.lineTo(0, highlight.top);
      this.graphics.endFill();
    }
  }
  hideCursor() {
    this.visible = false;
    this.x = this.width;
    this.y = 0;
  }
  clearHighlights() {
    this._highlights = [];
  }
  addHighlight(top, height) {
    this._highlights.push(new _playback_highlight__WEBPACK_IMPORTED_MODULE_1__["default"](top, height));
  }
}

/***/ }),

/***/ 54894:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/playback-highlight.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlaybackHighlight)
/* harmony export */ });
class PlaybackHighlight {
  constructor(top, height) {
    this.top = NaN;
    this.height = NaN;
    this.top = top;
    this.height = height;
  }
}

/***/ }),

/***/ 13561:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/release-view.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ReleaseView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);


class ReleaseView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, width, height, staffMetrics, noteEditorService) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    this.graphics.lineStyle(staffMetrics.lineThickness * staffMetrics.lineSpacing, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.moveTo(0, 0);
    const bottom = height - staffMetrics.bendArrowHeight * staffMetrics.lineSpacing;
    this.graphics.curveTo(width, 0, width, bottom);
    this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.MITER);
    this.graphics.beginFill(0);
    this.graphics.moveTo(width, height);
    this.graphics.lineTo(width - staffMetrics.bendArrowWidth * staffMetrics.lineSpacing / 2, bottom);
    this.graphics.lineTo(width + staffMetrics.bendArrowWidth * staffMetrics.lineSpacing / 2, bottom);
    this.graphics.lineTo(width, height);
    this.graphics.endFill();
  }
}

/***/ }),

/***/ 30620:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/repeat-ending-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RepeatEndingView)
/* harmony export */ });
/* harmony import */ var _models_chord_symbol__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/chord-symbol */ 72410);
/* harmony import */ var _models_repeat_ending__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/repeat-ending */ 10195);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _line_notation_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./line-notation-view */ 78479);
/* harmony import */ var _text_notation_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./text-notation-view */ 16089);





class RepeatEndingView extends _line_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  get lineSettings() {
    let bracketType;
    const lineType = _line_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].LINE_TYPE_SOLID;
    const bracketPosition = _line_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].BRACKET_DOWN;
    const yOffset = this.staffMetrics.repeatEndingBracketTextYOffset;
    if (this.lineNotation.type === _models_repeat_ending__WEBPACK_IMPORTED_MODULE_1__["default"].TYPE_INITIAL) {
      bracketType = _line_notation_view__WEBPACK_IMPORTED_MODULE_3__["default"].BRACKET_DOWN;
    }
    return [lineType, bracketType, bracketPosition, 'top', yOffset];
  }
  constructor(context, span, pStart, pEnd, editorFonts, rootDiv, noteEditorService) {
    super(context, span, pStart, pEnd, editorFonts, rootDiv, noteEditorService);
    this.repeatEnding = span.notation;
  }
  static addRepeatEnding(context, listenerNotation, editorFonts, rootDiv, noteEditorService) {
    const halfBracketHeight = context.layoutContext.staffMetrics.repeatEndingBracketHeight / 2;
    const chordSymbol = new _models_chord_symbol__WEBPACK_IMPORTED_MODULE_0__["default"](listenerNotation.position, listenerNotation.startingText, halfBracketHeight);
    _text_notation_view__WEBPACK_IMPORTED_MODULE_4__["default"].addMeasureText({
      context,
      measure: listenerNotation.measure,
      notation: chordSymbol,
      groupName: 'Edit Repeat Ending Text',
      createFieldFunction: RepeatEndingView.createRepeatEndingField,
      listenerNotation,
      transientNotation: true,
      editorFonts,
      rootDiv,
      noteEditorService
    });
  }
  static createRepeatEndingField(context, notation, editGroupName, lineNotation, editorFonts, rootDiv, noteEditorService) {
    const staffTextFont = context.layoutContext.staffMetrics.staffTextFont;
    const editField = _text_notation_view__WEBPACK_IMPORTED_MODULE_4__["default"].createEditField(context, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.LEFT, staffTextFont, context.layoutContext.staffMetrics.chordSymbolSize, false, false, notation, 0, notation.dy, editGroupName, editorFonts, rootDiv, noteEditorService, 'text');
    editField.multiline = false;
    editField.autoCommitChars = String.fromCharCode(13) + String.fromCharCode(9);
    // editField.addEventListener(FlexEvent.VALUE_COMMIT, (e) => {
    //   if (!RepeatEnding.isValidText(editField.text)) {
    //     context.controller.dispatchTipEvent(TipEvent.INVALID_REPEAT_TEXT);
    //   }
    //   lineNotation.startingText = editField.text;
    // });
    lineNotation.startingText = '';
    return editField;
  }
  calculateFontSize() {
    return this.staffMetrics.baseFontSize * this.staffMetrics.chordSymbolSize;
  }
  editText() {
    RepeatEndingView.addRepeatEnding(this.context, this.repeatEnding, this.editorFonts, this.rootDiv, this.noteEditorService);
  }
}

/***/ }),

/***/ 97898:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/rest-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RestView)
/* harmony export */ });
/* harmony import */ var _notation_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./notation-view */ 91755);

class RestView extends _notation_view__WEBPACK_IMPORTED_MODULE_0__["default"] {}

/***/ }),

/***/ 52598:
/*!***********************************************!*\
  !*** ./src/app/note-editor/views/rip-view.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RipView)
/* harmony export */ });
/* harmony import */ var _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../glyph/glyph-series */ 56494);
/* harmony import */ var _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/effect-notation */ 4123);
/* harmony import */ var _line_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./line-view */ 36764);
/* harmony import */ var _layouts_effect_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../layouts/effect-view */ 65754);




class RipView extends _layouts_effect_view__WEBPACK_IMPORTED_MODULE_3__["default"] {
  constructor(context, layout, startX, startY, noteEditorService, rootDiv) {
    super(context, layout, startX, startY, noteEditorService, rootDiv);
  }
  updateView() {
    switch (this._notation.type) {
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.RIP1:
        const lineNotationSegment = this.layout._context.foundry.getLineNotationSegment(_models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.RIP1);
        const glyphSeries = new _glyph_glyph_series__WEBPACK_IMPORTED_MODULE_0__["default"]([], this.spacingXAdjustment + lineNotationSegment.spacingX, this.noteEditorService);
        const r = Math.max(this.toViewUnits(Math.sqrt(Math.pow(this.layout.shift, 2) + Math.pow(this.layout.ascent, 2))), lineNotationSegment.width + lineNotationSegment.spacingX);
        glyphSeries.addRepeatingGlyph(lineNotationSegment, r);
        const displayObj = glyphSeries.createDisplayObject(this.context.info);
        displayObj.x = this.toViewUnits(this.startX);
        displayObj.y = this.toViewUnits(this.startY);
        displayObj.rotation = this._notation.rotation * (180 / Math.PI);
        this.addChild(displayObj);
        break;
      case _models_effect_notation__WEBPACK_IMPORTED_MODULE_1__.EffectNotation.RIP2:
        this.addChild(new _line_view__WEBPACK_IMPORTED_MODULE_2__["default"](this.toViewUnits(this.startX), this.toViewUnits(this.startY), this.toViewUnits(-this.layout.width), this.toViewUnits(this.layout.ascent), this.toViewUnits(this.layout.staffMetrics.slideThickness), this.layout.staffMetrics, this.noteEditorService));
        break;
    }
  }
}

/***/ }),

/***/ 85726:
/*!**************************************************!*\
  !*** ./src/app/note-editor/views/roll-button.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RollButton)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);

class RollButton extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(skin, overSkin, noteEditorService) {
    super(noteEditorService);
    this._skin = null;
    this._overSkin = null;
    this.clickHandle = evt => {
      debugger;
      this.handleMouseDown(evt);
    };
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.dontPropagate)
    // );
    this._svg.addEventListener('click', this.clickHandle);
    this._skin = skin;
    this.addChild(this._skin);
    this._overSkin = overSkin;
    this._overSkin.visible = false;
    this.addChild(this._overSkin);
  }
  removeListeners() {
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashMouseEvent.ROLL_OUT,
    //   RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    // );
    // this.removeEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.dontPropagate)
    // );
    this._svg.removeEventListener('click', this.clickHandle);
  }
  destroy() {
    this.removeListeners();
  }
  addRollHighlight(evt) {
    this._skin.visible = false;
    this._overSkin.visible = true;
    evt.stopPropagation();
  }
  removeRollHighlight(evt) {
    this._skin.visible = true;
    this._overSkin.visible = false;
    evt.stopPropagation();
  }
  dontPropagate(evt) {
    evt.stopPropagation();
  }
  handleMouseDown(evt) {
    evt.stopPropagation();
  }
}

/***/ }),

/***/ 47904:
/*!**********************************************************!*\
  !*** ./src/app/note-editor/views/score-document-view.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreDocumentView)
/* harmony export */ });
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _document_score_document__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/score-document */ 54434);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _geoms_rectangle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geoms/rectangle */ 67292);
/* harmony import */ var _layouts_layout_context__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../layouts/layout-context */ 73294);
/* harmony import */ var _layouts_pagenated_layout__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../layouts/pagenated-layout */ 97709);
/* harmony import */ var _layouts_prefixes_cache__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../layouts/prefixes-cache */ 23082);
/* harmony import */ var _layouts_strip_layout__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../layouts/strip-layout */ 28836);
/* harmony import */ var _layouts_view_info__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../layouts/view-info */ 89305);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_strip_metrics__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/strip-metrics */ 87806);
/* harmony import */ var _canvas__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./canvas */ 18880);
/* harmony import */ var _overlay_view_info__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./overlay-view-info */ 95114);
/* harmony import */ var _paginated_view__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./paginated-view */ 61609);
/* harmony import */ var _playback_cursor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./playback-cursor */ 17987);
/* harmony import */ var _ui_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui-component */ 41036);
















class ScoreDocumentView extends _ui_component__WEBPACK_IMPORTED_MODULE_15__["default"] {
  static get DRAG_SCROLL_THRESHOLD() {
    return 40;
  }
  static get DRAG_SCROLL_AMOUNT() {
    return 20;
  }
  static get SELPOS_NULL() {
    return -1;
  }
  static get SELPOS_INVALID() {
    return 0;
  }
  static get SELPOS_OFF() {
    return 1;
  }
  static get SELPOS_ON() {
    return 2;
  }
  static get MIN_TIME_TO_SCROLL_TO_NEXT_MEASURE() {
    return 0.7;
  }
  get forceManualScrolling() {
    return this._forceManualScrolling;
  }
  set forceManualScrolling(v) {
    this._forceManualScrolling = v;
  }
  get viewInfo() {
    return this._viewInfo;
  }
  set viewInfo(v) {
    this._viewInfo = v;
  }
  get complete() {
    return this._complete;
  }
  set complete(v) {
    this._complete = v;
  }
  get layoutContext() {
    return this._context;
  }
  get viewContext() {
    return this._viewContext;
  }
  get notationView() {
    return this._notationView;
  }
  get scoreView() {
    return this._scoreView;
  }
  get viewportWidth() {
    return this.width;
  }
  get viewportHeight() {
    return this.height;
  }
  get scoreDocument() {
    return this._scoreDocument;
  }
  set scoreDocument(t) {
    if (this.scoreDocument) {
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.SEQUENCE_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.ADD,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.REMOVE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.VALIDATE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureValidate)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.GEOMETRY_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureGeometryChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.SPAN_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSpanChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     MeasureValidationEvent.FOUNDRY_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleFoundryChange)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     ModelUpdateEvent.MODEL_UPDATE,
      //     RumtimeHelper.bindMethod(this, this.handleModelUpdate)
      //   );
      //   this._scoreDocument.removeEventListener(
      //     ModeEvent.MODE_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleModeChange)
      //   );
    }
    if (this.measureValidationSub$) {
      this.measureValidationSub$.unsubscribe();
    }
    if (this.removeSelectionSub$) {
      this.removeSelectionSub$.unsubscribe();
    }
    this._scoreDocument = t;
    if (this._scoreDocument) {
      this._context = this.createLayoutContext(this._scoreDocument.score);
      if (!this._overlay) {
        this._scoreDocument.layoutContext = this._context;
      }
      this._context.preview = this.preview;
      this.viewInfo.displayMode = this._scoreDocument.score.displayMode;
      this.viewInfo.displayScale = this._scoreDocument.score.viewScale;
      this.measureValidationSub$ = this.noteEditorService.onValidateMeasure.subscribe(evt => {
        this.handleMeasureValidate(evt);
      });
      this.addSelectionSub$ = this.noteEditorService.onAddSelection.subscribe(selection => {
        setTimeout(() => {
          if (selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"] && selection.selectedObjects.length === 1) {
            const notation = selection.selectedObjects[0];
            notation.onSelect.emit({
              selection,
              controller: this._viewContext.controller,
              documentController: this._viewContext.documentController
            });
          } else {
            const objectSelection = selection.objectSelection;
            if (objectSelection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
              const notation = objectSelection.selectedObjects[0];
              notation.onSelect.emit({
                selection: objectSelection,
                controller: this._viewContext.controller,
                documentController: this._viewContext.documentController
              });
            }
          }
        }, 0);
      });
      this.removeSelectionSub$ = this.noteEditorService.onRemoveSelection.subscribe(selection => {
        this.noteEditorService.closeOperation();
      });
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.SEQUENCE_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.ADD,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.REMOVE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.VALIDATE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureValidate)
      //   );
      // this.onValidateMeasureSub$=this.noteEditorService.
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.GEOMETRY_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureGeometryChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.SPAN_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleMeasureSpanChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     MeasureValidationEvent.FOUNDRY_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleFoundryChange)
      //   );
      //   this._scoreDocument.addEventListener(
      //     ModelUpdateEvent.MODEL_UPDATE,
      //     RumtimeHelper.bindMethod(this, this.handleModelUpdate)
      //   );
      //   this._scoreDocument.addEventListener(
      //     ModeEvent.MODE_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.handleModeChange)
      //   );
    }
  }

  get verticalScrollPosition() {
    return 0;
  }
  set verticalScrollPosition(t) {}
  get horizontalScrollPosition() {
    return 0;
  }
  set horizontalScrollPosition(t) {}
  get transparentPlaybackCursor() {
    return this._transparentPlaybackCursor;
  }
  set transparentPlaybackCursor(v) {
    this._transparentPlaybackCursor = v;
  }
  get glyphFontLoader() {
    return this._glyphFontLoader;
  }
  set glyphFontLoader(v) {
    this._glyphFontLoader = v;
  }
  get overlay() {
    return this._overlay;
  }
  get overlayWidth() {
    return this.overlayMediator.overlayWidth;
  }
  get scrolling() {
    return this._scrolling;
  }
  set scrolling(v) {
    this._scrolling = v;
  }
  get selectionPositioningState() {
    const selection = this.scoreDocument.selection;
    if (!selection) {
      return ScoreDocumentView.SELPOS_NULL;
    }
    const startViewSegment = this.measurePositionToViewSegment(selection.selectedRange.start);
    if (startViewSegment) {
      if (this.bringSegmentIntoView(startViewSegment)) {
        return ScoreDocumentView.SELPOS_OFF;
      } else {
        return ScoreDocumentView.SELPOS_ON;
      }
    } else {
      return ScoreDocumentView.SELPOS_INVALID;
    }
  }
  get autoscrolling() {
    return this._manualScrollWithMouseClick && this._playbackCursor.visible || this.scrolling;
  }
  get scoreLayout() {
    return this._scoreLayout;
  }
  get width() {
    if (this._scoreView) {
      return this._scoreView.width * this.viewInfo.displayScale;
    } else {
      return 0;
    }
  }
  set width(t) {
    super.width = t;
  }
  get height() {
    if (this._scoreView) {
      // todo
      // if (this.controller.showingSvgPreview) {
      //   return this.controller.svgPreviewContainer.height();
      // } else {
      return this._scoreView.height * this.viewInfo.displayScale;
      // }
    } else {
      return 0;
    }
  }
  set height(t) {
    super.height = t;
  }
  get embedHeight() {
    let height = (this.layoutContext.staffMetrics.staffSpacing + 5) * this.scoreDocument.score.numStaves;
    height += 2 * this.layoutContext.staffMetrics.systemSpacing;
    return height * this.layoutContext.staffMetrics.lineSpacing + 16;
  }
  get embedWidth() {
    return 640;
  }
  constructor(editorFonts, rootDiv, noteEditorService, overlay) {
    super(noteEditorService, rootDiv);
    this._scoreDocument = null;
    this._scoreView = null;
    this._scoreLayout = null;
    this._viewContext = null;
    this._context = null;
    this._notationView = null;
    this._feedbackLayer = null;
    this._notationLayer = null;
    this._playbackCursor = null;
    this._scrolling = false;
    this._manualScrollWithMouseClick = false;
    this._$forceManualScrolling = false;
    this._forceManualScrollingTime = new Date();
    this.MIN_TIME_SET_MANUAL_SCROLLING = 1000;
    this._glyphFontLoader = null;
    this._dragAutoScrollEnabled = false;
    this._dragAutoScrollOrigin = null;
    this.autoPosLocation = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0);
    this._priorSelectionPositioningState = 0;
    this.preview = false;
    this.watermark = false;
    this.watermarkScale = 1;
    this._overlay = false;
    this.overlayMediator = null;
    this.cachedShadows = {};
    this._forceManualScrolling = false;
    this._viewInfo = null;
    this._complete = false;
    this._transparentPlaybackCursor = false;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    this._overlay = overlay;
    if (overlay) {
      this.viewInfo = new _overlay_view_info__WEBPACK_IMPORTED_MODULE_12__["default"]();
      //   this.overlayMediator = new OverlayClient(this);
    } else {
      this.viewInfo = new _layouts_view_info__WEBPACK_IMPORTED_MODULE_8__["default"]();
      //   this.overlayMediator = new OverlayHost(this);
    }
    // this.addEventListener(
    //   FlexEvent.INITIALIZE,
    //   RumtimeHelper.bindMethod(this, this.handleInitialize)
    // );
  }

  showHtml5Shadow() {
    return true;
    // todo
    // return this._viewContext && this._viewContext.controller.showHtml5Shadow();
  }

  createChildren() {
    super.createChildren();
    this._notationLayer = new _canvas__WEBPACK_IMPORTED_MODULE_11__["default"](this.noteEditorService, this.rootDiv);
    this.addChild(this._notationLayer);
    this._notationView = new _ui_component__WEBPACK_IMPORTED_MODULE_15__["default"](this.noteEditorService, this.rootDiv);
    this._notationLayer.addChild(this._notationView);
    this._feedbackLayer = new _ui_component__WEBPACK_IMPORTED_MODULE_15__["default"](this.noteEditorService, this.rootDiv);
    this._notationLayer.addChild(this._feedbackLayer);
    this._playbackCursor = new _playback_cursor__WEBPACK_IMPORTED_MODULE_14__["default"](this.viewInfo.selectionColors[0], 8, this.noteEditorService, this.rootDiv);
    this._playbackCursor.hideCursor();
    if (this.transparentPlaybackCursor) {
      this.makePlaybackCursorTransparent();
    }
    this._feedbackLayer.addChild(this._playbackCursor);
  }
  makePlaybackCursorTransparent() {
    if (this._playbackCursor) {
      this._playbackCursor.alpha = 0;
    }
  }
  initializeView() {
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.handleMouseDown)
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(this, this.captureMouseDown),
    //   true
    // );
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_UP,
    //   RumtimeHelper.bindMethod(this, this.captureMouseUp),
    //   true
    // );
  }
  handleInitialize(t) {
    this.initializeView();
  }
  handleMouseDown(t) {
    this.setFocus();
  }
  captureMouseDown(t) {}
  captureMouseUp(t) {
    this._manualScrollWithMouseClick = false;
  }
  enableNotationViews(mouseChildren) {
    this._notationLayer.mouseChildren = mouseChildren;
  }
  ensureSelectionVisible() {
    this.scoreDocument.requestModelChange(this.doEnsureSelectionVisible.bind(this), 1);
  }
  doEnsureSelectionVisible() {
    var selection = this.scoreDocument.selection;
    if (selection) {
      this.scrollToPosition(selection.selectedRange.start);
    }
  }
  handleIncrementalLayoutStepInitiated(t) {
    this._priorSelectionPositioningState = this.selectionPositioningState;
  }
  handleIncrementalLayoutStepComplete(t) {
    if (this.selectionPositioningState !== this._priorSelectionPositioningState) {
      this.doEnsureSelectionVisible();
    }
  }
  showPositionCursor(position) {
    this.scrollToPosition(position, true);
  }
  hidePositionCursor() {
    this._playbackCursor.hideCursor();
  }
  setForceManaualScrolling(forceManualScrolling) {
    this.forceManualScrolling = forceManualScrolling;
    this._forceManualScrollingTime = new Date();
  }
  resumeScrolling() {
    const performerPosition = this._viewContext.documentController.performer.position;
    if (performerPosition) {
      this.setForceManaualScrolling(false);
      const point = this.getPointInMeasure(performerPosition.measureIndex, null, performerPosition.position, {
        verticalAlign: 'top'
      });
      this.scrollToPoint(point);
    }
  }
  highlightStavesWithCursor(position) {
    this._playbackCursor.clearHighlights();
    if (this._viewContext.controller.highlightPartWithCursor() && this._playbackCursor.visible) {
      const staves = this._viewContext.controller.partToHighlight.staves;
      for (let i = 0; i < staves.length; i++) {
        const stave = staves[i];
        const topPoint = this.getPointInMeasure(position.measureIndex, stave, position.position, {
          verticalAlign: 'top'
        });
        const bottomPoint = this.getPointInMeasure(position.measureIndex, stave, position.position, {
          verticalAlign: 'bottom'
        });
        if (topPoint && bottomPoint) {
          const topLocal = this._feedbackLayer.globalToLocal(topPoint);
          const bottomLocal = this._feedbackLayer.globalToLocal(bottomPoint);
          this._playbackCursor.addHighlight(topLocal.y - this._playbackCursor.y, bottomLocal.y - topLocal.y);
        }
      }
      this._playbackCursor.updateGraphics();
    }
  }
  scrollToPosition(position, manual, notationPerformer = null) {
    if (position && !this._overlay) {
      let scrollPosition = position;
      const temporalMap = this._viewContext.controller.performer.temporalMap;
      const measure = this.scoreDocument.score.getSystemStaffMeasureAt(position.measureIndex);
      if (this._viewContext.controller.isPLaying && notationPerformer && position.position >= measure.duration / 2 && temporalMap.scorePositionToTime(measure.scorePosition + measure.duration) - temporalMap.scorePositionToTime(measure.scorePosition + position.position) < ScoreDocumentView.MIN_TIME_TO_SCROLL_TO_NEXT_MEASURE && notationPerformer.nextMeasurePositionIfAny) {
        scrollPosition = notationPerformer.nextMeasurePosition;
      }
      this._scoreView.ensureSystemAfterMeasureDrawn(position.measureIndex);
      const oldPositionViewSegment = this.measurePositionToViewSegment(scrollPosition);
      const newPositionViewSegment = this.measurePositionToViewSegment(position);
      if (oldPositionViewSegment) {
        if (manual && newPositionViewSegment) {
          this.updatePlaybackCursor(newPositionViewSegment);
        }
        this.doScrollToPosition(oldPositionViewSegment, manual);
        this.highlightStavesWithCursor(position);
      } else {
        this._playbackCursor.visible = false;
      }
    }
  }
  measurePositionToViewSegment(position) {
    if (position) {
      const topPoint = this.getPointInMeasure(position.measureIndex, null, position.position, {
        verticalAligh: 'top'
      });
      const bottomPoint = this.getPointInMeasure(position.measureIndex, null, position.position, {
        verticalAlign: 'bottom'
      });
      if (topPoint && bottomPoint) {
        return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_3__["default"](topPoint.x, topPoint.y, 1, bottomPoint.y - topPoint.y);
      }
    }
    return null;
  }
  doScrollToPosition(positionSegment, manual) {
    this.updatePlaybackScrollMode(positionSegment);
    if (!(this.autoscrolling || manual && this.forceManualScrolling)) {
      const force = manual; // todo this.controller.score.isPerformMode || manual;
      const view = this.bringSegmentIntoView(positionSegment, force);
      if (view) {
        this.scrollToPoint(view);
      }
    }
  }
  getViewFrame() {
    const isStripMode = this.scoreDocument.score.isStripMode;
    const isPerformMode = this.scoreDocument.score.isPerformMode;
    const x = isStripMode ? 10 + this.overlayMediator.scaleOverlayWidth : 0;
    const y = isPerformMode ? 0 : 25;
    const endX = this.viewportWidth - (isStripMode ? 10 : 0);
    const endY = this.viewportHeight;
    return new _geoms_rectangle__WEBPACK_IMPORTED_MODULE_3__["default"](x, y, endX - x, endY - y);
  }
  bringSegmentIntoView(positionSegment, force) {
    const viewFrame = this.getViewFrame();
    const horizontalView = ScoreDocumentView.bringIntoView(positionSegment.left, positionSegment.right, viewFrame.left, viewFrame.right, force);
    const verticalView = ScoreDocumentView.bringIntoView(positionSegment.top, positionSegment.bottom, viewFrame.top, viewFrame.bottom, force);
    if (horizontalView !== 0 || verticalView !== 0) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](this.horizontalScrollPosition + horizontalView, this.verticalScrollPosition + verticalView);
    } else {
      return null;
    }
  }
  static bringIntoView(contentStart, contentEnd, viewportStart, viewportEnd, force) {
    const startOutView = contentStart - viewportStart >= 0;
    const endOutView = viewportEnd - contentEnd >= 0;
    const startOffset = contentStart - viewportStart;
    const endOffset = contentEnd - (viewportEnd - viewportStart);
    let offset = 0;
    if (!startOutView && endOutView) {
      offset = force ? endOffset : Math.max(startOffset, endOffset);
    } else if (startOutView && !endOutView) {
      offset = force ? startOffset : Math.min(startOffset, endOffset);
    }
    return offset;
  }
  updatePlaybackCursor(rectangle) {
    if (!this._playbackCursor.visible) {
      this._manualScrollWithMouseClick = false;
      this.setForceManaualScrolling(false);
      this._playbackCursor.clearHighlights();
    }
    const topLeftLocal = this._feedbackLayer.globalToLocal(rectangle.topLeft);
    this._playbackCursor.visible = true;
    this._playbackCursor.x = topLeftLocal.x;
    this._playbackCursor.y = topLeftLocal.y;
    const bottomRightLocal = this._feedbackLayer.globalToLocal(rectangle.bottomRight);
    this._playbackCursor.cursorHeight = bottomRightLocal.y - topLeftLocal.y;
  }
  updatePlaybackScrollMode(rectangle) {
    const topLeft = rectangle.topLeft;
    const bottomRight = rectangle.bottomRight;
    if (new Date().getTime() - this._forceManualScrollingTime.getTime() > this.MIN_TIME_SET_MANUAL_SCROLLING) {
      if (topLeft.y > 0 && topLeft.y < this.stage.height || bottomRight.y > 0 && bottomRight.y < this.stage.height) {
        this.setForceManaualScrolling(false);
      }
    }
  }
  scrollToPoint(t) {}
  pageTopForY(y) {
    if (y === 0) return 0;
    if (this._scoreView instanceof _paginated_view__WEBPACK_IMPORTED_MODULE_13__["default"]) {
      const pageViews = this._scoreView.pageViews;
      if (pageViews.length > 0) {
        const firstViewTopGlobalY = pageViews[0].localToGlobal(new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0)).y;
        if (y < firstViewTopGlobalY) {
          return firstViewTopGlobalY;
        }
      }
      let prePageViewGlobalY = 0;
      for (let i = 0; i < pageViews.length; i++) {
        const pageView = pageViews[i];
        const pageViewGlobalY = pageView.localToGlobal(new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](0, 0)).y;
        if (prePageViewGlobalY < y && y < pageViewGlobalY) {
          if ((pageViewGlobalY + prePageViewGlobalY) / 2 - y >= 0) {
            return prePageViewGlobalY;
          } else {
            return pageViewGlobalY;
          }
        }
        prePageViewGlobalY = pageViewGlobalY;
      }
      if (prePageViewGlobalY) {
        return prePageViewGlobalY;
      }
    }
    return y;
  }
  initializeDragAutoScroll() {
    this._dragAutoScrollEnabled = false;
    this._dragAutoScrollOrigin = new _geoms_point__WEBPACK_IMPORTED_MODULE_2__["default"](this.mouseX, this.mouseY);
  }
  handleDragAutoScroll() {}
  createNewLayoutContext() {
    return new _layouts_layout_context__WEBPACK_IMPORTED_MODULE_4__["default"]();
  }
  createLayoutContext(score) {
    const newLayoutContext = this.createNewLayoutContext();
    newLayoutContext.score = score;
    newLayoutContext.stripMetrics = new _models_strip_metrics__WEBPACK_IMPORTED_MODULE_10__["default"]();
    return newLayoutContext;
  }
  handleMeasureSequenceChange(measureValidationEvent) {
    if (measureValidationEvent.measures == null) {
      if (measureValidationEvent.measureIndices.length > 0) {
        measureValidationEvent.measures[0].clearMeasureNumberCache();
        this._scoreLayout.handleMeasureSequenceChange(measureValidationEvent);
        this.updateScoreDimensions();
      } else {
        this._scoreLayout.score.clearMeasureNumberCache();
        this.updateLayout();
      }
    }
  }
  handleMeasureValidate(measureValidationEvt) {
    if (measureValidationEvt.measures == null) {
      this.updateLayout();
    } else {
      if (this._scoreLayout) {
        this._scoreLayout.handleMeasureValidate(measureValidationEvt);
      }
      this.updateScoreDimensions();
    }
  }
  handleMeasureGeometryChange(evt) {
    this._scoreLayout.handleMeasureGeometryChange(evt);
  }
  handleMeasureSpanChange(evt) {
    if (this._scoreLayout) {
      this._scoreLayout.handleMeasureSpanChange(evt);
    }
  }
  handleFoundryChange(t) {
    this._context.foundry = null;
    this.scoreDocument.rebuildScore();
  }
  handleModelUpdate(evt) {
    if (evt.source instanceof _models_score__WEBPACK_IMPORTED_MODULE_9__["default"]) {
      switch (evt.property.toString()) {
        case 'viewScale':
          this.setScale(evt.newValue);
          break;
        case 'displayMode':
          this.setDisplayMode(evt.newValue.toString());
          break;
      }
    }
  }
  handleModeChange(evt) {
    if (this._viewContext && this._viewContext.controller.modeRequiresShowCursor()) {
      this.showPositionCursor(this._viewContext.controller.pausePosition);
    } else {
      this.hidePositionCursor();
    }
    if (evt.forceScoreBuild) {
      this.forcePageFlow();
    }
  }
  forcePageFlow() {
    // this.dispatchEvent(new EditorEvent(EditorEvent.FORCE_PAGE_FLOW));
  }
  forceFirstMeasuresToBeShown() {
    this._scoreView.forceFirstMeasuresToBeShown();
  }
  setScale(scale) {
    const displayScale = this.viewInfo.displayScale;
    this.viewInfo.displayScale = scale;
    const horizontalScrollPosition = this.horizontalScrollPosition;
    const verticalScrollPosition = this.verticalScrollPosition;
    this._notationLayer.scaleX = this.viewInfo.displayScale;
    this._notationLayer.scaleY = this.viewInfo.displayScale;
    const scaleChange = this.viewInfo.displayScale / displayScale;
    this.horizontalScrollPosition = (horizontalScrollPosition + this.width / 2) * scaleChange - this.width / 2;
    this.verticalScrollPosition = (verticalScrollPosition + this.height / 2) * scaleChange - this.height / 2;
    // this.dispatchEvent(new EditorEvent(EditorEvent.DISPLAY_SCALE_CHANGE));
    if (this.overlay) {
      this.overlayMediator.checkOverlayWidth();
    }
  }
  setDisplayMode(mode) {
    if (this.viewContext) {
      this.viewContext.globalInvalidation();
    }
    this.viewInfo.displayMode = mode;
    if (this._scoreLayout) {
      this.horizontalScrollPosition = this.verticalScrollPosition = 0;
      this.scoreDocument.rebuildScore();
    }
  }
  createFoundryForContext(context) {
    if (context.foundry == null) {
      const foundryFactory = this._glyphFontLoader.getFoundryFactory(context.staffMetrics.glyphFamily);
      context.foundry = foundryFactory.createFoundry(context.staffMetrics.createFoundryMetrics());
    }
  }
  updateLayout() {
    const supportAshFont = (this.scoreDocument.permissions & _document_score_document__WEBPACK_IMPORTED_MODULE_1__["default"].ASH_FONT_PERMISSION) !== 0;
    this.doUpdateLayout();
    // todo
    // this._glyphFontLoader.loadGlyphsAndFonts({
    //   fonts: this._context.staffMetrics.fonts,
    //   glyphFamily: this._context.staffMetrics.glyphFamily,
    //   supportAshFont,
    //   callback: this.doUpdateLayout.bind(this),
    // });
  }

  doUpdateLayout() {
    this.createFoundryForContext(this._context);
    _layouts_prefixes_cache__WEBPACK_IMPORTED_MODULE_6__["default"].clear();
    if (this._scoreLayout) {
      this._scoreLayout.destroy();
      this._scoreLayout.document = null;
      this.hidePositionCursor();
    }
    this.scoreDocument.resetValidation();
    while (this._notationView.numChildren > 0) {
      this._notationView.removeChildAt(0);
    }
    switch (this.viewInfo.displayMode) {
      case _models_score__WEBPACK_IMPORTED_MODULE_9__["default"].STRIP_DISPLAY:
        this._scoreLayout = new _layouts_strip_layout__WEBPACK_IMPORTED_MODULE_7__["default"](this._context, this.editorFonts, this.viewInfo.buildIncrementally, this.rootDiv, this.noteEditorService, this._overlay);
        this._scoreLayout.document = this.scoreDocument;
        this._scoreLayout.prepareLayout();
        break;
      default:
        this._scoreLayout = this.createPaginatedLayout(this._context, this.viewInfo.buildIncrementally, this._overlay);
        this._scoreLayout.document = this.scoreDocument;
        this._scoreLayout.validateLayout();
        break;
    }
    this._viewContext = this.createViewContext();
    if (this._scoreView) {
      //   this._scoreView.removeEventListener(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_INITIATED,
      //     this.handleIncrementalLayoutStepInitiated.bind(this)
      //   );
      //   this._scoreView.removeEventListener(
      //     IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_COMPLETE,
      //     this.handleIncrementalLayoutStepComplete.bind(this)
      //   );
      this._scoreView.destroy();
    }
    this._scoreView = this._scoreLayout.createDisplayObject(this._viewContext);
    // todo
    // this.overlayMediator.setup();
    // this._scoreView.addEventListener(
    //   IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_INITIATED,
    //   this.handleIncrementalLayoutStepInitiated.bind(this)
    // );
    // this._scoreView.addEventListener(
    //   IncrementalLayoutEvent.INCREMENTAL_LAYOUT_STEP_COMPLETE,
    //   this.handleIncrementalLayoutStepComplete.bind(this)
    // );
    this._notationView.addChild(this._scoreView);
    this._notationLayer.scaleX = this.viewInfo.displayScale;
    this._notationLayer.scaleY = this.viewInfo.displayScale;
    this.updateScoreDimensions();
    // this.scoreDocument.dispatchEvent(
    //   new EditorEvent(EditorEvent.LAYOUT_UPDATED)
    // );
  }

  createViewContext() {
    return null;
  }
  createPaginatedLayout(context, buildIncrementally, overlay) {
    return new _layouts_pagenated_layout__WEBPACK_IMPORTED_MODULE_5__["default"](context, buildIncrementally, this.editorFonts, this.rootDiv, this.noteEditorService, overlay, {
      showScoreInfo: this.viewInfo.showScoreInfo
    });
  }
  updateScoreDimensions() {
    if (this._scoreView) {
      this._notationView.height = this.height;
      this._notationView.width = this.width;
    }
  }
  updateDisplayList(t, viewportHeight) {
    if (this.scoreDocument) {
      if (this._notationLayer.height < viewportHeight) {
        this.viewInfo.displayTop = (this.height - this._notationLayer.height) / 2;
      } else {
        this.viewInfo.displayTop = 0;
      }
      const displayTop = this.viewInfo.displayTop;
      if (this._notationLayer.y !== displayTop) {
        this._notationLayer.y = displayTop;
        // this.dispatchEvent(new EditorEvent(EditorEvent.SCORE_LAYOUT_CHANGE));
      }
    }
  }

  keyDownHandler(t) {}
  addFeedbackChild(child) {
    this._feedbackLayer.addChild(child);
  }
  removeFeedbackChild(child) {
    if (this._feedbackLayer.contains(child)) {
      this._feedbackLayer.removeChild(child);
    }
  }
  globalToFeedback(position) {
    return this._feedbackLayer.globalToLocal(position);
  }
  getPointInMeasure(measureIndex, staff, position, options = null) {
    return this._scoreView.getPointInMeasure(measureIndex, staff, position, options);
  }
  getPositionUnderPoint(context, point, quantum, staff = null, positioningOptions = null) {
    return this._scoreView.getPositionUnderPoint(context, point, quantum, staff, positioningOptions);
  }
  editAnnotation(t) {}
  getAnnotationPosition(annotation) {
    const parent = annotation.parent;
    return this.globalToLocal(this.getPointInMeasure(parent.measure.index, null, parent.position, {
      verticalAlign: 'top'
    }));
  }
  rebuildLayout() {
    // this.dispatchEvent(new EditorEvent(EditorEvent.REBUILD_LAYOUT));
  }
  resetScrollPosition() {
    this.verticalScrollPosition = 0;
    this.horizontalScrollPosition = 0;
  }
  activateFocusManager() {}
  deactivateFocusManager() {}
}

/***/ }),

/***/ 39928:
/*!********************************************************!*\
  !*** ./src/app/note-editor/views/score-object-view.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreObjectView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _geoms_color_transform__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/color-transform */ 3634);


class ScoreObjectView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get DARKEN_OFFSET() {
    return 60;
  }
  static get DEFAULT_TRANSFORM() {
    return ScoreObjectView.default_transform;
  }
  static get _lightenCache() {
    return ScoreObjectView.lightenCache;
  }
  static set _lightenCache(t) {
    ScoreObjectView.lightenCache = t;
  }
  static get _darkenCache() {
    return ScoreObjectView.darkenCache;
  }
  static set _darkenCache(t) {
    ScoreObjectView.darkenCache = t;
  }
  get context() {
    return this._context;
  }
  get staffMetrics() {
    return this._context.layoutContext.staffMetrics;
  }
  get pageMetrics() {
    return this._context.layoutContext.pageMetrics;
  }
  get displayInSelectionColor() {
    return this.selected;
  }
  get color() {
    return 0;
  }
  get effectiveColor() {
    return 0;
  }
  get selected() {
    return false;
  }
  get editable() {
    return null != this.context.document && this.context.document.editable;
  }
  constructor(context, noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
    this.feedback = false;
    this._context = null;
    this._lastSelected = false;
    this._context = context;
  }
  destroy() {
    this.removeListeners();
    this.destroyChildren();
  }
  removeListeners() {}
  destroyChildren() {}
  toViewUnits(size) {
    return this._context.toViewUnits(size);
  }
  initializeView() {
    this.graphics.clear();
    this.updateView();
    this.updateStatus();
  }
  updateView() {}
  updateSelectionFeedback() {}
  updateGeometry() {}
  updateStatus() {
    this.setColorTransform(this.getColorTransform());
    this.alpha = this.color !== 0xffffff || this.displayInSelectionColor ? 1 : 0;
    if (this.selected != this._lastSelected) {
      this.updateSelectionFeedback();
      this._lastSelected = this.selected;
    }
  }
  setColorTransform(colorTransform) {
    this.transform.colorTransform = colorTransform;
  }
  getColorTransform() {
    if (this.feedback) {
      return ScoreObjectView.lightenTransform(this.context.info.feedbackColor);
    } else if (this.displayInSelectionColor) {
      if (this.effectiveColor === 0 || this.effectiveColor === '0x000000') {
        return ScoreObjectView.lightenTransform(this.context.info.selectionColors[0]);
      } else {
        return ScoreObjectView.darkenTransform(this.effectiveColor);
      }
    } else if (this.color === 0) {
      return ScoreObjectView.DEFAULT_TRANSFORM;
    } else if (this.color === 0xffffff) {
      return ScoreObjectView.lightenTransform(0);
    } else {
      return ScoreObjectView.lightenTransform(this.color);
    }
  }
  static lightenTransform(color) {
    let colorTransform = ScoreObjectView._lightenCache[color];
    if (colorTransform == null) {
      colorTransform = new _geoms_color_transform__WEBPACK_IMPORTED_MODULE_1__["default"](1, 1, 1, 1, color >> 16, color >> 8 & 255, 255 & color);
      ScoreObjectView._lightenCache[color] = colorTransform;
    }
    return colorTransform;
  }
  static darkenTransform(color) {
    let colorTransform = ScoreObjectView._darkenCache[color];
    if (colorTransform == null) {
      colorTransform = new _geoms_color_transform__WEBPACK_IMPORTED_MODULE_1__["default"](1, 1, 1, 1, Math.max(0, (color >> 16) - ScoreObjectView.DARKEN_OFFSET), Math.max(0, (color >> 8 & 255) - ScoreObjectView.DARKEN_OFFSET), Math.max(0, (255 & color) - ScoreObjectView.DARKEN_OFFSET));
      ScoreObjectView._darkenCache[color] = colorTransform;
    }
    return colorTransform;
  }
  mouseChildrenOnRoll() {
    throw new Error('Not Implemented');
  }
}
ScoreObjectView.default_transform = new _geoms_color_transform__WEBPACK_IMPORTED_MODULE_1__["default"]();
ScoreObjectView.lightenCache = {};
ScoreObjectView.darkenCache = {};

/***/ }),

/***/ 61474:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/views/score-text-field.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreTextField)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../text/anti-alias-type */ 52348);
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../text/text-field-auto-size */ 85149);
/* harmony import */ var _text_text_field_type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../text/text-field-type */ 90200);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _text_text_format_align__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../text/text-format-align */ 48520);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./score-object-view */ 39928);








class ScoreTextField extends _score_object_view__WEBPACK_IMPORTED_MODULE_6__["default"] {
  static get scoreTextFieldWithFocus() {
    return this._scoreTextFieldWithFocus;
  }
  static set scoreTextFieldWithFocus(v) {
    this._scoreTextFieldWithFocus = v;
  }
  get model() {
    return this._model;
  }
  get text() {
    return this._text;
  }
  set text(v) {
    this._text = v;
    this.setFieldText(this._textField, v);
    this.adjustTextPosition();
  }
  get uncommittedText() {
    return this._textField.text;
  }
  get multiline() {
    return this._textField.multiline;
  }
  set multiline(v) {
    this._textField.multiline = v;
  }
  get wordWrap() {
    return this._textField.wordWrap;
  }
  set wordWrap(v) {
    this._wordWrap = v;
    this._textField.wordWrap;
  }
  get ascent() {
    return this._textField.getLineMetrics(0).ascent + 2;
  }
  get width() {
    return this.textMeasurement.textWidth(this._svg);
  }
  set width(t) {}
  get height() {
    return this.textMeasurement.textHeight(this._svg);
  }
  set height(t) {}
  get editable() {
    return !!this._editableElement && (!(this.context.document == null || !this.context.document.isModelEditable(this._model)) || super.editable);
  }
  constructor(context, autoSize, font, size, editorFonts, options, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this.onTextFieldFocus = new _angular_core__WEBPACK_IMPORTED_MODULE_7__.EventEmitter();
    this.showPrompt = true;
    this.clearSelectionOnFocus = true;
    this.autoCommitChars = '';
    this.autoCommitFuction = null;
    this.commitChar = '';
    this._markdown = false;
    this._textField = null;
    this._model = null;
    this._property = null;
    this._editGroupName = null;
    this._font = null;
    this._size = NaN;
    this._minSize = NaN;
    this._maxSize = NaN;
    this._bold = false;
    this._italic = false;
    this._underline = false;
    this._autoSize = null;
    this._text = null;
    this._wordWrap = false;
    this._textWidth = 0;
    this._editableElement = true;
    this._updateTextCallback = null;
    this._autoSize = autoSize;
    this.editorFonts = editorFonts;
    this.rootDiv = rootDiv;
    if (this.rootDiv == null) {
      debugger;
    }
    this._font = font;
    this._size = size;
    this._maxSize = options.maxSize ?? this._maxSize;
    this._minSize = options.minSize ?? this._minSize;
    this._bold = options.bold ?? this._bold;
    this._italic = options.italic ?? this._italic;
    this._underline = options.underline ?? this._underline;
    this._model = options.model ?? this._model;
    this._property = options.property ?? this._property;
    this._editGroupName = options.editGroupName ?? this._editGroupName;
    this._markdown = options.markdown ?? this._markdown;
    this._updateTextCallback = options.updateTextCallback ?? this._updateTextCallback;
    this._editableElement = options.editableElement ?? this._editableElement;
    this.initializeView();
  }
  initializeView() {
    this.graphics.clear();
    this.updateView();
    this.updateStatus();
  }
  setFocus() {
    this.onTextFieldFocus.emit(this._textField);
  }
  highlightEnd() {
    const length = this._textField.text.length;
    if (this._textField && length > 0) {
      this._textField.setSelection(length, length);
    }
  }
  unsubscribe() {}
  setFieldText(field, text) {
    if (this._autoSize === _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.RIGHT && text.search(/[\n\r]/) >= 0) {
      field.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_4__["default"](field.defaultTextFormat.font, field.defaultTextFormat.size, null, this._bold, this._italic, this._underline, null, null, _text_text_format_align__WEBPACK_IMPORTED_MODULE_5__.TextFormatAlign.RIGHT);
    }
    field.text = text;
  }
  setTextWidth(textWidth) {
    this._textWidth = textWidth;
    this._textField.width = textWidth;
  }
  setColor(color) {
    this._textField.textColor = color;
  }
  static getTextWidth(staffMetrics, editorFonts, font, size, bold, italic, underline, text, rootDiv, noteEditorService) {
    const textField = ScoreTextField.createTextField(staffMetrics, editorFonts, font, size, bold, italic, underline, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.LEFT, 0, 0, rootDiv, noteEditorService);
    textField.text = text;
    return textField.textWidth / staffMetrics.lineSpacing;
  }
  static getTextHeight(staffMetrics, editorFonts, font, size, bold, italic, underline, width, multiline, wordwrap, text, rootDiv, noteEditorService) {
    const textField = ScoreTextField.createTextField(staffMetrics, editorFonts, font, size, bold, italic, underline, _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.LEFT, 0, 0, rootDiv, noteEditorService);
    textField.multiline = multiline;
    textField.wordWrap = wordwrap;
    if (text != null && text.length === 0) {
      text = 'A';
    }
    textField.text = text;
    textField.width = width;
    return textField.textHeight / staffMetrics.lineSpacing;
  }
  static createTextField(staffMetrics, editorFonts, font, size, bold, italic, underline, autoSize, maxSize, minSize, rootDiv, noteEditorService) {
    let align;
    switch (autoSize) {
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.RIGHT:
        align = _text_text_format_align__WEBPACK_IMPORTED_MODULE_5__.TextFormatAlign.RIGHT;
        break;
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.CENTER:
        align = _text_text_format_align__WEBPACK_IMPORTED_MODULE_5__.TextFormatAlign.CENTER;
        break;
      default:
        align = _text_text_format_align__WEBPACK_IMPORTED_MODULE_5__.TextFormatAlign.LEFT;
        break;
    }
    const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_1__["default"](editorFonts, rootDiv, noteEditorService);
    let finalSize = size < 0 ? staffMetrics.creditFontSize * -size : staffMetrics.baseFontSize * size;
    if (minSize) {
      finalSize = Math.max(finalSize, minSize);
    }
    if (maxSize > 0) {
      finalSize = Math.min(finalSize, maxSize);
    }
    textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_0__.AntiAliasType.ADVANCED;
    textField.embedFonts = true;
    textField.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_4__["default"](font, finalSize, null, bold, italic, underline, null, null, align);
    textField.textColor = 0;
    textField.autoSize = autoSize;
    textField.backgroundColor = 0xffffff;
    textField.background = false;
    return textField;
  }
  adjustTextPosition() {
    switch (this._textField.autoSize) {
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.NONE:
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.LEFT:
        break;
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.CENTER:
        this._textField.x = -(this._textField.textWidth + 4) / 2;
        break;
      case _text_text_field_auto_size__WEBPACK_IMPORTED_MODULE_2__.TextFieldAutoSize.RIGHT:
        this._textField.x = -(this._textField.textWidth + 4);
        break;
    }
  }
  updateView() {
    if (this._textField && this._textField.parent == this) {
      this.removeChild(this._textField);
    }
    this._textField = ScoreTextField.createTextField(this.staffMetrics, this.editorFonts, this._font, this._size, this._bold, this._italic, this._underline, this._autoSize, this._maxSize, this._minSize, this.rootDiv, this.noteEditorService);
    // todo event listener
    this._svg.addEventListener('click', this.handleClick.bind(this));
    if (this._model) {
      this._textField.type = this.editable ? _text_text_field_type__WEBPACK_IMPORTED_MODULE_3__.TextFieldType.INPUT : _text_text_field_type__WEBPACK_IMPORTED_MODULE_3__.TextFieldType.DYNAMIC;
      this._textField.selectable = true;
      // todo
      // this._model.addEventListener(
      //   ModelUpdateEvent.MODEL_UPDATE,
      //   RumtimeHelper.bindMethod(this, this.handleModelUpdate),
      //   false,
      //   0,
      //   true
      // );
      this.updateText();
    } else {
      this._textField.type = _text_text_field_type__WEBPACK_IMPORTED_MODULE_3__.TextFieldType.DYNAMIC;
      this._textField.selectable = false;
    }
    this._textField.wordWrap = this._wordWrap;
    if (this._wordWrap && this._textWidth > 0) {
      this._textField.width = this._textWidth;
    }
    this.addChild(this._textField);
  }
  handleClick(evt) {
    if (this.editable && this.context.controller.isNotationInteractionAvailable()) {
      this.stage.focus = this._textField;
      evt.stopPropagation();
    }
  }
  updateText() {
    if (this._model.getModelProperty(this._property) && this._model.getModelProperty(this._property).toString().replace(/^s+|\s+$/g, '').length > 0 || this.context.info && this.context.info.printView || !this.editable || !this.showPrompt) {
      this.text = this._model.getModelProperty(this._property) == null ? '' : this._model.getModelProperty(this._property).toString();
      this._textField.textColor = 0;
    } else {
      this.text = this._editGroupName == null || this._editGroupName == '' ? '' : `(${this._editGroupName})`;
      this._textField.textColor = 0xcccccc;
    }
    if (this._updateTextCallback) {
      this._updateTextCallback();
    }
  }
}

/***/ }),

/***/ 67428:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/score-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScoreView)
/* harmony export */ });
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score-object-view */ 39928);


class ScoreView extends _score_object_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  static get VIEWPORT_CHANGE_DELAY() {
    return 100;
  }
  get lastDrawnMeasure() {
    throw new Error('get lastDrawnMeasure() not overridden');
  }
  get isIncrementalFlowComplete() {
    throw new Error('isIncrementalLayoutComplete() not overriden');
  }
  get isMoreFlowNeeded() {
    throw new Error('isMoreLayoutNeeded() not overridden');
  }
  get endSpritePosition() {
    throw new Error('endSpritePosition() not overridden');
  }
  // get initialIdleTimeout() {
  //   return this.context.documentView.viewInfo.buildScoreAsSoonAsPossible
  //     ? IdleManager.ASAP_INITIAL_IDLE_TIMEOUT
  //     : this.context.controller.viewer
  //     ? IdleManager.VIEWER_INITIAL_IDLE_TIMEOUT
  //     : IdleManager.DEFAULT_INITIAL_IDLE_TIMEOUT;
  // }
  // get subsequentIdleTimeout() {
  //   return IdleManager.DEFAULT_SUBSEQUENT_IDLE_TIMEOUT;
  // }
  get hasLastViewBeenCreated() {
    throw new Error('hasLastViewBeenCreated() not overriden');
  }
  get totalPageFlowElements() {
    return -1;
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    //   _viewportChangeTimer = new Timer(ScoreView.VIEWPORT_CHANGE_DELAY, 1);
    this._forceViewBuild = false;
    this._targetMeasureIndex = NaN;
    this._isBuilding = false;
    this._idleManager = null;
    this._endSprite = null;
    this._hasChangedSinceLastPullFlow = true;
    this._upcomingMeasuresCreated = false;
    this._layout = layout;
    context.registerScoreView(this);
    this.onAddedToStage();
    // this.addEventListener(
    //   FlashEvent.ADDED_TO_STAGE,
    //   RumtimeHelper.bindMethod(this, this.onAddedToStage)
    // );
    // this.addEventListener(
    //   FlashEvent.REMOVED_FROM_STAGE,
    //   RumtimeHelper.bindMethod(this, this.onRemovedFromStage)
    // );
  }

  onAddedToStage() {
    if (this.context.documentView) {
      //   this.context.documentView.addEventListener(
      //     EditorEvent.DISPLAY_SCALE_CHANGE,
      //     RumtimeHelper.bindMethod(this, this.onScaleChange),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.documentView.addEventListener(
      //     EditorEvent.REBUILD_LAYOUT,
      //     RumtimeHelper.bindMethod(this, this.forcePageFlow),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.documentView.addEventListener(
      //     EditorEvent.FORCE_PAGE_FLOW,
      //     RumtimeHelper.bindMethod(this, this.forcePageFlow),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.documentView.addEventListener(
      //     EditorEvent.CANCEL_FORCE_BUILD,
      //     RumtimeHelper.bindMethod(this, this.cancelForceBuild),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.documentView.stage.addEventListener(
      //     FlashEvent.RESIZE,
      //     RumtimeHelper.bindMethod(this, this.onResize),
      //     false,
      //     0,
      //     true
      //   );
      //   this._viewportChangeTimer.addEventListener(
      //     TimerEvent.TIMER,
      //     RumtimeHelper.bindMethod(this, this.handleViewportChangeTimer)
      //   );
      //   this.context.document.addEventListener(
      //     PlaybackEvent.PLAY,
      //     RumtimeHelper.bindMethod(this, this.onPlayback),
      //     false,
      //     0,
      //     true
      //   );
      //   this.context.document.addEventListener(
      //     PlaybackEvent.STOP,
      //     RumtimeHelper.bindMethod(this, this.onStopPlayback),
      //     false,
      //     0,
      //     true
      //   );
      if (this._idleManager) {
        // this._idleManager.addEventListener(
        //   IdleEvent.IDLE,
        //   RumtimeHelper.bindMethod(this, this.onIdle)
        // );
      }
      if (!this.context.overlay) {
        // this.context.documentView.addEventListener(
        //   MxScrollEvent.SCROLL,
        //   RumtimeHelper.bindMethod(this, this.onScroll),
        //   false,
        //   0,
        //   true
        // );
        // var e = this;
        this.noteEditorService.onContinueIncrementalFlow.subscribe(evt => {
          this.continueIncrementalFlow(true, true);
        });
        // this._layout.addEventListener(
        //   IncrementalLayoutEvent.CONTINUE_INCREMENTAL_FLOW,
        //   function (t) {
        //     e.continueIncrementalFlow(true, true, {
        //       measureIndex: t.index,
        //       staves: t.invalidStaves,
        //     });
        //   }
        // );
      }
      // todo
      // const scoreController = this.context.controller as ScoreController;
      // if (
      //   scoreController &&
      //   scoreController.performanceMode == ScoreController.RECORD
      // ) {
      //   this.forceBuild();
      // }
    }
  }

  onRemovedFromStage() {
    // todo
    throw new Error('Not implemented');
  }
  getPointInMeasure(t, e, r, opts) {
    throw new Error('getPointInMeasure() not overridden');
  }
  forceFirstMeasuresToBeShown() {
    throw new Error('forceFirstMeasuresToBeShown not overridden');
  }
  ensureSystemAfterMeasureDrawn(t) {
    throw new Error('ensureSystemAfterMeasureDrawn() not overridden');
  }
  getPositionUnderPoint(t, e, r, x, y) {
    throw new Error('getStaffPositionUnderPoint() not overridden');
  }
  startViewportChangeTimer() {
    // this._viewportChangeTimer.delay = ScoreView.VIEWPORT_CHANGE_DELAY;
    // if (!this._viewportChangeTimer.running) {
    //   this._viewportChangeTimer.start();
    // }
  }
  onScaleChange(t) {
    this.startViewportChangeTimer();
  }
  onScroll(evt) {
    if (this.scrollDirectionAffectsFlow(evt.direction)) {
      this.startViewportChangeTimer();
    }
  }
  ensureScoreInViewportIsVisible() {
    throw new Error('ensureScoreInViewportIsVisible() not overriden');
  }
  onResize(t) {
    this.startViewportChangeTimer();
  }
  handleViewportChangeTimer(t) {
    this.pullFlow(true);
    // this._viewportChangeTimer.stop();
  }

  scrollDirectionAffectsFlow(t) {
    throw new Error('scrollDirectionAffectsLayout() not overriden');
  }
  optimizeMeasureViews() {
    throw new Error('optimizeMeasureViews() not overridden');
  }
  continueIncrementalFlow(t, e) {
    throw new Error('continueIncrementalFlow() not overriden');
  }
  noMoreFlowNeeded(targetMeasureIndex, staves) {}
  pullFlowComplete() {}
  hasChangedSinceLastPullFlow() {
    this._hasChangedSinceLastPullFlow = true;
  }
  pullFlow(force, targetMeasure = null) {
    if (this.context.overlay) {
      return this.pullFlowComplete();
    }
    this._targetMeasureIndex = targetMeasure ? targetMeasure.measureIndex : null;
    const staves = targetMeasure ? targetMeasure.staves : null;
    this.showIncrementalFeedback(true);
    if (!this.isIncrementalFlowComplete) {
      if (this.isMoreFlowNeeded) {
        this.continueIncrementalFlow(force, true);
        this._hasChangedSinceLastPullFlow = true;
        this.estimateScrollBar();
      } else {
        if (!this._forceViewBuild) {
          this.showIncrementalFeedback(false);
        }
        if (this.context.info.buildWhileIdle) {
          this.startIdleManager();
        }
        this.pullFlowComplete();
        if (this._hasChangedSinceLastPullFlow) {
          this.noMoreFlowNeeded(this._targetMeasureIndex, staves);
          this._hasChangedSinceLastPullFlow = false;
          this.estimateScrollBar();
        }
      }
    }
    if (this.isIncrementalFlowComplete) {
      this.showIncrementalFeedback(false);
      this.pullFlowComplete();
      if (this._hasChangedSinceLastPullFlow) {
        this.noMoreFlowNeeded(this._targetMeasureIndex, staves);
        this._hasChangedSinceLastPullFlow = false;
        this.estimateScrollBar();
      }
    }
  }
  startIdleManager() {
    if (this._idleManager == null) {
      // todo
      // this._idleManager = new IdleManager(
      //   this.context.documentView,
      //   this.initialIdleTimeout,
      //   this.subsequentIdleTimeout
      // );
      // this._idleManager.addEventListener(
      //   IdleEvent.IDLE,
      //   this.onIdle.bind(this)
      // );
    }
    // this._idleManager.enabled = true;
  }

  onIdle(t) {
    if (this.isIncrementalFlowComplete) {
      this._idleManager.enabled = false;
    } else {
      this.continueIncrementalFlow(true, false);
    }
  }
  onPlayback(t) {
    if (this._idleManager) {
      this._idleManager.paused = false;
    }
  }
  forcePageFlow(t) {
    this.forceBuild();
  }
  forceBuild() {
    if (!this.context.overlay) {
      this.context.document.validateNow();
      this._forceViewBuild = true;
      if (this._isBuilding || this.isIncrementalFlowComplete) {
        if (this.isIncrementalFlowComplete) {
          // this.dispatchEvent(new FlashEvent(FlashEvent.COMPLETE));
          // this.context.documentView.dispatchEvent(
          //   new FlashEvent(EditorEvent.FORCE_PAGE_FLOW_COMPLETE)
          // );
          // this._forceViewBuild = false
        }
      } else {
        this._isBuilding = true;
        const build = () => {
          if (this._forceViewBuild && !this.isIncrementalFlowComplete && this.continueIncrementalFlow(true, true)) {
            this.context.documentView.callLater(build);
          } else {
            this._forceViewBuild = false;
            this._isBuilding = false;
            if (this.isIncrementalFlowComplete) {
              // this.showIncrementalFeedback(false);
              // this.dispatchEvent(new FlashEvent(FlashEvent.COMPLETE));
              // this.context.documentView.dispatchEvent(
              //   new FlashEvent(EditorEvent.FORCE_PAGE_FLOW_COMPLETE)
              // );
            }
          }
        };
      }
    }
  }
  cancelForceBuild(t) {
    this._forceViewBuild = false;
  }
  positionIncrementalFeedback() {}
  showIncrementalFeedback(isFlowing) {
    if (this.context.buildIncrementally) {
      if (!isFlowing) {
        // this.context.documentView.dispatchEvent(
        //   new IncrementalLayoutEvent(
        //     IncrementalLayoutEvent.REPORT_PAGE_FLOW,
        //     -1
        //   )
        // );
      }
    }
  }
  updateIncrementalFeedback(index, type) {
    if (this.context.buildIncrementally && (type === 'page' || type === 'measure' && this._forceViewBuild)) {
      // var evtType =
      //   'page' == type
      //     ? IncrementalLayoutEvent.REPORT_PAGE_FLOW
      //     : IncrementalLayoutEvent.REPORT_STRIP_FLOW;
      // this.context.documentView.dispatchEvent(
      //   new IncrementalLayoutEvent(evtType, index)
      // );
    }
  }
  estimateScrollBar() {
    if (this.context.buildIncrementally) {
      if (this.hasLastViewBeenCreated) {
        if (this.positionEndSprite(new _geoms_point__WEBPACK_IMPORTED_MODULE_0__["default"]())) {
          this.context.documentView.updateScoreDimensions();
        }
      } else {
        this.positionEndSprite(this.endSpritePosition);
      }
    }
  }
  createUpcomingMeasures() {
    throw new Error('abstract method createUpcomingMeasures() not overridden');
  }
  positionEndSprite(t) {
    if (!this.isIncrementalFlowComplete || !this._upcomingMeasuresCreated) {
      this._upcomingMeasuresCreated = true;
      this.createUpcomingMeasures();
    }
    return this.isIncrementalFlowComplete;
  }
  updateBackdrop() {
    throw new Error('abstract method updateBackdrop() not overridden');
  }
}

/***/ }),

/***/ 35707:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/selectable-view.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SelectableView)
/* harmony export */ });
/* harmony import */ var _document_object_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/object-selection */ 77172);
/* harmony import */ var _utils_view_helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/view-helper */ 3981);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./score-object-view */ 39928);
/* harmony import */ var _selection_handle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./selection-handle */ 31448);




class SelectableView extends _score_object_view__WEBPACK_IMPORTED_MODULE_2__["default"] {
  get notation() {
    return this._notation;
  }
  get hidden() {
    return this._hidden;
  }
  set hidden(t) {
    this._hidden = t;
    this.updateStatus();
  }
  get color() {
    return this._hidden ? 0xffffff : this.notation.color;
  }
  get effectiveColor() {
    return this._hidden ? 0xffffff : this.notation.effectiveColor;
  }
  get selected() {
    return this.context.document && this.context.document.selection && !!this.context.document.selection.includes(this.notation) && (this.context.document.selection instanceof _document_object_selection__WEBPACK_IMPORTED_MODULE_0__["default"] || this.notation.valueNotation == null || this.notation.valueNotation === this.notation);
  }
  constructor(context, notation, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._notation = null;
    this._rolled = false;
    this._hidden = false;
    this._handles = [];
    this._notation = notation;
    // TODO
    // this.addEventListener(
    //   FlashMouseEvent.MOUSE_OVER,
    //   RumtimeHelper.bindMethod(this, this.addRollHighlight)
    // ),
    //   this.addEventListener(
    //     FlashMouseEvent.MOUSE_OUT,
    //     RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    //   );
  }

  removeListeners() {
    //     this.removeEventListener(
    //       FlashMouseEvent.MOUSE_OVER,
    //       RumtimeHelper.bindMethod(this, this.addRollHighlight)
    //     ),
    //       this.removeEventListener(
    //         FlashMouseEvent.MOUSE_OUT,
    //         RumtimeHelper.bindMethod(this, this.removeRollHighlight)
    //       );
  }
  updateStatus() {
    super.updateStatus();
    if (this._rolled && this.notation.enabled && !this.feedback) {
      this.buttonMode = true;
      this.useHandCursor = true;
      this.alpha = 1;
    } else {
      this.buttonMode = false;
      this.useHandCursor = false;
    }
  }
  addRollHighlight(evt) {
    this._rolled = !evt.bottonDown;
    this.updateStatus();
    evt.stopPropagation();
  }
  removeRollHighlight(evt) {
    this._rolled = false;
    this.updateStatus();
    evt.stopPropagation();
  }
  addHandle(x, y, dragMediator, selectionHandle = null) {
    if (selectionHandle == null) {
      selectionHandle = new _selection_handle__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, this.noteEditorService);
    }
    this._handles.push(selectionHandle);
    selectionHandle.x = x;
    selectionHandle.y = y;
    this.addChild(selectionHandle);
    // selectionHandle.addEventListener(
    //   FlashMouseEvent.MOUSE_DOWN,
    //   RumtimeHelper.bindMethod(dragMediator, dragMediator.handleMouseDown)
    // );
  }

  destroyChildren() {
    this.removeHandles();
  }
  removeHandles() {
    for (let i = 0; i < this._handles.length; i++) {
      const handle = this._handles[i];
      // IDestroyable
      if ((0,_utils_view_helper__WEBPACK_IMPORTED_MODULE_1__.isDestroyable)(handle)) {
        handle.destroy();
      }
      this.removeChild(handle);
    }
    this._handles = [];
  }
}

/***/ }),

/***/ 31448:
/*!*******************************************************!*\
  !*** ./src/app/note-editor/views/selection-handle.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SelectionHandle)
/* harmony export */ });
/* harmony import */ var _abstract_handle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./abstract-handle */ 2005);

class SelectionHandle extends _abstract_handle__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(context, noteEditorService) {
    super(context, noteEditorService);
  }
  updateGraphics() {
    this.graphics.clear();
    this.graphics.lineStyle(this.strokeThickness, 0, this.strokeAlpha);
    this.graphics.beginFill(0xffffff, 0);
    this.graphics.drawRect(-this.handleSize / 2, -this.handleSize / 2, this.handleSize, this.handleSize);
    this.graphics.endFill();
  }
}

/***/ }),

/***/ 79610:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/slur-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SlurView)
/* harmony export */ });
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _models_notation_direction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/notation-direction */ 66420);
/* harmony import */ var _utils_geometry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/geometry */ 57533);
/* harmony import */ var _span_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./span-view */ 62309);





class SlurView extends _span_view__WEBPACK_IMPORTED_MODULE_4__["default"] {
  static get HANDLE_DISPLAY_THRESHOLD() {
    return 30;
  }
  get c1Start() {
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"]((this._c1.x - this._p1.x) / this.staffMetrics.lineSpacing, -(this._c1.y - this._p1.y) / this.staffMetrics.lineSpacing);
  }
  get c2Start() {
    return new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"]((this._c2.x - this._p2.x) / this.staffMetrics.lineSpacing, -(this._c2.y - this._p2.y) / this.staffMetrics.lineSpacing);
  }
  get cMid() {
    return _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"].interpolate(this._c1, this._c2, 0.5);
  }
  constructor(context, span, pStart, pEnd, noteEditorService, rootDiv) {
    super(context, span, noteEditorService, rootDiv);
    this._slur = null;
    this._p1 = null;
    this._p2 = null;
    this._dist = NaN;
    this._c1 = null;
    this._c2 = null;
    this._delta = NaN;
    this._halfWidth = NaN;
    this._slur = span.slur;
    this._p1 = pStart;
    this._p2 = pEnd;
    this._dist = _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"].distance(this._p2, this._p1);
    let doubleSlurHeight = 2 * SlurView.slurHeight(this._dist, this.staffMetrics);
    let radian45 = 2 * Math.PI / 360 * 45;
    const horDist = Math.atan2(this._p2.y - this._p1.y, this._p2.x - this._p1.x);
    const height = Math.abs(this._slur.slurHeight) * Math.cos(horDist);
    doubleSlurHeight = 2 * SlurView.slurHeight(this._dist, this.staffMetrics, height);
    if (this._slur.direction == _models_notation_direction__WEBPACK_IMPORTED_MODULE_2__.Notation_Direction.DIRECTION_UP) {
      radian45 = -radian45;
    }
    let contrlPx, contrlPy;
    if (this._slur.cx1 === 0 && this._slur.cy1 === 0) {
      contrlPx = Math.cos(horDist + radian45) * doubleSlurHeight;
      contrlPy = Math.sin(horDist + radian45) * doubleSlurHeight;
      this._c1 = this._p1.add(new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](contrlPx, contrlPy));
    } else {
      this._c1 = new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](this._p1.x + this._slur.cx1 * this.staffMetrics.lineSpacing, this._p1.y - this._slur.cy1 * this.staffMetrics.lineSpacing);
      if (span.endBreak) {
        this._c1.x = Math.min(this._c1.x, this._p1.x + 0.5 * (this._p2.x - this._p1.x));
      }
    }
    if (this._slur.cx2 === 0 && this._slur.cy2 === 0) {
      contrlPx = Math.cos(horDist + Math.PI - radian45) * doubleSlurHeight;
      contrlPy = Math.sin(horDist + Math.PI - radian45) * doubleSlurHeight;
      this._c2 = this._p2.add(new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](contrlPx, contrlPy));
    } else {
      this._c2 = new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](this._p2.x + this._slur.cx2 * this.staffMetrics.lineSpacing, this._p2.y - this._slur.cy2 * this.staffMetrics.lineSpacing);
      if (span.startBreak) {
        this._c2.x = Math.max(this._c2.x, this._p2.x + 0.5 * (this._p1.x - this._p2.x));
      }
    }
    this._halfWidth = (this._p2.x - this._p1.x) / 2;
    this.initializeView();
  }
  updateView() {
    super.updateView();
    while (this.numChildren > 0) {
      this.removeChildAt(0);
    }
    if (this._slur.slurArticulation) {
      const articulation = this.context.layoutContext.foundry.getArticulation(this._slur.slurArticulation, true, false);
      if (articulation) {
        const displayObj = articulation.createDisplayObject(this.context.info);
        const cMid = this.cMid;
        const controlHigher = this._c1.y + this._c2.y > this._p1.y + this._p2.y;
        displayObj.x = (this._p1.x + this._p2.x) / 2;
        displayObj.y = cMid.y + (controlHigher ? 1 : -1) * this.staffMetrics.slurArticulationPadding * articulation.height;
        this.addChild(displayObj);
      }
    }
    if (this._halfWidth !== 0) {
      this.graphics.beginFill(0);
      this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_0__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_0__.JointStyle.BEVEL);
      this.graphics.moveTo(this._p1.x, this._p1.y);
      this._delta = this.staffMetrics.tieMaxStroke * this.staffMetrics.lineSpacing / 2;
      _utils_geometry__WEBPACK_IMPORTED_MODULE_3__["default"].cubicToQuadratic(this.lineTo.bind(this), this.curveTo.bind(this), this._p1.x, this._p1.y, this._c1.x, this._c1.y, this._c2.x, this._c2.y, this._p2.x, this._p2.y, this.staffMetrics.slurTolerance);
      this._delta = -this._delta;
      _utils_geometry__WEBPACK_IMPORTED_MODULE_3__["default"].cubicToQuadratic(this.lineTo.bind(this), this.curveTo.bind(this), this._p2.x, this._p2.y, this._c2.x, this._c2.y, this._c1.x, this._c1.y, this._p1.x, this._p1.y, this.staffMetrics.slurTolerance);
      this.graphics.endFill();
      this.graphics.lineStyle(4, 0, 0);
      this._delta = 0;
      this.graphics.moveTo(this._p1.x, this._p1.y);
      _utils_geometry__WEBPACK_IMPORTED_MODULE_3__["default"].cubicToQuadratic(this.lineTo.bind(this), this.curveTo.bind(this), this._p1.x, this._p1.y, this._c1.x, this._c1.y, this._c2.x, this._c2.y, this._p2.x, this._p2.y, this.staffMetrics.slurTolerance);
    }
  }
  mapY(x, y) {
    return y + this._delta * (this._halfWidth - Math.abs(x - (this._p1.x + this._halfWidth))) / this._halfWidth;
  }
  lineTo(x, rightPointY) {
    this.graphics.lineTo(x, this.mapY(x, rightPointY));
  }
  curveTo(x1, y1, x2, y2) {
    this.graphics.curveTo(x1, this.mapY(x1, y1), x2, this.mapY(x2, y2));
  }
  static slurHeight(width, staffMetrics, height = 0) {
    const slurStandardHeight = staffMetrics.slurStandardHeight(width / staffMetrics.lineSpacing);
    if (height > slurStandardHeight && height * staffMetrics.lineSpacing < width / 2) {
      return height * staffMetrics.lineSpacing;
    } else {
      return slurStandardHeight * staffMetrics.lineSpacing;
    }
  }
  updateSelectionFeedback() {
    super.updateSelectionFeedback();
    if (this.context.document && this.context.document.isModelEditable(this.notation)) {
      const scaleOverThreshold = this._dist * this.context.info.displayScale > SlurView.HANDLE_DISPLAY_THRESHOLD;
      if (this.selected) {
        // if (!this.span.startBreak) {
        //   this.addHandle(
        //     this._p1.x,
        //     this._p1.y,
        //     new SpanStartDragMediator(this.context, this.span.notation)
        //   );
        // }
        // if (scaleOverThreshold) {
        //   const slurControlPointMediator = new SlurControlPointMediator(
        //     this.context,
        //     this.span.notation as Slur,
        //     SlurControlPointMediator.LEFT_CONTROL,
        //     this.c1Start
        //   );
        //   this.addHandle(
        //     this._c1.x,
        //     this._c1.y,
        //     slurControlPointMediator,
        //     new RoundHandle(this.context)
        //   );
        //   const slurMidPointMediator = new SlurMidPointMediator(
        //     this.context,
        //     this.span.notation as Slur,
        //     this.c1Start,
        //     this.c2Start
        //   );
        //   this.addHandle(this.cMid.x, this.cMid.y, slurMidPointMediator);
        // }
        // if (!this.span.endBreak) {
        //   this.addHandle(
        //     this._p2.x,
        //     this._p2.y,
        //     new SpanEndDragMediator(this.context, this.span.notation)
        //   );
        // }
        // if (scaleOverThreshold) {
        //   const slurControlPointMediator = new SlurControlPointMediator(
        //     this.context,
        //     this.span.notation as Slur,
        //     SlurControlPointMediator.RIGHT_CONTROL,
        //     this.c2Start
        //   );
        //   this.addHandle(
        //     this._c2.x,
        //     this._c2.y,
        //     slurControlPointMediator,
        //     new RoundHandle(this.context)
        //   );
        // }
      } else {
        this.removeHandles();
      }
    }
  }
}

/***/ }),

/***/ 62309:
/*!************************************************!*\
  !*** ./src/app/note-editor/views/span-view.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ SpanView)
/* harmony export */ });
/* harmony import */ var _selectable_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./selectable-view */ 35707);

class SpanView extends _selectable_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get span() {
    return this._span;
  }
  constructor(context, span, noteEditorService, rootDiv) {
    super(context, span.notation, noteEditorService, rootDiv);
    this._span = null;
    this._spanNotationViewMediator = null;
    this._span = span;
    this._spanNotationViewMediator = context.registerSpanNotationView(this);
  }
  destroy() {
    this._spanNotationViewMediator.destroy();
    super.destroy();
  }
}

/***/ }),

/***/ 1625:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/staff-handle.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffHandle)
/* harmony export */ });
/* harmony import */ var _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../document/measure-selection */ 51930);
/* harmony import */ var _document_range_selection__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../document/range-selection */ 52152);
/* harmony import */ var _utils_view_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/view-utils */ 15869);
/* harmony import */ var _views_part_inserter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../views/part-inserter */ 4161);
/* harmony import */ var _views_score_object_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../views/score-object-view */ 39928);
/* harmony import */ var _view_context__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./view-context */ 65532);






class StaffHandle extends _views_score_object_view__WEBPACK_IMPORTED_MODULE_4__["default"] {
  static get _lastRolled() {
    return StaffHandle.lastRolled;
  }
  static set _lastRolled(t) {
    StaffHandle.lastRolled = t;
  }
  get layout() {
    return this._layout;
  }
  get staff() {
    if (this._layout) {
      return this._layout.staff;
    } else {
      return null;
    }
  }
  get selected() {
    return false;
  }
  get handleHeight() {
    if (this._layout) {
      return this.toViewUnits(this._layout.height + this.staffMetrics.staffSpacing);
    } else {
      return 0;
    }
  }
  constructor(context, layout, systemView, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    this._textField = null;
    this._addAbove = null;
    this._addBelow = null;
    this._rolled = false;
    this._mouseDownSeen = false;
    this._systemView = null;
    this._rollEvent = null;
    this._partMediator = null;
    this.buttonMode = true;
    this.useHandCursor = true;
    this._layout = layout;
    this._systemView = systemView;
    this._partMediator = this.context.registerPartView(this);
    this.initializeView();
    // this.addEventListener(FlashMouseEvent.CLICK, this.handleClick.bind(this));
    if (_view_context__WEBPACK_IMPORTED_MODULE_5__["default"].useRolloverEvents) {
      //   this.addEventListener(
      //     FlashMouseEvent.MOUSE_DOWN,
      //     RumtimeHelper.bindMethod(this, this.handleMouseDown)
      //   );
      //   this.addEventListener(
      //     FlashMouseEvent.ROLL_OVER,
      //     RumtimeHelper.bindMethod(this, this.addRollHighlight)
      //   );
      //   this.addEventListener(
      //     FlashMouseEvent.ROLL_OUT,
      //     RumtimeHelper.bindMethod(this, this.removeRollHighlight)
      //   );
    } else {
      //   this.addEventListener(
      //     FlashMouseEvent.MOUSE_DOWN,
      //     RumtimeHelper.bindMethod(this, this.handleMouseDownAsRoll)
      //   );
    }
  }
  removeListeners() {
    // this.removeEventListener(
    //   FlashMouseEvent.CLICK,
    //   RumtimeHelper.bindMethod(this, this.handleClick)
    // );
    if (_view_context__WEBPACK_IMPORTED_MODULE_5__["default"].useRolloverEvents) {
      //   this.removeEventListener(
      //     FlashMouseEvent.MOUSE_DOWN,
      //     RumtimeHelper.bindMethod(this, this.handleMouseDown)
      //   );
      //   this.removeEventListener(
      //     FlashMouseEvent.ROLL_OVER,
      //     RumtimeHelper.bindMethod(this, this.addRollHighlight)
      //   );
      //   this.removeEventListener(
      //     FlashMouseEvent.ROLL_OUT,
      //     RumtimeHelper.bindMethod(this, this.removeRollHighlight)
      //   );
    } else {
      //   this.removeEventListener(
      //     FlashMouseEvent.MOUSE_DOWN,
      //     RumtimeHelper.bindMethod(this, this.handleMouseDownAsRoll)
      //   );
    }
  }
  destroyChildren() {
    if (this._addAbove) {
      this._addAbove.destroy();
    }
    if (this._addBelow) {
      this._addBelow.destroy();
    }
  }
  destroy() {
    // this._partMediator.destroy(); todo
    this._layout = null;
    super.destroy();
  }
  wholeStaffSelected(startIdx, endIdx) {
    return startIdx === 0 && this._layout && endIdx === this.layout.context.score.numMeasures - 1;
  }
  updateView() {
    this.x = this.context.info.staffHandlePadding;
    if (this.context.controller.document.editable) {
      this._addAbove = new _views_part_inserter__WEBPACK_IMPORTED_MODULE_3__["default"](this.staff, false, this.noteEditorService);
      this._addAbove.x = this.context.info.staffHandleExtent;
      this._addAbove.visible = false;
      this.addChild(this._addAbove);
      this._addBelow = new _views_part_inserter__WEBPACK_IMPORTED_MODULE_3__["default"](this.staff, true, this.noteEditorService);
      this._addBelow.x = this.context.info.staffHandleExtent;
      this._addBelow.visible = false;
      this.addChild(this._addBelow);
      this._addAbove.scaleX = this._addAbove.scaleY = this._addBelow.scaleX = this._addBelow.scaleY = this.context.info.inserterScale;
    }
  }
  updateStatus() {
    this.graphics.clear();
    let includesEntireStaff = false;
    const staff = this.staff;
    if (this.context.document && this.staff && this.staff.score) {
      const selection = this.context.document.selection;
      if (selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_1__["default"] || selection instanceof _document_measure_selection__WEBPACK_IMPORTED_MODULE_0__["default"]) {
        if (selection && selection instanceof _document_range_selection__WEBPACK_IMPORTED_MODULE_1__["default"] && this.layout) {
          includesEntireStaff = selection.includesEntireStaffRange(staff, this.layout.startMeasureIndex, this.layout.endMeasureIndex);
        }
      }
    }
    this.graphics.beginFill(0, 0);
    this.graphics.drawRect(-this.context.info.staffHandleExtent, -this.handleHeight + this.toViewUnits(this.staffMetrics.lineSpacing / 2) - 5, 1.5 * this.context.info.staffHandleExtent, this.handleHeight - 2 + 10);
    this.graphics.endFill();
    if (includesEntireStaff) {
      this.graphics.beginFill(this.context.info.measureHighlightColor, this.context.info.measureHighlightAlpha);
    } else {
      if (this._rolled) {
        this.graphics.lineStyle(1, this.context.info.measureHandleHighlightColor);
      }
      this.graphics.beginFill(this.context.info.handleColor, this.context.info.measureHandleAlpha);
    }
    this.graphics.drawRect(-this.context.info.staffHandleExtent, -this.handleHeight + this.toViewUnits(this.staffMetrics.staffSpacing / 2), this.context.info.staffHandleWidth, this.handleHeight - 2);
    this.graphics.endFill();
    if (this._addAbove && this._addBelow) {
      this._addAbove.visible = this._rolled;
      this._addAbove.x = -this.context.info.staffHandleWidth;
      this._addAbove.y = -this.handleHeight + this.toViewUnits(this.staffMetrics.staffSpacing / 2);
      this._addBelow.visible = this._rolled;
      this._addBelow.x = -this.context.info.staffHandleWidth;
      this._addBelow.y = this.toViewUnits(this.staffMetrics.staffSpacing / 2);
    }
  }
  processHandleClick(evt) {
    // const selectOrAdd = evt.shiftKey
    //   ? StaffEditEvent.ADD_TO_SELECTION
    //   : StaffEditEvent.SELECT;
    // this.dispatchEvent(
    //   new StaffEditEvent(StaffEditEvent.PART_EDIT, selectOrAdd, this.staff)
    // );
    evt.stopPropagation();
  }
  handleMouseDown(evt) {
    this._mouseDownSeen = true;
    if (this._rolled && evt.localX < -this.context.info.staffHandleExtent + this.context.info.staffHandleWidth) {
      this.processHandleClick(evt);
    }
  }
  handleMouseDownAsRoll(evt) {
    if (this.context.controller.isNotationInteractionAvailable()) {
      this._mouseDownSeen = true;
      if (evt.localX < -this.context.info.staffHandleExtent + this.context.info.staffHandleWidth) {
        this.processHandleClick(evt);
      }
      this._systemView.showHandles();
    }
  }
  handleClick(evt) {
    if (this.context.controller.isNotationInteractionAvailable()) {
      if (this._mouseDownSeen) {
        this.addRollHighlight(evt);
      } else if (evt.localX < -this.context.info.staffHandleExtent + this.context.info.staffHandleWidth) {
        this.processHandleClick(evt);
      }
    }
  }
  addRollHighlight(evt) {
    this._rollEvent = evt;
    if (StaffHandle._lastRolled && StaffHandle._lastRolled !== this) {
      StaffHandle._lastRolled.removeRollHighlight(evt);
    }
    StaffHandle._lastRolled = this;
    this._rolled = !evt.bottonDown;
    this.updateStatus();
    evt.stopPropagation();
  }
  removeRollHighlight(prevRollEvt) {
    if (!this._rollEvent || !_utils_view_utils__WEBPACK_IMPORTED_MODULE_2__["default"].isSyntheticMouseEvent(this._rollEvent, prevRollEvt)) {
      this._rolled = false;
      this.updateStatus();
      prevRollEvt.stopPropagation();
    }
  }
}
StaffHandle.lastRolled = null;

/***/ }),

/***/ 67346:
/*!**************************************************!*\
  !*** ./src/app/note-editor/views/staff-lines.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffLines)
/* harmony export */ });
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./score-object-view */ 39928);

class StaffLines extends _score_object_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get MOUSE_CATCHER_MARGIN() {
    return 1.5;
  }
  get staffWidth() {
    return this._staffWidth;
  }
  set staffWidth(t) {
    this._staffWidth = t;
  }
  get mouseInStaff() {
    return this.mouseY <= 0 && this.mouseY > this._minY;
  }
  constructor(context, numLines, lineSpacing, staffWidth, displayLineStartIndex, displayLineEndIndex, displayLineSpacing, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._minY = NaN;
    this._numLines = 0;
    this._lineSpacing = NaN;
    this._staffWidth = NaN;
    this._displayLineStartIndex = NaN;
    this._displayLineEndIndex = NaN;
    this._displayLineSpacing = NaN;
    this._numLines = numLines;
    this._lineSpacing = lineSpacing;
    this._staffWidth = staffWidth;
    this._displayLineStartIndex = displayLineStartIndex;
    this._displayLineEndIndex = displayLineEndIndex;
    this._displayLineSpacing = displayLineSpacing;
    // this.addEventListener(
    //   FlashEvent.ADDED_TO_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleAddedToStage)
    // );
    // this.addEventListener(
    //   FlashEvent.REMOVED_FROM_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleRemovedFromStage)
    // );
  }

  removeListeners() {
    // this.removeEventListener(
    //   FlashEvent.ADDED_TO_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleAddedToStage)
    // );
    // this.removeEventListener(
    //   FlashEvent.REMOVED_FROM_STAGE,
    //   RumtimeHelper.bindMethod(this, this.handleRemovedFromStage)
    // );
    // this.removeDisplayScaleChangeEvent();
  }
  destroyChildren() {
    for (let i = 0; i < this.numChildren; i++) {
      this.getChildAt(i).destroy();
    }
  }
  removeDisplayScaleChangeEvent() {
    if (this.context.documentView) {
      // this.context.documentView.removeEventListener(
      //   EditorEvent.DISPLAY_SCALE_CHANGE,
      //   RumtimeHelper.bindMethod(this, this.handleScaleChange)
      // );
    }
  }
  handleAddedToStage(t) {
    // null != this.context.documentView &&
    // this.context.documentView.addEventListener(
    //   EditorEvent.DISPLAY_SCALE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleScaleChange)
    // );
  }
  handleRemovedFromStage(t) {
    // null != this.context.documentView &&
    //   this.context.documentView.removeEventListener(
    //     EditorEvent.DISPLAY_SCALE_CHANGE,
    //     RumtimeHelper.bindMethod(this, this.handleScaleChange)
    //   );
  }
  handleScaleChange(t) {
    this.updateGeometry();
  }
  updateGeometry() {
    let y, displayIdx;
    this._minY = -this.toViewUnits((this._numLines - 1) * this._lineSpacing);
    this.graphics.clear();
    this.graphics.beginFill(0, 0);
    this.graphics.drawRect(0, this._minY - this.toViewUnits(StaffLines.MOUSE_CATCHER_MARGIN), this.toViewUnits(this.staffWidth), -this._minY + this.toViewUnits(2 * StaffLines.MOUSE_CATCHER_MARGIN));
    this.graphics.endFill();
    const lineSize = this.staffMetrics.lineThickness * this.staffMetrics.lineSpacing;
    for (let i = this._displayLineStartIndex; i < this._displayLineEndIndex; i += this._displayLineSpacing) {
      y = this.toViewUnits(i * this._lineSpacing);
      this.graphics.beginFill(0);
      this.graphics.drawRect(-1, -y, this.toViewUnits(this.staffWidth), lineSize);
      this.graphics.endFill();
    }
  }
}

/***/ }),

/***/ 72908:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/staff-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StaffView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _models_tablature_clef__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/tablature-clef */ 20511);
/* harmony import */ var _measure_prefixes_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./measure-prefixes-view */ 77347);
/* harmony import */ var _measure_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./measure-view */ 35035);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./score-object-view */ 39928);






class StaffView extends _score_object_view__WEBPACK_IMPORTED_MODULE_5__["default"] {
  get layout() {
    return this._layout;
  }
  get staffIndex() {
    return this._layout.staff.index;
  }
  get viewIndex() {
    return this._viewIndex;
  }
  get staffId() {
    return this._layout.staff.id;
  }
  get score() {
    return this._layout.score;
  }
  get lastDrawnMeasure() {
    return this._measureViews[this._measureViews.length - 1];
  }
  get numMeasureViews() {
    return this._measureViews.length;
  }
  get staffStartViews() {
    const staffStartViews = [];
    for (const key in this._measurePrefixesViews) {
      const prefixesView = this._measurePrefixesViews[key];
      const staffStartView = prefixesView.staffStartView;
      if (staffStartView) {
        staffStartViews.push(staffStartView);
      }
    }
    return staffStartViews;
  }
  constructor(context, layout, viewIndex, rootDiv, noteEditorService) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    this._viewIndex = 0;
    this._staffStartView = null;
    this._measureViews = [];
    this._cautionaryView = null;
    this._endSprite = null;
    this._hyphenViews = [];
    this._measurePrefixesViews = {};
    this._hyphenWidth = 0;
    this._layout = layout;
    this._viewIndex = viewIndex;
    this.rootDiv = rootDiv;
    if (!this.context.info.printView) {
      if (layout.staffStartLayout.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_2__["default"] && this.context.controller.document.editable) {
        this.mouseChildren = null;
        // this.addEventListener(
        //   FlashMouseEvent.MOUSE_UP,
        //   RumtimeHelper.bindMethod(this, this.tabEditingDisallowed)
        // );
      }
      //   layout.addEventListener(
      //     HyphensUpdateEvent.HYPHENS_UPDATED,
      //     RumtimeHelper.bindMethod(this, this.handleHyphensUpdated)
      //   );
    }

    this.initializeView();
  }
  removeListeners() {
    if (!this.context.info.printView && this.layout.staffStartLayout.measure.effectiveClef instanceof _models_tablature_clef__WEBPACK_IMPORTED_MODULE_2__["default"] && this.context.controller.document.editable) {
      // this.removeEventListener(
      //   FlashMouseEvent.MOUSE_UP,
      //   RumtimeHelper.bindMethod(this, this.tabEditingDisallowed)
      // );
    }
    //   this.layout.removeEventListener(
    //     HyphensUpdateEvent.HYPHENS_UPDATED,
    //     RumtimeHelper.bindMethod(this, this.handleHyphensUpdated)
    //   );
  }

  destroyChildren() {
    if (this._staffStartView) {
      this._staffStartView.destroy();
    }
    if (this._cautionaryView) {
      this._cautionaryView.destroy();
    }
    if (!this.context.info.useMeasureViewsCache) {
      for (let i = 0; i < this._measureViews.length; i++) {
        const measureView = this._measureViews[i];
        measureView.destroy();
      }
    }
  }
  removeMeasure(idx) {
    const measureViewsCache = [];
    const measurePrefixesView = this.getMeasurePrefixesViewAt(idx);
    if (measurePrefixesView) {
      const prefixes = measurePrefixesView.prefixes;
      for (let i = 0; i < prefixes.length; i++) {
        const prefix = prefixes[i];
        this.removeChild(prefix.mask);
        this.removeChild(prefix);
        measureViewsCache.push(prefix);
      }
    }
    this.removeChild(this._measureViews[idx].mask);
    this.removeChild(this._measureViews[idx]);
    measureViewsCache.concat(this._measureViews.splice(idx, 1));
    if (!this.context.info.useMeasureViewsCache) {
      for (let i = 0; i < measureViewsCache.length; i++) {
        measureViewsCache[i].destroy();
      }
    }
    return measureViewsCache;
  }
  truncateMeasureViewsStartingAt(startIdx) {
    for (let idx = this._measureViews.length - 1; idx >= startIdx; idx--) {
      this.removeMeasure(startIdx);
    }
  }
  updateLayoutToMeasureViews() {
    for (let i = 0; i < this._measureViews.length; i++) {
      const measureView = this._measureViews[i];
      measureView.updateStaffLayout(this.layout);
    }
  }
  handleHyphensUpdated(t) {
    this.score.isStripMode ? this.updateGeometry() : this.updateView();
  }
  getMeasureViewAt(idx) {
    return this._measureViews[idx];
  }
  getMeasureXPosition(idx) {
    if (this.numMeasureViews - 1 < idx) {
      return 0;
    } else {
      return this._measureViews[idx].x;
    }
  }
  getMeasureIndexAtPosition(position, leftMeasureIndexInViewport = 0) {
    for (let i = leftMeasureIndexInViewport; i < this.numMeasureViews - 1; i++) {
      if (this._measureViews[i].x >= position) {
        return this._measureViews[i].measureIndex;
      }
    }
    return this.lastDrawnMeasure.measureIndex;
  }
  hideMeasure(idx) {
    this._measureViews[idx].state = _measure_view__WEBPACK_IMPORTED_MODULE_4__["default"].PLACEHOLDER;
  }
  showHiddenMeasure(idx) {
    this._measureViews[idx].state = _measure_view__WEBPACK_IMPORTED_MODULE_4__["default"].SCORE;
  }
  updateMeasureAt(idx) {
    this.updatePrefixes(idx);
    this.updateMeasureViewAt(idx);
  }
  updatePrefixes(idx) {
    const measurePrefixesLayout = this._layout.getMeasurePrefixesLayoutAt(idx);
    if (measurePrefixesLayout) {
      const prefixes = measurePrefixesLayout.prefixes;
      const measurePrefixesView = this.getMeasurePrefixesViewAt(idx);
      if (measurePrefixesView) {
        const viewPrefixes = measurePrefixesView.prefixes;
        for (let i = 0; i < viewPrefixes.length; i++) {
          const viewPrefix = viewPrefixes[i];
          this.removeChild(viewPrefix.mask);
          this.removeChild(viewPrefix);
          if (!this.context.info.useMeasureViewsCache) {
            viewPrefix.destroy();
          }
          viewPrefixes[i] = prefixes[i].createMeasureView(this.context, this);
          this.addChild(viewPrefixes[i]);
          this.addChild(viewPrefixes[i].mask);
        }
      }
    }
  }
  updateMeasureViewAt(idx) {
    const measure_id = this._layout.getMeasureLayoutAt(idx).measure.id;
    const globalMeasureView = this.context.getGlobalMeasureView(measure_id, this.staffId);
    let measureView = this.getMeasureViewAt(idx);
    if (globalMeasureView) {
      globalMeasureView.layout = this.layout.getMeasureLayoutAt(idx);
      globalMeasureView.layout.handleMessageSequenceChange();
      this._measureViews[idx] = globalMeasureView;
      this.addChild(globalMeasureView);
      this.addChild(globalMeasureView.mask);
      globalMeasureView.updateGeometry();
    } else {
      if (measureView) {
        this.removeChild(measureView.mask);
        this.removeChild(measureView);
        if (!this.context.info.useMeasureViewsCache) {
          measureView.destroy();
        }
        measureView = this._layout.getMeasureLayoutAt(idx).createMeasureView(this.context, this);
        this._measureViews[idx] = measureView;
        this.addChild(measureView);
        this.addChild(measureView.mask);
        this.context.setGlobalMeasureView(measureView.measureId, this.staffId, measureView);
      }
    }
  }
  justifyMeasureAt(idx) {
    const measureView = this._measureViews[idx];
    if (measureView) {
      const measurePrefixesView = this.getMeasurePrefixesViewAt(idx);
      if (measurePrefixesView) {
        measurePrefixesView.justifyMeasureViews();
      }
      measureView.justifyMeasureView();
    }
    if (idx === this._measureViews.length - 1 && this._cautionaryView) {
      this._cautionaryView.updateGeometry();
    }
  }
  measureViewWidthAt(idx) {
    if (idx === 0 || this.numMeasureViews - 1 === idx) {
      return this._measureViews[idx].width;
    } else if (this.numMeasureViews > idx + 1) {
      return this._measureViews[idx + 1].x - this._measureViews[idx].x;
    } else {
      return 0;
    }
  }
  getMeasurePositionX(idx) {
    if (idx >= this._measureViews.length) {
      return 0;
    } else {
      return this.getMeasureViewAt(idx).x;
    }
  }
  getPositionXInStaff(measureIndex, measurePosition) {
    const measureView = this.getMeasureViewAt(measureIndex - this.layout.startMeasureIndex);
    if (measureView) {
      return this.getMeasurePositionX(measureIndex - this.layout.startMeasureIndex) + this.toViewUnits(measureView.layout.getMeasurePositionX(measurePosition, false, -1));
    } else {
      return 0;
    }
  }
  createHyphen(hyphenLayout) {
    const hyphenView = hyphenLayout.createDisplayObject(this.context);
    hyphenView.updateStaffGeometry(this._layout);
    this.addChild(hyphenView);
    this._hyphenViews.push(hyphenView);
    return hyphenView;
  }
  placeHyphens(hyphenLayout, startX, endX, s = 0.5) {
    let hyphenView = hyphenLayout.createDisplayObject(this.context);
    if (this._hyphenWidth === 0) {
      this._hyphenWidth = hyphenView.width;
    }
    const width = this._hyphenWidth + this.toViewUnits(this.layout.context.staffMetrics.hyphenMinPadding);
    const totalWidth = endX - startX;
    let hyphenCount = this.layout.context.staffMetrics.showMultipleHyphens ? Math.floor(totalWidth / width) : 1;
    hyphenCount = Math.max(1, hyphenCount);
    const perWidth = totalWidth / hyphenCount;
    let x = startX + (perWidth - this._hyphenWidth) * s;
    for (let i = 0; i < hyphenCount; i++) {
      hyphenView = this.createHyphen(hyphenLayout);
      hyphenView.x = x;
      x += perWidth;
    }
  }
  createHyphensBetweenTwoLyrics(hyphenLayout) {
    const startX = this.getPositionXInStaff(hyphenLayout.startHyphenMeasureIndex, hyphenLayout.startHyphenMeasurePosition) + this.toViewUnits(hyphenLayout.lyricRightBound);
    const endX = this.getPositionXInStaff(hyphenLayout.endHyphenMeasureIndex, hyphenLayout.endHyphenMeasurePosition) + this.toViewUnits(hyphenLayout.lyricLeftBound);
    if (startX < endX) {
      this.placeHyphens(hyphenLayout, startX, endX, 0.5);
    }
  }
  createHyphensFromTheBeginningOfTheStaff(hyphenLayout) {
    const staffPositionX = this.getPositionXInStaff(hyphenLayout.startHyphenMeasureIndex, 0);
    const endPositionX = this.getPositionXInStaff(hyphenLayout.endHyphenMeasureIndex, hyphenLayout.endHyphenMeasurePosition) + this.toViewUnits(hyphenLayout.lyricLeftBound);
    this.placeHyphens(hyphenLayout, staffPositionX, endPositionX, 0);
  }
  haveMeasureLayoutsBeenLoaded(hyphenLayout) {
    return hyphenLayout.startHyphenMeasureIndex <= this.layout.endMeasureIndex;
  }
  createHyphensUntilTheEndOfTheMeasure(hyphenLayout) {
    if (this.haveMeasureLayoutsBeenLoaded(hyphenLayout)) {
      const startX = this.getPositionXInStaff(hyphenLayout.startHyphenMeasureIndex, hyphenLayout.startHyphenMeasurePosition) + this.toViewUnits(hyphenLayout.lyricRightBound);
      const endX = this.getPositionXInStaff(hyphenLayout.endHyphenMeasureIndex, hyphenLayout.endHyphenMeasurePosition);
      if (endX !== 0) {
        this.placeHyphens(hyphenLayout, startX, endX, 1);
      }
    }
  }
  updateView() {
    this.destroyChildren();
    this.truncateMeasureViewsStartingAt(0);
    for (let i = 0; i < this._hyphenViews.length; i++) {
      const hyphenView = this._hyphenViews[i];
      this.removeChild(hyphenView);
    }
    this._measurePrefixesViews = {};
    this._hyphenViews = [];
    this._measureViews = [];
    if (this.context.info.displayMode !== _models_score__WEBPACK_IMPORTED_MODULE_1__["default"].STRIP_DISPLAY) {
      for (let i = 0; i < this._layout.measureLayouts.length; i++) {
        const measureLayout = this._layout.measureLayouts[i];
        const measure = measureLayout.measure;
        this.createMeasurePrefixesViewsAt(measure.index);
        this.createMeasureViewAt(i, false);
      }
      this._staffStartView = this._measurePrefixesViews[0].prefixes[0];
      if (this._layout.cautionaryLayout) {
        this._cautionaryView = this._layout.cautionaryLayout.createMeasureView(this.context, this);
        this.addChild(this._cautionaryView);
        this.addChild(this._cautionaryView.mask);
      }
    }
    this.updateGeometry();
  }
  positionEndSprite(x) {
    if (this._endSprite == null) {
      this._endSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
      this._endSprite.graphics.beginFill(0xff0000, 0);
      this._endSprite.graphics.drawRect(0, 0, 2, 2);
      this.addChild(this._endSprite);
    }
    this._endSprite.x = x;
  }
  createMeasurePrefixesViewsAt(idx) {
    const measurePrefixesView = new _measure_prefixes_view__WEBPACK_IMPORTED_MODULE_3__["default"](idx);
    this._measurePrefixesViews[idx - this._layout.startMeasureIndex] = measurePrefixesView;
    const measure = this.score.getMeasureByIndexAndStaffIndex(idx, this.staffIndex);
    if (measure) {
      const measurePrefixesLayout = this._layout.getMeasurePrefixesLayoutByMeasureIndex(idx);
      if (measurePrefixesLayout) {
        for (let measurePrefixIndex = 0; measurePrefixIndex < measurePrefixesLayout.prefixes.length; measurePrefixIndex++) {
          const prefix = measurePrefixesLayout.prefixes[measurePrefixIndex];
          let measureView = null;
          let oldMeasureLayout = null;
          if (measurePrefixesLayout.prefixes.length > measurePrefixIndex) {
            oldMeasureLayout = measurePrefixesLayout.prefixes[measurePrefixIndex];
          }
          const globalMeasureView = this.context.getGlobalMeasureView(measure.id, this.staffId, {
            isMeasurePrefix: true,
            measurePrefixIndex,
            oldMeasureLayout
          });
          if (globalMeasureView) {
            if (globalMeasureView.layout !== oldMeasureLayout) {
              globalMeasureView.laout = oldMeasureLayout;
            }
            measureView = globalMeasureView;
            measureView.wakeUpCachedMeasureView();
          } else {
            measureView = prefix.createMeasureView(this.context, this);
            this.context.setGlobalMeasureView(measure.id, this.staffId, measureView, {
              isMeasurePrefix: true,
              measurePrefixIndex
            });
          }
          this.addChild(measureView);
          this.addChild(measureView.mask);
          measurePrefixesView.addPrefix(measureView);
        }
      }
    }
  }
  createMeasureViewAt(measureIdx, checkNextValidate) {
    const measureLayout = this._layout.getMeasureLayoutAt(measureIdx);
    if (measureLayout) {
      const measure = measureLayout.measure;
      if (checkNextValidate) {
        this._layout.validateMeasureLayout(measureLayout);
        const nextMeasureLayout = this._layout.getMeasureLayoutAt(measureIdx + 1);
        if (nextMeasureLayout) {
          this._layout.validateMeasureLayout(nextMeasureLayout);
        }
      }
      const globalMeasureView = this.context.getGlobalMeasureView(measure.id, this.staffId, {
        oldMeasureLayout: measureLayout
      });
      let measureView = null;
      if (globalMeasureView) {
        if (globalMeasureView.layout !== measureLayout) {
          console.warn('Measure view has a new layout. That should not be necessary.');
        }
        globalMeasureView.layout = measureLayout;
        globalMeasureView.staffView = this;
        measureView = globalMeasureView;
        measureView.wakeUpCachedMeasureView();
      } else {
        measureView = measureLayout.createMeasureView(this.context, this);
        this.context.setGlobalMeasureView(measureView.measureId, this.staffId, measureView);
      }
      if (!this.context.info.useMeasureViewsCache && this._measureViews[measureIdx]) {
        this._measureViews[measureIdx].destroy();
      }
      this._measureViews[measureIdx] = measureView;
      this.addChild(this._measureViews[measureIdx]);
      this.addChild(this._measureViews[measureIdx].mask);
      measureView.updateGeometry();
    }
  }
  updateGeometry() {
    super.updateGeometry();
    this.arrangeMeasures();
    this.arrangeHyphens();
  }
  updateMeasureGeometry() {
    for (let i = 0; i < this._measureViews.length; i++) {
      this.getMeasureViewAt(i).updateGeometry();
    }
  }
  updateBarlineHeight() {
    for (let i = 0; i < this._measureViews.length; i++) {
      this.getMeasureViewAt(i).updateBarlineHeight();
    }
  }
  getMeasurePrefixesViewAt(idx) {
    return this._measurePrefixesViews[idx];
  }
  getMeasurePrefixesViewByMeasureIndex(measureIdx) {
    return this.getMeasurePrefixesViewAt(measureIdx - this.layout.startMeasureIndex);
  }
  arrangeMeasures() {
    let currX = 0;
    for (let i = 0; i < this._measureViews.length; i++) {
      const measureView = this.getMeasureViewAt(i);
      const measurePrefixesView = this.getMeasurePrefixesViewAt(i);
      if (measurePrefixesView) {
        for (let j = 0; j < measurePrefixesView.prefixes.length; j++) {
          const prefix = measurePrefixesView.prefixes[j];
          prefix.x = currX;
          currX += prefix.measureWidth;
        }
      }
      measureView.x = currX;
      measureView.mask.x = currX;
      currX += measureView.measureWidth;
    }
    if (this._cautionaryView) {
      this._cautionaryView.x = currX;
      this._cautionaryView.mask.x = currX;
    }
  }
  arrangeHyphens() {
    for (let i = 0; i < this._hyphenViews.length; i++) {
      const hyphenView = this._hyphenViews[i];
      this.removeChild(hyphenView);
    }
    this._hyphenViews = [];
    for (let i = 0; i < this._layout.hyphens.length; i++) {
      const hyphen = this._layout.hyphens[i];
      if (hyphen.startMeasureExists) {
        if (hyphen.beginningOfStaff) {
          this.createHyphensFromTheBeginningOfTheStaff(hyphen);
        } else if (hyphen.endOfMeasure) {
          this.createHyphensUntilTheEndOfTheMeasure(hyphen);
        } else if (hyphen.endLyricLayout && hyphen.betweenLyrics) {
          this.createHyphensBetweenTwoLyrics(hyphen);
        }
      }
    }
  }
  tabEditingDisallowed(t) {}
}

/***/ }),

/***/ 77738:
/*!*************************************************!*\
  !*** ./src/app/note-editor/views/strip-view.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StripView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layouts/system-view */ 46882);
/* harmony import */ var _models_score__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/score */ 17784);
/* harmony import */ var _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../text/anti-alias-type */ 52348);
/* harmony import */ var _text_text_field__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../text/text-field */ 67477);
/* harmony import */ var _text_text_format__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../text/text-format */ 10431);
/* harmony import */ var _text_text_format_align__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../text/text-format-align */ 48520);
/* harmony import */ var _score_view__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./score-view */ 67428);
/* harmony import */ var _track_flag_view__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./track-flag-view */ 87628);










class StripView extends _score_view__WEBPACK_IMPORTED_MODULE_8__["default"] {
  static get UPCOMING_MEASURE_VIEWS_REFRESH_THRESHOLD() {
    return 0.001;
  }
  get layout() {
    return this._layout;
  }
  get totalPageFlowElements() {
    return this._systemView.getStaffViewAt(0).numMeasureViews;
  }
  get firstMeasurePoint() {
    return this._systemView.getLocalMeasureStart(0);
  }
  get lastMeasurePoint() {
    return this._systemView.getLocalMeasureStart(this.totalPageFlowElements - 1);
  }
  get staffMetrics() {
    return this.layout.context.staffMetrics;
  }
  get backdropHeight() {
    const distanceY = Math.min(0, this.toViewUnits(this._systemView.layout.distanceY));
    return this.toViewUnits(this.layout.height) - distanceY;
  }
  get backdropStripWidth() {
    const lastMeasureHandle = this._systemView.lastMeasureHandle;
    if (!lastMeasureHandle) {
      return 0;
    }
    let handleRight = lastMeasureHandle.x + lastMeasureHandle.handleWidth;
    if (lastMeasureHandle.addAfter) {
      handleRight += lastMeasureHandle.addAfter.right * lastMeasureHandle.addAfter.scaleX;
    }
    return handleRight - (this._systemView.firstStaffHandle.x - this.context.info.staffHandleExtent);
  }
  get systemViewWidth() {
    const firstStaffView = this._systemView.getStaffViewAt(0);
    const lastDrawnMeasure = firstStaffView.lastDrawnMeasure;
    return lastDrawnMeasure.x + lastDrawnMeasure.measureWidth + firstStaffView.x + this._systemView.x - 1;
  }
  get width() {
    let width = Math.max(this.systemViewWidth, this.backdropStripWidth) + this._stripMetrics.stripMarginLeft + this._stripMetrics.stripMarginRight;
    if (this._measurePlaceholdersContainer) {
      const placeholderContainerWidth = this._measurePlaceholdersContainer.x + this._measurePlaceholdersContainer.width;
      width = Math.max(width, placeholderContainerWidth);
    }
    return width;
  }
  set width(t) {
    super.width = t;
  }
  get height() {
    const distanceY = Math.min(0, this.toViewUnits(this._systemView.layout.distanceY));
    return this.toViewUnits(this.layout.height) - distanceY;
  }
  set height(v) {
    super.height = v;
  }
  get lastDrawnMeasure() {
    return this._systemView.lastDrawnMeasure;
  }
  get hasLastViewBeenCreated() {
    return this.isIncrementalFlowComplete;
  }
  get overlayMeasureIndex() {
    const documentView = this.context.documentView;
    const overlayWidth = documentView.overlayWidth;
    const measurePosition = documentView.horizontalScrollPosition / documentView.viewInfo.displayScale - (this._contentSprite.x + this._systemView.x + this._systemView.staffViews[0].x) + overlayWidth;
    return Math.floor(Math.max(0, this._systemView.getStaffViewAt(0).getMeasureIndexAtPosition(measurePosition) - 1));
  }
  get leftMeasureIndexInViewport() {
    const documentView = this.context.documentView;
    const scrollPosition = documentView.horizontalScrollPosition / documentView.viewInfo.displayScale;
    const left = this._contentSprite.x + this._systemView.x;
    return Math.floor(Math.max(0, this._systemView.getStaffViewAt(0).getMeasureIndexAtPosition(scrollPosition - left) - 1));
  }
  get isIncrementalFlowComplete() {
    return this._systemView.isIncrementalFlowComplete;
  }
  get isMoreFlowNeeded() {
    return this._systemView.isMoreFlowNeeded && this.context.documentView.viewInfo.displayMode === _models_score__WEBPACK_IMPORTED_MODULE_3__["default"].STRIP_DISPLAY;
  }
  get endSpritePosition() {
    const lastMeasurePlaceholder = this._measurePlaceholders[this.context.document.score.numMeasures - 1];
    if (!this.isIncrementalFlowComplete && lastMeasurePlaceholder) {
      return new _geoms_point__WEBPACK_IMPORTED_MODULE_1__["default"](lastMeasurePlaceholder.x + this._measurePlaceholderWidth, 0);
    } else {
      return this._systemView.endSpritePosition;
    }
  }
  get lastMeasureView() {
    return this._systemView.getStaffViewAt(0).getMeasureViewAt(this.totalPageFlowElements - 1);
  }
  get measurePlaceholderWidth() {
    if (!this._measurePlaceholderWidth) {
      this._measurePlaceholderWidth = this._systemView.averageCurrentMeasuresWidth;
    }
    return this._measurePlaceholderWidth;
  }
  get subsequentIdleTimeout() {
    return 250;
  }
  constructor(context, layout, editorFonts, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
    this._systemView = null;
    this._stripMetrics = null;
    this._contentSprite = null;
    this._backdropSprite = null;
    this._lastHeight = NaN;
    this._currentViewHeight = 0;
    this._incrementalFlowWasComplete = false;
    this._lastTotalPageFlowElements = -1;
    this._previewFilledWidth = 0;
    this._measurePlaceholders = {};
    this._measurePlaceholdersContainer = null;
    this._firstMeasurePlaceholderIndex = Number.MAX_VALUE;
    this._lastHiddenMeasureLeftSide = -1;
    this._firstHiddenMeasureRightSide = Number.MAX_VALUE;
    this._extraViewportsPerSide = 2;
    this._lastCurrentMeasureIndex = -1;
    this._cachedPlaceholders = {};
    this._measurePlaceholderWidth = NaN;
    this._measurePlaceholderHeight = -1;
    this._lastLeftMeasureViewport = -1;
    this._lastRightMeasureViewport = -1;
    this._stripMetrics = layout.context.stripMetics;
    // layout.addEventListener(
    //   MeasureDisplayEvent.SEQUENCE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange),
    //   false,
    //   0,
    //   true
    // );
    // layout.addEventListener(
    //   MeasureDisplayEvent.DISPLAY,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay),
    //   false,
    //   0,
    //   true
    // );
    // layout.addEventListener(
    //   MeasureDisplayEvent.GEOMETRY_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay),
    //   false,
    //   0,
    //   true
    // );
    // layout.addEventListener(
    //   MeasureDisplayEvent.SPAN_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay),
    //   false,
    //   0,
    //   true
    // );
    this.calculateNumberOfMeasuresToShow();
    this.initializeView();
  }
  removeListeners() {
    // this.layout.removeEventListener(
    //   MeasureDisplayEvent.SEQUENCE_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureSequenceChange)
    // );
    // this.layout.removeEventListener(
    //   MeasureDisplayEvent.DISPLAY,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay)
    // );
    // this.layout.removeEventListener(
    //   MeasureDisplayEvent.GEOMETRY_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay)
    // );
    // this.layout.removeEventListener(
    //   MeasureDisplayEvent.SPAN_CHANGE,
    //   RumtimeHelper.bindMethod(this, this.handleMeasureDisplay)
    // );
  }
  forceFirstMeasuresToBeShown() {
    this.showHiddenMeasures(0, 15);
  }
  calculateNumberOfMeasuresToShow() {
    this._extraViewportsPerSide = Math.max(0.5, 0.25 * this.staffMetrics.scoreLineSpacing);
  }
  updateViewStartingAt(idx) {
    this._systemView.truncateSystemViewAt(idx);
    this._systemView.updateMeasureViewsStartingAt(idx);
    this.pullFlow(false);
    this._systemView.updateMeasureHandlesStartingAt(idx);
    this._systemView.updateStavesGeometry();
    this._systemView.updateGeometry();
    this.updateGeometry();
  }
  drawPreviewWatermark() {
    throw new Error('Not Implemented');
  }
  getWatermarkStart() {
    throw new Error('Not Implemented');
  }
  resizeWatermark() {
    throw new Error('Not Implemented');
  }
  updateView() {
    if (this._backdropSprite) {
      this.removeChild(this._backdropSprite);
    }
    if (this._contentSprite) {
      this.removeChild(this._contentSprite);
      this._systemView.destroy();
    }
    this._backdropSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    this._backdropSprite.x = 0;
    this.addChild(this._backdropSprite);
    this.layout.systemLayout.prepareLayout();
    this._contentSprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    this._contentSprite.x = 0;
    this.addChild(this._contentSprite);
    this._systemView = this.layout.systemLayout.createDisplayObject(this.context);
    this.pullFlow(false);
    this._contentSprite.addChild(this._systemView);
    this._backdropSprite.addChild(this._systemView.backdropSprite);
    if (this._layout.score.hasTracks && !this.context.info.printView) {
      const trackFlagView = new _track_flag_view__WEBPACK_IMPORTED_MODULE_9__["default"](this.context, this._layout.score, this.noteEditorService, this.rootDiv);
      trackFlagView.x = this.toViewUnits(this.layout.context.stripMetics.trackFlagX);
      trackFlagView.y = this.toViewUnits(this.layout.context.stripMetrics.trackFlagY);
      this.addChild(trackFlagView);
    }
    this.updateGeometry();
  }
  updateBackdrop() {
    this.graphics.clear();
    const viewWidth = Math.max(this.systemViewWidth, this.backdropStripWidth) + (this._stripMetrics.stripMarginLeft + this._stripMetrics.stripMarginRight);
    const distanceY = this.toViewUnits(this._systemView.layout.distanceY);
    const minDistanceY = Math.min(0, distanceY);
    const viewHeight = this.toViewUnits(this.layout.height) - minDistanceY;
    this._currentViewHeight = viewHeight;
    this._backdropSprite.y = distanceY;
    this._contentSprite.y = distanceY;
    if (this.context.overlay) {
      this.graphics.beginFill(this._stripMetrics.overlayColor, this._stripMetrics.overlayOpacity);
    } else {
      this.graphics.beginFill(0xffffff);
    }
    this.graphics.drawRect(0, minDistanceY, viewWidth, viewHeight);
    this.graphics.endFill();
  }
  getPointInMeasure(measureIdx, staff, position, posOpts = null) {
    return this._systemView.getPointInMeasure(measureIdx, staff, position, posOpts);
  }
  pullFlowComplete() {
    setTimeout(() => {
      this.optimizeMeasureViews();
    }, 10);
  }
  ensureScoreInViewportIsVisible() {
    const leftIdx = this.leftMeasureIndexInViewport;
    const rightIdx = this.getRightMeasureIndexInViewport(leftIdx);
    if (this._lastLeftMeasureViewport > leftIdx || this._lastRightMeasureViewport < rightIdx) {
      this._lastLeftMeasureViewport = leftIdx;
      this._lastRightMeasureViewport = rightIdx;
      this.showHiddenMeasures(leftIdx, rightIdx);
    }
  }
  getRightMeasureIndexInViewport(leftIdx) {
    const documentView = this.context.documentView;
    const viewportRightGlobal = (documentView.horizontalScrollPosition + documentView.viewportWidth) / documentView.viewInfo.displayScale;
    const left = this._contentSprite.x + this._systemView.x;
    return Math.ceil(this._systemView.getStaffViewAt(0).getMeasureIndexAtPosition(viewportRightGlobal - left, leftIdx));
  }
  optimizeMeasureViews() {
    if (!this.context.overlay) {
      this._firstMeasurePlaceholderIndex = Math.min(this._firstMeasurePlaceholderIndex, this.totalPageFlowElements);
      const overThreshold = Math.abs(this._measurePlaceholderHeight - this._currentViewHeight) > StripView.UPCOMING_MEASURE_VIEWS_REFRESH_THRESHOLD;
      if (overThreshold) {
        this.removeAnyExistingPlaceholder();
      }
      const totalPageFlowElsNotEqualPrev = this.totalPageFlowElements != this._lastTotalPageFlowElements;
      if (totalPageFlowElsNotEqualPrev) {
        this.buildMeasurePlaceholders(this.totalPageFlowElements, this.context.document.score.numMeasures - 1);
      }
      if (this.totalPageFlowElements > this._firstMeasurePlaceholderIndex) {
        this.removeMeasurePlaceholders(this._firstMeasurePlaceholderIndex, this.totalPageFlowElements - 1);
        this._firstMeasurePlaceholderIndex = this.totalPageFlowElements;
      }
      let leftIdx = this.leftMeasureIndexInViewport;
      const rightIdx = this.getRightMeasureIndexInViewport(leftIdx);
      const measureInViewportCount = Math.max(rightIdx - leftIdx, 10);
      const halfExtraViewports = this._extraViewportsPerSide / 2;
      if (!(Math.abs(leftIdx - this._lastCurrentMeasureIndex) <= halfExtraViewports) || overThreshold) {
        if (this.isIncrementalFlowComplete && !this._incrementalFlowWasComplete || totalPageFlowElsNotEqualPrev) {
          leftIdx = Math.min(leftIdx, this.totalPageFlowElements - measureInViewportCount);
        }
        const startIdx = Math.floor(Math.max(0, leftIdx - this._extraViewportsPerSide * measureInViewportCount));
        const endIdx = Math.ceil(Math.min(leftIdx + (this._extraViewportsPerSide + 1) * measureInViewportCount, this.totalPageFlowElements - 1));
        this.showHiddenMeasures(startIdx, endIdx);
        if (startIdx - 1 > this._lastHiddenMeasureLeftSide) {
          this.hideMeasures(this._lastHiddenMeasureLeftSide, startIdx - 1);
          this._lastHiddenMeasureLeftSide = startIdx - 1;
        }
        this._lastHiddenMeasureLeftSide = Math.min(startIdx - 1, this._lastHiddenMeasureLeftSide);
        if (endIdx + 1 < this._firstHiddenMeasureRightSide) {
          this._firstHiddenMeasureRightSide = Math.min(this.totalPageFlowElements, this._firstHiddenMeasureRightSide);
          this.hideMeasures(endIdx + 1, this._firstHiddenMeasureRightSide);
        }
        this._firstHiddenMeasureRightSide = Math.max(endIdx + 1, this._firstHiddenMeasureRightSide);
        if (this.isIncrementalFlowComplete && !this._incrementalFlowWasComplete || totalPageFlowElsNotEqualPrev) {
          this.estimateScrollBar();
          this._incrementalFlowWasComplete = true;
        } else {
          this._incrementalFlowWasComplete = false;
        }
        this._lastTotalPageFlowElements = this.totalPageFlowElements;
        // if (
        //   this._context.documentView &&
        //   this._context.documentView.watermarUrlStripView !== '' &&
        //   this._previewFilledWidth === 0
        // ) {
        //   // const watermarkStart = this.getWatermarkStart();
        //   // if (watermarkStart) {
        //   //   this._previewFilledWidth = watermarkStart;
        //   //   this.drawPreviewWatermark();
        //   // }
        // } todo
      }
    }
  }

  hideMeasures(startIdx, endIdx) {
    for (let i = startIdx; i < endIdx; i++) {
      if (i >= 0) {
        if (i >= this.totalPageFlowElements) {
          break;
        }
        this._systemView.hideMeasures(i);
      }
    }
  }
  showHiddenMeasures(startIdx, endIdx) {
    for (let i = startIdx; i < endIdx; i++) {
      if (i >= 0) {
        if (i >= this.totalPageFlowElements) {
          break;
        }
        this._systemView.showHiddenMeasures(i);
        if (this._measurePlaceholders[i]) {
          this.removeMeasurePlaceholder(i);
        }
      }
    }
  }
  ensureSystemAfterMeasureDrawn(t) {}
  getPositionUnderPoint(context, point, quantum, staff = null, posOpts = null) {
    return this._systemView.getPositionUnderPoint(context, point, quantum, staff, posOpts);
  }
  handleMeasureDisplay(t) {
    if (this.stage) {
      this.updateGeometry();
    }
    this.updatePositionPlaceholdersContainer();
  }
  handleMeasureSequenceChange(measureValidationEvt) {
    if (this.stage) {
      if (measureValidationEvt.measureIndices && measureValidationEvt.measureIndices.length !== 0) {
        this.updateViewStartingAt(measureValidationEvt.measureIndices[0]);
      } else {
        this.updateView();
      }
    }
  }
  updateGeometry() {
    super.updateGeometry();
    if (this.staffMetrics.verticalAutoSpace) {
      this.determineSystemPosition();
    }
    this.updateBackdrop();
  }
  updateSystemGeometry() {
    this._systemView.updateGeometry();
    this.updateGeometry();
  }
  determineSystemPosition() {
    this.layout.invalidateGlobal();
    this._systemView.layout.invalidateGlobal();
    this.layout.determineSystemPosition();
    if (this.layout.height !== this._lastHeight) {
      for (let i = 0; i < this._systemView.staffViews.length; i++) {
        const staffView = this._systemView.staffViews[i];
        staffView.updateGeometry();
        staffView.updateMeasureGeometry();
      }
      this._systemView.updateGeometry();
      this._systemView.updateSpanNotations(null);
      this._lastHeight = this.layout.height;
    }
  }
  scrollDirectionAffectsFlow(direction) {
    // return direction === ScrollEventDirection.HORIZONTAL;
    throw new Error('Not implemented');
  }
  doIncrementalFlow() {
    if (this.context.documentView.viewInfo.displayMode === _models_score__WEBPACK_IMPORTED_MODULE_3__["default"].STRIP_DISPLAY && !this.context.overlay) {
      let determine = _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"].UP_TO_SCROLL_POS;
      if (this._forceViewBuild || this.context.buildIncrementally) {
        determine = _layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"].EVERYTHING;
      }
      this._systemView.doIncrementalFlow(determine);
      this.updateGeometry();
      this.context.documentView.updateScoreDimensions();
    }
  }
  createUpcomingMeasures() {}
  updatePositionPlaceholdersContainer() {
    if (this._measurePlaceholdersContainer) {
      this._measurePlaceholdersContainer.x = this.lastMeasurePoint.x + this.lastMeasureView.measureWidth + this._contentSprite.x + this._systemView.x;
    }
  }
  removeMeasurePlaceholders(startIdx, endIdx) {
    if (this._measurePlaceholdersContainer) {
      let removed = false;
      for (let i = startIdx; i < endIdx; i++) {
        if (this._measurePlaceholders[i]) {
          this.removeMeasurePlaceholder(i);
          removed = true;
        }
      }
      if (removed) {
        let currPlaceholderWidth = 0;
        for (let i = endIdx + 1; i < this.context.document.score.numMeasures && this._measurePlaceholders[i]; i++) {
          this._measurePlaceholders[i].x = currPlaceholderWidth;
          currPlaceholderWidth += this.measurePlaceholderWidth;
        }
        this.updatePositionPlaceholdersContainer();
      }
    }
  }
  removeAnyExistingPlaceholder() {
    this.removeMeasurePlaceholders(this._firstMeasurePlaceholderIndex, this.context.document.score.numMeasures - 1);
  }
  createMeasurePlaceholder(idx) {
    if (!this._measurePlaceholdersContainer) {
      this._measurePlaceholdersContainer = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
      this.addChild(this._measurePlaceholdersContainer);
    }
    const placeholderView = this.createPlaceholderView(idx);
    this._measurePlaceholders[idx] = placeholderView;
    this._measurePlaceholdersContainer.addChild(placeholderView);
  }
  createPlaceholderView(idx) {
    let sprite;
    if (this._cachedPlaceholders[idx]) {
      sprite = this._cachedPlaceholders[idx];
    } else {
      sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
      sprite.graphics.beginFill(this._stripMetrics.upcomingMeasureBackgroundColor, this._stripMetrics.upcomingMeasureBackgroundOpacity);
      sprite.graphics.drawRect(0, 0, this.measurePlaceholderWidth, this.backdropHeight);
      sprite.graphics.endFill();
      sprite.graphics.beginFill(this._stripMetrics.upcomingMeasureTextColor, this._stripMetrics.upcomingMeasureBackgroundOpacity);
      sprite.graphics.drawRect(this.measurePlaceholderWidth - 1, 0.25 * this.backdropHeight, 1, this.backdropHeight / 2);
      sprite.graphics.endFill();
      sprite.x = this.measurePlaceholderWidth * (idx - this.totalPageFlowElements);
      sprite.y = 0;
      const textField = new _text_text_field__WEBPACK_IMPORTED_MODULE_5__["default"](this.editorFonts, this.rootDiv, this.noteEditorService);
      textField.embedFonts = true;
      textField.defaultTextFormat = new _text_text_format__WEBPACK_IMPORTED_MODULE_6__["default"](this._stripMetrics.upcomingMeasureTextFont, this._stripMetrics.upcomingMeasureTextSize, null, false, false, false, null, null, _text_text_format_align__WEBPACK_IMPORTED_MODULE_7__.TextFormatAlign.LEFT);
      textField.text = `Building measure ${this.context.document.score.getSystemStaffMeasureAt(idx).measureNumber}`;
      textField.textColor = this._stripMetrics.upcomingMeasureTextColor;
      textField.width = 0.5 * this._systemView.averageCurrentMeasuresWidth;
      textField.backgroundColor = 0xffffff;
      textField.background = false;
      textField.multiline = true;
      textField.wordWrap = true;
      textField.antiAliasType = _text_anti_alias_type__WEBPACK_IMPORTED_MODULE_4__.AntiAliasType.ADVANCED;
      textField.x = this.measurePlaceholderWidth / 2 - textField.width / 2;
      textField.y = this.backdropHeight / 2 - textField.height / 2;
      sprite.addChild(textField);
      this._measurePlaceholderHeight = this.backdropHeight;
    }
    return sprite;
  }
  removeMeasurePlaceholder(idx) {
    if (this._measurePlaceholdersContainer) {
      this._measurePlaceholdersContainer.removeChild(this._measurePlaceholders[idx]);
      this._measurePlaceholders[idx] = null;
    }
  }
  buildMeasurePlaceholders(startIdx, endIdx) {
    if (!this._measurePlaceholders[startIdx]) {
      for (let i = startIdx; i < endIdx; i++) {
        if (!this._measurePlaceholders[i]) {
          this.createMeasurePlaceholder(i);
        }
      }
      if (this._measurePlaceholdersContainer) {
        this._measurePlaceholdersContainer.x = this.lastMeasurePoint.x + this.lastMeasureView.measureWidth + this._contentSprite.x + this._systemView.x;
      }
    }
  }
  continueIncrementalFlow(force, feedback, targetMeasure = null) {
    if (this.context.buildIncrementally) {
      if (force) {
        this.context.documentView.callLater(() => {
          if (this.doIncrementalFlow(), feedback) {
            this.showIncrementalFeedback(true);
            this._systemView.getStaffViewAt(0);
            this.updateIncrementalFeedback(this.totalPageFlowElements, 'measure');
          }
          if (targetMeasure && targetMeasure.staves && targetMeasure.staveslength > 0) {
            this.hasChangedSinceLastPullFlow();
          }
          this.pullFlow(force, targetMeasure);
        });
        return true;
      }
      while (this.isMoreFlowNeeded) {
        this._systemView.doIncrementalFlow(_layouts_system_view__WEBPACK_IMPORTED_MODULE_2__["default"].UP_TO_SCROLL_POS);
      }
      this.context.documentView.updateScoreDimensions();
      this.updateBackdrop();
      this.estimateScrollBar();
      this.pullFlow(force);
      return true;
    }
    while (!this.isIncrementalFlowComplete) {
      this.doIncrementalFlow();
    }
    return false;
  }
  noMoreFlowNeeded(targetMeasureIndex = 0, staves = null) {
    this.layout.updateHyphens(targetMeasureIndex, staves);
  }
}

/***/ }),

/***/ 16089:
/*!*********************************************************!*\
  !*** ./src/app/note-editor/views/text-notation-view.ts ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TextNotationView)
/* harmony export */ });
/* harmony import */ var _models_text_notation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/text-notation */ 70240);
/* harmony import */ var _notation_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./notation-view */ 91755);
/* harmony import */ var _score_text_field__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./score-text-field */ 61474);



class TextNotationView extends _notation_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, layout, noteEditorService, rootDiv);
  }
  editText() {
    throw new Error('editText() not overridden');
  }
  static addMeasureText(info) {
    const {
      context,
      measure,
      notation,
      groupName,
      createFieldFunction,
      transientNotation,
      editorFonts,
      rootDiv,
      noteEditorService
    } = info;
    const textBox = !!info.box;
    notation.parent = measure;
    // todo noteEditorService
    const textField = createFieldFunction(context, notation, groupName, editorFonts, rootDiv, noteEditorService);
    notation.textbox = textBox;
    // textField.addEventListener(FlexEvent.VALUE_COMMIT, function (t) {
    //   if (!notation.isEmpty && !transientNotation) {
    //     context.controller.document.undoHistory.openGroupName = groupName;
    //     measure.addElement(notation, Voice.NON_METRICAL_VOICE_NUMBER);
    //   }
    // }); todo
    return textField;
  }
  editMeasureText(editGroupName, createTextFieldFunction) {
    // todo
    const textField = createTextFieldFunction(this.context, this.notation, editGroupName);
    this.visible = false;
    const that = this;
    // textField.addEventListener(FlexEvent.VALUE_COMMIT, function (t) {
    //   if ((that.notation as TextNotation).isEmpty) {
    //     that.notation.measure.removeElement(that.notation);
    //   }
    //   that.visible = true;
    // });
  }

  static createEditField(context, autoSize, font, size, bold, italic, notation, x, y, editGroupName, editorFonts, rootDiv, noteEditorService, property) {
    property = property && property.length > 10 ? property : 'text';
    const textField = new _score_text_field__WEBPACK_IMPORTED_MODULE_2__["default"](context, autoSize, font, size, editorFonts, {
      model: notation,
      property,
      editGroupName,
      markdown: false,
      bold,
      italic
    }, rootDiv, noteEditorService);
    textField.showPrompt = false;
    textField.clearSelectionOnFocus = false;
    if (notation instanceof _models_text_notation__WEBPACK_IMPORTED_MODULE_0__["default"] && notation.alignToStaffTop) {
      let measure;
      if (notation.measure.isSystemMeasure) {
        measure = context.layoutContext.score.visibleStaves[0].getMeasureAt(notation.measure.index);
      } else {
        measure = notation.measure;
      }
      y += measure.effectiveClef.staffHeight;
    }
    const positionOrRhythmPosition = notation.rhythmContext ? notation.position : notation.rhythmPosition;
    const staff = notation.measure.isSystemMeasure ? context.layoutContext.score.visibleStavesAtMeasure(notation.measure.index)[0] : notation.measure.staff;
    let point = context.documentView.getPointInMeasure(notation.measure.index, staff, positionOrRhythmPosition, {
      verticalAlign: 'bottom'
    });
    point = context.documentView.globalToFeedback(point);
    textField.x = point.x - 2 + context.layoutContext.staffMetrics.lineSpacing * (x + notation.dx);
    textField.y = point.y - context.layoutContext.staffMetrics.lineSpacing * (y + notation.dy) - textField.ascent;
    context.documentView.addFeedbackChild(textField);
    textField.setFocus();
    textField.highlightEnd();
    // textField.addEventListener(FlexEvent.VALUE_COMMIT, function (e) {
    //   context.documentView.removeFeedbackChild(textField);
    // });
    return textField;
  }
}

/***/ }),

/***/ 51553:
/*!***********************************************!*\
  !*** ./src/app/note-editor/views/tie-view.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TieView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/svg-graphics */ 66821);


class TieView extends _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(x, y, width, height, staffMetrics, noteEditorService) {
    super(noteEditorService);
    this.x = x;
    this.y = y;
    const tieShoulder = staffMetrics.tieShoulder(width / staffMetrics.lineSpacing);
    const halfStroke = staffMetrics.tieMaxStroke * staffMetrics.lineSpacing / 2;
    this.graphics.beginFill(0);
    this.graphics.lineStyle(0, 0, 1, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.CapsStyle.NONE, _display_svg_graphics__WEBPACK_IMPORTED_MODULE_1__.JointStyle.BEVEL);
    this.graphics.moveTo(0, 0);
    this.graphics.curveTo(width * tieShoulder, height + halfStroke, 0.5 * width, height + halfStroke);
    this.graphics.curveTo(width * (1 - tieShoulder), height + halfStroke, width, 0);
    this.graphics.curveTo(width * (1 - tieShoulder), height - halfStroke, 0.5 * width, height - halfStroke);
    this.graphics.curveTo(width * tieShoulder, height - halfStroke, 0, 0);
    this.graphics.endFill();
  }
}

/***/ }),

/***/ 87628:
/*!******************************************************!*\
  !*** ./src/app/note-editor/views/track-flag-view.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TrackFlagView)
/* harmony export */ });
/* harmony import */ var _display_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/sprite */ 75345);
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./score-object-view */ 39928);


class TrackFlagView extends _score_object_view__WEBPACK_IMPORTED_MODULE_1__["default"] {
  constructor(viewContext, score, noteEditorService, rootDiv) {
    super(viewContext, noteEditorService, rootDiv);
    this._score = null;
    this._viewContext = null;
    this._trackFlagMediator = null;
    this.CIRCLE_COLOR_NOT_SHOWN = 0x666658;
    this.CIRCLE_COLOR_SHOWN = 0xf64e20;
    this._viewContext = viewContext;
    this._score = score;
    this._trackFlagMediator = this.context.registerTrackFlagView(this);
    this.initializeView();
  }
  destroy() {
    this._trackFlagMediator.destroy();
    super.destroy();
  }
  updateView() {
    const sprite = new _display_sprite__WEBPACK_IMPORTED_MODULE_0__["default"](this.noteEditorService);
    const e = [2, 5, 4, 4.5, 3];
    const r = 1 * e.length + 0.5 * (e.length - 1);
    const graphics = sprite.graphics;
    const circleColor = this._score.audioWaveformsShown ? this.CIRCLE_COLOR_SHOWN : this.CIRCLE_COLOR_NOT_SHOWN;
    graphics.beginFill(circleColor, 1);
    graphics.drawCircle(r / 2, 4, 6);
    graphics.endFill();
    for (let x = 0, a = 6.5, i = 0; i < e.length; i++) {
      graphics.beginFill(0xffffff, 1);
      graphics.moveTo(x, a);
      graphics.lineTo(x, a - e[i]);
      graphics.lineTo(x + 1, a - e[i]);
      graphics.lineTo(x + 1, a);
      graphics.lineTo(x, a);
      graphics.endFill();
      x += 1.5;
    }
    this.addChild(sprite);
  }
}

/***/ }),

/***/ 21406:
/*!**************************************************!*\
  !*** ./src/app/note-editor/views/tuplet-view.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ TupletView)
/* harmony export */ });
/* harmony import */ var _score_object_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./score-object-view */ 39928);

class TupletView extends _score_object_view__WEBPACK_IMPORTED_MODULE_0__["default"] {
  get layout() {
    return this._layout;
  }
  constructor(context, layout, noteEditorService, rootDiv) {
    super(context, noteEditorService, rootDiv);
    this._layout = null;
    this._layout = layout;
    // this.addEventListener(FlashMouseEvent.CLICK, this.handleClick.bind(this));
    this._svg.addEventListener('click', this.handleClick.bind(this));
    this.initializeView();
  }
  handleClick(t) {
    this.context.controller.selectTuplet(this._layout.tuplet);
  }
  updateView() {
    while (this.numChildren > 0) {
      this.removeChildAt(0);
    }
    if (this.layout.numberLayout) {
      const startX = this.toViewUnits(this.layout.startX);
      const startY = -this.toViewUnits(this.layout.startY);
      const endX = this.toViewUnits(this.layout.endX);
      const endY = -this.toViewUnits(this.layout.startY + this.layout.rise);
      const tupletBracketHeight = this.toViewUnits(this.staffMetrics.tupletBracketHeight) * (this.layout.down ? -1 : 1);
      const centerX = (startX + endX) / 2;
      let centerY = startY + 0.5 * (endY - startY);
      if (this.layout.tuplet.showBracket) {
        centerY -= tupletBracketHeight;
      }
      const displayObject = this.layout.numberLayout.createDisplayObject(this.context);
      const numberLayoutWidth = this.toViewUnits(this.layout.numberLayout.width);
      displayObject.x = centerX - numberLayoutWidth / 2;
      displayObject.y = centerY;
      this.addChild(displayObject);
      if (this.layout.tuplet.showBracket) {
        const leftEndX = displayObject.x - this.toViewUnits(this.staffMetrics.tupletNumberPadding);
        const leftTop = startY + (endY - startY) * (leftEndX - startX) / (endX - startX) - tupletBracketHeight;
        const rightX = displayObject.x + numberLayoutWidth + this.toViewUnits(this.staffMetrics.tupletNumberPadding);
        const rightTop = startY + (endY - startY) * (rightX - startX) / (endX - startX) - tupletBracketHeight;
        this.graphics.lineStyle(this.staffMetrics.lineThickness, 0);
        this.graphics.moveTo(startX, startY);
        this.graphics.lineTo(startX, startY - tupletBracketHeight);
        this.graphics.lineTo(leftEndX, leftTop);
        this.graphics.moveTo(rightX, rightTop);
        this.graphics.lineTo(endX, endY - tupletBracketHeight);
        this.graphics.lineTo(endX, endY);
      }
    }
  }
}

/***/ }),

/***/ 41036:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/ui-component.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ UIComponent)
/* harmony export */ });
/* harmony import */ var _flex_sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./flex-sprite */ 41245);

class UIComponent extends _flex_sprite__WEBPACK_IMPORTED_MODULE_0__["default"] {
  static get DEFAULT_MAX_HEIGHT() {
    return 10000;
  }
  static get DEFAULT_MAX_WIDTH() {
    return 10000;
  }
  static get DEFAULT_MEASURED_HEIGHT() {
    return 22;
  }
  static get DEFAULT_MEASURED_MIN_HEIGHT() {
    return 22;
  }
  static get DEFAULT_MEASURED_MIN_WIDTH() {
    return 40;
  }
  static get DEFAULT_MEASURED_WIDTH() {
    return 160;
  }
  constructor(noteEditorService, rootDiv) {
    super(noteEditorService, rootDiv);
  }
  callLater(callback, args = null) {
    setTimeout(() => {
      callback.apply(this, args || []);
    });
  }
  setFocus() {
    this.stage.focus = null;
  }
  createChildren() {}
  commitProperties() {}
}

/***/ }),

/***/ 65532:
/*!***************************************************!*\
  !*** ./src/app/note-editor/views/view-context.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ViewContext)
/* harmony export */ });
/* harmony import */ var _controller_basic_notation_mediator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controller/basic-notation-mediator */ 48845);
/* harmony import */ var _controller_beam_mediator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../controller/beam-mediator */ 80273);
/* harmony import */ var _controller_effect_mediator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../controller/effect-mediator */ 3754);
/* harmony import */ var _controller_measure_edit_mediator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../controller/measure-edit-mediator */ 38435);
/* harmony import */ var _controller_measure_handle_mediator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../controller/measure-handle-mediator */ 74235);
/* harmony import */ var _controller_score_mediator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../controller/score-mediator */ 32744);
/* harmony import */ var _controller_span_notation_mediator__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../controller/span-notation-mediator */ 73579);
/* harmony import */ var _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../events/measure-validation-event */ 1179);
/* harmony import */ var _geoms_point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../geoms/point */ 81443);
/* harmony import */ var _measure_handle__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./measure-handle */ 57852);
/* harmony import */ var _measure_view__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./measure-view */ 35035);
/* harmony import */ var _staff_handle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./staff-handle */ 1625);












class ViewContext {
  static get FLOW_HORIZONTAL() {
    return 'horizontal';
  }
  static get FLOW_VERTICAL() {
    return 'vertical';
  }
  get info() {
    return this._info;
  }
  set info(v) {
    this._info = v;
  }
  get layoutContext() {
    return this._layoutContext;
  }
  set layoutContext(v) {
    this._layoutContext = v;
  }
  get documentController() {
    return this._documentController;
  }
  set documentController(v) {
    this._documentController = v;
  }
  get controller() {
    return this._controller;
  }
  set controller(v) {
    this._controller = v;
  }
  get documentView() {
    return this._documentView;
  }
  set documentView(v) {
    this._documentView = v;
  }
  get score() {
    return this.layoutContext.score;
  }
  get globalMeasureViews() {
    return ViewContext.global_measure_views;
  }
  set globalMeasureViews(v) {
    ViewContext.global_measure_views = v;
  }
  get stage() {
    return this._stage;
  }
  set stage(v) {
    this._stage = v;
  }
  get buildIncrementally() {
    return this._buildIncrementally;
  }
  set buildIncrementally(v) {
    this._buildIncrementally = v;
  }
  get flowDirection() {
    return this._flowDirection;
  }
  set flowDirection(v) {
    this._flowDirection = v;
  }
  get document() {
    if (this.controller) {
      return this.controller.document;
    } else {
      return null;
    }
  }
  get waveformController() {
    if (this.documentController) {
      return this.documentController.waveformController;
    } else {
      return null;
    }
  }
  get overlay() {
    return this.documentView && this.documentView.overlay;
  }
  get scoreView() {
    return this.documentView.scoreView;
  }
  constructor(info, layoutContext, controller, documentController, documentView, stage, noteEditorService, buildIncrementally, flowDirection = ViewContext.FLOW_VERTICAL, options = {}) {
    this.cachedMeasureDeleterWidth = 0;
    this.cachedPlayButtonWidth = 0;
    this.cachedMeasureWidth = 0;
    this.cachedMeasureWidthForTheLastTime = 0;
    this.noteEntryView = null;
    this.notationMediatorClass = null;
    this.spanNotationMediatorClass = null;
    this.annotationMediatorClass = null;
    this.trackFlagMediatorClass = null;
    this.measureMediatorClass = null;
    this.measureHandleMediatorClass = null;
    this.staffHandleMediatorClass = null;
    this._info = null;
    this._layoutContext = null;
    this._documentController = null;
    this._controller = null;
    this._documentView = null;
    this._buildIncrementally = false;
    this._flowDirection = null;
    this.options = options;
    this.fakeView = options.fakeView;
    this.noteEditorService = noteEditorService;
    ViewContext.initializeUseRolloverEvents();
    this.info = info;
    this.layoutContext = layoutContext;
    this.controller = controller;
    this.documentController = documentController;
    this.documentView = documentView;
    this.stage = stage;
    this.buildIncrementally = buildIncrementally;
    this.flowDirection = flowDirection;
    // todo
    this.notationMediatorClass = _controller_basic_notation_mediator__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.spanNotationMediatorClass = _controller_span_notation_mediator__WEBPACK_IMPORTED_MODULE_6__["default"];
    // this.annotationMediatorClass = AnnotationMediator;
    // this.trackFlagMediatorClass = TrackFlagMediator;
    this.measureMediatorClass = _controller_measure_edit_mediator__WEBPACK_IMPORTED_MODULE_3__["default"];
    this.measureHandleMediatorClass = _controller_measure_handle_mediator__WEBPACK_IMPORTED_MODULE_4__["default"];
    // this.staffHandleMediatorClass = StaffHandleMediator;
    // this.handleMeasuresInvalidation=
    if (!this.fakeView) {
      //   this.layoutContext.addEventListener(
      //     MeasureValidationEvent.INVALIDATE,
      //     this.handleMeasuresInvalidation
      //   );
      //   this.layoutContext.addEventListener(
      //     MeasureValidationEvent.SEQUENCE_CHANGE,
      //     this.handleMeasuresInvalidation
      //   );
      //   this.documentController.scoreDocument.addEventListener(
      //     MeasureValidationEvent.REBUILD_SCORE,
      //     this.handleGlobalInvalidation
      //   );
      //   this.documentController.scoreDocument.measureValidator.addEventListener(
      //     MeasureValidationEvent.REBUILD_SCORE,
      //     this.handleGlobalInvalidation
      //   );
      //   this.controller.addEventListener(
      //     PartEditEvent.PART_MOVED,
      //     this.handleGlobalInvalidation
      //   );
      //   this.controller.addEventListener(
      //     viewCacheEvent.VALIDATE_CACHE,
      //     this.handleValidation
      //   );
    }
  }
  checkMeasureViewIsValid(measureView, oldMeasureLayout) {
    return measureView && measureView.isViewValid() && (!oldMeasureLayout || oldMeasureLayout.notationLayouts.length === measureView.totalNotationViews);
  }
  getGlobalMeausreView(measureId, staffId, options = {}) {
    const isMeasurePrefix = options.isMeasurePrefix;
    const ismeasureprefix = isMeasurePrefix || null;
    const measurePrefixIndex = options.measurePrefixIndex;
    const measureprefixindex = measurePrefixIndex == null ? -1 : measurePrefixIndex;
    const oldMeasureLayout = options.oldMeasureLayout;
    const oldmeasurelayout = oldMeasureLayout || null;
    if (!this.info.useMeasureViewsCache) {
      return null;
    }
    if (this.fakeView || this.overlay || !this.score.displayModeHasPages) {
      return null;
    }
    if (!this.globalMeasureViews[staffId] || !this.globalMeasureViews[staffId][measureId]) {
      return null;
    }
    const globalMeasureView = this.globalMeasureViews[staffId][measureId];
    if (ismeasureprefix) {
      if (globalMeasureView.measurePrefixViews) {
        const measurePrefixView = globalMeasureView.measurePrefixViews[measureprefixindex];
        if (this.checkMeasureViewIsValid(measurePrefixView, oldmeasurelayout)) {
          return measurePrefixView;
        } else {
          if (measurePrefixView) {
            measurePrefixView.destroy();
          }
          return null;
        }
      }
    } else if (globalMeasureView.measureView) {
      const measureView = globalMeasureView.measureView;
      if (this.checkMeasureViewIsValid(measureView, oldmeasurelayout)) {
        return measureView;
      } else {
        if (measureView) {
          measureView.destroy();
        }
        return null;
      }
    }
    return null;
  }
  setGlobalMeasureView(measureId, staffId, measureView, options = {}) {
    const isMeasurePrefix = options.isMeasurePrefix;
    const ismeasureprefix = isMeasurePrefix || null;
    const measurePrefixIndex = options.measurePrefixIndex;
    const measureprefixindex = measurePrefixIndex == null ? -1 : measurePrefixIndex;
    if (this.info.useMeasureViewsCache && !this.fakeView && this.score.displayModeHasPages) {
      if (!this.globalMeasureViews[staffId]) {
        this.globalMeasureViews[staffId] = {};
      }
      if (!this.globalMeasureViews[staffId][measureId]) {
        this.globalMeasureViews[staffId][measureId] = {};
      }
      if (ismeasureprefix) {
        if (!this.globalMeasureViews[staffId][measureId].measurePrefixViews) {
          this.globalMeasureViews[staffId][measureId].measurePrefixViews = [];
        }
        this.globalMeasureViews[staffId][measureId].measurePrefixViews[measureprefixindex] = measureView;
      } else {
        this.globalMeasureViews[staffId][measureId].measureView = measureView;
      }
    }
  }
  handleMeasureInvalidate(evt) {
    let option = {};
    let staffIds = evt.staves.map(t => t.id);
    const measureIds = evt.measures.map(t => t.id);
    if (staffIds.length === 1 && staffIds[0] === this.score.systemStaff.id) {
      staffIds = this.score.staves.map(staff => staff.id).push(this.score.systemStaff.id);
      option = {
        deleteRangeOfMeasures: true
      };
    } else if (staffIds.length > 1 && staffIds.indexOf(this.score.systemStaff.id) >= 0) {
      option = {
        deleteRangeOfMeasures: true
      };
    } else if (evt.type === _events_measure_validation_event__WEBPACK_IMPORTED_MODULE_7__["default"].SEQUENCE_CHANGE) {
      staffIds = this.score.staves.map(t => t.id);
      option = {
        deleteRangeOfMeasures: true
      };
    }
    this.measuresInvalidation(staffIds, measureIds, option);
  }
  handleGlobalInvalidation() {
    this.globalInvalidation();
  }
  handleValidation() {
    this.cacheValidation();
  }
  cacheValidation() {
    const visibleAndSystemStaveIds = this.score.visibleStaves.map(staff => staff.id);
    visibleAndSystemStaveIds.push(this.score.systemStaff.id);
    for (const globalMeasureViewStaffId in this.globalMeasureViews) {
      if (visibleAndSystemStaveIds.indexOf(globalMeasureViewStaffId) === -1) {
        this.measuresInvalidation([globalMeasureViewStaffId], null, {
          deleteAll: true
        });
        delete this.globalMeasureViews[globalMeasureViewStaffId];
      } else {
        const staff = this.score.getStaffById(globalMeasureViewStaffId);
        if (staff) {
          const measureIds = staff.measures.map(measure => measure.id);
          const globalMeasureViews = this.globalMeasureViews[globalMeasureViewStaffId];
          for (const measureId in globalMeasureViews) {
            if (measureIds.indexOf(measureId) === -1) {
              this.measuresInvalidation([globalMeasureViewStaffId], [measureId]);
            }
          }
        }
      }
    }
  }
  globalInvalidation() {
    for (const staffId in this.globalMeasureViews) {
      this.measuresInvalidation([staffId], null, {
        deleteAll: true
      });
    }
    this.globalMeasureViews = {};
  }
  measuresInvalidation(staffIds, measureIds, option = {}) {
    const deleteAll = !!option.deleteAll;
    const deleteRangeOfMeasures = !!option.deleteRangeOfMeasures;
    if (deleteAll) {
      measureIds = measureIds || [];
      for (let i = 0; i < staffIds.length; i++) {
        const staffId = staffIds[i];
        if (this.globalMeasureViews[staffId]) {
          measureIds = measureIds.concat(Object.keys(this.globalMeasureViews[staffId]));
        }
      }
    }
    if (deleteRangeOfMeasures) {
      let systemMeasureIds = [];
      for (let i = 0; i < staffIds.length; i++) {
        const staffId = staffIds[i];
        for (let j = 0; j < measureIds.length; j++) {
          const measureId = measureIds[j];
          systemMeasureIds = systemMeasureIds.concat(this.score.getMeasureIdsInSystemMeasure(measureId, staffId));
        }
      }
      measureIds = [...new Set(systemMeasureIds)];
    }
    for (let i = 0; i < staffIds.length; i++) {
      const staffId = staffIds[i];
      for (let j = 0; j < measureIds.length; j++) {
        const measureId = measureIds[j];
        if (this.globalMeasureViews[staffId]) {
          const measureView = this.globalMeasureViews[staffId][measureId];
          if (!measureView) {
            continue;
          }
          if (measureView.measurePrefixViews) {
            for (let k = 0; k < measureView.measurePrefixViews.length; k++) {
              const measurePrefixView = measureView.measurePrefixViews[k];
              measurePrefixView.destroy();
            }
          }
          if (measureView.measureView) {
            measureView.measureView.destory();
          }
          this.globalMeasureViews[staffId][measureId] = null;
        }
      }
    }
  }
  getPositionUnderMouse(quantum = 0, staff = null, evt) {
    // console.log('-------------------------');
    // console.log(this.stage.mouseX);
    // console.log(this.stage.mouseY);
    // console.log('=========================');
    return this.documentView.getPositionUnderPoint(this, new _geoms_point__WEBPACK_IMPORTED_MODULE_8__["default"](evt ? evt.x : this.stage.mouseX, (evt ? evt.y : this.stage.mouseY) - this.stage.rootDiv.scrollTop), quantum, staff);
  }
  registerMeasureView(view) {
    if (this.controller) {
      let scoreObjectMediator = null;
      if (view instanceof _measure_view__WEBPACK_IMPORTED_MODULE_10__["default"]) {
        scoreObjectMediator = new this.measureMediatorClass(this.noteEditorService); // as IScoreObjectMediator
        // console.log('registerMeasureView');
        // console.trace();
      } else if (view instanceof _measure_handle__WEBPACK_IMPORTED_MODULE_9__["default"]) {
        scoreObjectMediator = new this.measureHandleMediatorClass(this.noteEditorService);
      }
      if (scoreObjectMediator) {
        scoreObjectMediator.handleViewEvents(view);
      }
      return scoreObjectMediator;
    }
    return null;
  }
  registerPartView(view) {
    if (this.controller) {
      let scoreObjectMediator = null;
      if (view instanceof _staff_handle__WEBPACK_IMPORTED_MODULE_11__["default"]) {
        // scoreObjectMediator = new this.staffHandleMediatorClass();
      }
      if (scoreObjectMediator) {
        scoreObjectMediator.handleViewEvents(view);
      }
      return scoreObjectMediator;
    }
    return null;
  }
  registerAnnotationView(view) {
    if (this.controller) {
      const scoreObjectMediator = new this.annotationMediatorClass();
      scoreObjectMediator.handleViewEvents(view);
      return scoreObjectMediator;
    }
    return null;
  }
  registerTrackFlagView(view) {
    if (this.controller) {
      const scoreObjectMediator = new this.trackFlagMediatorClass();
      scoreObjectMediator.handleViewEvents(view);
      return scoreObjectMediator;
    }
    return null;
  }
  registerNotationView(view) {
    if (this.controller) {
      const scoreObjectMediator = new this.notationMediatorClass(this.noteEditorService);
      scoreObjectMediator.handleViewEvents(view);
      return scoreObjectMediator;
    }
    return null;
  }
  registerSpanNotationView(view) {
    if (this.controller) {
      const scoreObjectMediator = new this.spanNotationMediatorClass(this.noteEditorService);
      scoreObjectMediator.handleViewEvents(view);
      return scoreObjectMediator;
    }
    return null;
  }
  registerEffectView(view) {
    if (this.controller) {
      const effectMediator = new _controller_effect_mediator__WEBPACK_IMPORTED_MODULE_2__["default"](this.noteEditorService);
      effectMediator.handleViewEvents(view);
      return effectMediator;
    }
    return null;
  }
  registerScoreView(view) {
    if (this.controller) {
      new _controller_score_mediator__WEBPACK_IMPORTED_MODULE_5__["default"]().handleViewEvents(view);
    }
  }
  toViewUnits(size) {
    return size * this.layoutContext.staffMetrics.lineSpacing;
  }
  toLayoutUnits(size) {
    return size / this.layoutContext.staffMetrics.lineSpacing;
  }
  getGlobalMeasureView(measureId, staffId, options = {}) {
    const isMeasurePrefix = options.isMeasurePrefix;
    const measurePrefixIndex = options.measurePrefixIndex || -1;
    const oldMeasureLayout = options.oldMeasureLayout;
    if (!this.info.useMeasureViewsCache) {
      return null;
    }
    if (this.fakeView || this.overlay || !this.score.displayModeHasPages) {
      return null;
    }
    if (!this.globalMeasureViews[staffId] || !this.globalMeasureViews[staffId][measureId]) {
      return null;
    }
    if (isMeasurePrefix) {
      if (this.globalMeasureViews[staffId][measureId].measurePrefixViews) {
        const measurePrefixView = this.globalMeasureViews[staffId][measureId].measurePrefixViews[measurePrefixIndex];
        if (this.checkMeasureViewIsValid(measurePrefixView, oldMeasureLayout)) {
          return measurePrefixView;
        } else {
          if (measurePrefixView) {
            measurePrefixView.destroy();
          }
          return null;
        }
      }
    }
  }
  static initializeUseRolloverEvents() {
    ViewContext.useRolloverEvents = false;
  }
  registerBeamView(view) {
    if (this.controller) {
      const beamMediator = new _controller_beam_mediator__WEBPACK_IMPORTED_MODULE_1__["default"](this.noteEditorService);
      beamMediator.handleViewEvents(view);
      return beamMediator;
    }
    return null;
  }
}
ViewContext.useRolloverEvents = false;
ViewContext.global_measure_views = {};

/***/ }),

/***/ 92340:
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "environment": () => (/* binding */ environment)
/* harmony export */ });
// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
const environment = {
  production: false
};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.

/***/ }),

/***/ 14431:
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/platform-browser */ 11481);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ 94650);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./app/app.module */ 36747);
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./environments/environment */ 92340);




if (_environments_environment__WEBPACK_IMPORTED_MODULE_1__.environment.production) {
  (0,_angular_core__WEBPACK_IMPORTED_MODULE_2__.enableProdMode)();
}
_angular_platform_browser__WEBPACK_IMPORTED_MODULE_3__.platformBrowser().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_0__.AppModule).catch(err => console.error(err));

/***/ }),

/***/ 46700:
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": 27088,
	"./af.js": 27088,
	"./ar": 17038,
	"./ar-dz": 52502,
	"./ar-dz.js": 52502,
	"./ar-kw": 30128,
	"./ar-kw.js": 30128,
	"./ar-ly": 84519,
	"./ar-ly.js": 84519,
	"./ar-ma": 65443,
	"./ar-ma.js": 65443,
	"./ar-sa": 17642,
	"./ar-sa.js": 17642,
	"./ar-tn": 68592,
	"./ar-tn.js": 68592,
	"./ar.js": 17038,
	"./az": 51213,
	"./az.js": 51213,
	"./be": 69191,
	"./be.js": 69191,
	"./bg": 90322,
	"./bg.js": 90322,
	"./bm": 28042,
	"./bm.js": 28042,
	"./bn": 59620,
	"./bn-bd": 65903,
	"./bn-bd.js": 65903,
	"./bn.js": 59620,
	"./bo": 69645,
	"./bo.js": 69645,
	"./br": 45020,
	"./br.js": 45020,
	"./bs": 64792,
	"./bs.js": 64792,
	"./ca": 47980,
	"./ca.js": 47980,
	"./cs": 47322,
	"./cs.js": 47322,
	"./cv": 90365,
	"./cv.js": 90365,
	"./cy": 32092,
	"./cy.js": 32092,
	"./da": 77387,
	"./da.js": 77387,
	"./de": 54307,
	"./de-at": 29459,
	"./de-at.js": 29459,
	"./de-ch": 73694,
	"./de-ch.js": 73694,
	"./de.js": 54307,
	"./dv": 39659,
	"./dv.js": 39659,
	"./el": 3460,
	"./el.js": 3460,
	"./en-au": 94369,
	"./en-au.js": 94369,
	"./en-ca": 60530,
	"./en-ca.js": 60530,
	"./en-gb": 9998,
	"./en-gb.js": 9998,
	"./en-ie": 13391,
	"./en-ie.js": 13391,
	"./en-il": 75414,
	"./en-il.js": 75414,
	"./en-in": 19615,
	"./en-in.js": 19615,
	"./en-nz": 21248,
	"./en-nz.js": 21248,
	"./en-sg": 13767,
	"./en-sg.js": 13767,
	"./eo": 84530,
	"./eo.js": 84530,
	"./es": 86866,
	"./es-do": 18944,
	"./es-do.js": 18944,
	"./es-mx": 29116,
	"./es-mx.js": 29116,
	"./es-us": 83609,
	"./es-us.js": 83609,
	"./es.js": 86866,
	"./et": 96725,
	"./et.js": 96725,
	"./eu": 67931,
	"./eu.js": 67931,
	"./fa": 56417,
	"./fa.js": 56417,
	"./fi": 20944,
	"./fi.js": 20944,
	"./fil": 61766,
	"./fil.js": 61766,
	"./fo": 95867,
	"./fo.js": 95867,
	"./fr": 1636,
	"./fr-ca": 16848,
	"./fr-ca.js": 16848,
	"./fr-ch": 77773,
	"./fr-ch.js": 77773,
	"./fr.js": 1636,
	"./fy": 14940,
	"./fy.js": 14940,
	"./ga": 91402,
	"./ga.js": 91402,
	"./gd": 46924,
	"./gd.js": 46924,
	"./gl": 16398,
	"./gl.js": 16398,
	"./gom-deva": 72457,
	"./gom-deva.js": 72457,
	"./gom-latn": 52545,
	"./gom-latn.js": 52545,
	"./gu": 42641,
	"./gu.js": 42641,
	"./he": 85406,
	"./he.js": 85406,
	"./hi": 96335,
	"./hi.js": 96335,
	"./hr": 7458,
	"./hr.js": 7458,
	"./hu": 56540,
	"./hu.js": 56540,
	"./hy-am": 65283,
	"./hy-am.js": 65283,
	"./id": 98780,
	"./id.js": 98780,
	"./is": 14205,
	"./is.js": 14205,
	"./it": 34211,
	"./it-ch": 29985,
	"./it-ch.js": 29985,
	"./it.js": 34211,
	"./ja": 31003,
	"./ja.js": 31003,
	"./jv": 60420,
	"./jv.js": 60420,
	"./ka": 40851,
	"./ka.js": 40851,
	"./kk": 16074,
	"./kk.js": 16074,
	"./km": 53343,
	"./km.js": 53343,
	"./kn": 44799,
	"./kn.js": 44799,
	"./ko": 13549,
	"./ko.js": 13549,
	"./ku": 91037,
	"./ku.js": 91037,
	"./ky": 93125,
	"./ky.js": 93125,
	"./lb": 69586,
	"./lb.js": 69586,
	"./lo": 32349,
	"./lo.js": 32349,
	"./lt": 92400,
	"./lt.js": 92400,
	"./lv": 39991,
	"./lv.js": 39991,
	"./me": 28477,
	"./me.js": 28477,
	"./mi": 55118,
	"./mi.js": 55118,
	"./mk": 15943,
	"./mk.js": 15943,
	"./ml": 13849,
	"./ml.js": 13849,
	"./mn": 31977,
	"./mn.js": 31977,
	"./mr": 66184,
	"./mr.js": 66184,
	"./ms": 70485,
	"./ms-my": 64524,
	"./ms-my.js": 64524,
	"./ms.js": 70485,
	"./mt": 36681,
	"./mt.js": 36681,
	"./my": 52024,
	"./my.js": 52024,
	"./nb": 42688,
	"./nb.js": 42688,
	"./ne": 68914,
	"./ne.js": 68914,
	"./nl": 11758,
	"./nl-be": 52272,
	"./nl-be.js": 52272,
	"./nl.js": 11758,
	"./nn": 41510,
	"./nn.js": 41510,
	"./oc-lnc": 52797,
	"./oc-lnc.js": 52797,
	"./pa-in": 37944,
	"./pa-in.js": 37944,
	"./pl": 1605,
	"./pl.js": 1605,
	"./pt": 54225,
	"./pt-br": 73840,
	"./pt-br.js": 73840,
	"./pt.js": 54225,
	"./ro": 45128,
	"./ro.js": 45128,
	"./ru": 35127,
	"./ru.js": 35127,
	"./sd": 32525,
	"./sd.js": 32525,
	"./se": 59893,
	"./se.js": 59893,
	"./si": 33123,
	"./si.js": 33123,
	"./sk": 59635,
	"./sk.js": 59635,
	"./sl": 78106,
	"./sl.js": 78106,
	"./sq": 88799,
	"./sq.js": 88799,
	"./sr": 97949,
	"./sr-cyrl": 52872,
	"./sr-cyrl.js": 52872,
	"./sr.js": 97949,
	"./ss": 86167,
	"./ss.js": 86167,
	"./sv": 39713,
	"./sv.js": 39713,
	"./sw": 41982,
	"./sw.js": 41982,
	"./ta": 22732,
	"./ta.js": 22732,
	"./te": 43636,
	"./te.js": 43636,
	"./tet": 2115,
	"./tet.js": 2115,
	"./tg": 69801,
	"./tg.js": 69801,
	"./th": 2868,
	"./th.js": 2868,
	"./tk": 31310,
	"./tk.js": 31310,
	"./tl-ph": 22360,
	"./tl-ph.js": 22360,
	"./tlh": 66645,
	"./tlh.js": 66645,
	"./tr": 98374,
	"./tr.js": 98374,
	"./tzl": 256,
	"./tzl.js": 256,
	"./tzm": 61595,
	"./tzm-latn": 61631,
	"./tzm-latn.js": 61631,
	"./tzm.js": 61595,
	"./ug-cn": 6050,
	"./ug-cn.js": 6050,
	"./uk": 65610,
	"./uk.js": 65610,
	"./ur": 86077,
	"./ur.js": 86077,
	"./uz": 22862,
	"./uz-latn": 12207,
	"./uz-latn.js": 12207,
	"./uz.js": 22862,
	"./vi": 48093,
	"./vi.js": 48093,
	"./x-pseudo": 25590,
	"./x-pseudo.js": 25590,
	"./yo": 9058,
	"./yo.js": 9058,
	"./zh-cn": 77908,
	"./zh-cn.js": 77908,
	"./zh-hk": 8867,
	"./zh-hk.js": 8867,
	"./zh-mo": 31133,
	"./zh-mo.js": 31133,
	"./zh-tw": 83291,
	"./zh-tw.js": 83291
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 46700;

/***/ }),

/***/ 42480:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 24654:
/*!********************************!*\
  !*** ./util.inspect (ignored) ***!
  \********************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 89328:
/*!****************************!*\
  !*** iconv-lite (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 68776:
/*!****************************!*\
  !*** iconv-lite (ignored) ***!
  \****************************/
/***/ (() => {

/* (ignored) */

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendor"], () => (__webpack_exec__(14431)));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);